// Code generated by goyacc -v test.out -o sql.go sql.y. DO NOT EDIT.

//line sql.y:24
package sqlparser

import __yyfmt__ "fmt"

//line sql.y:24

func setParseTree(yylex interface{}, stmt Statement) {
	yylex.(*Tokenizer).ParseTree = stmt
}

func setAllowComments(yylex interface{}, allow bool) {
	yylex.(*Tokenizer).AllowComments = allow
}

func setDDL(yylex interface{}, ddl *DDL) {
	yylex.(*Tokenizer).partialDDL = ddl
}

func incNesting(yylex interface{}) bool {
	yylex.(*Tokenizer).nesting++
	if yylex.(*Tokenizer).nesting == 200 {
		return true
	}
	return false
}

func decNesting(yylex interface{}) {
	yylex.(*Tokenizer).nesting--
}

// skipToEnd forces the lexer to end prematurely. Not all SQL statements
// are supported by the Parser, thus calling skipToEnd will make the lexer
// return EOF early.
func skipToEnd(yylex interface{}) {
	yylex.(*Tokenizer).SkipToEnd = true
}

//line sql.y:59
type yySymType struct {
	yys                              int
	tableValuedFunctionArguments     TableValuedFunctionArguments
	tableValuedFunctionArgument      *TableValuedFunctionArgument
	tableValuedFunctionArgumentValue TableValuedFunctionArgumentValue
	commonTableExpression            *CommonTableExpression
	commonTableExpressions           CommonTableExpressions
	with                             *With
	empty                            struct{}
	statement                        Statement
	selStmt                          SelectStatement
	ddl                              *DDL
	ins                              *Insert
	byt                              byte
	bytes                            []byte
	bytes2                           [][]byte
	str                              string
	strs                             []string
	selectExprs                      SelectExprs
	selectExpr                       SelectExpr
	columns                          Columns
	partitions                       Partitions
	colName                          *ColName
	tableExprs                       TableExprs
	tableExpr                        TableExpr
	joinCondition                    JoinCondition
	tableName                        TableName
	tableNames                       TableNames
	indexHints                       *IndexHints
	expr                             Expr
	exprs                            Exprs
	boolVal                          BoolVal
	sqlVal                           *SQLVal
	colTuple                         ColTuple
	values                           Values
	valTuple                         ValTuple
	subquery                         *Subquery
	whens                            []*When
	when                             *When
	orderBy                          OrderBy
	order                            *Order
	limit                            *Limit
	triggers                         []Trigger
	trigger                          Trigger
	updateExprs                      UpdateExprs
	setExprs                         SetExprs
	updateExpr                       *UpdateExpr
	setExpr                          *SetExpr
	colIdent                         ColIdent
	tableIdent                       TableIdent
	convertType                      *ConvertType
	aliasedTableName                 *AliasedTableExpr
	TableSpec                        *TableSpec
	columnType                       ColumnType
	colKeyOpt                        ColumnKeyOption
	optVal                           Expr
	LengthScaleOption                LengthScaleOption
	columnDefinition                 *ColumnDefinition
	indexDefinition                  *IndexDefinition
	indexInfo                        *IndexInfo
	indexOption                      *IndexOption
	indexOptions                     []*IndexOption
	indexColumn                      *IndexColumn
	indexColumns                     []*IndexColumn
	constraintDefinition             *ConstraintDefinition
	constraintInfo                   ConstraintInfo
	ReferenceAction                  ReferenceAction
	partDefs                         []*PartitionDefinition
	partDef                          *PartitionDefinition
	partSpec                         *PartitionSpec
	vindexParam                      VindexParam
	vindexParams                     []VindexParam
	showFilter                       *ShowFilter
	optLike                          *OptLike
}

const LEX_ERROR = 57346
const UNION = 57347
const SELECT = 57348
const STREAM = 57349
const INSERT = 57350
const UPDATE = 57351
const DELETE = 57352
const FROM = 57353
const WHERE = 57354
const GROUP = 57355
const HAVING = 57356
const ORDER = 57357
const BY = 57358
const LIMIT = 57359
const OFFSET = 57360
const FOR = 57361
const WATERMARK = 57362
const DELAY = 57363
const COUNTING = 57364
const AFTER = 57365
const ALL = 57366
const DISTINCT = 57367
const AS = 57368
const EXISTS = 57369
const ASC = 57370
const DESC = 57371
const INTO = 57372
const DUPLICATE = 57373
const KEY = 57374
const DEFAULT = 57375
const SET = 57376
const LOCK = 57377
const UNLOCK = 57378
const KEYS = 57379
const VALUES = 57380
const LAST_INSERT_ID = 57381
const NEXT = 57382
const VALUE = 57383
const SHARE = 57384
const MODE = 57385
const SQL_NO_CACHE = 57386
const SQL_CACHE = 57387
const JOIN = 57388
const STRAIGHT_JOIN = 57389
const LEFT = 57390
const RIGHT = 57391
const INNER = 57392
const OUTER = 57393
const CROSS = 57394
const NATURAL = 57395
const USE = 57396
const FORCE = 57397
const ON = 57398
const USING = 57399
const ID = 57400
const HEX = 57401
const STRING = 57402
const INTEGRAL = 57403
const FLOAT = 57404
const HEXNUM = 57405
const VALUE_ARG = 57406
const LIST_ARG = 57407
const COMMENT = 57408
const COMMENT_KEYWORD = 57409
const BIT_LITERAL = 57410
const NULL = 57411
const TRUE = 57412
const FALSE = 57413
const OFF = 57414
const OR = 57415
const AND = 57416
const NOT = 57417
const BETWEEN = 57418
const CASE = 57419
const WHEN = 57420
const THEN = 57421
const ELSE = 57422
const END = 57423
const LE = 57424
const GE = 57425
const NE = 57426
const NULL_SAFE_EQUAL = 57427
const IS = 57428
const LIKE = 57429
const REGEXP = 57430
const IN = 57431
const RIGHTARROW = 57432
const SHIFT_LEFT = 57433
const SHIFT_RIGHT = 57434
const DIV = 57435
const MOD = 57436
const UNARY = 57437
const COLLATE = 57438
const BINARY = 57439
const UNDERSCORE_BINARY = 57440
const UNDERSCORE_UTF8MB4 = 57441
const INTERVAL = 57442
const JSON_EXTRACT_OP = 57443
const JSON_UNQUOTE_EXTRACT_OP = 57444
const CREATE = 57445
const ALTER = 57446
const DROP = 57447
const RENAME = 57448
const ANALYZE = 57449
const ADD = 57450
const FLUSH = 57451
const SCHEMA = 57452
const TABLE = 57453
const DESCRIPTOR = 57454
const INDEX = 57455
const VIEW = 57456
const TO = 57457
const IGNORE = 57458
const IF = 57459
const UNIQUE = 57460
const PRIMARY = 57461
const COLUMN = 57462
const SPATIAL = 57463
const FULLTEXT = 57464
const KEY_BLOCK_SIZE = 57465
const ACTION = 57466
const CASCADE = 57467
const CONSTRAINT = 57468
const FOREIGN = 57469
const NO = 57470
const REFERENCES = 57471
const RESTRICT = 57472
const SHOW = 57473
const DESCRIBE = 57474
const EXPLAIN = 57475
const DATE = 57476
const ESCAPE = 57477
const REPAIR = 57478
const OPTIMIZE = 57479
const TRUNCATE = 57480
const MAXVALUE = 57481
const PARTITION = 57482
const REORGANIZE = 57483
const LESS = 57484
const THAN = 57485
const PROCEDURE = 57486
const TRIGGER = 57487
const VINDEX = 57488
const VINDEXES = 57489
const STATUS = 57490
const VARIABLES = 57491
const WARNINGS = 57492
const BEGIN = 57493
const START = 57494
const TRANSACTION = 57495
const COMMIT = 57496
const ROLLBACK = 57497
const BIT = 57498
const TINYINT = 57499
const SMALLINT = 57500
const MEDIUMINT = 57501
const INT = 57502
const INTEGER = 57503
const BIGINT = 57504
const INTNUM = 57505
const REAL = 57506
const DOUBLE = 57507
const FLOAT_TYPE = 57508
const DECIMAL = 57509
const NUMERIC = 57510
const TIME = 57511
const TIMESTAMP = 57512
const DATETIME = 57513
const YEAR = 57514
const CHAR = 57515
const VARCHAR = 57516
const BOOL = 57517
const CHARACTER = 57518
const VARBINARY = 57519
const NCHAR = 57520
const TEXT = 57521
const TINYTEXT = 57522
const MEDIUMTEXT = 57523
const LONGTEXT = 57524
const BLOB = 57525
const TINYBLOB = 57526
const MEDIUMBLOB = 57527
const LONGBLOB = 57528
const JSON = 57529
const ENUM = 57530
const GEOMETRY = 57531
const POINT = 57532
const LINESTRING = 57533
const POLYGON = 57534
const GEOMETRYCOLLECTION = 57535
const MULTIPOINT = 57536
const MULTILINESTRING = 57537
const MULTIPOLYGON = 57538
const NULLX = 57539
const AUTO_INCREMENT = 57540
const APPROXNUM = 57541
const SIGNED = 57542
const UNSIGNED = 57543
const ZEROFILL = 57544
const COLLATION = 57545
const DATABASES = 57546
const SCHEMAS = 57547
const TABLES = 57548
const VITESS_KEYSPACES = 57549
const VITESS_SHARDS = 57550
const VITESS_TABLETS = 57551
const VSCHEMA = 57552
const VSCHEMA_TABLES = 57553
const VITESS_TARGET = 57554
const FULL = 57555
const PROCESSLIST = 57556
const COLUMNS = 57557
const FIELDS = 57558
const ENGINES = 57559
const PLUGINS = 57560
const NAMES = 57561
const CHARSET = 57562
const GLOBAL = 57563
const SESSION = 57564
const ISOLATION = 57565
const LEVEL = 57566
const READ = 57567
const WRITE = 57568
const ONLY = 57569
const REPEATABLE = 57570
const COMMITTED = 57571
const UNCOMMITTED = 57572
const SERIALIZABLE = 57573
const CURRENT_TIMESTAMP = 57574
const DATABASE = 57575
const CURRENT_DATE = 57576
const CURRENT_TIME = 57577
const LOCALTIME = 57578
const LOCALTIMESTAMP = 57579
const UTC_DATE = 57580
const UTC_TIME = 57581
const UTC_TIMESTAMP = 57582
const REPLACE = 57583
const CONVERT = 57584
const CAST = 57585
const SUBSTR = 57586
const SUBSTRING = 57587
const GROUP_CONCAT = 57588
const SEPARATOR = 57589
const TIMESTAMPADD = 57590
const TIMESTAMPDIFF = 57591
const MATCH = 57592
const AGAINST = 57593
const BOOLEAN = 57594
const LANGUAGE = 57595
const WITH = 57596
const QUERY = 57597
const EXPANSION = 57598
const UNUSED = 57599

var yyToknames = [...]string{
	"$end",
	"error",
	"$unk",
	"LEX_ERROR",
	"UNION",
	"SELECT",
	"STREAM",
	"INSERT",
	"UPDATE",
	"DELETE",
	"FROM",
	"WHERE",
	"GROUP",
	"HAVING",
	"ORDER",
	"BY",
	"LIMIT",
	"OFFSET",
	"FOR",
	"WATERMARK",
	"DELAY",
	"COUNTING",
	"AFTER",
	"ALL",
	"DISTINCT",
	"AS",
	"EXISTS",
	"ASC",
	"DESC",
	"INTO",
	"DUPLICATE",
	"KEY",
	"DEFAULT",
	"SET",
	"LOCK",
	"UNLOCK",
	"KEYS",
	"VALUES",
	"LAST_INSERT_ID",
	"NEXT",
	"VALUE",
	"SHARE",
	"MODE",
	"SQL_NO_CACHE",
	"SQL_CACHE",
	"JOIN",
	"STRAIGHT_JOIN",
	"LEFT",
	"RIGHT",
	"INNER",
	"OUTER",
	"CROSS",
	"NATURAL",
	"USE",
	"FORCE",
	"ON",
	"USING",
	"'('",
	"','",
	"')'",
	"ID",
	"HEX",
	"STRING",
	"INTEGRAL",
	"FLOAT",
	"HEXNUM",
	"VALUE_ARG",
	"LIST_ARG",
	"COMMENT",
	"COMMENT_KEYWORD",
	"BIT_LITERAL",
	"NULL",
	"TRUE",
	"FALSE",
	"OFF",
	"OR",
	"AND",
	"NOT",
	"'!'",
	"BETWEEN",
	"CASE",
	"WHEN",
	"THEN",
	"ELSE",
	"END",
	"'='",
	"'<'",
	"'>'",
	"LE",
	"GE",
	"NE",
	"NULL_SAFE_EQUAL",
	"IS",
	"LIKE",
	"REGEXP",
	"IN",
	"RIGHTARROW",
	"'|'",
	"'&'",
	"SHIFT_LEFT",
	"SHIFT_RIGHT",
	"'+'",
	"'-'",
	"'*'",
	"'/'",
	"DIV",
	"'%'",
	"MOD",
	"'^'",
	"'~'",
	"UNARY",
	"COLLATE",
	"BINARY",
	"UNDERSCORE_BINARY",
	"UNDERSCORE_UTF8MB4",
	"INTERVAL",
	"'.'",
	"JSON_EXTRACT_OP",
	"JSON_UNQUOTE_EXTRACT_OP",
	"CREATE",
	"ALTER",
	"DROP",
	"RENAME",
	"ANALYZE",
	"ADD",
	"FLUSH",
	"SCHEMA",
	"TABLE",
	"DESCRIPTOR",
	"INDEX",
	"VIEW",
	"TO",
	"IGNORE",
	"IF",
	"UNIQUE",
	"PRIMARY",
	"COLUMN",
	"SPATIAL",
	"FULLTEXT",
	"KEY_BLOCK_SIZE",
	"ACTION",
	"CASCADE",
	"CONSTRAINT",
	"FOREIGN",
	"NO",
	"REFERENCES",
	"RESTRICT",
	"SHOW",
	"DESCRIBE",
	"EXPLAIN",
	"DATE",
	"ESCAPE",
	"REPAIR",
	"OPTIMIZE",
	"TRUNCATE",
	"MAXVALUE",
	"PARTITION",
	"REORGANIZE",
	"LESS",
	"THAN",
	"PROCEDURE",
	"TRIGGER",
	"VINDEX",
	"VINDEXES",
	"STATUS",
	"VARIABLES",
	"WARNINGS",
	"BEGIN",
	"START",
	"TRANSACTION",
	"COMMIT",
	"ROLLBACK",
	"BIT",
	"TINYINT",
	"SMALLINT",
	"MEDIUMINT",
	"INT",
	"INTEGER",
	"BIGINT",
	"INTNUM",
	"REAL",
	"DOUBLE",
	"FLOAT_TYPE",
	"DECIMAL",
	"NUMERIC",
	"TIME",
	"TIMESTAMP",
	"DATETIME",
	"YEAR",
	"CHAR",
	"VARCHAR",
	"BOOL",
	"CHARACTER",
	"VARBINARY",
	"NCHAR",
	"TEXT",
	"TINYTEXT",
	"MEDIUMTEXT",
	"LONGTEXT",
	"BLOB",
	"TINYBLOB",
	"MEDIUMBLOB",
	"LONGBLOB",
	"JSON",
	"ENUM",
	"GEOMETRY",
	"POINT",
	"LINESTRING",
	"POLYGON",
	"GEOMETRYCOLLECTION",
	"MULTIPOINT",
	"MULTILINESTRING",
	"MULTIPOLYGON",
	"NULLX",
	"AUTO_INCREMENT",
	"APPROXNUM",
	"SIGNED",
	"UNSIGNED",
	"ZEROFILL",
	"COLLATION",
	"DATABASES",
	"SCHEMAS",
	"TABLES",
	"VITESS_KEYSPACES",
	"VITESS_SHARDS",
	"VITESS_TABLETS",
	"VSCHEMA",
	"VSCHEMA_TABLES",
	"VITESS_TARGET",
	"FULL",
	"PROCESSLIST",
	"COLUMNS",
	"FIELDS",
	"ENGINES",
	"PLUGINS",
	"NAMES",
	"CHARSET",
	"GLOBAL",
	"SESSION",
	"ISOLATION",
	"LEVEL",
	"READ",
	"WRITE",
	"ONLY",
	"REPEATABLE",
	"COMMITTED",
	"UNCOMMITTED",
	"SERIALIZABLE",
	"CURRENT_TIMESTAMP",
	"DATABASE",
	"CURRENT_DATE",
	"CURRENT_TIME",
	"LOCALTIME",
	"LOCALTIMESTAMP",
	"UTC_DATE",
	"UTC_TIME",
	"UTC_TIMESTAMP",
	"REPLACE",
	"CONVERT",
	"CAST",
	"SUBSTR",
	"SUBSTRING",
	"GROUP_CONCAT",
	"SEPARATOR",
	"TIMESTAMPADD",
	"TIMESTAMPDIFF",
	"MATCH",
	"AGAINST",
	"BOOLEAN",
	"LANGUAGE",
	"WITH",
	"QUERY",
	"EXPANSION",
	"UNUSED",
	"';'",
}
var yyStatenames = [...]string{}

const yyEofCode = 1
const yyErrCode = 2
const yyInitialStackSize = 16

//line yacctab:1
var yyExca = [...]int{
	-1, 1,
	1, -1,
	-2, 0,
	-1, 38,
	165, 302,
	166, 302,
	-2, 292,
	-1, 281,
	117, 658,
	-2, 654,
	-1, 282,
	117, 659,
	-2, 655,
	-1, 350,
	86, 838,
	-2, 66,
	-1, 351,
	86, 794,
	-2, 67,
	-1, 356,
	86, 771,
	-2, 620,
	-1, 358,
	86, 815,
	-2, 622,
	-1, 632,
	1, 354,
	12, 354,
	13, 354,
	14, 354,
	15, 354,
	17, 354,
	19, 354,
	34, 354,
	35, 354,
	46, 354,
	47, 354,
	48, 354,
	49, 354,
	50, 354,
	52, 354,
	53, 354,
	56, 354,
	57, 354,
	59, 354,
	60, 354,
	162, 354,
	275, 354,
	-2, 381,
	-1, 636,
	57, 47,
	59, 47,
	-2, 51,
	-1, 782,
	117, 661,
	-2, 657,
	-1, 1009,
	5, 33,
	-2, 448,
	-1, 1288,
	5, 33,
	-2, 595,
	-1, 1430,
	5, 33,
	-2, 598,
}

const yyPrivate = 57344

const yyLast = 13685

var yyAct = [...]int{

	282, 1477, 1467, 1251, 1442, 1042, 1416, 1314, 1137, 588,
	1327, 286, 894, 1361, 1188, 1064, 299, 312, 1225, 62,
	923, 890, 869, 257, 66, 1189, 1062, 1043, 628, 864,
	587, 3, 973, 206, 58, 893, 1185, 66, 903, 1195,
	66, 1201, 937, 355, 1091, 732, 866, 248, 1160, 1001,
	807, 817, 487, 746, 1070, 907, 1108, 784, 288, 855,
	649, 1117, 629, 518, 835, 524, 933, 458, 814, 648,
	848, 344, 489, 349, 284, 346, 540, 57, 1470, 269,
	341, 638, 602, 256, 25, 1448, 1465, 25, 532, 1428,
	1462, 260, 1252, 249, 250, 251, 252, 1447, 1427, 255,
	603, 1177, 1280, 25, 463, 61, 1219, 956, 1389, 917,
	553, 552, 562, 563, 555, 556, 557, 558, 559, 560,
	561, 554, 25, 884, 564, 955, 324, 512, 330, 331,
	328, 329, 327, 326, 325, 1345, 55, 261, 186, 55,
	254, 491, 332, 333, 216, 212, 1079, 213, 214, 1078,
	1037, 253, 1080, 960, 1038, 55, 1220, 1221, 885, 886,
	1099, 650, 954, 651, 476, 188, 189, 190, 191, 192,
	508, 916, 1317, 208, 55, 210, 1333, 924, 509, 506,
	507, 464, 207, 1271, 1161, 22, 511, 1269, 247, 501,
	502, 1140, 66, 206, 1139, 719, 721, 66, 1422, 66,
	1464, 1417, 1459, 1136, 849, 1481, 1409, 908, 493, 66,
	1485, 495, 66, 951, 948, 949, 477, 947, 66, 1370,
	1362, 66, 1163, 910, 206, 465, 206, 206, 210, 206,
	206, 720, 206, 1364, 206, 1141, 1065, 1067, 725, 1133,
	273, 492, 494, 206, 712, 1135, 910, 1214, 1213, 958,
	961, 1212, 459, 461, 722, 1165, 468, 1169, 910, 1164,
	220, 1162, 66, 211, 1396, 352, 1167, 215, 967, 209,
	1018, 966, 576, 577, 1291, 1166, 206, 1147, 496, 497,
	1237, 498, 499, 1390, 500, 953, 503, 1092, 1168, 1170,
	1124, 473, 1075, 1028, 995, 513, 529, 755, 528, 880,
	644, 514, 515, 1363, 816, 544, 483, 952, 924, 1015,
	891, 564, 1211, 1479, 1426, 1066, 1480, 554, 1478, 1122,
	564, 909, 1371, 1369, 752, 459, 906, 904, 1407, 905,
	490, 539, 1238, 747, 902, 908, 538, 537, 195, 66,
	66, 66, 574, 1134, 909, 1132, 313, 52, 206, 23,
	1179, 957, 23, 539, 206, 470, 909, 471, 457, 1379,
	472, 1199, 652, 836, 975, 1025, 959, 526, 23, 537,
	264, 836, 338, 339, 196, 791, 913, 576, 577, 479,
	480, 481, 914, 466, 467, 539, 627, 23, 1123, 789,
	790, 788, 714, 1128, 1125, 1118, 1126, 1121, 632, 52,
	1097, 1119, 1120, 1412, 534, 530, 1434, 52, 605, 607,
	609, 611, 613, 615, 616, 1127, 576, 577, 748, 1323,
	352, 637, 1486, 646, 642, 1322, 606, 608, 1112, 612,
	614, 808, 617, 809, 553, 552, 562, 563, 555, 556,
	557, 558, 559, 560, 561, 554, 974, 1111, 564, 555,
	556, 557, 558, 559, 560, 561, 554, 1436, 66, 564,
	754, 1487, 1013, 206, 1012, 774, 776, 777, 66, 66,
	206, 775, 758, 759, 66, 55, 1100, 66, 1408, 1340,
	66, 538, 537, 1320, 66, 787, 206, 206, 1002, 1144,
	1109, 206, 206, 206, 66, 206, 206, 1405, 539, 1014,
	1254, 753, 206, 206, 557, 558, 559, 560, 561, 554,
	1367, 1463, 564, 311, 1092, 711, 538, 537, 538, 537,
	538, 537, 718, 1181, 992, 993, 994, 734, 1081, 1087,
	1082, 265, 206, 539, 517, 539, 66, 539, 735, 736,
	1438, 517, 206, 737, 738, 739, 204, 741, 742, 538,
	537, 810, 761, 517, 743, 744, 731, 726, 760, 302,
	301, 304, 305, 306, 307, 785, 539, 730, 303, 308,
	488, 715, 488, 488, 713, 488, 488, 710, 488, 840,
	488, 1367, 1420, 1367, 517, 1376, 206, 640, 782, 488,
	780, 553, 552, 562, 563, 555, 556, 557, 558, 559,
	560, 561, 554, 1367, 1397, 564, 786, 826, 829, 527,
	763, 485, 52, 837, 1367, 1366, 1375, 781, 778, 206,
	206, 821, 1312, 1311, 1293, 517, 66, 573, 1290, 517,
	575, 1244, 1243, 641, 66, 643, 66, 1240, 1241, 66,
	66, 1240, 1239, 66, 66, 66, 206, 1007, 517, 852,
	517, 811, 812, 819, 517, 871, 659, 658, 586, 206,
	590, 591, 592, 593, 594, 595, 596, 597, 598, 478,
	601, 604, 604, 604, 610, 604, 604, 610, 604, 618,
	619, 620, 621, 622, 623, 875, 633, 833, 734, 877,
	845, 1234, 632, 1150, 925, 926, 927, 632, 911, 1186,
	59, 632, 1198, 1071, 1453, 1198, 354, 873, 1071, 874,
	851, 639, 819, 66, 206, 878, 206, 882, 352, 881,
	206, 206, 66, 66, 640, 66, 66, 898, 1286, 66,
	206, 895, 1378, 852, 1242, 852, 1210, 354, 1083, 354,
	354, 1007, 354, 354, 1007, 354, 66, 354, 66, 66,
	852, 66, 939, 883, 1031, 1198, 354, 857, 860, 861,
	862, 858, 1030, 859, 863, 1007, 943, 639, 945, 645,
	641, 517, 639, 935, 936, 756, 724, 266, 919, 920,
	921, 922, 971, 55, 857, 860, 861, 862, 858, 542,
	859, 863, 1445, 1444, 930, 931, 932, 1449, 1329, 782,
	918, 982, 1298, 938, 1230, 1086, 785, 1202, 1203, 488,
	934, 929, 928, 1138, 941, 1472, 488, 1468, 1232, 1205,
	1186, 1113, 983, 750, 728, 985, 1443, 769, 781, 55,
	1054, 1208, 488, 488, 1207, 1055, 516, 488, 488, 488,
	1052, 488, 488, 1051, 1050, 1053, 997, 786, 488, 488,
	270, 271, 1457, 66, 66, 66, 66, 66, 1446, 1146,
	979, 354, 533, 1044, 1451, 66, 990, 654, 66, 206,
	989, 519, 1104, 66, 52, 66, 657, 531, 486, 1039,
	1056, 1045, 861, 862, 1048, 1284, 1096, 520, 1414, 1413,
	1343, 1094, 1069, 1088, 206, 1325, 822, 823, 821, 1024,
	828, 831, 832, 944, 727, 865, 1084, 267, 268, 1455,
	262, 632, 632, 632, 632, 632, 1046, 1047, 533, 1049,
	1454, 1072, 52, 1057, 1383, 844, 632, 846, 847, 258,
	1073, 988, 1074, 632, 259, 1331, 59, 590, 1382, 987,
	1101, 1102, 206, 206, 1076, 1103, 1071, 1105, 1106, 1107,
	510, 1019, 1093, 857, 860, 861, 862, 858, 1016, 859,
	863, 1089, 1090, 1202, 1203, 745, 895, 1474, 1473, 1474,
	535, 206, 1393, 1318, 751, 185, 354, 187, 56, 1,
	867, 868, 1466, 354, 1253, 633, 1110, 66, 1326, 633,
	950, 1415, 1360, 1224, 1116, 1115, 206, 901, 892, 354,
	354, 194, 456, 193, 354, 354, 354, 1406, 354, 354,
	1129, 900, 899, 1368, 1316, 354, 354, 912, 1098, 915,
	1231, 1095, 1411, 1142, 665, 663, 1143, 552, 562, 563,
	555, 556, 557, 558, 559, 560, 561, 554, 664, 662,
	564, 206, 206, 1187, 667, 765, 666, 661, 1154, 1044,
	232, 347, 653, 940, 279, 542, 1190, 1178, 354, 1159,
	488, 536, 488, 1172, 1171, 1153, 197, 1131, 1152, 206,
	1130, 1192, 782, 991, 982, 946, 488, 504, 505, 234,
	572, 986, 1077, 353, 206, 1193, 206, 206, 1441, 1421,
	1206, 757, 523, 1381, 1330, 1023, 599, 1197, 1223, 813,
	834, 1182, 287, 773, 300, 1216, 297, 298, 1215, 762,
	764, 1036, 546, 285, 66, 838, 277, 631, 624, 1222,
	1006, 856, 854, 1235, 1236, 853, 1227, 1218, 996, 342,
	1204, 66, 842, 843, 1228, 1229, 1200, 206, 1022, 1302,
	206, 206, 66, 1060, 1061, 630, 1149, 1279, 206, 1388,
	768, 66, 27, 184, 272, 19, 895, 18, 895, 354,
	17, 20, 16, 15, 14, 1246, 474, 818, 820, 31,
	21, 13, 354, 12, 11, 10, 1258, 1247, 9, 1249,
	8, 7, 6, 5, 4, 60, 263, 24, 2, 275,
	0, 0, 0, 0, 0, 1040, 1041, 1260, 0, 633,
	633, 633, 633, 633, 1259, 0, 0, 0, 1267, 632,
	1044, 206, 0, 0, 867, 0, 0, 1068, 0, 0,
	1152, 633, 0, 206, 1285, 0, 1295, 354, 0, 354,
	0, 206, 1294, 962, 963, 1084, 0, 1301, 0, 1300,
	1310, 0, 0, 354, 0, 0, 206, 0, 0, 0,
	0, 0, 0, 206, 0, 0, 0, 0, 0, 0,
	1319, 0, 1321, 0, 0, 0, 0, 0, 0, 354,
	0, 1264, 1265, 0, 1266, 0, 0, 1268, 0, 1270,
	0, 0, 0, 0, 0, 0, 1332, 0, 0, 488,
	0, 206, 206, 0, 206, 895, 0, 0, 1324, 206,
	0, 66, 0, 0, 1190, 0, 1352, 206, 206, 206,
	66, 0, 1344, 206, 1356, 1357, 1358, 488, 1351, 0,
	1346, 0, 0, 0, 0, 1328, 0, 0, 0, 871,
	206, 1365, 1359, 0, 0, 1372, 1313, 1380, 0, 0,
	984, 1373, 0, 1374, 578, 579, 580, 581, 582, 583,
	584, 585, 0, 0, 0, 66, 0, 0, 0, 0,
	1394, 0, 0, 1190, 0, 838, 0, 1399, 206, 0,
	0, 0, 0, 0, 1404, 1403, 0, 0, 1395, 206,
	206, 0, 1063, 1398, 0, 1191, 0, 52, 0, 1418,
	1004, 0, 1419, 1424, 1005, 0, 0, 206, 0, 1429,
	0, 1009, 1010, 1011, 0, 1044, 0, 354, 1017, 0,
	66, 1020, 1021, 632, 0, 0, 0, 1027, 206, 0,
	0, 1029, 0, 0, 1032, 1033, 1034, 1035, 0, 1440,
	562, 563, 555, 556, 557, 558, 559, 560, 561, 554,
	0, 0, 564, 0, 1452, 1450, 1059, 0, 521, 525,
	206, 1328, 895, 0, 0, 1114, 354, 1458, 1460, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 545, 1471,
	0, 0, 0, 0, 0, 0, 1482, 0, 0, 0,
	0, 0, 0, 0, 354, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 635, 633, 0, 0,
	0, 0, 0, 589, 0, 0, 0, 0, 0, 354,
	0, 0, 600, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 1283, 1278, 0, 0, 0, 0, 0,
	0, 0, 0, 218, 0, 0, 0, 0, 0, 0,
	0, 0, 354, 0, 0, 0, 0, 0, 0, 0,
	0, 838, 0, 0, 1194, 1196, 522, 0, 0, 1306,
	1307, 1308, 553, 552, 562, 563, 555, 556, 557, 558,
	559, 560, 561, 554, 0, 0, 564, 0, 0, 0,
	63, 1282, 1196, 0, 0, 0, 1158, 0, 0, 0,
	0, 0, 488, 219, 1277, 0, 246, 354, 0, 354,
	1226, 783, 0, 0, 792, 793, 794, 795, 796, 797,
	798, 799, 800, 801, 802, 803, 804, 805, 806, 0,
	553, 552, 562, 563, 555, 556, 557, 558, 559, 560,
	561, 554, 0, 1191, 564, 0, 1347, 0, 0, 0,
	1209, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	1250, 1354, 1355, 1255, 1256, 0, 0, 0, 0, 841,
	0, 354, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 1377, 553, 552, 562, 563, 555, 556, 557,
	558, 559, 560, 561, 554, 0, 0, 564, 343, 0,
	0, 0, 1191, 460, 52, 462, 0, 0, 0, 0,
	749, 633, 0, 0, 0, 469, 0, 0, 475, 0,
	0, 0, 838, 0, 482, 0, 0, 484, 0, 0,
	0, 0, 0, 0, 1063, 0, 0, 771, 772, 0,
	0, 0, 0, 1261, 0, 0, 354, 0, 0, 0,
	1263, 0, 0, 0, 1315, 276, 0, 0, 345, 0,
	0, 1272, 1273, 219, 0, 219, 0, 0, 0, 354,
	0, 0, 0, 0, 0, 219, 354, 0, 219, 0,
	0, 1287, 1288, 1289, 219, 1292, 0, 219, 0, 0,
	589, 0, 0, 824, 825, 0, 25, 26, 53, 28,
	29, 0, 0, 0, 0, 1309, 0, 0, 0, 0,
	0, 0, 0, 0, 1348, 1349, 0, 1350, 0, 44,
	0, 1469, 1315, 0, 30, 49, 50, 0, 63, 0,
	1315, 1315, 1315, 0, 0, 0, 1226, 0, 0, 0,
	0, 0, 0, 0, 39, 626, 0, 636, 55, 0,
	0, 0, 889, 1315, 998, 999, 1000, 553, 552, 562,
	563, 555, 556, 557, 558, 559, 560, 561, 554, 1339,
	0, 564, 0, 0, 0, 0, 0, 0, 0, 838,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 1410, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 354, 354, 0, 219, 219, 219, 0, 0,
	32, 33, 35, 34, 37, 0, 51, 838, 0, 0,
	1431, 0, 0, 0, 1384, 1385, 1386, 1387, 1276, 0,
	0, 1391, 1392, 0, 0, 0, 0, 0, 38, 45,
	46, 1439, 0, 47, 48, 36, 1400, 1401, 1402, 0,
	0, 0, 0, 980, 981, 0, 525, 0, 40, 41,
	0, 42, 43, 0, 660, 0, 0, 0, 0, 0,
	0, 0, 0, 1315, 716, 717, 0, 0, 1425, 0,
	723, 0, 0, 343, 0, 1430, 729, 0, 1432, 1433,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	740, 0, 0, 0, 0, 1437, 0, 553, 552, 562,
	563, 555, 556, 557, 558, 559, 560, 561, 554, 1008,
	0, 564, 0, 0, 219, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 219, 219, 1026, 0, 0, 0,
	219, 0, 770, 219, 0, 0, 219, 0, 54, 0,
	733, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	219, 23, 0, 0, 0, 1483, 1484, 1156, 1157, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	1173, 1174, 0, 1175, 1176, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 1183, 1184, 0, 0, 0,
	0, 0, 219, 0, 0, 0, 0, 0, 0, 0,
	0, 733, 0, 548, 0, 551, 0, 0, 0, 0,
	0, 565, 566, 567, 568, 569, 570, 571, 0, 549,
	550, 547, 850, 553, 552, 562, 563, 555, 556, 557,
	558, 559, 560, 561, 554, 0, 876, 564, 0, 0,
	0, 0, 0, 276, 0, 0, 0, 0, 276, 276,
	0, 1233, 276, 276, 276, 0, 0, 0, 839, 0,
	229, 0, 0, 0, 0, 1145, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 276, 276, 276,
	276, 0, 219, 0, 242, 0, 0, 0, 0, 0,
	219, 0, 63, 0, 0, 219, 219, 0, 0, 219,
	879, 733, 0, 0, 0, 0, 0, 0, 0, 942,
	1262, 0, 0, 0, 0, 1180, 0, 0, 964, 965,
	0, 968, 969, 0, 0, 970, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 221, 0, 0, 0,
	0, 0, 972, 224, 0, 0, 0, 978, 0, 0,
	0, 233, 0, 228, 0, 0, 0, 0, 0, 0,
	0, 1217, 0, 0, 0, 0, 0, 0, 0, 219,
	0, 0, 0, 0, 0, 0, 0, 0, 219, 219,
	0, 219, 219, 0, 231, 219, 0, 0, 0, 0,
	241, 0, 0, 0, 0, 0, 0, 682, 0, 0,
	0, 0, 219, 0, 976, 977, 0, 219, 0, 0,
	0, 0, 733, 0, 0, 0, 222, 0, 0, 0,
	0, 0, 0, 0, 0, 276, 0, 0, 0, 1334,
	1335, 1336, 1337, 1338, 0, 0, 0, 1341, 1342, 0,
	0, 0, 0, 235, 225, 226, 0, 236, 237, 238,
	240, 0, 239, 245, 0, 0, 0, 227, 230, 0,
	223, 244, 243, 0, 0, 0, 0, 0, 0, 0,
	0, 1281, 276, 0, 0, 0, 670, 0, 0, 0,
	0, 589, 0, 0, 0, 0, 0, 0, 0, 1296,
	276, 0, 1297, 0, 0, 1299, 0, 0, 0, 0,
	0, 1303, 0, 0, 0, 1275, 0, 0, 839, 219,
	219, 219, 219, 219, 683, 0, 0, 0, 0, 0,
	1274, 1058, 0, 0, 219, 0, 0, 0, 0, 63,
	0, 219, 0, 0, 0, 0, 696, 699, 700, 701,
	702, 703, 704, 0, 705, 706, 707, 708, 709, 684,
	685, 686, 687, 668, 669, 697, 0, 671, 0, 672,
	673, 674, 675, 676, 677, 678, 679, 680, 681, 688,
	689, 690, 691, 692, 693, 694, 695, 0, 0, 0,
	0, 0, 0, 1148, 553, 552, 562, 563, 555, 556,
	557, 558, 559, 560, 561, 554, 0, 0, 564, 553,
	552, 562, 563, 555, 556, 557, 558, 559, 560, 561,
	554, 0, 0, 564, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 1475, 0, 0, 0, 0, 0,
	0, 0, 698, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 219, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 276, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 276, 0, 0, 0, 0, 0,
	0, 0, 1423, 589, 1155, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 733, 0, 0, 0, 0,
	1003, 0, 0, 0, 839, 553, 552, 562, 563, 555,
	556, 557, 558, 559, 560, 561, 554, 0, 0, 564,
	1245, 553, 552, 562, 563, 555, 556, 557, 558, 559,
	560, 561, 554, 0, 0, 564, 0, 1248, 0, 0,
	0, 0, 0, 0, 0, 1456, 0, 0, 1257, 0,
	0, 0, 0, 0, 0, 1461, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	219, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 219, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 219, 0,
	0, 0, 0, 0, 0, 0, 0, 219, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 839, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 1353, 0, 0,
	0, 0, 0, 0, 0, 0, 63, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 1435, 0, 0, 0,
	0, 219, 839, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	839, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 443, 431, 219, 402, 446, 380,
	394, 454, 395, 396, 424, 366, 410, 127, 392, 180,
	89, 85, 67, 0, 383, 361, 389, 362, 381, 404,
	91, 407, 379, 433, 413, 445, 108, 452, 110, 418,
	0, 148, 119, 0, 0, 406, 435, 408, 429, 401,
	425, 371, 417, 447, 393, 422, 448, 0, 0, 0,
	205, 0, 896, 897, 0, 0, 0, 0, 0, 82,
	0, 420, 442, 391, 421, 423, 360, 419, 0, 364,
	367, 453, 437, 386, 387, 1085, 0, 0, 0, 0,
	0, 0, 405, 409, 426, 399, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 384, 0, 416, 0, 0,
	0, 368, 365, 0, 0, 403, 0, 0, 0, 370,
	0, 385, 427, 0, 359, 97, 430, 436, 0, 400,
	170, 440, 398, 397, 444, 134, 0, 151, 99, 107,
	69, 76, 0, 98, 125, 139, 143, 434, 382, 390,
	86, 388, 141, 129, 163, 415, 130, 140, 111, 156,
	135, 441, 171, 172, 153, 169, 179, 70, 152, 162,
	83, 144, 72, 160, 150, 117, 103, 104, 71, 0,
	138, 90, 95, 88, 126, 157, 158, 87, 182, 77,
	168, 74, 78, 167, 124, 155, 161, 118, 115, 73,
	159, 116, 114, 106, 93, 100, 132, 113, 133, 101,
	121, 120, 122, 0, 363, 0, 149, 165, 183, 80,
	378, 145, 154, 173, 174, 175, 176, 177, 178, 0,
	0, 81, 96, 92, 131, 123, 79, 102, 146, 105,
	112, 137, 181, 128, 142, 84, 164, 147, 374, 377,
	372, 373, 411, 412, 449, 450, 451, 428, 369, 0,
	375, 376, 0, 432, 438, 439, 414, 68, 75, 109,
	455, 136, 94, 166, 443, 431, 0, 402, 446, 380,
	394, 454, 395, 396, 424, 366, 410, 127, 392, 180,
	89, 85, 67, 0, 383, 361, 389, 362, 381, 404,
	91, 407, 379, 433, 413, 445, 108, 452, 110, 418,
	0, 148, 119, 0, 0, 406, 435, 408, 429, 401,
	425, 371, 417, 447, 393, 422, 448, 0, 0, 0,
	205, 0, 896, 897, 0, 0, 0, 0, 0, 82,
	0, 420, 442, 391, 421, 423, 360, 419, 0, 364,
	367, 453, 437, 386, 387, 0, 0, 0, 0, 0,
	0, 0, 405, 409, 426, 399, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 384, 0, 416, 0, 0,
	0, 368, 365, 0, 0, 403, 0, 0, 0, 370,
	0, 385, 427, 0, 359, 97, 430, 436, 0, 400,
	170, 440, 398, 397, 444, 134, 0, 151, 99, 107,
	69, 76, 0, 98, 125, 139, 143, 434, 382, 390,
	86, 388, 141, 129, 163, 415, 130, 140, 111, 156,
	135, 441, 171, 172, 153, 169, 179, 70, 152, 162,
	83, 144, 72, 160, 150, 117, 103, 104, 71, 0,
	138, 90, 95, 88, 126, 157, 158, 87, 182, 77,
	168, 74, 78, 167, 124, 155, 161, 118, 115, 73,
	159, 116, 114, 106, 93, 100, 132, 113, 133, 101,
	121, 120, 122, 0, 363, 0, 149, 165, 183, 80,
	378, 145, 154, 173, 174, 175, 176, 177, 178, 0,
	0, 81, 96, 92, 131, 123, 79, 102, 146, 105,
	112, 137, 181, 128, 142, 84, 164, 147, 374, 377,
	372, 373, 411, 412, 449, 450, 451, 428, 369, 0,
	375, 376, 0, 432, 438, 439, 414, 68, 75, 109,
	455, 136, 94, 166, 443, 431, 0, 402, 446, 380,
	394, 454, 395, 396, 424, 366, 410, 127, 392, 180,
	89, 85, 67, 0, 383, 361, 389, 362, 381, 404,
	91, 407, 379, 433, 413, 445, 108, 452, 110, 418,
	0, 148, 119, 0, 0, 406, 435, 408, 429, 401,
	425, 371, 417, 447, 393, 422, 448, 55, 0, 0,
	205, 0, 0, 0, 0, 0, 0, 0, 0, 82,
	0, 420, 442, 391, 421, 423, 360, 419, 0, 364,
	367, 453, 437, 386, 387, 0, 0, 0, 0, 0,
	0, 0, 405, 409, 426, 399, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 384, 0, 416, 0, 0,
	0, 368, 365, 0, 0, 403, 0, 0, 0, 370,
	0, 385, 427, 0, 359, 97, 430, 436, 0, 400,
	170, 440, 398, 397, 444, 134, 0, 151, 99, 107,
	69, 76, 0, 98, 125, 139, 143, 434, 382, 390,
	86, 388, 141, 129, 163, 415, 130, 140, 111, 156,
	135, 441, 171, 172, 153, 169, 179, 70, 152, 162,
	83, 144, 72, 160, 150, 117, 103, 104, 71, 0,
	138, 90, 95, 88, 126, 157, 158, 87, 182, 77,
	168, 74, 78, 167, 124, 155, 161, 118, 115, 73,
	159, 116, 114, 106, 93, 100, 132, 113, 133, 101,
	121, 120, 122, 0, 363, 0, 149, 165, 183, 80,
	378, 145, 154, 173, 174, 175, 176, 177, 178, 0,
	0, 81, 96, 92, 131, 123, 79, 102, 146, 105,
	112, 137, 181, 128, 142, 84, 164, 147, 374, 377,
	372, 373, 411, 412, 449, 450, 451, 428, 369, 0,
	375, 376, 0, 432, 438, 439, 414, 68, 75, 109,
	455, 136, 94, 166, 443, 431, 0, 402, 446, 380,
	394, 454, 395, 396, 424, 366, 410, 127, 392, 180,
	89, 85, 67, 0, 383, 361, 389, 362, 381, 404,
	91, 407, 379, 433, 413, 445, 108, 452, 110, 418,
	0, 148, 119, 0, 0, 406, 435, 408, 429, 401,
	425, 371, 417, 447, 393, 422, 448, 0, 0, 0,
	205, 0, 0, 0, 0, 0, 0, 0, 0, 82,
	0, 420, 442, 391, 421, 423, 360, 419, 0, 364,
	367, 453, 437, 386, 387, 0, 0, 0, 0, 0,
	0, 0, 405, 409, 426, 399, 0, 0, 0, 0,
	0, 0, 0, 1151, 0, 384, 0, 416, 0, 0,
	0, 368, 365, 0, 0, 403, 0, 0, 0, 370,
	0, 385, 427, 0, 359, 97, 430, 436, 0, 400,
	170, 440, 398, 397, 444, 134, 0, 151, 99, 107,
	69, 76, 0, 98, 125, 139, 143, 434, 382, 390,
	86, 388, 141, 129, 163, 415, 130, 140, 111, 156,
	135, 441, 171, 172, 153, 169, 179, 70, 152, 162,
	83, 144, 72, 160, 150, 117, 103, 104, 71, 0,
	138, 90, 95, 88, 126, 157, 158, 87, 182, 77,
	168, 74, 78, 167, 124, 155, 161, 118, 115, 73,
	159, 116, 114, 106, 93, 100, 132, 113, 133, 101,
	121, 120, 122, 0, 363, 0, 149, 165, 183, 80,
	378, 145, 154, 173, 174, 175, 176, 177, 178, 0,
	0, 81, 96, 92, 131, 123, 79, 102, 146, 105,
	112, 137, 181, 128, 142, 84, 164, 147, 374, 377,
	372, 373, 411, 412, 449, 450, 451, 428, 369, 0,
	375, 376, 0, 432, 438, 439, 414, 68, 75, 109,
	455, 136, 94, 166, 443, 431, 0, 402, 446, 380,
	394, 454, 395, 396, 424, 366, 410, 127, 392, 180,
	89, 85, 67, 0, 383, 361, 389, 362, 381, 404,
	91, 407, 379, 433, 413, 445, 108, 452, 110, 418,
	0, 148, 119, 0, 0, 406, 435, 408, 429, 401,
	425, 371, 417, 447, 393, 422, 448, 0, 0, 0,
	65, 0, 0, 0, 0, 0, 0, 0, 0, 82,
	0, 420, 442, 391, 421, 423, 360, 419, 0, 364,
	367, 453, 437, 386, 387, 0, 0, 0, 0, 0,
	0, 0, 405, 409, 426, 399, 0, 0, 0, 0,
	0, 0, 0, 880, 0, 384, 0, 416, 0, 0,
	0, 368, 365, 0, 0, 403, 0, 0, 0, 370,
	0, 385, 427, 0, 359, 97, 430, 436, 0, 400,
	170, 440, 398, 397, 444, 134, 0, 151, 99, 107,
	69, 76, 0, 98, 125, 139, 143, 434, 382, 390,
	86, 388, 141, 129, 163, 415, 130, 140, 111, 156,
	135, 441, 171, 172, 153, 169, 179, 70, 152, 162,
	83, 144, 72, 160, 150, 117, 103, 104, 71, 0,
	138, 90, 95, 88, 126, 157, 158, 87, 182, 77,
	168, 74, 78, 167, 124, 155, 161, 118, 115, 73,
	159, 116, 114, 106, 93, 100, 132, 113, 133, 101,
	121, 120, 122, 0, 363, 0, 149, 165, 183, 80,
	378, 145, 154, 173, 174, 175, 176, 177, 178, 0,
	0, 81, 96, 92, 131, 123, 79, 102, 146, 105,
	112, 137, 181, 128, 142, 84, 164, 147, 374, 377,
	372, 373, 411, 412, 449, 450, 451, 428, 369, 0,
	375, 376, 0, 432, 438, 439, 414, 68, 75, 109,
	455, 136, 94, 166, 443, 431, 0, 402, 446, 380,
	394, 454, 395, 396, 424, 366, 410, 127, 392, 180,
	89, 85, 67, 0, 383, 361, 389, 362, 381, 404,
	91, 407, 379, 433, 413, 445, 108, 452, 110, 418,
	0, 148, 119, 0, 0, 406, 435, 408, 429, 401,
	425, 371, 417, 447, 393, 422, 448, 0, 0, 0,
	281, 0, 0, 0, 0, 0, 0, 0, 0, 82,
	0, 420, 442, 391, 421, 423, 360, 419, 0, 364,
	367, 453, 437, 386, 387, 0, 0, 0, 0, 0,
	0, 0, 405, 409, 426, 399, 0, 0, 0, 0,
	0, 0, 0, 779, 0, 384, 0, 416, 0, 0,
	0, 368, 365, 0, 0, 403, 0, 0, 0, 370,
	0, 385, 427, 0, 359, 97, 430, 436, 0, 400,
	170, 440, 398, 397, 444, 134, 0, 151, 99, 107,
	69, 76, 0, 98, 125, 139, 143, 434, 382, 390,
	86, 388, 141, 129, 163, 415, 130, 140, 111, 156,
	135, 441, 171, 172, 153, 169, 179, 70, 152, 162,
	83, 144, 72, 160, 150, 117, 103, 104, 71, 0,
	138, 90, 95, 88, 126, 157, 158, 87, 182, 77,
	168, 74, 78, 167, 124, 155, 161, 118, 115, 73,
	159, 116, 114, 106, 93, 100, 132, 113, 133, 101,
	121, 120, 122, 0, 363, 0, 149, 165, 183, 80,
	378, 145, 154, 173, 174, 175, 176, 177, 178, 0,
	0, 81, 96, 92, 131, 123, 79, 102, 146, 105,
	112, 137, 181, 128, 142, 84, 164, 147, 374, 377,
	372, 373, 411, 412, 449, 450, 451, 428, 369, 0,
	375, 376, 0, 432, 438, 439, 414, 68, 75, 109,
	455, 136, 94, 166, 443, 431, 0, 402, 446, 380,
	394, 454, 395, 396, 424, 366, 410, 127, 392, 180,
	89, 85, 67, 0, 383, 361, 389, 362, 381, 404,
	91, 407, 379, 433, 413, 445, 108, 452, 110, 418,
	0, 148, 119, 0, 0, 406, 435, 408, 429, 401,
	425, 371, 417, 447, 393, 422, 448, 0, 0, 0,
	205, 0, 0, 0, 0, 0, 0, 0, 0, 82,
	0, 420, 442, 391, 421, 423, 360, 419, 0, 364,
	367, 453, 437, 386, 387, 0, 0, 0, 0, 0,
	0, 0, 405, 409, 426, 399, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 384, 0, 416, 0, 0,
	0, 368, 365, 0, 0, 403, 0, 0, 0, 370,
	0, 385, 427, 0, 359, 97, 430, 436, 0, 400,
	170, 440, 398, 397, 444, 134, 0, 151, 99, 107,
	69, 76, 0, 98, 125, 139, 143, 434, 382, 390,
	86, 388, 141, 129, 163, 415, 130, 140, 111, 156,
	135, 441, 171, 172, 153, 169, 179, 70, 152, 162,
	83, 144, 72, 160, 150, 117, 103, 104, 71, 0,
	138, 90, 95, 88, 126, 157, 158, 87, 182, 77,
	168, 74, 78, 167, 124, 155, 161, 118, 115, 73,
	159, 116, 114, 106, 93, 100, 132, 113, 133, 101,
	121, 120, 122, 0, 363, 0, 149, 165, 183, 80,
	378, 145, 154, 173, 174, 175, 176, 177, 178, 0,
	0, 81, 96, 92, 131, 123, 79, 102, 146, 105,
	112, 137, 181, 128, 142, 84, 164, 147, 374, 377,
	372, 373, 411, 412, 449, 450, 451, 428, 369, 0,
	375, 376, 0, 432, 438, 439, 414, 68, 75, 109,
	455, 136, 94, 166, 443, 431, 0, 402, 446, 380,
	394, 454, 395, 396, 424, 366, 410, 127, 392, 180,
	89, 85, 67, 0, 383, 361, 389, 362, 381, 404,
	91, 407, 379, 433, 413, 445, 108, 452, 110, 418,
	0, 148, 119, 0, 0, 406, 435, 408, 429, 401,
	425, 371, 417, 447, 393, 422, 448, 0, 0, 0,
	281, 0, 0, 0, 0, 0, 0, 0, 0, 82,
	0, 420, 442, 391, 421, 423, 360, 419, 0, 364,
	367, 453, 437, 386, 387, 0, 0, 0, 0, 0,
	0, 0, 405, 409, 426, 399, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 384, 0, 416, 0, 0,
	0, 368, 365, 0, 0, 403, 0, 0, 0, 370,
	0, 385, 427, 0, 359, 97, 430, 436, 0, 400,
	170, 440, 398, 397, 444, 134, 0, 151, 99, 107,
	69, 76, 0, 98, 125, 139, 143, 434, 382, 390,
	86, 388, 141, 129, 163, 415, 130, 140, 111, 156,
	135, 441, 171, 172, 153, 169, 179, 70, 152, 162,
	83, 144, 72, 160, 150, 117, 103, 104, 71, 0,
	138, 90, 95, 88, 126, 157, 158, 87, 182, 77,
	168, 74, 78, 167, 124, 155, 161, 118, 115, 73,
	159, 116, 114, 106, 93, 100, 132, 113, 133, 101,
	121, 120, 122, 0, 363, 0, 149, 165, 183, 80,
	378, 145, 154, 173, 174, 175, 176, 177, 178, 0,
	0, 81, 96, 92, 131, 123, 79, 102, 146, 105,
	112, 137, 181, 128, 142, 84, 164, 147, 374, 377,
	372, 373, 411, 412, 449, 450, 451, 428, 369, 0,
	375, 376, 0, 432, 438, 439, 414, 68, 75, 109,
	455, 136, 94, 166, 443, 431, 0, 402, 446, 380,
	394, 454, 395, 396, 424, 366, 410, 127, 392, 180,
	89, 85, 67, 0, 383, 361, 389, 362, 381, 404,
	91, 407, 379, 433, 413, 445, 108, 452, 110, 418,
	0, 148, 119, 0, 0, 406, 435, 408, 429, 401,
	425, 371, 417, 447, 393, 422, 448, 0, 0, 0,
	205, 0, 0, 0, 0, 0, 0, 0, 0, 82,
	0, 420, 442, 391, 421, 423, 360, 419, 0, 364,
	367, 453, 437, 386, 387, 0, 0, 0, 0, 0,
	0, 0, 405, 409, 426, 399, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 384, 0, 416, 0, 0,
	0, 368, 365, 0, 0, 403, 0, 0, 0, 370,
	0, 385, 427, 0, 359, 97, 430, 436, 0, 400,
	170, 440, 398, 397, 444, 134, 0, 151, 99, 107,
	69, 76, 0, 98, 125, 139, 143, 434, 382, 390,
	86, 388, 141, 129, 163, 415, 130, 140, 111, 156,
	135, 441, 171, 172, 153, 169, 179, 70, 152, 162,
	83, 144, 72, 160, 150, 117, 103, 104, 71, 0,
	138, 90, 95, 88, 126, 157, 158, 87, 182, 77,
	168, 74, 357, 167, 124, 155, 161, 118, 115, 73,
	159, 116, 114, 106, 93, 100, 132, 113, 133, 101,
	121, 120, 122, 0, 363, 0, 149, 165, 183, 80,
	378, 145, 154, 173, 174, 175, 176, 177, 178, 0,
	0, 81, 96, 92, 131, 358, 356, 102, 146, 105,
	112, 137, 181, 128, 142, 84, 164, 147, 374, 377,
	372, 373, 411, 412, 449, 450, 451, 428, 369, 0,
	375, 376, 0, 432, 438, 439, 414, 68, 75, 109,
	455, 136, 94, 166, 443, 431, 0, 402, 446, 380,
	394, 454, 395, 396, 424, 366, 410, 127, 392, 180,
	89, 85, 67, 0, 383, 361, 389, 362, 381, 404,
	91, 407, 379, 433, 413, 445, 108, 452, 110, 418,
	0, 148, 119, 0, 0, 406, 435, 408, 429, 401,
	425, 371, 417, 447, 393, 422, 448, 0, 0, 0,
	65, 0, 0, 0, 0, 0, 0, 0, 0, 82,
	0, 420, 442, 391, 421, 423, 360, 419, 0, 364,
	367, 453, 437, 386, 387, 0, 0, 0, 0, 0,
	0, 0, 405, 409, 426, 399, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 384, 0, 416, 0, 0,
	0, 368, 365, 0, 0, 403, 0, 0, 0, 370,
	0, 385, 427, 0, 359, 97, 430, 436, 0, 400,
	170, 440, 398, 397, 444, 134, 0, 151, 99, 107,
	69, 76, 0, 98, 125, 139, 143, 434, 382, 390,
	86, 388, 141, 129, 163, 415, 130, 140, 111, 156,
	135, 441, 171, 172, 153, 169, 179, 70, 152, 162,
	83, 144, 72, 160, 150, 117, 103, 104, 71, 0,
	138, 90, 95, 88, 126, 157, 158, 87, 182, 77,
	168, 74, 78, 167, 124, 155, 161, 118, 115, 73,
	159, 116, 114, 106, 93, 100, 132, 113, 133, 101,
	121, 120, 122, 0, 363, 0, 149, 165, 183, 80,
	378, 145, 154, 173, 174, 175, 176, 177, 178, 0,
	0, 81, 96, 92, 131, 123, 79, 102, 146, 105,
	112, 137, 181, 128, 142, 84, 164, 147, 374, 377,
	372, 373, 411, 412, 449, 450, 451, 428, 369, 0,
	375, 376, 0, 432, 438, 439, 414, 68, 75, 109,
	455, 136, 94, 166, 443, 431, 0, 402, 446, 380,
	394, 454, 395, 396, 424, 366, 410, 127, 392, 180,
	89, 85, 67, 0, 383, 361, 389, 362, 381, 404,
	91, 407, 379, 433, 413, 445, 108, 452, 110, 418,
	0, 148, 119, 0, 0, 406, 435, 408, 429, 401,
	425, 371, 417, 447, 393, 422, 448, 0, 0, 0,
	205, 0, 0, 0, 0, 0, 0, 0, 0, 82,
	0, 420, 442, 391, 421, 423, 360, 419, 0, 364,
	367, 453, 437, 386, 387, 0, 0, 0, 0, 0,
	0, 0, 405, 409, 426, 399, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 384, 0, 416, 0, 0,
	0, 368, 365, 0, 0, 403, 0, 0, 0, 370,
	0, 385, 427, 0, 359, 97, 430, 436, 0, 400,
	170, 440, 398, 397, 444, 134, 0, 151, 99, 107,
	69, 76, 0, 98, 125, 139, 143, 434, 382, 390,
	86, 388, 141, 129, 163, 415, 130, 140, 111, 156,
	135, 441, 171, 172, 153, 169, 179, 70, 152, 647,
	83, 144, 72, 160, 150, 117, 103, 104, 71, 0,
	138, 90, 95, 88, 126, 157, 158, 87, 182, 77,
	168, 74, 357, 167, 124, 155, 161, 118, 115, 73,
	159, 116, 114, 106, 93, 100, 132, 113, 133, 101,
	121, 120, 122, 0, 363, 0, 149, 165, 183, 80,
	378, 145, 154, 173, 174, 175, 176, 177, 178, 0,
	0, 81, 96, 92, 131, 358, 356, 102, 146, 105,
	112, 137, 181, 128, 142, 84, 164, 147, 374, 377,
	372, 373, 411, 412, 449, 450, 451, 428, 369, 0,
	375, 376, 0, 432, 438, 439, 414, 68, 75, 109,
	455, 136, 94, 166, 443, 431, 0, 402, 446, 380,
	394, 454, 395, 396, 424, 366, 410, 127, 392, 180,
	89, 85, 67, 0, 383, 361, 389, 362, 381, 404,
	91, 407, 379, 433, 413, 445, 108, 452, 110, 418,
	0, 148, 119, 0, 0, 406, 435, 408, 429, 401,
	425, 371, 417, 447, 393, 422, 448, 0, 0, 0,
	205, 0, 0, 0, 0, 0, 0, 0, 0, 82,
	0, 420, 442, 391, 421, 423, 360, 419, 0, 364,
	367, 453, 437, 386, 387, 0, 0, 0, 0, 0,
	0, 0, 405, 409, 426, 399, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 384, 0, 416, 0, 0,
	0, 368, 365, 0, 0, 403, 0, 0, 0, 370,
	0, 385, 427, 0, 359, 97, 430, 436, 0, 400,
	170, 440, 398, 397, 444, 134, 0, 151, 99, 107,
	69, 76, 0, 98, 125, 139, 143, 434, 382, 390,
	86, 388, 141, 129, 163, 415, 130, 140, 111, 156,
	135, 441, 171, 172, 153, 169, 179, 70, 152, 348,
	83, 144, 72, 160, 150, 117, 103, 104, 71, 0,
	138, 90, 95, 88, 126, 157, 158, 87, 182, 77,
	168, 74, 357, 167, 124, 155, 161, 118, 115, 73,
	159, 116, 114, 106, 93, 100, 132, 113, 133, 101,
	121, 120, 122, 0, 363, 0, 149, 165, 183, 80,
	378, 145, 154, 173, 174, 175, 176, 177, 178, 0,
	0, 81, 96, 92, 131, 358, 356, 351, 350, 105,
	112, 137, 181, 128, 142, 84, 164, 147, 374, 377,
	372, 373, 411, 412, 449, 450, 451, 428, 369, 0,
	375, 376, 0, 432, 438, 439, 414, 68, 75, 109,
	455, 136, 94, 166, 127, 0, 180, 89, 85, 67,
	0, 0, 0, 283, 0, 0, 0, 91, 0, 280,
	0, 0, 0, 108, 323, 110, 0, 0, 148, 119,
	0, 0, 0, 0, 314, 315, 0, 0, 0, 0,
	0, 0, 0, 0, 55, 0, 0, 281, 302, 301,
	304, 305, 306, 307, 0, 0, 82, 303, 308, 309,
	310, 0, 0, 0, 278, 295, 0, 322, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 292, 293,
	0, 0, 0, 0, 336, 0, 294, 0, 0, 289,
	290, 291, 296, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 97, 0, 1304, 1305, 0, 170, 0, 0,
	334, 0, 134, 0, 151, 99, 107, 69, 76, 0,
	98, 125, 139, 143, 0, 0, 0, 86, 0, 141,
	129, 163, 0, 130, 140, 111, 156, 135, 0, 171,
	172, 153, 169, 179, 70, 152, 162, 83, 144, 72,
	160, 150, 117, 103, 104, 71, 0, 138, 90, 95,
	88, 126, 157, 158, 87, 182, 77, 168, 74, 78,
	167, 124, 155, 161, 118, 115, 73, 159, 116, 114,
	106, 93, 100, 132, 113, 133, 101, 121, 120, 122,
	0, 0, 0, 149, 165, 183, 80, 0, 145, 154,
	173, 174, 175, 176, 177, 178, 0, 0, 81, 96,
	92, 131, 123, 79, 102, 146, 105, 112, 137, 181,
	128, 142, 84, 164, 147, 324, 335, 330, 331, 328,
	329, 327, 326, 325, 337, 316, 317, 318, 319, 321,
	0, 332, 333, 320, 68, 75, 109, 0, 136, 94,
	166, 127, 0, 180, 89, 85, 67, 0, 0, 0,
	283, 0, 0, 0, 91, 0, 280, 0, 0, 0,
	108, 323, 110, 0, 0, 148, 119, 0, 0, 0,
	0, 314, 315, 0, 0, 0, 0, 0, 0, 887,
	0, 55, 0, 0, 281, 302, 301, 304, 305, 306,
	307, 0, 0, 82, 303, 308, 309, 310, 888, 0,
	0, 278, 295, 0, 322, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 292, 293, 0, 0, 0,
	0, 336, 0, 294, 0, 0, 289, 290, 291, 296,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 97,
	0, 0, 0, 0, 170, 0, 0, 334, 0, 134,
	0, 151, 99, 107, 69, 76, 0, 98, 125, 139,
	143, 0, 0, 0, 86, 0, 141, 129, 163, 0,
	130, 140, 111, 156, 135, 0, 171, 172, 153, 169,
	179, 70, 152, 162, 83, 144, 72, 160, 150, 117,
	103, 104, 71, 0, 138, 90, 95, 88, 126, 157,
	158, 87, 182, 77, 168, 74, 78, 167, 124, 155,
	161, 118, 115, 73, 159, 116, 114, 106, 93, 100,
	132, 113, 133, 101, 121, 120, 122, 0, 0, 0,
	149, 165, 183, 80, 0, 145, 154, 173, 174, 175,
	176, 177, 178, 0, 0, 81, 96, 92, 131, 123,
	79, 102, 146, 105, 112, 137, 181, 128, 142, 84,
	164, 147, 324, 335, 330, 331, 328, 329, 327, 326,
	325, 337, 316, 317, 318, 319, 321, 25, 332, 333,
	320, 68, 75, 109, 0, 136, 94, 166, 0, 127,
	0, 180, 89, 85, 67, 0, 0, 0, 283, 0,
	0, 0, 91, 0, 280, 0, 0, 0, 108, 323,
	110, 0, 0, 148, 119, 0, 0, 0, 0, 314,
	315, 0, 0, 0, 0, 0, 0, 0, 0, 55,
	0, 0, 281, 302, 301, 304, 305, 306, 307, 0,
	0, 82, 303, 308, 309, 310, 0, 0, 0, 278,
	295, 0, 322, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 292, 293, 0, 0, 0, 0, 336,
	0, 294, 0, 0, 289, 290, 291, 296, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 97, 0, 0,
	0, 0, 170, 0, 0, 334, 0, 134, 0, 151,
	99, 107, 69, 76, 0, 98, 125, 139, 143, 0,
	0, 0, 86, 0, 141, 129, 163, 0, 130, 140,
	111, 156, 135, 0, 171, 172, 153, 169, 179, 70,
	152, 162, 83, 144, 72, 160, 150, 117, 103, 104,
	71, 0, 138, 90, 95, 88, 126, 157, 158, 87,
	182, 77, 168, 74, 78, 167, 124, 155, 161, 118,
	115, 73, 159, 116, 114, 106, 93, 100, 132, 113,
	133, 101, 121, 120, 122, 0, 0, 0, 149, 165,
	183, 80, 0, 145, 154, 173, 174, 175, 176, 177,
	178, 0, 0, 81, 96, 92, 131, 123, 79, 102,
	146, 105, 112, 137, 181, 128, 142, 84, 164, 147,
	324, 335, 330, 331, 328, 329, 327, 326, 325, 337,
	316, 317, 318, 319, 321, 0, 332, 333, 320, 68,
	75, 109, 23, 136, 94, 166, 127, 0, 180, 89,
	85, 67, 0, 815, 0, 283, 0, 0, 0, 91,
	0, 280, 0, 0, 0, 108, 323, 110, 0, 0,
	148, 119, 0, 0, 0, 0, 314, 315, 0, 0,
	0, 0, 0, 0, 0, 0, 55, 0, 0, 281,
	302, 301, 304, 305, 306, 307, 0, 0, 82, 303,
	308, 309, 310, 0, 0, 0, 278, 295, 0, 322,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	292, 293, 274, 0, 0, 0, 336, 0, 294, 0,
	0, 289, 290, 291, 296, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 97, 0, 0, 0, 0, 170,
	0, 0, 334, 0, 134, 0, 151, 99, 107, 69,
	76, 0, 98, 125, 139, 143, 0, 0, 0, 86,
	0, 141, 129, 163, 0, 130, 140, 111, 156, 135,
	0, 171, 172, 153, 169, 179, 70, 152, 162, 83,
	144, 72, 160, 150, 117, 103, 104, 71, 0, 138,
	90, 95, 88, 126, 157, 158, 87, 182, 77, 168,
	74, 78, 167, 124, 155, 161, 118, 115, 73, 159,
	116, 114, 106, 93, 100, 132, 113, 133, 101, 121,
	120, 122, 0, 0, 0, 149, 165, 183, 80, 0,
	145, 154, 173, 174, 175, 176, 177, 178, 0, 0,
	81, 96, 92, 131, 123, 79, 102, 146, 105, 112,
	137, 181, 128, 142, 84, 164, 147, 324, 335, 330,
	331, 328, 329, 327, 326, 325, 337, 316, 317, 318,
	319, 321, 0, 332, 333, 320, 68, 75, 109, 0,
	136, 94, 166, 127, 0, 180, 89, 85, 67, 0,
	0, 0, 283, 0, 0, 0, 91, 0, 280, 0,
	0, 0, 108, 323, 110, 0, 0, 148, 119, 0,
	0, 0, 0, 314, 315, 0, 0, 0, 0, 0,
	0, 0, 0, 55, 0, 517, 281, 302, 301, 304,
	305, 306, 307, 0, 0, 82, 303, 308, 309, 310,
	0, 0, 0, 278, 295, 0, 322, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 292, 293, 0,
	0, 0, 0, 336, 0, 294, 0, 0, 289, 290,
	291, 296, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 97, 0, 0, 0, 0, 170, 0, 0, 334,
	0, 134, 0, 151, 99, 107, 69, 76, 0, 98,
	125, 139, 143, 0, 0, 0, 86, 0, 141, 129,
	163, 0, 130, 140, 111, 156, 135, 0, 171, 172,
	153, 169, 179, 70, 152, 162, 83, 144, 72, 160,
	150, 117, 103, 104, 71, 0, 138, 90, 95, 88,
	126, 157, 158, 87, 182, 77, 168, 74, 78, 167,
	124, 155, 161, 118, 115, 73, 159, 116, 114, 106,
	93, 100, 132, 113, 133, 101, 121, 120, 122, 0,
	0, 0, 149, 165, 183, 80, 0, 145, 154, 173,
	174, 175, 176, 177, 178, 0, 0, 81, 96, 92,
	131, 123, 79, 102, 146, 105, 112, 137, 181, 128,
	142, 84, 164, 147, 324, 335, 330, 331, 328, 329,
	327, 326, 325, 337, 316, 317, 318, 319, 321, 0,
	332, 333, 320, 68, 75, 109, 0, 136, 94, 166,
	127, 0, 180, 89, 85, 67, 0, 0, 0, 283,
	0, 0, 0, 91, 0, 280, 0, 0, 0, 108,
	323, 110, 0, 0, 148, 119, 0, 0, 0, 0,
	314, 315, 0, 0, 0, 0, 0, 0, 0, 0,
	55, 0, 0, 281, 302, 301, 304, 305, 306, 307,
	0, 0, 82, 303, 308, 309, 310, 0, 0, 0,
	278, 295, 0, 322, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 292, 293, 274, 0, 0, 0,
	336, 0, 294, 0, 0, 289, 290, 291, 296, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 97, 0,
	0, 0, 0, 170, 0, 0, 334, 0, 134, 0,
	151, 99, 107, 69, 76, 0, 98, 125, 139, 143,
	0, 0, 0, 86, 0, 141, 129, 163, 0, 130,
	140, 111, 156, 135, 0, 171, 172, 153, 169, 179,
	70, 152, 162, 83, 144, 72, 160, 150, 117, 103,
	104, 71, 0, 138, 90, 95, 88, 126, 157, 158,
	87, 182, 77, 168, 74, 78, 167, 124, 155, 161,
	118, 115, 73, 159, 116, 114, 106, 93, 100, 132,
	113, 133, 101, 121, 120, 122, 0, 0, 0, 149,
	165, 183, 80, 0, 145, 154, 173, 174, 175, 176,
	177, 178, 0, 0, 81, 96, 92, 131, 123, 79,
	102, 146, 105, 112, 137, 181, 128, 142, 84, 164,
	147, 324, 335, 330, 331, 328, 329, 327, 326, 325,
	337, 316, 317, 318, 319, 321, 0, 332, 333, 320,
	68, 75, 109, 0, 136, 94, 166, 127, 0, 180,
	89, 85, 67, 0, 0, 0, 283, 0, 0, 0,
	91, 0, 280, 0, 0, 0, 108, 323, 110, 0,
	0, 148, 119, 0, 0, 0, 0, 314, 315, 0,
	0, 0, 0, 0, 0, 0, 0, 55, 0, 0,
	281, 302, 830, 304, 305, 306, 307, 0, 0, 82,
	303, 308, 309, 310, 0, 0, 0, 278, 295, 0,
	322, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 292, 293, 274, 0, 0, 0, 336, 0, 294,
	0, 0, 289, 290, 291, 296, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 97, 0, 0, 0, 0,
	170, 0, 0, 334, 0, 134, 0, 151, 99, 107,
	69, 76, 0, 98, 125, 139, 143, 0, 0, 0,
	86, 0, 141, 129, 163, 0, 130, 140, 111, 156,
	135, 0, 171, 172, 153, 169, 179, 70, 152, 162,
	83, 144, 72, 160, 150, 117, 103, 104, 71, 0,
	138, 90, 95, 88, 126, 157, 158, 87, 182, 77,
	168, 74, 78, 167, 124, 155, 161, 118, 115, 73,
	159, 116, 114, 106, 93, 100, 132, 113, 133, 101,
	121, 120, 122, 0, 0, 0, 149, 165, 183, 80,
	0, 145, 154, 173, 174, 175, 176, 177, 178, 0,
	0, 81, 96, 92, 131, 123, 79, 102, 146, 105,
	112, 137, 181, 128, 142, 84, 164, 147, 324, 335,
	330, 331, 328, 329, 327, 326, 325, 337, 316, 317,
	318, 319, 321, 0, 332, 333, 320, 68, 75, 109,
	0, 136, 94, 166, 127, 0, 180, 89, 85, 67,
	0, 0, 0, 283, 0, 0, 0, 91, 0, 280,
	0, 0, 0, 108, 323, 110, 0, 0, 148, 119,
	0, 0, 0, 0, 314, 315, 0, 0, 0, 0,
	0, 0, 0, 0, 55, 0, 0, 281, 302, 827,
	304, 305, 306, 307, 0, 0, 82, 303, 308, 309,
	310, 0, 0, 0, 278, 295, 0, 322, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 292, 293,
	274, 0, 0, 0, 336, 0, 294, 0, 0, 289,
	290, 291, 296, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 97, 0, 0, 0, 0, 170, 0, 0,
	334, 0, 134, 0, 151, 99, 107, 69, 76, 0,
	98, 125, 139, 143, 0, 0, 0, 86, 0, 141,
	129, 163, 0, 130, 140, 111, 156, 135, 0, 171,
	172, 153, 169, 179, 70, 152, 162, 83, 144, 72,
	160, 150, 117, 103, 104, 71, 0, 138, 90, 95,
	88, 126, 157, 158, 87, 182, 77, 168, 74, 78,
	167, 124, 155, 161, 118, 115, 73, 159, 116, 114,
	106, 93, 100, 132, 113, 133, 101, 121, 120, 122,
	0, 0, 0, 149, 165, 183, 80, 0, 145, 154,
	173, 174, 175, 176, 177, 178, 0, 0, 81, 96,
	92, 131, 123, 79, 102, 146, 105, 112, 137, 181,
	128, 142, 84, 164, 147, 324, 335, 330, 331, 328,
	329, 327, 326, 325, 337, 316, 317, 318, 319, 321,
	0, 332, 333, 320, 68, 75, 109, 0, 136, 94,
	166, 127, 0, 180, 89, 85, 67, 0, 0, 0,
	283, 0, 0, 0, 91, 0, 280, 0, 0, 0,
	108, 323, 110, 0, 0, 148, 119, 0, 0, 0,
	0, 314, 315, 0, 0, 0, 0, 0, 0, 0,
	0, 55, 0, 0, 281, 302, 301, 304, 305, 306,
	307, 0, 0, 82, 303, 308, 309, 310, 0, 0,
	0, 278, 295, 0, 322, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 292, 293, 0, 0, 0,
	0, 336, 0, 294, 0, 0, 289, 290, 291, 296,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 97,
	0, 0, 0, 0, 170, 0, 0, 334, 0, 134,
	0, 151, 99, 107, 69, 76, 0, 98, 125, 139,
	143, 0, 0, 0, 86, 0, 141, 129, 163, 0,
	130, 140, 111, 156, 135, 0, 171, 172, 153, 169,
	179, 70, 152, 162, 83, 144, 72, 160, 150, 117,
	103, 104, 71, 0, 138, 90, 95, 88, 126, 157,
	158, 87, 182, 77, 168, 74, 78, 167, 124, 155,
	161, 118, 115, 73, 159, 116, 114, 106, 93, 100,
	132, 113, 133, 101, 121, 120, 122, 0, 0, 0,
	149, 165, 183, 80, 0, 145, 154, 173, 174, 175,
	176, 177, 178, 0, 0, 81, 96, 92, 131, 123,
	79, 102, 146, 105, 112, 137, 181, 128, 142, 84,
	164, 147, 324, 335, 330, 331, 328, 329, 327, 326,
	325, 337, 316, 317, 318, 319, 321, 0, 332, 333,
	320, 68, 75, 109, 0, 136, 94, 166, 127, 0,
	180, 89, 85, 67, 0, 0, 0, 0, 0, 0,
	0, 91, 0, 0, 0, 0, 0, 108, 323, 110,
	0, 0, 148, 119, 0, 0, 0, 0, 314, 315,
	0, 0, 0, 0, 0, 0, 0, 0, 55, 0,
	0, 281, 302, 301, 304, 305, 306, 307, 0, 0,
	82, 303, 308, 309, 310, 0, 0, 0, 0, 295,
	0, 322, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 292, 293, 0, 0, 0, 0, 336, 0,
	294, 0, 0, 289, 290, 291, 296, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 97, 0, 0, 0,
	0, 170, 0, 0, 334, 0, 134, 0, 151, 99,
	107, 69, 76, 0, 98, 125, 139, 143, 0, 0,
	0, 86, 0, 141, 129, 163, 1476, 130, 140, 111,
	156, 135, 0, 171, 172, 153, 169, 179, 70, 152,
	162, 83, 144, 72, 160, 150, 117, 103, 104, 71,
	0, 138, 90, 95, 88, 126, 157, 158, 87, 182,
	77, 168, 74, 78, 167, 124, 155, 161, 118, 115,
	73, 159, 116, 114, 106, 93, 100, 132, 113, 133,
	101, 121, 120, 122, 0, 0, 0, 149, 165, 183,
	80, 0, 145, 154, 173, 174, 175, 176, 177, 178,
	0, 0, 81, 96, 92, 131, 123, 79, 102, 146,
	105, 112, 137, 181, 128, 142, 84, 164, 147, 324,
	335, 330, 331, 328, 329, 327, 326, 325, 337, 316,
	317, 318, 319, 321, 0, 332, 333, 320, 68, 75,
	109, 0, 136, 94, 166, 127, 0, 180, 89, 85,
	67, 0, 0, 0, 0, 0, 0, 0, 91, 0,
	0, 0, 0, 0, 108, 323, 110, 0, 0, 148,
	119, 0, 0, 0, 0, 314, 315, 0, 0, 0,
	0, 0, 0, 0, 0, 55, 0, 517, 281, 302,
	301, 304, 305, 306, 307, 0, 0, 82, 303, 308,
	309, 310, 0, 0, 0, 0, 295, 0, 322, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 292,
	293, 0, 0, 0, 0, 336, 0, 294, 0, 0,
	289, 290, 291, 296, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 97, 0, 0, 0, 0, 170, 0,
	0, 334, 0, 134, 0, 151, 99, 107, 69, 76,
	0, 98, 125, 139, 143, 0, 0, 0, 86, 0,
	141, 129, 163, 0, 130, 140, 111, 156, 135, 0,
	171, 172, 153, 169, 179, 70, 152, 162, 83, 144,
	72, 160, 150, 117, 103, 104, 71, 0, 138, 90,
	95, 88, 126, 157, 158, 87, 182, 77, 168, 74,
	78, 167, 124, 155, 161, 118, 115, 73, 159, 116,
	114, 106, 93, 100, 132, 113, 133, 101, 121, 120,
	122, 0, 0, 0, 149, 165, 183, 80, 0, 145,
	154, 173, 174, 175, 176, 177, 178, 0, 0, 81,
	96, 92, 131, 123, 79, 102, 146, 105, 112, 137,
	181, 128, 142, 84, 164, 147, 324, 335, 330, 331,
	328, 329, 327, 326, 325, 337, 316, 317, 318, 319,
	321, 0, 332, 333, 320, 68, 75, 109, 0, 136,
	94, 166, 127, 0, 180, 89, 85, 67, 0, 0,
	0, 0, 0, 0, 0, 91, 0, 0, 0, 0,
	0, 108, 323, 110, 0, 0, 148, 119, 0, 0,
	0, 0, 314, 315, 0, 0, 0, 0, 0, 0,
	0, 0, 55, 0, 0, 281, 302, 301, 304, 305,
	306, 307, 0, 0, 82, 303, 308, 309, 310, 0,
	0, 0, 0, 295, 0, 322, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 292, 293, 0, 0,
	0, 0, 336, 0, 294, 0, 0, 289, 290, 291,
	296, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	97, 0, 0, 0, 0, 170, 0, 0, 334, 0,
	134, 0, 151, 99, 107, 69, 76, 0, 98, 125,
	139, 143, 0, 0, 0, 86, 0, 141, 129, 163,
	0, 130, 140, 111, 156, 135, 0, 171, 172, 153,
	169, 179, 70, 152, 162, 83, 144, 72, 160, 150,
	117, 103, 104, 71, 0, 138, 90, 95, 88, 126,
	157, 158, 87, 182, 77, 168, 74, 78, 167, 124,
	155, 161, 118, 115, 73, 159, 116, 114, 106, 93,
	100, 132, 113, 133, 101, 121, 120, 122, 0, 0,
	0, 149, 165, 183, 80, 0, 145, 154, 173, 174,
	175, 176, 177, 178, 0, 0, 81, 96, 92, 131,
	123, 79, 102, 146, 105, 112, 137, 181, 128, 142,
	84, 164, 147, 324, 335, 330, 331, 328, 329, 327,
	326, 325, 337, 316, 317, 318, 319, 321, 0, 332,
	333, 320, 68, 75, 109, 0, 136, 94, 166, 127,
	0, 180, 89, 85, 67, 0, 0, 0, 0, 0,
	0, 0, 91, 0, 0, 0, 0, 0, 108, 0,
	110, 0, 0, 148, 119, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 205, 0, 0, 0, 0, 0, 0, 0,
	0, 82, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 553,
	552, 562, 563, 555, 556, 557, 558, 559, 560, 561,
	554, 0, 0, 564, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 97, 0, 0,
	0, 0, 170, 0, 0, 0, 0, 134, 0, 151,
	99, 107, 69, 76, 0, 98, 125, 139, 143, 0,
	0, 0, 86, 0, 141, 129, 163, 0, 130, 140,
	111, 156, 135, 0, 171, 172, 153, 169, 179, 70,
	152, 162, 83, 144, 72, 160, 150, 117, 103, 104,
	71, 0, 138, 90, 95, 88, 126, 157, 158, 87,
	182, 77, 168, 74, 78, 167, 124, 155, 161, 118,
	115, 73, 159, 116, 114, 106, 93, 100, 132, 113,
	133, 101, 121, 120, 122, 0, 0, 0, 149, 165,
	183, 80, 0, 145, 154, 173, 174, 175, 176, 177,
	178, 0, 0, 81, 96, 92, 131, 123, 79, 102,
	146, 105, 112, 137, 181, 128, 142, 84, 164, 147,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 127,
	0, 180, 89, 85, 67, 0, 0, 541, 0, 68,
	75, 109, 91, 136, 94, 166, 0, 0, 108, 0,
	110, 0, 0, 148, 119, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 205, 0, 543, 0, 0, 0, 0, 0,
	0, 82, 0, 0, 0, 0, 0, 538, 537, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 539, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 97, 0, 0,
	0, 0, 170, 0, 0, 0, 0, 134, 0, 151,
	99, 107, 69, 76, 0, 98, 125, 139, 143, 0,
	0, 0, 86, 0, 141, 129, 163, 0, 130, 140,
	111, 156, 135, 0, 171, 172, 153, 169, 179, 70,
	152, 162, 83, 144, 72, 160, 150, 117, 103, 104,
	71, 0, 138, 90, 95, 88, 126, 157, 158, 87,
	182, 77, 168, 74, 78, 167, 124, 155, 161, 118,
	115, 73, 159, 116, 114, 106, 93, 100, 132, 113,
	133, 101, 121, 120, 122, 0, 0, 0, 149, 165,
	183, 80, 0, 145, 154, 173, 174, 175, 176, 177,
	178, 0, 0, 81, 96, 92, 131, 123, 79, 102,
	146, 105, 112, 137, 181, 128, 142, 84, 164, 147,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 127,
	0, 180, 89, 85, 67, 0, 0, 0, 0, 68,
	75, 109, 91, 136, 94, 166, 0, 0, 108, 0,
	110, 0, 0, 148, 119, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 205, 0, 0, 0, 0, 0, 0, 0,
	0, 82, 0, 0, 0, 0, 0, 199, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 97, 201, 202,
	0, 0, 198, 0, 0, 0, 203, 134, 0, 151,
	99, 107, 69, 76, 0, 98, 125, 139, 143, 0,
	0, 0, 86, 0, 141, 129, 163, 0, 130, 140,
	111, 156, 135, 0, 171, 172, 153, 169, 179, 70,
	152, 162, 83, 144, 72, 160, 150, 117, 103, 104,
	71, 0, 138, 90, 95, 88, 126, 157, 158, 87,
	182, 77, 168, 74, 78, 167, 124, 155, 161, 118,
	115, 73, 159, 116, 114, 106, 93, 100, 132, 113,
	133, 101, 121, 120, 122, 0, 0, 0, 149, 165,
	183, 80, 0, 145, 154, 173, 174, 175, 176, 177,
	178, 0, 0, 81, 96, 92, 131, 123, 79, 102,
	146, 105, 112, 137, 181, 128, 142, 84, 164, 147,
	0, 200, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 25, 0, 0, 0, 0, 68,
	75, 109, 0, 136, 94, 166, 127, 0, 180, 89,
	85, 67, 0, 0, 0, 0, 0, 0, 0, 91,
	0, 0, 0, 0, 0, 108, 0, 110, 0, 0,
	148, 119, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 55, 0, 0, 205,
	0, 0, 0, 0, 0, 0, 0, 0, 82, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 97, 0, 0, 0, 0, 170,
	0, 0, 0, 0, 134, 0, 151, 99, 107, 69,
	76, 0, 98, 125, 139, 143, 0, 0, 0, 86,
	0, 141, 129, 163, 0, 130, 140, 111, 156, 135,
	0, 171, 172, 153, 169, 179, 70, 152, 162, 83,
	144, 72, 160, 150, 117, 103, 104, 71, 0, 138,
	90, 95, 88, 126, 157, 158, 87, 182, 77, 168,
	74, 78, 167, 124, 155, 161, 118, 115, 73, 159,
	116, 114, 106, 93, 100, 132, 113, 133, 101, 121,
	120, 122, 0, 0, 0, 149, 165, 183, 80, 0,
	145, 154, 173, 174, 175, 176, 177, 178, 0, 0,
	81, 96, 92, 131, 123, 79, 102, 146, 105, 112,
	137, 181, 128, 142, 84, 164, 147, 0, 25, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	127, 0, 180, 89, 85, 67, 68, 75, 109, 23,
	136, 94, 166, 91, 0, 0, 0, 0, 0, 108,
	0, 110, 0, 0, 148, 119, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	55, 0, 0, 634, 0, 0, 0, 0, 0, 0,
	0, 0, 82, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 97, 0,
	0, 0, 0, 170, 0, 0, 0, 0, 134, 0,
	151, 99, 107, 69, 76, 0, 98, 125, 139, 143,
	0, 0, 0, 86, 0, 141, 129, 163, 0, 130,
	140, 111, 156, 135, 0, 171, 172, 153, 169, 179,
	70, 152, 162, 83, 144, 72, 160, 150, 117, 103,
	104, 71, 0, 138, 90, 95, 88, 126, 157, 158,
	87, 182, 77, 168, 74, 78, 167, 124, 155, 161,
	118, 115, 73, 159, 116, 114, 106, 93, 100, 132,
	113, 133, 101, 121, 120, 122, 0, 0, 0, 149,
	165, 183, 80, 0, 145, 154, 173, 174, 175, 176,
	177, 178, 0, 0, 81, 96, 92, 131, 123, 79,
	102, 146, 105, 112, 137, 181, 128, 142, 84, 164,
	147, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	68, 75, 109, 23, 136, 94, 166, 127, 0, 180,
	89, 85, 67, 0, 0, 872, 0, 0, 0, 0,
	91, 0, 0, 0, 0, 0, 108, 0, 110, 0,
	0, 148, 119, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	65, 0, 64, 0, 0, 0, 0, 0, 0, 82,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 97, 0, 0, 0, 0,
	170, 0, 0, 0, 0, 134, 0, 151, 99, 107,
	69, 76, 0, 98, 125, 139, 143, 0, 0, 0,
	86, 0, 141, 129, 163, 0, 130, 140, 111, 156,
	135, 0, 171, 172, 153, 169, 179, 70, 152, 162,
	83, 144, 72, 160, 150, 117, 103, 104, 71, 0,
	138, 90, 95, 88, 126, 157, 158, 87, 182, 77,
	168, 74, 78, 167, 124, 155, 161, 118, 115, 73,
	159, 116, 114, 106, 93, 100, 132, 113, 133, 101,
	121, 120, 122, 0, 0, 0, 149, 165, 183, 80,
	0, 145, 154, 173, 174, 175, 176, 177, 178, 0,
	0, 81, 96, 92, 131, 123, 79, 102, 146, 105,
	112, 137, 181, 128, 142, 84, 164, 147, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 127, 0, 180,
	89, 85, 67, 0, 0, 872, 0, 68, 75, 109,
	91, 136, 94, 166, 0, 0, 108, 0, 110, 0,
	0, 148, 119, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	65, 0, 64, 0, 0, 0, 0, 0, 0, 82,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 97, 0, 0, 0, 0,
	170, 0, 0, 0, 0, 134, 0, 151, 99, 107,
	69, 76, 0, 98, 125, 139, 143, 0, 0, 0,
	86, 0, 141, 129, 163, 0, 870, 140, 111, 156,
	135, 0, 171, 172, 153, 169, 179, 70, 152, 162,
	83, 144, 72, 160, 150, 117, 103, 104, 71, 0,
	138, 90, 95, 88, 126, 157, 158, 87, 182, 77,
	168, 74, 78, 167, 124, 155, 161, 118, 115, 73,
	159, 116, 114, 106, 93, 100, 132, 113, 133, 101,
	121, 120, 122, 0, 0, 0, 149, 165, 183, 80,
	0, 145, 154, 173, 174, 175, 176, 177, 178, 0,
	0, 81, 96, 92, 131, 123, 79, 102, 146, 105,
	112, 137, 181, 128, 142, 84, 164, 147, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 127, 0, 180,
	89, 85, 67, 0, 0, 0, 0, 68, 75, 109,
	91, 136, 94, 166, 0, 0, 108, 0, 110, 0,
	0, 148, 119, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	205, 0, 0, 766, 0, 0, 767, 0, 0, 82,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 97, 0, 0, 0, 0,
	170, 0, 0, 0, 0, 134, 0, 151, 99, 107,
	69, 76, 0, 98, 125, 139, 143, 0, 0, 0,
	86, 0, 141, 129, 163, 0, 130, 140, 111, 156,
	135, 0, 171, 172, 153, 169, 179, 70, 152, 162,
	83, 144, 72, 160, 150, 117, 103, 104, 71, 0,
	138, 90, 95, 88, 126, 157, 158, 87, 182, 77,
	168, 74, 78, 167, 124, 155, 161, 118, 115, 73,
	159, 116, 114, 106, 93, 100, 132, 113, 133, 101,
	121, 120, 122, 0, 0, 0, 149, 165, 183, 80,
	0, 145, 154, 173, 174, 175, 176, 177, 178, 0,
	0, 81, 96, 92, 131, 123, 79, 102, 146, 105,
	112, 137, 181, 128, 142, 84, 164, 147, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 127, 0, 180, 89, 85, 67, 68, 75, 109,
	0, 136, 94, 166, 91, 0, 656, 0, 0, 0,
	108, 0, 110, 0, 0, 148, 119, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 205, 0, 655, 0, 0, 0,
	0, 0, 0, 82, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 97,
	0, 0, 0, 0, 170, 0, 0, 0, 0, 134,
	0, 151, 99, 107, 69, 76, 0, 98, 125, 139,
	143, 0, 0, 0, 86, 0, 141, 129, 163, 0,
	130, 140, 111, 156, 135, 0, 171, 172, 153, 169,
	179, 70, 152, 162, 83, 144, 72, 160, 150, 117,
	103, 104, 71, 0, 138, 90, 95, 88, 126, 157,
	158, 87, 182, 77, 168, 74, 78, 167, 124, 155,
	161, 118, 115, 73, 159, 116, 114, 106, 93, 100,
	132, 113, 133, 101, 121, 120, 122, 0, 0, 0,
	149, 165, 183, 80, 0, 145, 154, 173, 174, 175,
	176, 177, 178, 0, 0, 81, 96, 92, 131, 123,
	79, 102, 146, 105, 112, 137, 181, 128, 142, 84,
	164, 147, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 127, 0, 180, 89, 85, 67, 0, 0, 0,
	0, 68, 75, 109, 91, 136, 94, 166, 0, 0,
	108, 0, 110, 0, 0, 148, 119, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 55, 0, 0, 634, 0, 0, 0, 0, 0,
	0, 0, 0, 82, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 97,
	0, 0, 0, 0, 170, 0, 0, 0, 0, 134,
	0, 151, 99, 107, 69, 76, 0, 98, 125, 139,
	143, 0, 0, 0, 86, 0, 141, 129, 163, 0,
	130, 140, 111, 156, 135, 0, 171, 172, 153, 169,
	179, 70, 152, 162, 83, 144, 72, 160, 150, 117,
	103, 104, 71, 0, 138, 90, 95, 88, 126, 157,
	158, 87, 182, 77, 168, 74, 78, 167, 124, 155,
	161, 118, 115, 73, 159, 116, 114, 106, 93, 100,
	132, 113, 133, 101, 121, 120, 122, 0, 0, 0,
	149, 165, 183, 80, 0, 145, 154, 173, 174, 175,
	176, 177, 178, 0, 0, 81, 96, 92, 131, 123,
	79, 102, 146, 105, 112, 137, 181, 128, 142, 84,
	164, 147, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 127, 0, 180, 89, 85, 67, 0, 0, 0,
	0, 68, 75, 109, 91, 136, 94, 166, 0, 0,
	108, 0, 110, 0, 0, 148, 119, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 65, 0, 64, 0, 0, 0,
	0, 0, 0, 82, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 97,
	0, 0, 0, 0, 170, 0, 0, 0, 0, 134,
	0, 151, 99, 107, 69, 76, 0, 98, 125, 139,
	143, 0, 0, 0, 86, 0, 141, 129, 163, 0,
	130, 140, 111, 156, 135, 0, 171, 172, 153, 169,
	179, 70, 152, 162, 83, 144, 72, 160, 150, 117,
	103, 104, 71, 0, 138, 90, 95, 88, 126, 157,
	158, 87, 182, 77, 168, 74, 78, 167, 124, 155,
	161, 118, 115, 73, 159, 116, 114, 106, 93, 100,
	132, 113, 133, 101, 121, 120, 122, 0, 0, 0,
	149, 165, 183, 80, 0, 145, 154, 173, 174, 175,
	176, 177, 178, 0, 0, 81, 96, 92, 131, 123,
	79, 102, 146, 105, 112, 137, 181, 128, 142, 84,
	164, 147, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 127, 0, 180, 89, 85, 67, 0, 0, 0,
	0, 68, 75, 109, 91, 136, 94, 166, 0, 0,
	108, 0, 110, 0, 0, 148, 119, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 205, 0, 543, 0, 0, 0,
	0, 0, 0, 82, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 97,
	0, 0, 0, 0, 170, 0, 0, 0, 0, 134,
	0, 151, 99, 107, 69, 76, 0, 98, 125, 139,
	143, 0, 0, 0, 86, 0, 141, 129, 163, 0,
	130, 140, 111, 156, 135, 0, 171, 172, 153, 169,
	179, 70, 152, 162, 83, 144, 72, 160, 150, 117,
	103, 104, 71, 0, 138, 90, 95, 88, 126, 157,
	158, 87, 182, 77, 168, 74, 78, 167, 124, 155,
	161, 118, 115, 73, 159, 116, 114, 106, 93, 100,
	132, 113, 133, 101, 121, 120, 122, 0, 0, 0,
	149, 165, 183, 80, 0, 145, 154, 173, 174, 175,
	176, 177, 178, 0, 0, 81, 96, 92, 131, 123,
	79, 102, 146, 105, 112, 137, 181, 128, 142, 84,
	164, 147, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 68, 75, 109, 0, 136, 94, 166, 127, 0,
	180, 89, 85, 67, 0, 0, 0, 0, 0, 0,
	625, 91, 0, 0, 0, 0, 0, 108, 0, 110,
	0, 0, 148, 119, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 65, 0, 0, 0, 0, 0, 0, 0, 0,
	82, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 97, 0, 0, 0,
	0, 170, 0, 0, 0, 0, 134, 0, 151, 99,
	107, 69, 76, 0, 98, 125, 139, 143, 0, 0,
	0, 86, 0, 141, 129, 163, 0, 130, 140, 111,
	156, 135, 0, 171, 172, 153, 169, 179, 70, 152,
	162, 83, 144, 72, 160, 150, 117, 103, 104, 71,
	0, 138, 90, 95, 88, 126, 157, 158, 87, 182,
	77, 168, 74, 78, 167, 124, 155, 161, 118, 115,
	73, 159, 116, 114, 106, 93, 100, 132, 113, 133,
	101, 121, 120, 122, 0, 0, 0, 149, 165, 183,
	80, 0, 145, 154, 173, 174, 175, 176, 177, 178,
	0, 0, 81, 96, 92, 131, 123, 79, 102, 146,
	105, 112, 137, 181, 128, 142, 84, 164, 147, 0,
	0, 340, 0, 0, 0, 0, 0, 0, 127, 0,
	180, 89, 85, 67, 0, 0, 0, 0, 68, 75,
	109, 91, 136, 94, 166, 0, 0, 108, 0, 110,
	0, 0, 148, 119, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 65, 0, 0, 0, 0, 0, 0, 0, 0,
	82, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 97, 0, 0, 0,
	0, 170, 0, 0, 0, 0, 134, 0, 151, 99,
	107, 69, 76, 0, 98, 125, 139, 143, 0, 0,
	0, 86, 0, 141, 129, 163, 0, 130, 140, 111,
	156, 135, 0, 171, 172, 153, 169, 179, 70, 152,
	162, 83, 144, 72, 160, 150, 117, 103, 104, 71,
	0, 138, 90, 95, 88, 126, 157, 158, 87, 182,
	77, 168, 74, 78, 167, 124, 155, 161, 118, 115,
	73, 159, 116, 114, 106, 93, 100, 132, 113, 133,
	101, 121, 120, 122, 0, 0, 0, 149, 165, 183,
	80, 0, 145, 154, 173, 174, 175, 176, 177, 178,
	0, 0, 81, 96, 92, 131, 123, 79, 102, 146,
	105, 112, 137, 181, 128, 142, 84, 164, 147, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 127, 0,
	180, 89, 85, 67, 0, 0, 0, 0, 68, 75,
	109, 91, 136, 94, 166, 0, 0, 108, 0, 110,
	0, 0, 148, 119, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 65, 0, 0, 0, 0, 0, 0, 0, 0,
	82, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 97, 0, 217, 0,
	0, 170, 0, 0, 0, 0, 134, 0, 151, 99,
	107, 69, 76, 0, 98, 125, 139, 143, 0, 0,
	0, 86, 0, 141, 129, 163, 0, 130, 140, 111,
	156, 135, 0, 171, 172, 153, 169, 179, 70, 152,
	162, 83, 144, 72, 160, 150, 117, 103, 104, 71,
	0, 138, 90, 95, 88, 126, 157, 158, 87, 182,
	77, 168, 74, 78, 167, 124, 155, 161, 118, 115,
	73, 159, 116, 114, 106, 93, 100, 132, 113, 133,
	101, 121, 120, 122, 0, 0, 0, 149, 165, 183,
	80, 0, 145, 154, 173, 174, 175, 176, 177, 178,
	0, 0, 81, 96, 92, 131, 123, 79, 102, 146,
	105, 112, 137, 181, 128, 142, 84, 164, 147, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 127, 0,
	180, 89, 85, 67, 0, 0, 0, 0, 68, 75,
	109, 91, 136, 94, 166, 0, 0, 108, 0, 110,
	0, 0, 148, 119, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 205, 0, 0, 0, 0, 0, 0, 0, 0,
	82, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 97, 0, 0, 0,
	0, 170, 0, 0, 0, 0, 134, 0, 151, 99,
	107, 69, 76, 0, 98, 125, 139, 143, 0, 0,
	0, 86, 0, 141, 129, 163, 0, 130, 140, 111,
	156, 135, 0, 171, 172, 153, 169, 179, 70, 152,
	162, 83, 144, 72, 160, 150, 117, 103, 104, 71,
	0, 138, 90, 95, 88, 126, 157, 158, 87, 182,
	77, 168, 74, 78, 167, 124, 155, 161, 118, 115,
	73, 159, 116, 114, 106, 93, 100, 132, 113, 133,
	101, 121, 120, 122, 0, 0, 0, 149, 165, 183,
	80, 0, 145, 154, 173, 174, 175, 176, 177, 178,
	0, 0, 81, 96, 92, 131, 123, 79, 102, 146,
	105, 112, 137, 181, 128, 142, 84, 164, 147, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 127, 0,
	180, 89, 85, 67, 0, 0, 0, 0, 68, 75,
	109, 91, 136, 94, 166, 0, 0, 108, 0, 110,
	0, 0, 148, 119, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 65, 0, 0, 0, 0, 0, 0, 0, 0,
	82, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 97, 0, 0, 0,
	0, 170, 0, 0, 0, 0, 134, 0, 151, 99,
	107, 69, 76, 0, 98, 125, 139, 143, 0, 0,
	0, 86, 0, 141, 129, 163, 0, 130, 140, 111,
	156, 135, 0, 171, 172, 153, 169, 179, 70, 152,
	162, 83, 144, 72, 160, 150, 117, 103, 104, 71,
	0, 138, 90, 95, 88, 126, 157, 158, 87, 182,
	77, 168, 74, 78, 167, 124, 155, 161, 118, 115,
	73, 159, 116, 114, 106, 93, 100, 132, 113, 133,
	101, 121, 120, 122, 0, 0, 0, 149, 165, 183,
	80, 0, 145, 154, 173, 174, 175, 176, 177, 178,
	0, 0, 81, 96, 92, 131, 123, 79, 102, 146,
	105, 112, 137, 181, 128, 142, 84, 164, 147, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 127, 0,
	180, 89, 85, 67, 0, 0, 0, 0, 68, 75,
	109, 91, 136, 94, 166, 0, 0, 108, 0, 110,
	0, 0, 148, 119, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 281, 0, 0, 0, 0, 0, 0, 0, 0,
	82, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 97, 0, 0, 0,
	0, 170, 0, 0, 0, 0, 134, 0, 151, 99,
	107, 69, 76, 0, 98, 125, 139, 143, 0, 0,
	0, 86, 0, 141, 129, 163, 0, 130, 140, 111,
	156, 135, 0, 171, 172, 153, 169, 179, 70, 152,
	162, 83, 144, 72, 160, 150, 117, 103, 104, 71,
	0, 138, 90, 95, 88, 126, 157, 158, 87, 182,
	77, 168, 74, 78, 167, 124, 155, 161, 118, 115,
	73, 159, 116, 114, 106, 93, 100, 132, 113, 133,
	101, 121, 120, 122, 0, 0, 0, 149, 165, 183,
	80, 0, 145, 154, 173, 174, 175, 176, 177, 178,
	0, 0, 81, 96, 92, 131, 123, 79, 102, 146,
	105, 112, 137, 181, 128, 142, 84, 164, 147, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 68, 75,
	109, 0, 136, 94, 166,
}
var yyPact = [...]int{

	1780, -1000, -198, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, 921, 11713, 970, -1000, -1000, -1000, -1000, -1000,
	-1000, 280, 9751, 42, 135, 17, 12690, 132, 2123, 13170,
	-1000, 18, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -72,
	-83, -1000, 81, -1000, -1000, -1000, -1000, -1000, 912, 918,
	78, -1000, 884, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, 771, 883, 806, -1000, 7472, 95,
	95, 12450, 5929, -1000, -1000, 264, 13170, 123, 13170, -154,
	91, 91, 91, -1000, -1000, -1000, -1000, 128, 13170, 235,
	-1000, 13170, 82, 608, 82, 82, 82, 13170, -1000, 189,
	13170, 550, 844, 3499, 80, 3499, 3499, -1000, 3499, 3499,
	-1000, 3499, 24, 3499, -53, 938, -1000, -1000, -1000, -1000,
	-37, -1000, 3499, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, 474, 852, 8243, 8243,
	-1000, 11713, 725, 921, -1000, 81, -1000, -1000, -1000, 837,
	-1000, -1000, 335, 959, -1000, 9511, 188, -1000, 8243, 2025,
	725, -1000, -1000, 725, -1000, -1000, 154, -1000, -1000, 9014,
	9014, 9014, 9014, 9014, 9014, 9014, 9014, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, 725, -1000, 6701, 725, 725, 725, 725, 725, 725,
	725, 725, 8243, 725, 725, 725, 725, 725, 725, 725,
	725, 725, 725, 725, 725, 725, 725, 725, 12210, 11473,
	13170, 713, 576, -1000, -1000, 183, 710, 5659, -79, -1000,
	-1000, -1000, 276, 11233, -1000, -1000, -1000, 842, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, 597, 13170, -1000, 2263,
	-1000, 516, 3499, 113, 513, 314, 510, 13170, 13170, 3499,
	32, 68, 126, 13170, 717, 106, 13170, 877, 768, 13170,
	506, 495, -1000, 5389, -1000, 3499, 3499, -1000, -1000, -1000,
	3499, 3499, 3499, 13170, 3499, 3499, -1000, -1000, -1000, -1000,
	-1000, 3499, 3499, -1000, 954, 322, -1000, -1000, -1000, -1000,
	8243, -1000, 767, -1000, -1000, -1000, -1000, -1000, -1000, 965,
	228, 442, 180, 716, -1000, 444, -1000, 81, 912, 474,
	806, 10989, 780, -1000, -1000, 13170, -1000, 8243, 8243, 393,
	-1000, 11953, -1000, -1000, 4309, 238, 9014, 417, 295, 9014,
	9014, 9014, 9014, 9014, 9014, 9014, 9014, 9014, 9014, 9014,
	9014, 9014, 9014, 9014, 370, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, 490, -1000, 81, 497, 497, 199, 199,
	199, 199, 199, 199, 199, 9271, 6958, 474, 594, 260,
	6701, 7472, 7472, 8243, 8243, 7986, 7729, 7472, 893, 289,
	260, 13410, -1000, -1000, 8757, -1000, -1000, -1000, -1000, -1000,
	474, -1000, -1000, -1000, -1000, -1000, -1000, -1000, 12930, 12930,
	7472, 7472, 7472, 7472, 47, 13170, -1000, 676, 738, -1000,
	-1000, -1000, 879, 10252, 725, 10749, 47, 652, 11473, 13170,
	-1000, -1000, 11473, 13170, 4039, 5119, 710, -79, 694, -1000,
	-118, -85, 6443, 198, -1000, -1000, -1000, -1000, 3229, 191,
	638, 304, -47, -1000, -1000, -1000, 742, -1000, 742, 742,
	742, 742, -16, -16, -16, -16, -1000, -1000, -1000, -1000,
	-1000, 754, 753, -1000, 742, 742, 742, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, 752, 752, 752, 745, 745,
	757, -1000, 13170, 3499, 876, 3499, -1000, 92, -1000, 12930,
	12930, 13170, 13170, 146, 13170, 13170, 708, -1000, 13170, 3499,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, 13170, 352, 13170, 13170, 260,
	13170, -1000, 818, 8243, 8243, 4849, 8243, -1000, -1000, -1000,
	474, 852, -1000, 893, 920, -1000, 832, 828, 7472, -1000,
	-1000, 238, 292, -1000, -1000, 452, -1000, -1000, -1000, -1000,
	177, 725, -1000, 1749, -1000, -1000, -1000, -1000, 417, 9014,
	9014, 9014, 336, 1749, 2513, 1330, 928, 199, 400, 400,
	208, 208, 208, 208, 208, 347, 347, -1000, -1000, -1000,
	474, -1000, -1000, -1000, 474, 7472, 706, -1000, -1000, 8243,
	-1000, 474, 588, 588, 405, 473, 298, 947, 588, 259,
	940, 588, 588, 7472, 281, -1000, 8243, 474, -1000, 176,
	-1000, 493, 703, 695, 588, 474, 588, 588, 116, 725,
	-1000, 13410, 11473, 11473, 11473, 11473, 11473, -1000, 798, 797,
	-1000, 794, 784, 834, 13170, -1000, 590, 10252, 12930, 182,
	725, -1000, 11713, 934, 11473, 691, -1000, 691, -1000, 175,
	-1000, -1000, 694, -79, -96, -1000, -1000, -1000, -1000, 260,
	-1000, 467, 679, 2959, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, 747, 468, -1000, 861, 214, 226, 453, 859, -1000,
	-1000, -1000, 853, -1000, 328, -59, -1000, -1000, 412, -16,
	-16, -1000, -1000, 198, 838, 198, 198, 198, 427, 427,
	-1000, -1000, -1000, -1000, 383, -1000, -1000, -1000, 364, -1000,
	765, 12930, 3499, -1000, -1000, -1000, -1000, 258, 258, 213,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, 46, 756, -1000, -1000, -1000, 31, 28, 103, -1000,
	3499, -1000, 322, -1000, 426, 8243, -1000, -1000, -1000, 816,
	260, 260, 160, -1000, -1000, -1000, 13170, -1000, -1000, -1000,
	-1000, 682, -1000, -1000, -1000, 3769, 7472, -1000, 336, 1749,
	2497, -1000, 9014, 9014, -1000, -1000, 588, 7472, 260, -1000,
	-1000, -1000, 71, 370, 71, 9014, 9014, -1000, 9014, 9014,
	-1000, -167, 685, 265, -1000, 8243, 440, -1000, 4849, -1000,
	9014, 9014, -1000, -1000, -1000, -1000, 764, 13410, 725, -1000,
	10008, 12930, 696, -1000, 275, 738, 751, 763, 907, -1000,
	-1000, -1000, -1000, 788, -1000, 785, -1000, -1000, -1000, -1000,
	474, 677, -1000, 215, -1000, 121, 118, 117, 12930, -1000,
	921, 8243, 691, -1000, -1000, 195, -1000, -1000, -136, -90,
	-1000, -1000, -1000, 3229, -1000, 3229, 12930, 63, -1000, 453,
	453, -1000, -1000, -1000, 746, 762, 9014, -1000, -1000, -1000,
	631, 198, 198, -1000, 219, -1000, -1000, -1000, 582, -1000,
	578, 675, 572, 13170, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	13170, -1000, -1000, -1000, -1000, -1000, 12930, -179, 439, 12930,
	12930, 13170, -1000, 352, -1000, 260, -1000, 4579, -1000, 934,
	11473, -1000, -1000, 474, -1000, 9014, 1749, 1749, -1000, -1000,
	474, 742, 742, -1000, 742, 745, -1000, 742, 9, 742,
	5, 474, 474, 2401, 2386, 1899, 1575, 725, -162, -1000,
	260, 8243, -1000, 1522, 1464, -1000, 854, 643, 669, -1000,
	-1000, 7215, 474, 569, 157, 565, -1000, 921, 13410, 8243,
	-1000, -1000, 8243, 744, -1000, 8243, -1000, -1000, -1000, 879,
	12930, 6186, 725, 725, 725, 565, 912, 260, -1000, -1000,
	-1000, -1000, 2959, -1000, 563, -1000, 742, -1000, -1000, -1000,
	12930, -43, 964, 1749, -1000, -1000, -1000, -1000, -1000, -16,
	420, -16, 361, -1000, 355, 3499, -1000, -1000, -1000, -1000,
	865, -1000, 4579, -1000, -1000, 740, -1000, -1000, -1000, 922,
	674, -1000, 1749, -1000, -1000, 115, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, 9014, 9014, 9014, 9014, 9014, 474,
	416, 260, 9014, 9014, 858, -1000, 725, -1000, -1000, 97,
	12930, 12930, -1000, 12930, 912, -1000, 260, 260, 12930, 260,
	13170, -1000, -1000, 260, 725, 725, 12930, 12930, 12930, 10509,
	-1000, 163, 12930, -1000, 555, -1000, 187, -1000, -123, 198,
	-1000, 198, 556, 525, -1000, 725, 673, -1000, 273, 12930,
	924, 908, -1000, -1000, 493, 493, 493, 493, 12, -1000,
	-1000, 493, 493, 963, -1000, 725, -1000, 81, 147, -1000,
	-1000, -1000, 544, -1000, 11473, 13410, 524, 524, 524, 182,
	163, -1000, 436, 242, 415, -1000, 60, 12930, 333, 857,
	-1000, 856, -1000, -1000, -1000, -1000, -1000, 44, 4579, 3229,
	522, 36, 8243, 8243, -1000, -1000, -1000, -1000, 474, 45,
	-183, -1000, -1000, 13410, 669, 474, 12930, -1000, 711, 474,
	-1000, -1000, -1000, -1000, -1000, -1000, 342, -1000, -1000, 13170,
	-1000, -1000, 394, -1000, -1000, 481, -1000, 12930, -1000, -1000,
	756, -1000, 770, 260, 653, -1000, 815, -173, -188, 646,
	-1000, -1000, -1000, -1000, -1000, 739, -1000, -1000, 44, 826,
	-179, 645, -1000, 900, 888, 8243, -1000, 809, -1000, 12930,
	-1000, 43, -1000, 770, -1000, 8243, 260, -181, 451, 40,
	-1000, 260, -186, 761, 725, -195, 759, -1000, 958, 8500,
	-1000, -1000, 960, 171, 171, 493, 474, -1000, -1000, -1000,
	69, 389, -1000, -1000, -1000, -1000, -1000, -1000,
}
var yyPgo = [...]int{

	0, 1188, 30, 185, 1187, 1186, 105, 1185, 1184, 1183,
	1182, 1181, 1180, 1178, 1175, 1174, 1173, 1171, 1170, 1169,
	1166, 1164, 1163, 1162, 1161, 1160, 1157, 1155, 138, 1154,
	1153, 1152, 88, 1150, 79, 1149, 1147, 49, 304, 68,
	51, 1189, 1146, 46, 28, 62, 1145, 1144, 1143, 26,
	1139, 41, 1136, 1130, 80, 1129, 1125, 59, 1122, 1121,
	1496, 1118, 71, 1117, 15, 54, 1116, 1113, 1112, 1111,
	74, 1054, 1110, 1107, 16, 1106, 1104, 100, 1103, 57,
	9, 14, 17, 25, 1102, 58, 11, 1100, 64, 1096,
	1095, 1094, 1093, 34, 1092, 65, 1091, 23, 63, 1089,
	1088, 4, 1085, 7, 70, 39, 36, 5, 75, 69,
	1083, 27, 73, 60, 1082, 1081, 182, 1080, 1079, 53,
	1078, 1077, 32, 164, 181, 1075, 1070, 1067, 1066, 43,
	0, 513, 72, 76, 1061, 1053, 1052, 1556, 45, 19,
	22, 29, 47, 52, 50, 1051, 1050, 48, 1047, 1046,
	1044, 1039, 1038, 1025, 1024, 109, 1022, 1021, 1020, 20,
	21, 1019, 1018, 66, 42, 1017, 1014, 1013, 56, 67,
	1012, 1011, 55, 44, 1007, 1003, 1002, 1001, 998, 35,
	12, 997, 18, 993, 13, 992, 38, 991, 6, 990,
	10, 988, 3, 984, 8, 61, 1, 982, 2, 979,
	978, 346, 579, 81, 977, 82,
}
var yyR1 = [...]int{

	0, 199, 200, 200, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 2, 2, 2, 2, 7, 7,
	6, 8, 3, 4, 5, 5, 9, 9, 31, 31,
	10, 11, 11, 11, 11, 203, 203, 54, 54, 55,
	55, 104, 104, 12, 12, 12, 12, 109, 109, 113,
	113, 113, 114, 114, 114, 114, 145, 145, 13, 13,
	13, 13, 13, 13, 13, 194, 194, 193, 192, 192,
	191, 191, 190, 19, 175, 177, 177, 176, 176, 176,
	176, 169, 148, 148, 148, 148, 151, 151, 149, 149,
	149, 149, 149, 149, 149, 149, 149, 150, 150, 150,
	150, 150, 152, 152, 152, 152, 152, 153, 153, 153,
	153, 153, 153, 153, 153, 153, 153, 153, 153, 153,
	153, 153, 154, 154, 154, 154, 154, 154, 154, 154,
	168, 168, 155, 155, 163, 163, 164, 164, 164, 161,
	161, 162, 162, 165, 165, 165, 157, 157, 158, 158,
	166, 166, 159, 159, 159, 160, 160, 160, 167, 167,
	167, 167, 167, 156, 156, 170, 170, 185, 185, 184,
	184, 184, 174, 174, 181, 181, 181, 181, 181, 172,
	172, 173, 173, 183, 183, 182, 171, 171, 186, 186,
	186, 186, 197, 198, 196, 196, 196, 196, 196, 178,
	178, 178, 179, 179, 179, 180, 180, 180, 14, 14,
	14, 14, 14, 14, 14, 14, 14, 14, 14, 14,
	14, 195, 195, 195, 195, 195, 195, 195, 195, 195,
	195, 195, 189, 187, 187, 188, 188, 15, 20, 20,
	16, 16, 16, 16, 16, 17, 17, 21, 22, 22,
	22, 22, 22, 22, 22, 22, 22, 22, 22, 22,
	22, 22, 22, 22, 22, 22, 22, 22, 22, 22,
	22, 22, 22, 22, 22, 22, 22, 22, 22, 22,
	120, 120, 118, 118, 121, 121, 119, 119, 119, 122,
	122, 122, 146, 146, 146, 23, 23, 25, 25, 26,
	27, 24, 24, 24, 24, 24, 24, 24, 18, 204,
	28, 29, 29, 30, 30, 30, 34, 34, 34, 32,
	32, 33, 33, 39, 39, 38, 38, 40, 40, 40,
	40, 134, 134, 134, 133, 133, 42, 42, 43, 43,
	44, 44, 45, 45, 45, 45, 45, 63, 63, 48,
	48, 47, 47, 49, 50, 50, 50, 103, 103, 105,
	105, 46, 46, 46, 46, 51, 51, 52, 52, 53,
	53, 141, 141, 140, 140, 140, 139, 139, 56, 56,
	56, 58, 57, 57, 57, 57, 59, 59, 61, 61,
	60, 60, 62, 64, 64, 64, 64, 65, 65, 41,
	41, 41, 41, 41, 41, 41, 117, 117, 67, 67,
	66, 66, 66, 66, 66, 66, 66, 66, 66, 66,
	78, 78, 78, 78, 78, 78, 68, 68, 68, 68,
	68, 68, 68, 37, 37, 79, 79, 79, 85, 80,
	80, 71, 71, 71, 71, 71, 71, 71, 71, 71,
	71, 71, 71, 71, 71, 71, 71, 71, 71, 71,
	71, 71, 71, 71, 71, 71, 71, 71, 71, 71,
	71, 71, 71, 75, 75, 75, 73, 73, 73, 73,
	73, 73, 73, 73, 73, 73, 73, 73, 73, 74,
	74, 74, 74, 74, 74, 74, 74, 74, 74, 74,
	74, 74, 74, 74, 74, 205, 205, 77, 76, 76,
	76, 76, 76, 76, 35, 35, 35, 35, 35, 144,
	144, 147, 147, 147, 147, 147, 147, 147, 147, 147,
	147, 147, 147, 147, 89, 89, 36, 36, 87, 87,
	88, 90, 90, 86, 86, 86, 70, 70, 70, 70,
	70, 70, 70, 70, 72, 72, 72, 91, 91, 92,
	92, 93, 93, 94, 94, 95, 96, 96, 96, 97,
	97, 97, 97, 98, 98, 98, 99, 99, 100, 100,
	101, 101, 101, 69, 69, 69, 69, 69, 69, 102,
	102, 102, 102, 106, 106, 81, 81, 83, 83, 82,
	84, 107, 107, 111, 108, 108, 112, 112, 112, 112,
	110, 110, 110, 136, 136, 136, 115, 115, 123, 123,
	124, 124, 116, 116, 125, 125, 125, 125, 125, 125,
	125, 125, 125, 125, 126, 126, 126, 127, 127, 128,
	128, 128, 135, 135, 131, 131, 132, 132, 137, 137,
	138, 138, 129, 129, 129, 129, 129, 129, 129, 129,
	129, 129, 129, 129, 129, 129, 129, 129, 129, 129,
	129, 129, 129, 129, 129, 129, 129, 129, 129, 129,
	129, 129, 129, 129, 129, 129, 129, 129, 129, 129,
	129, 129, 129, 129, 129, 129, 129, 129, 129, 129,
	129, 129, 129, 129, 129, 129, 129, 129, 129, 129,
	129, 129, 129, 129, 129, 129, 129, 129, 129, 129,
	129, 129, 129, 129, 129, 129, 129, 129, 129, 129,
	129, 129, 129, 129, 129, 129, 129, 129, 129, 129,
	129, 129, 129, 129, 129, 129, 129, 129, 129, 130,
	130, 130, 130, 130, 130, 130, 130, 130, 130, 130,
	130, 130, 130, 130, 130, 130, 130, 130, 130, 130,
	130, 130, 130, 130, 130, 130, 130, 130, 130, 130,
	130, 130, 130, 130, 130, 130, 130, 130, 130, 130,
	130, 130, 130, 130, 130, 130, 130, 130, 130, 130,
	130, 130, 130, 130, 130, 130, 130, 130, 130, 130,
	130, 130, 130, 130, 130, 130, 130, 130, 130, 130,
	130, 130, 130, 130, 130, 130, 130, 130, 130, 130,
	130, 130, 130, 130, 130, 130, 130, 130, 130, 130,
	130, 130, 130, 130, 130, 130, 130, 130, 130, 130,
	130, 130, 130, 130, 130, 130, 130, 130, 130, 130,
	130, 130, 130, 130, 130, 130, 201, 202, 142, 143,
	143, 143,
}
var yyR2 = [...]int{

	0, 2, 0, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 0, 4, 3, 6, 7, 1, 3,
	5, 5, 11, 3, 1, 3, 7, 8, 1, 1,
	9, 8, 7, 6, 6, 1, 1, 1, 3, 1,
	3, 0, 4, 3, 4, 5, 4, 1, 3, 3,
	2, 2, 2, 2, 2, 1, 1, 1, 2, 2,
	8, 4, 6, 5, 5, 0, 2, 1, 0, 2,
	1, 3, 3, 4, 4, 2, 4, 1, 3, 3,
	3, 8, 3, 1, 1, 1, 2, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 2, 2, 2,
	2, 2, 1, 2, 2, 2, 1, 4, 4, 2,
	2, 3, 3, 3, 3, 1, 1, 1, 1, 1,
	6, 6, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 3, 0, 3, 0, 5, 0, 3, 5, 0,
	1, 0, 1, 0, 1, 2, 0, 2, 0, 3,
	0, 1, 0, 3, 3, 0, 2, 2, 0, 2,
	1, 2, 1, 0, 2, 5, 4, 1, 2, 2,
	3, 2, 0, 1, 2, 3, 3, 2, 2, 1,
	1, 0, 1, 1, 3, 2, 3, 1, 10, 11,
	11, 12, 3, 3, 1, 1, 2, 2, 2, 0,
	1, 3, 1, 2, 3, 1, 1, 1, 6, 7,
	7, 7, 7, 4, 5, 7, 5, 5, 5, 12,
	7, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 7, 1, 3, 8, 8, 3, 3, 5,
	4, 6, 5, 4, 4, 3, 2, 3, 4, 4,
	3, 4, 4, 4, 4, 4, 4, 3, 3, 2,
	3, 3, 2, 3, 4, 3, 7, 5, 4, 2,
	4, 2, 2, 2, 2, 3, 3, 5, 2, 3,
	1, 1, 0, 1, 1, 1, 0, 2, 2, 0,
	2, 2, 0, 1, 1, 2, 1, 1, 2, 1,
	1, 2, 2, 2, 2, 2, 3, 3, 2, 0,
	2, 0, 2, 1, 2, 2, 0, 1, 1, 0,
	1, 0, 1, 0, 1, 1, 3, 1, 2, 3,
	5, 0, 1, 2, 1, 1, 0, 2, 1, 3,
	1, 1, 1, 3, 1, 3, 6, 3, 7, 0,
	1, 1, 3, 3, 1, 4, 4, 1, 3, 1,
	3, 4, 4, 4, 3, 2, 4, 0, 1, 0,
	2, 0, 1, 0, 1, 2, 1, 1, 1, 2,
	2, 1, 2, 3, 2, 3, 2, 2, 2, 1,
	1, 3, 3, 0, 5, 5, 5, 0, 2, 1,
	3, 3, 2, 3, 1, 2, 0, 3, 1, 1,
	3, 3, 4, 4, 5, 3, 4, 5, 6, 2,
	1, 2, 1, 2, 1, 2, 1, 1, 1, 1,
	1, 1, 1, 0, 2, 1, 1, 1, 3, 1,
	3, 1, 1, 1, 1, 1, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 2, 2, 2, 2, 2, 2, 2, 3, 1,
	1, 1, 1, 4, 5, 6, 4, 4, 6, 6,
	6, 8, 8, 8, 8, 9, 7, 5, 4, 2,
	2, 2, 2, 2, 2, 2, 2, 2, 2, 2,
	2, 2, 2, 8, 8, 0, 2, 3, 4, 4,
	4, 4, 4, 4, 0, 3, 4, 7, 3, 1,
	1, 2, 3, 3, 1, 2, 2, 1, 2, 1,
	2, 2, 1, 2, 0, 1, 0, 2, 1, 2,
	4, 0, 2, 1, 3, 5, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 2, 2, 0, 3, 0,
	2, 0, 3, 1, 3, 2, 0, 1, 1, 0,
	2, 4, 4, 0, 2, 4, 0, 2, 1, 3,
	2, 3, 2, 2, 1, 3, 5, 4, 6, 1,
	3, 3, 5, 0, 5, 1, 3, 1, 2, 3,
	1, 1, 3, 3, 1, 3, 3, 3, 3, 3,
	1, 2, 1, 1, 1, 1, 1, 1, 0, 2,
	0, 3, 0, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 0, 1, 1, 1, 1, 0,
	1, 1, 0, 2, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 0, 0,
	1, 1,
}
var yyChk = [...]int{

	-1000, -199, -1, -2, -8, -9, -10, -11, -12, -13,
	-14, -15, -16, -17, -21, -22, -23, -25, -26, -27,
	-24, -18, -3, 271, -4, 6, 7, -31, 9, 10,
	34, -19, 120, 121, 123, 122, 155, 124, 148, 54,
	168, 169, 171, 172, 29, 149, 150, 153, 154, 35,
	36, 126, -201, 8, 258, 58, -200, 275, -93, 15,
	-7, -6, -139, -137, 63, 61, -130, 23, 268, 141,
	168, 179, 173, 200, 192, 269, 142, 190, 193, 237,
	220, 232, 70, 171, 246, 22, 151, 188, 184, 21,
	182, 31, 234, 205, 273, 183, 233, 126, 144, 139,
	206, 210, 238, 177, 178, 240, 204, 140, 37, 270,
	39, 159, 241, 208, 203, 199, 202, 176, 198, 43,
	212, 211, 213, 236, 195, 145, 185, 18, 244, 154,
	157, 235, 207, 209, 136, 161, 272, 242, 181, 146,
	158, 153, 245, 147, 172, 222, 239, 248, 42, 217,
	175, 138, 169, 165, 223, 196, 160, 186, 187, 201,
	174, 197, 170, 155, 247, 218, 274, 194, 191, 166,
	131, 163, 164, 224, 225, 226, 227, 228, 229, 167,
	20, 243, 189, 219, -30, 5, -28, -204, -28, -28,
	-28, -28, -28, -175, -177, 58, 94, -128, 131, 76,
	250, 127, 128, 135, -131, 61, -130, -116, 131, 227,
	133, 128, 128, 130, 131, 250, 127, 128, -60, -137,
	128, 113, 193, 237, 120, 221, 222, 234, 130, 37,
	235, 161, -146, 128, -118, 220, 224, 225, 226, 229,
	227, 167, 61, 239, 238, 230, -137, 170, -142, -142,
	-142, -142, -142, 223, 223, -142, -2, -97, 17, 16,
	-2, 59, 26, -5, -3, -201, 6, 24, 25, -34,
	44, 45, -29, -40, 104, -41, -137, -66, 78, -71,
	33, 61, -130, 27, -70, -67, -86, -84, -85, 113,
	114, 115, 102, 103, 110, 79, 116, -75, -73, -74,
	-76, 63, 62, 71, 64, 65, 66, 67, 72, 73,
	74, -131, -82, -201, 48, 49, 259, 260, 261, 262,
	267, 263, 81, 38, 249, 257, 256, 255, 253, 254,
	251, 252, 265, 266, 134, 250, 108, 258, -116, -116,
	11, -54, -55, -60, -62, -137, -108, -145, 170, -112,
	239, 238, -132, -110, -131, -129, 237, 193, 236, 125,
	77, 26, 28, 215, 80, 113, 16, 81, 112, 259,
	120, 52, 251, 252, 249, 261, 262, 250, 221, 33,
	10, 29, 149, 25, 106, 122, 84, 85, 152, 27,
	150, 74, 19, 55, 11, 13, 14, 134, 133, 96,
	130, 50, 8, 116, 30, 93, 46, 32, 48, 94,
	17, 253, 254, 35, 267, 156, 108, 53, 40, 78,
	72, 75, 56, 76, 15, 51, 95, 123, 258, 49,
	127, 6, 264, 34, 148, 47, 128, 83, 265, 266,
	132, 162, 73, 5, 135, 36, 9, 54, 57, 255,
	256, 257, 38, 82, 12, 271, -176, 94, -169, 61,
	-60, 130, -60, 258, -124, 134, -124, -124, 128, -60,
	120, 122, 125, 56, -20, -60, -123, 134, 61, -123,
	-123, -123, -60, 117, -60, 61, 34, -143, -201, -132,
	250, 61, 161, 128, 162, 131, -143, -143, -143, -143,
	-143, 165, 166, -143, -121, -120, 232, 233, 223, 231,
	12, 223, 164, -143, -142, -142, -202, 60, -98, 19,
	35, -41, -137, -94, -95, -41, -6, -201, -93, -2,
	-28, 40, -32, 25, 69, 11, -134, 77, 76, 93,
	-133, 26, -131, 63, 117, -41, -68, 96, 78, 94,
	95, 80, 99, 98, 109, 102, 103, 104, 105, 106,
	107, 108, 100, 101, 112, 86, 87, 88, 89, 90,
	91, 92, -117, -201, -85, -201, 118, 119, -71, -71,
	-71, -71, -71, -71, -71, -71, -201, -2, -80, -41,
	-201, -201, -201, -201, -201, -201, -201, -201, -201, -89,
	-41, -201, -205, -77, -201, -205, -77, -205, -77, -205,
	-201, -205, -77, -205, -77, -205, -205, -77, -201, -201,
	-201, -201, -201, -201, -61, 30, -60, -43, -44, -45,
	-46, -63, -85, -201, 61, -60, -60, -54, -203, 59,
	11, 57, -203, 59, 117, 59, -108, 170, -109, -113,
	240, 242, 86, -136, -131, 63, 33, 34, 60, 59,
	-60, -148, -151, -153, -152, -154, -149, -150, 190, 191,
	113, 194, 196, 197, 198, 199, 200, 201, 202, 203,
	204, 205, 34, 151, 186, 187, 188, 189, 206, 207,
	208, 209, 210, 211, 212, 213, 173, 192, 269, 174,
	175, 176, 177, 178, 179, 181, 182, 183, 184, 185,
	61, -143, 131, 61, 78, 61, -60, -60, -143, 163,
	163, 128, 128, -60, 59, 132, -54, 27, 56, -60,
	61, 61, -138, -137, -129, -143, -143, -143, -143, -143,
	-60, -143, -143, -143, -143, 11, -119, 11, 96, -41,
	56, 9, 96, 59, 18, 117, 59, -96, 28, 29,
	-2, -97, -202, -34, -72, -131, 64, 67, -33, 47,
	-60, -41, -41, -78, 72, 78, 73, 74, -133, 104,
	-138, -132, -129, -71, -79, -82, -85, 68, 96, 94,
	95, 80, -71, -71, -71, -71, -71, -71, -71, -71,
	-71, -71, -71, -71, -71, -71, -71, -144, 61, 63,
	61, -70, -70, -131, -39, 25, -38, -40, -202, 59,
	-202, -2, -38, -38, -41, -41, -86, 63, -38, -86,
	63, -38, -38, -32, -87, -88, 82, -86, -131, -137,
	-202, -71, -131, -131, -38, -39, -38, -38, -104, 157,
	-60, 34, 59, -56, -58, -57, -59, 46, 50, 52,
	47, 48, 49, 53, -141, 26, -43, -201, -201, -140,
	157, -139, 26, -104, 57, -43, -60, -43, -62, -137,
	104, -112, -109, 59, 241, 243, 244, 56, 75, -41,
	-160, 112, -178, -179, -180, -132, 63, 64, -169, -170,
	-171, -181, 143, -186, 136, 138, 135, -172, 144, 130,
	32, 60, -165, 72, 78, -161, 218, -155, 58, -155,
	-155, -155, -155, -159, 193, -159, -159, -159, 58, 58,
	-155, -155, -155, -163, 58, -163, -163, -164, 58, -164,
	-135, 57, -60, -143, 27, -143, -125, 125, 122, 123,
	-189, 121, 215, 193, 70, 33, 15, 259, 157, 274,
	61, 158, -131, -131, -60, -60, 125, 122, -60, -60,
	-60, -143, -60, -122, 94, 12, -137, -137, -60, 42,
	-41, -41, -138, -95, -202, -98, -115, 19, 11, 38,
	38, -38, 72, 73, 74, 117, -201, -79, -71, -71,
	-71, -37, 152, 77, -202, -202, -38, 59, -41, -202,
	-202, -202, 59, 57, 26, 11, 11, -202, 11, 11,
	-202, -202, -38, -90, -88, 84, -41, -202, 117, -202,
	59, 59, -202, -202, -202, -202, -69, 34, 38, -2,
	-201, -201, -107, -111, -86, -44, -45, -45, -44, -45,
	46, 46, 46, 51, 46, 51, 46, -57, -137, -202,
	-48, -47, -49, -131, -64, 54, 133, 55, -201, -139,
	-65, 12, -43, -65, -65, 117, -113, -114, 245, 242,
	248, 61, 63, 59, -180, 86, 58, 61, 32, -172,
	-172, -173, 61, -173, 32, -157, 33, 72, -162, 219,
	64, -159, -159, -160, 34, -160, -160, -160, -168, 63,
	-168, 64, 64, 56, -131, -143, -142, -195, 137, 143,
	144, 139, 61, 130, 32, 136, 138, 157, 135, -195,
	-126, -127, 132, 26, 130, 32, 157, -194, 57, 163,
	163, 132, -143, -119, 63, -41, 43, 117, -60, -42,
	11, 104, -132, -39, -37, 77, -71, -71, -202, -40,
	-147, 113, 190, 151, 188, 184, 204, 195, 217, 186,
	218, -144, -147, -71, -71, -71, -71, 268, -93, 85,
	-41, 83, -132, -71, -71, -106, 56, -107, -81, -83,
	-82, -201, -2, -102, -131, -105, -131, -65, 59, 86,
	-52, -51, 56, 57, -53, 56, -51, 46, 46, -202,
	59, 97, 130, 130, 130, -105, -93, -41, -65, 242,
	246, 247, -179, -180, -183, -182, -131, -186, -173, -173,
	58, -158, 56, -71, 60, -160, -160, 61, 113, 60,
	59, 60, 59, 60, 59, -60, -142, -142, -60, -142,
	-131, -192, 271, -193, 61, -131, -131, -60, -122, -65,
	-43, -202, -71, -202, -155, -155, -155, -164, -155, 178,
	-155, 178, -202, -202, 19, 19, 19, 19, -201, -36,
	264, -41, 59, 59, 31, -106, 59, -202, -202, -202,
	59, 117, -202, 59, -93, -111, -41, -41, 58, -41,
	-141, -49, -50, -41, 128, 129, -201, -201, -201, -202,
	-97, 60, 59, -155, -103, -131, -166, 215, 9, -159,
	63, -159, 64, 64, -143, 30, -191, -190, -132, 58,
	-91, 13, -159, 61, -71, -71, -71, -71, -71, -202,
	63, -71, -71, 32, -83, 38, -2, -201, -131, -131,
	-131, -97, -103, -137, -201, -201, -103, -103, -103, -140,
	-185, -184, 57, 140, 70, -182, 60, 59, -167, 136,
	32, 135, -74, -160, -160, 60, 60, -201, 59, 86,
	-103, -92, 14, 16, -202, -202, -202, -202, -35, 96,
	271, -202, -202, 9, -81, -2, 117, 60, -44, -86,
	-202, -202, -202, -64, -184, 61, -174, 86, 63, 146,
	-131, -156, 70, 32, 32, -187, -188, 157, -190, -180,
	60, -99, 162, -41, -80, -202, 269, 53, 272, -107,
	-202, -131, -202, -202, 64, -60, 63, -202, 59, -131,
	-194, -100, -101, 56, 23, 22, 43, 270, 273, 58,
	-188, 38, -192, 59, 20, 21, -41, 43, -103, 159,
	-101, -41, 271, 60, 160, 272, -197, -198, 56, -201,
	273, -198, 56, 10, 9, -71, 156, -196, 147, 142,
	145, 34, -196, -202, -202, 141, 33, 72,
}
var yyDef = [...]int{

	23, -2, 2, 4, 5, 6, 7, 8, 9, 10,
	11, 12, 13, 14, 15, 16, 17, 18, 19, 20,
	21, 22, 571, 0, 0, 319, 319, 319, 319, 319,
	319, 0, 649, 632, 0, 0, 0, 0, -2, 306,
	307, 0, 309, 310, 878, 878, 878, 878, 878, 0,
	0, 878, 0, 38, 39, 876, 1, 3, 579, 0,
	0, 28, 0, 386, 387, 658, 659, 759, 760, 761,
	762, 763, 764, 765, 766, 767, 768, 769, 770, 771,
	772, 773, 774, 775, 776, 777, 778, 779, 780, 781,
	782, 783, 784, 785, 786, 787, 788, 789, 790, 791,
	792, 793, 794, 795, 796, 797, 798, 799, 800, 801,
	802, 803, 804, 805, 806, 807, 808, 809, 810, 811,
	812, 813, 814, 815, 816, 817, 818, 819, 820, 821,
	822, 823, 824, 825, 826, 827, 828, 829, 830, 831,
	832, 833, 834, 835, 836, 837, 838, 839, 840, 841,
	842, 843, 844, 845, 846, 847, 848, 849, 850, 851,
	852, 853, 854, 855, 856, 857, 858, 859, 860, 861,
	862, 863, 864, 865, 866, 867, 868, 869, 870, 871,
	872, 873, 874, 875, 0, 323, 326, 321, 0, 632,
	632, 0, 0, 68, 69, 0, 0, 0, 862, 0,
	630, 630, 630, 650, 651, 654, 655, 0, 0, 0,
	633, 0, 628, 0, 628, 628, 628, 0, 256, 400,
	0, 0, 0, 879, 0, 879, 879, 269, 879, 879,
	272, 879, 0, 879, 0, 279, 281, 282, 283, 284,
	0, 288, 879, 303, 304, 293, 305, 308, 311, 312,
	313, 314, 315, 878, 878, 318, 0, 583, 0, 0,
	25, 0, 0, 571, 34, 0, 319, 324, 325, 329,
	327, 328, 320, 0, 337, 341, 0, 409, 0, 414,
	416, -2, -2, 0, 451, 452, 453, 454, 455, 0,
	0, 0, 0, 0, 0, 0, 0, 479, 480, 481,
	482, 556, 557, 558, 559, 560, 561, 562, 563, 418,
	419, 553, 610, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 544, 0, 515, 515, 515, 515, 515, 515,
	515, 515, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 47, 49, 400, 53, 0, 854, 614,
	-2, -2, 0, 0, 656, 657, -2, 770, -2, 662,
	663, 664, 665, 666, 667, 668, 669, 670, 671, 672,
	673, 674, 675, 676, 677, 678, 679, 680, 681, 682,
	683, 684, 685, 686, 687, 688, 689, 690, 691, 692,
	693, 694, 695, 696, 697, 698, 699, 700, 701, 702,
	703, 704, 705, 706, 707, 708, 709, 710, 711, 712,
	713, 714, 715, 716, 717, 718, 719, 720, 721, 722,
	723, 724, 725, 726, 727, 728, 729, 730, 731, 732,
	733, 734, 735, 736, 737, 738, 739, 740, 741, 742,
	743, 744, 745, 746, 747, 748, 749, 750, 751, 752,
	753, 754, 755, 756, 757, 758, 0, 0, 87, 0,
	85, 0, 879, 0, 0, 0, 0, 0, 0, 879,
	0, 0, 0, 0, 247, 0, 0, 0, 0, 0,
	0, 0, 255, 0, 257, 879, 879, 260, 880, 881,
	879, 879, 879, 0, 879, 879, 267, 268, 270, 271,
	273, 879, 879, 275, 0, 296, 294, 295, 290, 291,
	0, 285, 286, 289, 316, 317, 33, 877, 24, 0,
	0, 580, 0, 572, 573, 576, 29, 0, 579, 0,
	326, 0, 331, 330, 322, 0, 338, 0, 0, 0,
	342, 0, 344, 345, 0, 412, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 436, 437, 438, 439, 440,
	441, 442, 415, 0, 429, 0, 0, 0, 471, 472,
	473, 474, 475, 476, 477, 0, 333, 0, 0, 449,
	0, 0, 0, 0, 0, 0, 0, 0, 329, 0,
	545, 0, 499, 507, 0, 500, 508, 501, 509, 502,
	0, 503, 510, 504, 511, 505, 506, 512, 0, 0,
	0, 333, 0, 0, 51, 0, 399, 0, 348, 350,
	351, 352, -2, 0, 658, 383, -2, 0, 0, 0,
	45, 46, 0, 0, 0, 0, 54, 854, 56, 57,
	0, 0, 0, 165, 623, 624, 625, 621, 209, 0,
	0, 153, 149, 93, 94, 95, 142, 97, 142, 142,
	142, 142, 162, 162, 162, 162, 125, 126, 127, 128,
	129, 0, 0, 112, 142, 142, 142, 116, 132, 133,
	134, 135, 136, 137, 138, 139, 98, 99, 100, 101,
	102, 103, 104, 105, 106, 144, 144, 144, 146, 146,
	652, 71, 0, 879, 0, 879, 83, 0, 223, 0,
	0, 0, 0, 0, 0, 0, 250, 629, 0, 879,
	253, 254, 401, 660, 661, 258, 259, 261, 262, 263,
	264, 265, 266, 274, 278, 0, 299, 0, 0, 280,
	0, 584, 0, 0, 0, 0, 0, 575, 577, 578,
	0, 583, 35, 329, 0, 564, 0, 0, 0, 332,
	31, 410, 411, 413, 430, 0, 432, 434, 343, 339,
	0, 554, -2, 420, 421, 445, 446, 447, 0, 0,
	0, 0, 443, 425, 0, 456, 457, 458, 459, 460,
	461, 462, 463, 464, 465, 466, 467, 470, 529, 530,
	0, 468, 469, 478, 0, 0, 334, 335, 448, 0,
	609, 0, 0, 0, 0, 0, 453, 556, 0, 453,
	556, 0, 0, 0, 551, 548, 0, 0, 553, 0,
	516, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	398, 0, 0, 0, 0, 0, 0, 388, 0, 0,
	391, 0, 0, 0, 0, 382, 0, 0, 359, 403,
	822, 384, 0, 407, 0, 407, 48, 407, 50, 0,
	402, 615, 55, 0, 0, 60, 61, 616, 617, 618,
	619, 0, 84, 210, 212, 215, 216, 217, 88, 89,
	90, 0, 0, 197, 0, 0, 191, 191, 0, 189,
	190, 86, 156, 154, 0, 151, 150, 96, 0, 162,
	162, 119, 120, 165, 0, 165, 165, 165, 0, 0,
	113, 114, 115, 107, 0, 108, 109, 110, 0, 111,
	0, 0, 879, 73, 631, 74, 878, 0, 0, 644,
	224, 634, 635, 636, 637, 638, 639, 640, 641, 642,
	643, 0, 75, 226, 228, 227, 0, 0, 0, 248,
	879, 252, 296, 277, 0, 0, 297, 298, 287, 0,
	581, 582, 0, 574, 30, 26, 0, 626, 627, 565,
	566, 346, 431, 433, 435, 0, 333, 422, 443, 426,
	0, 423, 0, 0, 417, 483, 0, 0, 450, -2,
	486, 487, 0, 0, 0, 0, 0, 522, 0, 0,
	523, 0, 571, 0, 549, 0, 0, 498, 0, 517,
	0, 0, 518, 519, 520, 521, 603, 0, 0, 594,
	0, 0, 407, 611, 0, 349, 377, 379, 0, 374,
	389, 390, 392, 0, 394, 0, 396, 397, 353, 355,
	0, 360, 361, 0, 357, 0, 0, 0, 0, 385,
	571, 0, 407, 43, 44, 0, 58, 59, 0, 0,
	65, 166, 167, 0, 213, 0, 0, 0, 184, 191,
	191, 187, 192, 188, 0, 158, 0, 155, 92, 152,
	0, 165, 165, 121, 0, 122, 123, 124, 0, 140,
	0, 0, 0, 0, 653, 72, 218, 878, 231, 232,
	233, 234, 235, 236, 237, 238, 239, 240, 241, 878,
	0, 878, 645, 646, 647, 648, 0, 78, 0, 0,
	0, 0, 251, 299, 300, 301, 585, 0, 27, 407,
	0, 340, 555, 0, 424, 0, 444, 427, 484, 336,
	0, 142, 142, 534, 142, 146, 537, 142, 539, 142,
	542, 0, 0, 0, 0, 0, 0, 0, 546, 497,
	552, 0, 554, 0, 0, 36, 0, 603, 593, 605,
	607, 0, 0, 0, 599, 0, 369, 571, 0, 0,
	371, 378, 0, 0, 372, 0, 373, 393, 395, 381,
	0, 0, 0, 0, 0, 0, 579, 408, 42, 62,
	63, 64, 211, 214, 0, 193, 142, 196, 185, 186,
	0, 160, 0, 157, 143, 117, 118, 163, 164, 162,
	0, 162, 0, 147, 0, 879, 219, 220, 221, 222,
	0, 225, 0, 76, 77, 0, 230, 249, 276, 567,
	347, 485, 428, 488, 531, 162, 535, 536, 538, 540,
	541, 543, 490, 489, 0, 0, 0, 0, 0, 0,
	0, 550, 0, 0, 0, 37, 0, 608, -2, 0,
	0, 0, 52, 0, 579, 612, 613, 375, 0, 380,
	0, 362, 363, 364, 0, 0, 0, 0, 0, 383,
	41, 176, 0, 195, 0, 367, 168, 161, 0, 165,
	141, 165, 0, 0, 70, 0, 79, 80, 0, 0,
	569, 0, 532, 533, 0, 0, 0, 0, 524, 496,
	547, 0, 0, 0, 606, 0, 597, 0, 601, 600,
	370, 40, 0, 356, 0, 0, 0, 0, 0, 403,
	175, 177, 0, 182, 0, 194, 0, 0, 173, 0,
	170, 172, 159, 130, 131, 145, 148, 0, 0, 0,
	0, 586, 0, 0, 491, 493, 492, 494, 0, 0,
	0, 513, 514, 0, 596, 0, 0, 376, 0, 0,
	404, 405, 406, 358, 178, 179, 0, 183, 181, 0,
	368, 91, 0, 169, 171, 0, 243, 0, 81, 82,
	75, 32, 0, 570, 568, 495, 0, 0, 0, 604,
	-2, 602, 365, 366, 180, 0, 174, 242, 0, 0,
	78, 587, 588, 0, 0, 0, 525, 0, 528, 0,
	244, 0, 229, 0, 590, 0, 592, 526, 0, 0,
	589, 591, 0, 198, 0, 0, 199, 200, 0, 0,
	527, 201, 0, 0, 0, 0, 0, 202, 204, 205,
	0, 0, 203, 245, 246, 206, 207, 208,
}
var yyTok1 = [...]int{

	1, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 79, 3, 3, 3, 107, 99, 3,
	58, 60, 104, 102, 59, 103, 117, 105, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 275,
	87, 86, 88, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 109, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 98, 3, 110,
}
var yyTok2 = [...]int{

	2, 3, 4, 5, 6, 7, 8, 9, 10, 11,
	12, 13, 14, 15, 16, 17, 18, 19, 20, 21,
	22, 23, 24, 25, 26, 27, 28, 29, 30, 31,
	32, 33, 34, 35, 36, 37, 38, 39, 40, 41,
	42, 43, 44, 45, 46, 47, 48, 49, 50, 51,
	52, 53, 54, 55, 56, 57, 61, 62, 63, 64,
	65, 66, 67, 68, 69, 70, 71, 72, 73, 74,
	75, 76, 77, 78, 80, 81, 82, 83, 84, 85,
	89, 90, 91, 92, 93, 94, 95, 96, 97, 100,
	101, 106, 108, 111, 112, 113, 114, 115, 116, 118,
	119, 120, 121, 122, 123, 124, 125, 126, 127, 128,
	129, 130, 131, 132, 133, 134, 135, 136, 137, 138,
	139, 140, 141, 142, 143, 144, 145, 146, 147, 148,
	149, 150, 151, 152, 153, 154, 155, 156, 157, 158,
	159, 160, 161, 162, 163, 164, 165, 166, 167, 168,
	169, 170, 171, 172, 173, 174, 175, 176, 177, 178,
	179, 180, 181, 182, 183, 184, 185, 186, 187, 188,
	189, 190, 191, 192, 193, 194, 195, 196, 197, 198,
	199, 200, 201, 202, 203, 204, 205, 206, 207, 208,
	209, 210, 211, 212, 213, 214, 215, 216, 217, 218,
	219, 220, 221, 222, 223, 224, 225, 226, 227, 228,
	229, 230, 231, 232, 233, 234, 235, 236, 237, 238,
	239, 240, 241, 242, 243, 244, 245, 246, 247, 248,
	249, 250, 251, 252, 253, 254, 255, 256, 257, 258,
	259, 260, 261, 262, 263, 264, 265, 266, 267, 268,
	269, 270, 271, 272, 273, 274,
}
var yyTok3 = [...]int{
	0,
}

var yyErrorMessages = [...]struct {
	state int
	token int
	msg   string
}{}

//line yaccpar:1

/*	parser for yacc output	*/

var (
	yyDebug        = 0
	yyErrorVerbose = false
)

type yyLexer interface {
	Lex(lval *yySymType) int
	Error(s string)
}

type yyParser interface {
	Parse(yyLexer) int
	Lookahead() int
}

type yyParserImpl struct {
	lval  yySymType
	stack [yyInitialStackSize]yySymType
	char  int
}

func (p *yyParserImpl) Lookahead() int {
	return p.char
}

func yyNewParser() yyParser {
	return &yyParserImpl{}
}

const yyFlag = -1000

func yyTokname(c int) string {
	if c >= 1 && c-1 < len(yyToknames) {
		if yyToknames[c-1] != "" {
			return yyToknames[c-1]
		}
	}
	return __yyfmt__.Sprintf("tok-%v", c)
}

func yyStatname(s int) string {
	if s >= 0 && s < len(yyStatenames) {
		if yyStatenames[s] != "" {
			return yyStatenames[s]
		}
	}
	return __yyfmt__.Sprintf("state-%v", s)
}

func yyErrorMessage(state, lookAhead int) string {
	const TOKSTART = 4

	if !yyErrorVerbose {
		return "syntax error"
	}

	for _, e := range yyErrorMessages {
		if e.state == state && e.token == lookAhead {
			return "syntax error: " + e.msg
		}
	}

	res := "syntax error: unexpected " + yyTokname(lookAhead)

	// To match Bison, suggest at most four expected tokens.
	expected := make([]int, 0, 4)

	// Look for shiftable tokens.
	base := yyPact[state]
	for tok := TOKSTART; tok-1 < len(yyToknames); tok++ {
		if n := base + tok; n >= 0 && n < yyLast && yyChk[yyAct[n]] == tok {
			if len(expected) == cap(expected) {
				return res
			}
			expected = append(expected, tok)
		}
	}

	if yyDef[state] == -2 {
		i := 0
		for yyExca[i] != -1 || yyExca[i+1] != state {
			i += 2
		}

		// Look for tokens that we accept or reduce.
		for i += 2; yyExca[i] >= 0; i += 2 {
			tok := yyExca[i]
			if tok < TOKSTART || yyExca[i+1] == 0 {
				continue
			}
			if len(expected) == cap(expected) {
				return res
			}
			expected = append(expected, tok)
		}

		// If the default action is to accept or reduce, give up.
		if yyExca[i+1] != 0 {
			return res
		}
	}

	for i, tok := range expected {
		if i == 0 {
			res += ", expecting "
		} else {
			res += " or "
		}
		res += yyTokname(tok)
	}
	return res
}

func yylex1(lex yyLexer, lval *yySymType) (char, token int) {
	token = 0
	char = lex.Lex(lval)
	if char <= 0 {
		token = yyTok1[0]
		goto out
	}
	if char < len(yyTok1) {
		token = yyTok1[char]
		goto out
	}
	if char >= yyPrivate {
		if char < yyPrivate+len(yyTok2) {
			token = yyTok2[char-yyPrivate]
			goto out
		}
	}
	for i := 0; i < len(yyTok3); i += 2 {
		token = yyTok3[i+0]
		if token == char {
			token = yyTok3[i+1]
			goto out
		}
	}

out:
	if token == 0 {
		token = yyTok2[1] /* unknown char */
	}
	if yyDebug >= 3 {
		__yyfmt__.Printf("lex %s(%d)\n", yyTokname(token), uint(char))
	}
	return char, token
}

func yyParse(yylex yyLexer) int {
	return yyNewParser().Parse(yylex)
}

func (yyrcvr *yyParserImpl) Parse(yylex yyLexer) int {
	var yyn int
	var yyVAL yySymType
	var yyDollar []yySymType
	_ = yyDollar // silence set and not used
	yyS := yyrcvr.stack[:]

	Nerrs := 0   /* number of errors */
	Errflag := 0 /* error recovery flag */
	yystate := 0
	yyrcvr.char = -1
	yytoken := -1 // yyrcvr.char translated into internal numbering
	defer func() {
		// Make sure we report no lookahead when not parsing.
		yystate = -1
		yyrcvr.char = -1
		yytoken = -1
	}()
	yyp := -1
	goto yystack

ret0:
	return 0

ret1:
	return 1

yystack:
	/* put a state and value onto the stack */
	if yyDebug >= 4 {
		__yyfmt__.Printf("char %v in %v\n", yyTokname(yytoken), yyStatname(yystate))
	}

	yyp++
	if yyp >= len(yyS) {
		nyys := make([]yySymType, len(yyS)*2)
		copy(nyys, yyS)
		yyS = nyys
	}
	yyS[yyp] = yyVAL
	yyS[yyp].yys = yystate

yynewstate:
	yyn = yyPact[yystate]
	if yyn <= yyFlag {
		goto yydefault /* simple state */
	}
	if yyrcvr.char < 0 {
		yyrcvr.char, yytoken = yylex1(yylex, &yyrcvr.lval)
	}
	yyn += yytoken
	if yyn < 0 || yyn >= yyLast {
		goto yydefault
	}
	yyn = yyAct[yyn]
	if yyChk[yyn] == yytoken { /* valid shift */
		yyrcvr.char = -1
		yytoken = -1
		yyVAL = yyrcvr.lval
		yystate = yyn
		if Errflag > 0 {
			Errflag--
		}
		goto yystack
	}

yydefault:
	/* default state action */
	yyn = yyDef[yystate]
	if yyn == -2 {
		if yyrcvr.char < 0 {
			yyrcvr.char, yytoken = yylex1(yylex, &yyrcvr.lval)
		}

		/* look through exception table */
		xi := 0
		for {
			if yyExca[xi+0] == -1 && yyExca[xi+1] == yystate {
				break
			}
			xi += 2
		}
		for xi += 2; ; xi += 2 {
			yyn = yyExca[xi+0]
			if yyn < 0 || yyn == yytoken {
				break
			}
		}
		yyn = yyExca[xi+1]
		if yyn < 0 {
			goto ret0
		}
	}
	if yyn == 0 {
		/* error ... attempt to resume parsing */
		switch Errflag {
		case 0: /* brand new error */
			yylex.Error(yyErrorMessage(yystate, yytoken))
			Nerrs++
			if yyDebug >= 1 {
				__yyfmt__.Printf("%s", yyStatname(yystate))
				__yyfmt__.Printf(" saw %s\n", yyTokname(yytoken))
			}
			fallthrough

		case 1, 2: /* incompletely recovered error ... try again */
			Errflag = 3

			/* find a state where "error" is a legal shift action */
			for yyp >= 0 {
				yyn = yyPact[yyS[yyp].yys] + yyErrCode
				if yyn >= 0 && yyn < yyLast {
					yystate = yyAct[yyn] /* simulate a shift of "error" */
					if yyChk[yystate] == yyErrCode {
						goto yystack
					}
				}

				/* the current p has no shift on "error", pop stack */
				if yyDebug >= 2 {
					__yyfmt__.Printf("error recovery pops state %d\n", yyS[yyp].yys)
				}
				yyp--
			}
			/* there is no state on the stack with an error shift ... abort */
			goto ret1

		case 3: /* no shift yet; clobber input char */
			if yyDebug >= 2 {
				__yyfmt__.Printf("error recovery discards %s\n", yyTokname(yytoken))
			}
			if yytoken == yyEofCode {
				goto ret1
			}
			yyrcvr.char = -1
			yytoken = -1
			goto yynewstate /* try again in the same state */
		}
	}

	/* reduction by production yyn */
	if yyDebug >= 2 {
		__yyfmt__.Printf("reduce %v in:\n\t%v\n", yyn, yyStatname(yystate))
	}

	yynt := yyn
	yypt := yyp
	_ = yypt // guard against "declared and not used"

	yyp -= yyR2[yyn]
	// yyp is now the index of $0. Perform the default action. Iff the
	// reduced production is ε, $1 is possibly out of range.
	if yyp+1 >= len(yyS) {
		nyys := make([]yySymType, len(yyS)*2)
		copy(nyys, yyS)
		yyS = nyys
	}
	yyVAL = yyS[yyp+1]

	/* consult goto table to find next state */
	yyn = yyR1[yyn]
	yyg := yyPgo[yyn]
	yyj := yyg + yyS[yyp].yys + 1

	if yyj >= yyLast {
		yystate = yyAct[yyg]
	} else {
		yystate = yyAct[yyj]
		if yyChk[yystate] != -yyn {
			yystate = yyAct[yyg]
		}
	}
	// dummy call; replaced with literal code
	switch yynt {

	case 1:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:338
		{
			setParseTree(yylex, yyDollar[1].statement)
		}
	case 2:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:343
		{
		}
	case 3:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:344
		{
		}
	case 4:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:348
		{
			yyVAL.statement = yyDollar[1].selStmt
		}
	case 23:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:370
		{
			setParseTree(yylex, nil)
		}
	case 24:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:376
		{
			sel := yyDollar[1].selStmt.(*Select)
			sel.OrderBy = yyDollar[2].orderBy
			sel.Limit = yyDollar[3].limit
			sel.Lock = yyDollar[4].str
			yyVAL.selStmt = sel
		}
	case 25:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:384
		{
			yyVAL.selStmt = &With{CommonTableExpressions: yyDollar[2].commonTableExpressions, Select: yyDollar[3].selStmt}
		}
	case 26:
		yyDollar = yyS[yypt-6 : yypt+1]
//line sql.y:388
		{
			yyVAL.selStmt = &Union{Type: yyDollar[2].str, Left: yyDollar[1].selStmt, Right: yyDollar[3].selStmt, OrderBy: yyDollar[4].orderBy, Limit: yyDollar[5].limit, Lock: yyDollar[6].str}
		}
	case 27:
		yyDollar = yyS[yypt-7 : yypt+1]
//line sql.y:392
		{
			yyVAL.selStmt = &Select{Comments: Comments(yyDollar[2].bytes2), Cache: yyDollar[3].str, SelectExprs: SelectExprs{Nextval{Expr: yyDollar[5].expr}}, From: TableExprs{&AliasedTableExpr{Expr: yyDollar[7].tableName}}}
		}
	case 28:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:398
		{
			yyVAL.commonTableExpressions = []*CommonTableExpression{yyDollar[1].commonTableExpression}
		}
	case 29:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:402
		{
			yyVAL.commonTableExpressions = append(yyDollar[1].commonTableExpressions, yyDollar[3].commonTableExpression)
		}
	case 30:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sql.y:408
		{
			yyVAL.commonTableExpression = &CommonTableExpression{Name: yyDollar[1].tableIdent, Select: yyDollar[4].selStmt}
		}
	case 31:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sql.y:415
		{
			yyVAL.statement = &Stream{Comments: Comments(yyDollar[2].bytes2), SelectExpr: yyDollar[3].selectExpr, Table: yyDollar[5].tableName}
		}
	case 32:
		yyDollar = yyS[yypt-11 : yypt+1]
//line sql.y:422
		{
			yyVAL.selStmt = &Select{Comments: Comments(yyDollar[2].bytes2), Cache: yyDollar[3].str, Distinct: yyDollar[4].str, Hints: yyDollar[5].str, SelectExprs: yyDollar[6].selectExprs, From: yyDollar[7].tableExprs, Where: NewWhere(WhereStr, yyDollar[8].expr), GroupBy: GroupBy(yyDollar[9].exprs), Having: NewWhere(HavingStr, yyDollar[10].expr), Trigger: yyDollar[11].triggers}
		}
	case 33:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:428
		{
			yyVAL.selStmt = &ParenSelect{Select: yyDollar[2].selStmt}
		}
	case 34:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:434
		{
			yyVAL.selStmt = yyDollar[1].selStmt
		}
	case 35:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:438
		{
			yyVAL.selStmt = &ParenSelect{Select: yyDollar[2].selStmt}
		}
	case 36:
		yyDollar = yyS[yypt-7 : yypt+1]
//line sql.y:445
		{
			// insert_data returns a *Insert pre-filled with Columns & Values
			ins := yyDollar[6].ins
			ins.Action = yyDollar[1].str
			ins.Comments = yyDollar[2].bytes2
			ins.Ignore = yyDollar[3].str
			ins.Table = yyDollar[4].tableName
			ins.Partitions = yyDollar[5].partitions
			ins.OnDup = OnDup(yyDollar[7].updateExprs)
			yyVAL.statement = ins
		}
	case 37:
		yyDollar = yyS[yypt-8 : yypt+1]
//line sql.y:457
		{
			cols := make(Columns, 0, len(yyDollar[7].updateExprs))
			vals := make(ValTuple, 0, len(yyDollar[8].updateExprs))
			for _, updateList := range yyDollar[7].updateExprs {
				cols = append(cols, updateList.Name.Name)
				vals = append(vals, updateList.Expr)
			}
			yyVAL.statement = &Insert{Action: yyDollar[1].str, Comments: Comments(yyDollar[2].bytes2), Ignore: yyDollar[3].str, Table: yyDollar[4].tableName, Partitions: yyDollar[5].partitions, Columns: cols, Rows: Values{vals}, OnDup: OnDup(yyDollar[8].updateExprs)}
		}
	case 38:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:469
		{
			yyVAL.str = InsertStr
		}
	case 39:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:473
		{
			yyVAL.str = ReplaceStr
		}
	case 40:
		yyDollar = yyS[yypt-9 : yypt+1]
//line sql.y:479
		{
			yyVAL.statement = &Update{Comments: Comments(yyDollar[2].bytes2), Ignore: yyDollar[3].str, TableExprs: yyDollar[4].tableExprs, Exprs: yyDollar[6].updateExprs, Where: NewWhere(WhereStr, yyDollar[7].expr), OrderBy: yyDollar[8].orderBy, Limit: yyDollar[9].limit}
		}
	case 41:
		yyDollar = yyS[yypt-8 : yypt+1]
//line sql.y:485
		{
			yyVAL.statement = &Delete{Comments: Comments(yyDollar[2].bytes2), TableExprs: TableExprs{&AliasedTableExpr{Expr: yyDollar[4].tableName}}, Partitions: yyDollar[5].partitions, Where: NewWhere(WhereStr, yyDollar[6].expr), OrderBy: yyDollar[7].orderBy, Limit: yyDollar[8].limit}
		}
	case 42:
		yyDollar = yyS[yypt-7 : yypt+1]
//line sql.y:489
		{
			yyVAL.statement = &Delete{Comments: Comments(yyDollar[2].bytes2), Targets: yyDollar[4].tableNames, TableExprs: yyDollar[6].tableExprs, Where: NewWhere(WhereStr, yyDollar[7].expr)}
		}
	case 43:
		yyDollar = yyS[yypt-6 : yypt+1]
//line sql.y:493
		{
			yyVAL.statement = &Delete{Comments: Comments(yyDollar[2].bytes2), Targets: yyDollar[3].tableNames, TableExprs: yyDollar[5].tableExprs, Where: NewWhere(WhereStr, yyDollar[6].expr)}
		}
	case 44:
		yyDollar = yyS[yypt-6 : yypt+1]
//line sql.y:497
		{
			yyVAL.statement = &Delete{Comments: Comments(yyDollar[2].bytes2), Targets: yyDollar[3].tableNames, TableExprs: yyDollar[5].tableExprs, Where: NewWhere(WhereStr, yyDollar[6].expr)}
		}
	case 45:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:502
		{
		}
	case 46:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:503
		{
		}
	case 47:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:507
		{
			yyVAL.tableNames = TableNames{yyDollar[1].tableName}
		}
	case 48:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:511
		{
			yyVAL.tableNames = append(yyVAL.tableNames, yyDollar[3].tableName)
		}
	case 49:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:517
		{
			yyVAL.tableNames = TableNames{yyDollar[1].tableName}
		}
	case 50:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:521
		{
			yyVAL.tableNames = append(yyVAL.tableNames, yyDollar[3].tableName)
		}
	case 51:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:526
		{
			yyVAL.partitions = nil
		}
	case 52:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:530
		{
			yyVAL.partitions = yyDollar[3].partitions
		}
	case 53:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:536
		{
			yyVAL.statement = &Set{Comments: Comments(yyDollar[2].bytes2), Exprs: yyDollar[3].setExprs}
		}
	case 54:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:540
		{
			yyVAL.statement = &Set{Comments: Comments(yyDollar[2].bytes2), Scope: yyDollar[3].str, Exprs: yyDollar[4].setExprs}
		}
	case 55:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sql.y:544
		{
			yyVAL.statement = &Set{Comments: Comments(yyDollar[2].bytes2), Scope: yyDollar[3].str, Exprs: yyDollar[5].setExprs}
		}
	case 56:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:548
		{
			yyVAL.statement = &Set{Comments: Comments(yyDollar[2].bytes2), Exprs: yyDollar[4].setExprs}
		}
	case 57:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:554
		{
			yyVAL.setExprs = SetExprs{yyDollar[1].setExpr}
		}
	case 58:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:558
		{
			yyVAL.setExprs = append(yyVAL.setExprs, yyDollar[3].setExpr)
		}
	case 59:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:564
		{
			yyVAL.setExpr = &SetExpr{Name: NewColIdent(TransactionStr), Expr: NewStrVal([]byte(yyDollar[3].str))}
		}
	case 60:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:568
		{
			yyVAL.setExpr = &SetExpr{Name: NewColIdent(TransactionStr), Expr: NewStrVal([]byte(TxReadWrite))}
		}
	case 61:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:572
		{
			yyVAL.setExpr = &SetExpr{Name: NewColIdent(TransactionStr), Expr: NewStrVal([]byte(TxReadOnly))}
		}
	case 62:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:578
		{
			yyVAL.str = IsolationLevelRepeatableRead
		}
	case 63:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:582
		{
			yyVAL.str = IsolationLevelReadCommitted
		}
	case 64:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:586
		{
			yyVAL.str = IsolationLevelReadUncommitted
		}
	case 65:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:590
		{
			yyVAL.str = IsolationLevelSerializable
		}
	case 66:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:596
		{
			yyVAL.str = SessionStr
		}
	case 67:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:600
		{
			yyVAL.str = GlobalStr
		}
	case 68:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:606
		{
			yyDollar[1].ddl.TableSpec = yyDollar[2].TableSpec
			yyVAL.statement = yyDollar[1].ddl
		}
	case 69:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:611
		{
			// Create table [name] like [name]
			yyDollar[1].ddl.OptLike = yyDollar[2].optLike
			yyVAL.statement = yyDollar[1].ddl
		}
	case 70:
		yyDollar = yyS[yypt-8 : yypt+1]
//line sql.y:617
		{
			// Change this to an alter statement
			yyVAL.statement = &DDL{Action: AlterStr, Table: yyDollar[7].tableName}
		}
	case 71:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:622
		{
			yyVAL.statement = &DDL{Action: CreateStr, Table: yyDollar[3].tableName.ToViewName()}
		}
	case 72:
		yyDollar = yyS[yypt-6 : yypt+1]
//line sql.y:626
		{
			yyVAL.statement = &DDL{Action: CreateStr, Table: yyDollar[5].tableName.ToViewName()}
		}
	case 73:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sql.y:630
		{
			yyVAL.statement = &DBDDL{Action: CreateStr, DBName: string(yyDollar[4].bytes)}
		}
	case 74:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sql.y:634
		{
			yyVAL.statement = &DBDDL{Action: CreateStr, DBName: string(yyDollar[4].bytes)}
		}
	case 75:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:639
		{
			yyVAL.colIdent = NewColIdent("")
		}
	case 76:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:643
		{
			yyVAL.colIdent = yyDollar[2].colIdent
		}
	case 77:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:649
		{
			yyVAL.colIdent = NewColIdent(string(yyDollar[1].bytes))
		}
	case 78:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:654
		{
			var v []VindexParam
			yyVAL.vindexParams = v
		}
	case 79:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:659
		{
			yyVAL.vindexParams = yyDollar[2].vindexParams
		}
	case 80:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:665
		{
			yyVAL.vindexParams = make([]VindexParam, 0, 4)
			yyVAL.vindexParams = append(yyVAL.vindexParams, yyDollar[1].vindexParam)
		}
	case 81:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:670
		{
			yyVAL.vindexParams = append(yyVAL.vindexParams, yyDollar[3].vindexParam)
		}
	case 82:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:676
		{
			yyVAL.vindexParam = VindexParam{Key: yyDollar[1].colIdent, Val: yyDollar[3].str}
		}
	case 83:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:682
		{
			yyVAL.ddl = &DDL{Action: CreateStr, Table: yyDollar[4].tableName}
			setDDL(yylex, yyVAL.ddl)
		}
	case 84:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:689
		{
			yyVAL.TableSpec = yyDollar[2].TableSpec
			yyVAL.TableSpec.Options = yyDollar[4].str
		}
	case 85:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:696
		{
			yyVAL.optLike = &OptLike{LikeTable: yyDollar[2].tableName}
		}
	case 86:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:700
		{
			yyVAL.optLike = &OptLike{LikeTable: yyDollar[3].tableName}
		}
	case 87:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:706
		{
			yyVAL.TableSpec = &TableSpec{}
			yyVAL.TableSpec.AddColumn(yyDollar[1].columnDefinition)
		}
	case 88:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:711
		{
			yyVAL.TableSpec.AddColumn(yyDollar[3].columnDefinition)
		}
	case 89:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:715
		{
			yyVAL.TableSpec.AddIndex(yyDollar[3].indexDefinition)
		}
	case 90:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:719
		{
			yyVAL.TableSpec.AddConstraint(yyDollar[3].constraintDefinition)
		}
	case 91:
		yyDollar = yyS[yypt-8 : yypt+1]
//line sql.y:725
		{
			yyDollar[2].columnType.NotNull = yyDollar[3].boolVal
			yyDollar[2].columnType.Default = yyDollar[4].optVal
			yyDollar[2].columnType.OnUpdate = yyDollar[5].optVal
			yyDollar[2].columnType.Autoincrement = yyDollar[6].boolVal
			yyDollar[2].columnType.KeyOpt = yyDollar[7].colKeyOpt
			yyDollar[2].columnType.Comment = yyDollar[8].sqlVal
			yyVAL.columnDefinition = &ColumnDefinition{Name: NewColIdent(string(yyDollar[1].bytes)), Type: yyDollar[2].columnType}
		}
	case 92:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:736
		{
			yyVAL.columnType = yyDollar[1].columnType
			yyVAL.columnType.Unsigned = yyDollar[2].boolVal
			yyVAL.columnType.Zerofill = yyDollar[3].boolVal
		}
	case 96:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:747
		{
			yyVAL.columnType = yyDollar[1].columnType
			yyVAL.columnType.Length = yyDollar[2].sqlVal
		}
	case 97:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:752
		{
			yyVAL.columnType = yyDollar[1].columnType
		}
	case 98:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:758
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 99:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:762
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 100:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:766
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 101:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:770
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 102:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:774
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 103:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:778
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 104:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:782
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 105:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:786
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 106:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:790
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 107:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:796
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
			yyVAL.columnType.Length = yyDollar[2].LengthScaleOption.Length
			yyVAL.columnType.Scale = yyDollar[2].LengthScaleOption.Scale
		}
	case 108:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:802
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
			yyVAL.columnType.Length = yyDollar[2].LengthScaleOption.Length
			yyVAL.columnType.Scale = yyDollar[2].LengthScaleOption.Scale
		}
	case 109:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:808
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
			yyVAL.columnType.Length = yyDollar[2].LengthScaleOption.Length
			yyVAL.columnType.Scale = yyDollar[2].LengthScaleOption.Scale
		}
	case 110:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:814
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
			yyVAL.columnType.Length = yyDollar[2].LengthScaleOption.Length
			yyVAL.columnType.Scale = yyDollar[2].LengthScaleOption.Scale
		}
	case 111:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:820
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
			yyVAL.columnType.Length = yyDollar[2].LengthScaleOption.Length
			yyVAL.columnType.Scale = yyDollar[2].LengthScaleOption.Scale
		}
	case 112:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:828
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 113:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:832
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].sqlVal}
		}
	case 114:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:836
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].sqlVal}
		}
	case 115:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:840
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].sqlVal}
		}
	case 116:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:844
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 117:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:850
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].sqlVal, Charset: yyDollar[3].str, Collate: yyDollar[4].str}
		}
	case 118:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:854
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].sqlVal, Charset: yyDollar[3].str, Collate: yyDollar[4].str}
		}
	case 119:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:858
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].sqlVal}
		}
	case 120:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:862
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].sqlVal}
		}
	case 121:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:866
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), Charset: yyDollar[2].str, Collate: yyDollar[3].str}
		}
	case 122:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:870
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), Charset: yyDollar[2].str, Collate: yyDollar[3].str}
		}
	case 123:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:874
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), Charset: yyDollar[2].str, Collate: yyDollar[3].str}
		}
	case 124:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:878
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), Charset: yyDollar[2].str, Collate: yyDollar[3].str}
		}
	case 125:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:882
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 126:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:886
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 127:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:890
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 128:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:894
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 129:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:898
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 130:
		yyDollar = yyS[yypt-6 : yypt+1]
//line sql.y:902
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), EnumValues: yyDollar[3].strs, Charset: yyDollar[5].str, Collate: yyDollar[6].str}
		}
	case 131:
		yyDollar = yyS[yypt-6 : yypt+1]
//line sql.y:907
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), EnumValues: yyDollar[3].strs, Charset: yyDollar[5].str, Collate: yyDollar[6].str}
		}
	case 132:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:913
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 133:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:917
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 134:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:921
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 135:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:925
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 136:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:929
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 137:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:933
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 138:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:937
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 139:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:941
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 140:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:947
		{
			yyVAL.strs = make([]string, 0, 4)
			yyVAL.strs = append(yyVAL.strs, "'"+string(yyDollar[1].bytes)+"'")
		}
	case 141:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:952
		{
			yyVAL.strs = append(yyDollar[1].strs, "'"+string(yyDollar[3].bytes)+"'")
		}
	case 142:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:957
		{
			yyVAL.sqlVal = nil
		}
	case 143:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:961
		{
			yyVAL.sqlVal = NewIntVal(yyDollar[2].bytes)
		}
	case 144:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:966
		{
			yyVAL.LengthScaleOption = LengthScaleOption{}
		}
	case 145:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sql.y:970
		{
			yyVAL.LengthScaleOption = LengthScaleOption{
				Length: NewIntVal(yyDollar[2].bytes),
				Scale:  NewIntVal(yyDollar[4].bytes),
			}
		}
	case 146:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:978
		{
			yyVAL.LengthScaleOption = LengthScaleOption{}
		}
	case 147:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:982
		{
			yyVAL.LengthScaleOption = LengthScaleOption{
				Length: NewIntVal(yyDollar[2].bytes),
			}
		}
	case 148:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sql.y:988
		{
			yyVAL.LengthScaleOption = LengthScaleOption{
				Length: NewIntVal(yyDollar[2].bytes),
				Scale:  NewIntVal(yyDollar[4].bytes),
			}
		}
	case 149:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:996
		{
			yyVAL.boolVal = BoolVal(false)
		}
	case 150:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1000
		{
			yyVAL.boolVal = BoolVal(true)
		}
	case 151:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:1005
		{
			yyVAL.boolVal = BoolVal(false)
		}
	case 152:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1009
		{
			yyVAL.boolVal = BoolVal(true)
		}
	case 153:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:1015
		{
			yyVAL.boolVal = BoolVal(false)
		}
	case 154:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1019
		{
			yyVAL.boolVal = BoolVal(false)
		}
	case 155:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1023
		{
			yyVAL.boolVal = BoolVal(true)
		}
	case 156:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:1028
		{
			yyVAL.optVal = nil
		}
	case 157:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1032
		{
			yyVAL.optVal = yyDollar[2].expr
		}
	case 158:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:1037
		{
			yyVAL.optVal = nil
		}
	case 159:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1041
		{
			yyVAL.optVal = yyDollar[3].expr
		}
	case 160:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:1046
		{
			yyVAL.boolVal = BoolVal(false)
		}
	case 161:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1050
		{
			yyVAL.boolVal = BoolVal(true)
		}
	case 162:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:1055
		{
			yyVAL.str = ""
		}
	case 163:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1059
		{
			yyVAL.str = string(yyDollar[3].bytes)
		}
	case 164:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1063
		{
			yyVAL.str = string(yyDollar[3].bytes)
		}
	case 165:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:1068
		{
			yyVAL.str = ""
		}
	case 166:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1072
		{
			yyVAL.str = string(yyDollar[2].bytes)
		}
	case 167:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1076
		{
			yyVAL.str = string(yyDollar[2].bytes)
		}
	case 168:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:1081
		{
			yyVAL.colKeyOpt = colKeyNone
		}
	case 169:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1085
		{
			yyVAL.colKeyOpt = colKeyPrimary
		}
	case 170:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1089
		{
			yyVAL.colKeyOpt = colKey
		}
	case 171:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1093
		{
			yyVAL.colKeyOpt = colKeyUniqueKey
		}
	case 172:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1097
		{
			yyVAL.colKeyOpt = colKeyUnique
		}
	case 173:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:1102
		{
			yyVAL.sqlVal = nil
		}
	case 174:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1106
		{
			yyVAL.sqlVal = NewStrVal(yyDollar[2].bytes)
		}
	case 175:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sql.y:1112
		{
			yyVAL.indexDefinition = &IndexDefinition{Info: yyDollar[1].indexInfo, Columns: yyDollar[3].indexColumns, Options: yyDollar[5].indexOptions}
		}
	case 176:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:1116
		{
			yyVAL.indexDefinition = &IndexDefinition{Info: yyDollar[1].indexInfo, Columns: yyDollar[3].indexColumns}
		}
	case 177:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1122
		{
			yyVAL.indexOptions = []*IndexOption{yyDollar[1].indexOption}
		}
	case 178:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1126
		{
			yyVAL.indexOptions = append(yyVAL.indexOptions, yyDollar[2].indexOption)
		}
	case 179:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1132
		{
			yyVAL.indexOption = &IndexOption{Name: string(yyDollar[1].bytes), Using: string(yyDollar[2].bytes)}
		}
	case 180:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1136
		{
			// should not be string
			yyVAL.indexOption = &IndexOption{Name: string(yyDollar[1].bytes), Value: NewIntVal(yyDollar[3].bytes)}
		}
	case 181:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1141
		{
			yyVAL.indexOption = &IndexOption{Name: string(yyDollar[1].bytes), Value: NewStrVal(yyDollar[2].bytes)}
		}
	case 182:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:1147
		{
			yyVAL.str = ""
		}
	case 183:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1151
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 184:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1157
		{
			yyVAL.indexInfo = &IndexInfo{Type: string(yyDollar[1].bytes) + " " + string(yyDollar[2].bytes), Name: NewColIdent("PRIMARY"), Primary: true, Unique: true}
		}
	case 185:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1161
		{
			yyVAL.indexInfo = &IndexInfo{Type: string(yyDollar[1].bytes) + " " + string(yyDollar[2].str), Name: NewColIdent(yyDollar[3].str), Spatial: true, Unique: false}
		}
	case 186:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1165
		{
			yyVAL.indexInfo = &IndexInfo{Type: string(yyDollar[1].bytes) + " " + string(yyDollar[2].str), Name: NewColIdent(yyDollar[3].str), Unique: true}
		}
	case 187:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1169
		{
			yyVAL.indexInfo = &IndexInfo{Type: string(yyDollar[1].bytes), Name: NewColIdent(yyDollar[2].str), Unique: true}
		}
	case 188:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1173
		{
			yyVAL.indexInfo = &IndexInfo{Type: string(yyDollar[1].str), Name: NewColIdent(yyDollar[2].str), Unique: false}
		}
	case 189:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1179
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 190:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1183
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 191:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:1188
		{
			yyVAL.str = ""
		}
	case 192:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1192
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 193:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1198
		{
			yyVAL.indexColumns = []*IndexColumn{yyDollar[1].indexColumn}
		}
	case 194:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1202
		{
			yyVAL.indexColumns = append(yyVAL.indexColumns, yyDollar[3].indexColumn)
		}
	case 195:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1208
		{
			yyVAL.indexColumn = &IndexColumn{Column: yyDollar[1].colIdent, Length: yyDollar[2].sqlVal}
		}
	case 196:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1214
		{
			yyVAL.constraintDefinition = &ConstraintDefinition{Name: string(yyDollar[2].bytes), Details: yyDollar[3].constraintInfo}
		}
	case 197:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1218
		{
			yyVAL.constraintDefinition = &ConstraintDefinition{Details: yyDollar[1].constraintInfo}
		}
	case 198:
		yyDollar = yyS[yypt-10 : yypt+1]
//line sql.y:1225
		{
			yyVAL.constraintInfo = &ForeignKeyDefinition{Source: yyDollar[4].columns, ReferencedTable: yyDollar[7].tableName, ReferencedColumns: yyDollar[9].columns}
		}
	case 199:
		yyDollar = yyS[yypt-11 : yypt+1]
//line sql.y:1229
		{
			yyVAL.constraintInfo = &ForeignKeyDefinition{Source: yyDollar[4].columns, ReferencedTable: yyDollar[7].tableName, ReferencedColumns: yyDollar[9].columns, OnDelete: yyDollar[11].ReferenceAction}
		}
	case 200:
		yyDollar = yyS[yypt-11 : yypt+1]
//line sql.y:1233
		{
			yyVAL.constraintInfo = &ForeignKeyDefinition{Source: yyDollar[4].columns, ReferencedTable: yyDollar[7].tableName, ReferencedColumns: yyDollar[9].columns, OnUpdate: yyDollar[11].ReferenceAction}
		}
	case 201:
		yyDollar = yyS[yypt-12 : yypt+1]
//line sql.y:1237
		{
			yyVAL.constraintInfo = &ForeignKeyDefinition{Source: yyDollar[4].columns, ReferencedTable: yyDollar[7].tableName, ReferencedColumns: yyDollar[9].columns, OnDelete: yyDollar[11].ReferenceAction, OnUpdate: yyDollar[12].ReferenceAction}
		}
	case 202:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1243
		{
			yyVAL.ReferenceAction = yyDollar[3].ReferenceAction
		}
	case 203:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1249
		{
			yyVAL.ReferenceAction = yyDollar[3].ReferenceAction
		}
	case 204:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1255
		{
			yyVAL.ReferenceAction = Restrict
		}
	case 205:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1259
		{
			yyVAL.ReferenceAction = Cascade
		}
	case 206:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1263
		{
			yyVAL.ReferenceAction = NoAction
		}
	case 207:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1267
		{
			yyVAL.ReferenceAction = SetDefault
		}
	case 208:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1271
		{
			yyVAL.ReferenceAction = SetNull
		}
	case 209:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:1276
		{
			yyVAL.str = ""
		}
	case 210:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1280
		{
			yyVAL.str = " " + string(yyDollar[1].str)
		}
	case 211:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1284
		{
			yyVAL.str = string(yyDollar[1].str) + ", " + string(yyDollar[3].str)
		}
	case 212:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1292
		{
			yyVAL.str = yyDollar[1].str
		}
	case 213:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1296
		{
			yyVAL.str = yyDollar[1].str + " " + yyDollar[2].str
		}
	case 214:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1300
		{
			yyVAL.str = yyDollar[1].str + "=" + yyDollar[3].str
		}
	case 215:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1306
		{
			yyVAL.str = yyDollar[1].colIdent.String()
		}
	case 216:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1310
		{
			yyVAL.str = "'" + string(yyDollar[1].bytes) + "'"
		}
	case 217:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1314
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 218:
		yyDollar = yyS[yypt-6 : yypt+1]
//line sql.y:1320
		{
			yyVAL.statement = &DDL{Action: AlterStr, Table: yyDollar[4].tableName}
		}
	case 219:
		yyDollar = yyS[yypt-7 : yypt+1]
//line sql.y:1324
		{
			yyVAL.statement = &DDL{Action: AlterStr, Table: yyDollar[4].tableName}
		}
	case 220:
		yyDollar = yyS[yypt-7 : yypt+1]
//line sql.y:1328
		{
			yyVAL.statement = &DDL{Action: AlterStr, Table: yyDollar[4].tableName}
		}
	case 221:
		yyDollar = yyS[yypt-7 : yypt+1]
//line sql.y:1332
		{
			// Change this to a rename statement
			yyVAL.statement = &DDL{Action: RenameStr, FromTables: TableNames{yyDollar[4].tableName}, ToTables: TableNames{yyDollar[7].tableName}}
		}
	case 222:
		yyDollar = yyS[yypt-7 : yypt+1]
//line sql.y:1337
		{
			// Rename an index can just be an alter
			yyVAL.statement = &DDL{Action: AlterStr, Table: yyDollar[4].tableName}
		}
	case 223:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:1342
		{
			yyVAL.statement = &DDL{Action: AlterStr, Table: yyDollar[3].tableName.ToViewName()}
		}
	case 224:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sql.y:1346
		{
			yyVAL.statement = &DDL{Action: AlterStr, Table: yyDollar[4].tableName, PartitionSpec: yyDollar[5].partSpec}
		}
	case 225:
		yyDollar = yyS[yypt-7 : yypt+1]
//line sql.y:1350
		{
			yyVAL.statement = &DDL{Action: CreateVindexStr, VindexSpec: &VindexSpec{
				Name:   yyDollar[5].colIdent,
				Type:   yyDollar[6].colIdent,
				Params: yyDollar[7].vindexParams,
			}}
		}
	case 226:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sql.y:1358
		{
			yyVAL.statement = &DDL{Action: DropVindexStr, VindexSpec: &VindexSpec{
				Name: yyDollar[5].colIdent,
			}}
		}
	case 227:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sql.y:1364
		{
			yyVAL.statement = &DDL{Action: AddVschemaTableStr, Table: yyDollar[5].tableName}
		}
	case 228:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sql.y:1368
		{
			yyVAL.statement = &DDL{Action: DropVschemaTableStr, Table: yyDollar[5].tableName}
		}
	case 229:
		yyDollar = yyS[yypt-12 : yypt+1]
//line sql.y:1372
		{
			yyVAL.statement = &DDL{
				Action: AddColVindexStr,
				Table:  yyDollar[4].tableName,
				VindexSpec: &VindexSpec{
					Name:   yyDollar[7].colIdent,
					Type:   yyDollar[11].colIdent,
					Params: yyDollar[12].vindexParams,
				},
				VindexCols: yyDollar[9].columns,
			}
		}
	case 230:
		yyDollar = yyS[yypt-7 : yypt+1]
//line sql.y:1385
		{
			yyVAL.statement = &DDL{
				Action: DropColVindexStr,
				Table:  yyDollar[4].tableName,
				VindexSpec: &VindexSpec{
					Name: yyDollar[7].colIdent,
				},
			}
		}
	case 242:
		yyDollar = yyS[yypt-7 : yypt+1]
//line sql.y:1410
		{
			yyVAL.partSpec = &PartitionSpec{Action: ReorganizeStr, Name: yyDollar[3].colIdent, Definitions: yyDollar[6].partDefs}
		}
	case 243:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1416
		{
			yyVAL.partDefs = []*PartitionDefinition{yyDollar[1].partDef}
		}
	case 244:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1420
		{
			yyVAL.partDefs = append(yyDollar[1].partDefs, yyDollar[3].partDef)
		}
	case 245:
		yyDollar = yyS[yypt-8 : yypt+1]
//line sql.y:1426
		{
			yyVAL.partDef = &PartitionDefinition{Name: yyDollar[2].colIdent, Limit: yyDollar[7].expr}
		}
	case 246:
		yyDollar = yyS[yypt-8 : yypt+1]
//line sql.y:1430
		{
			yyVAL.partDef = &PartitionDefinition{Name: yyDollar[2].colIdent, Maxvalue: true}
		}
	case 247:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1436
		{
			yyVAL.statement = yyDollar[3].ddl
		}
	case 248:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1442
		{
			yyVAL.ddl = &DDL{Action: RenameStr, FromTables: TableNames{yyDollar[1].tableName}, ToTables: TableNames{yyDollar[3].tableName}}
		}
	case 249:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sql.y:1446
		{
			yyVAL.ddl = yyDollar[1].ddl
			yyVAL.ddl.FromTables = append(yyVAL.ddl.FromTables, yyDollar[3].tableName)
			yyVAL.ddl.ToTables = append(yyVAL.ddl.ToTables, yyDollar[5].tableName)
		}
	case 250:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:1454
		{
			var exists bool
			if yyDollar[3].byt != 0 {
				exists = true
			}
			yyVAL.statement = &DDL{Action: DropStr, FromTables: yyDollar[4].tableNames, IfExists: exists}
		}
	case 251:
		yyDollar = yyS[yypt-6 : yypt+1]
//line sql.y:1462
		{
			// Change this to an alter statement
			yyVAL.statement = &DDL{Action: AlterStr, Table: yyDollar[5].tableName}
		}
	case 252:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sql.y:1467
		{
			var exists bool
			if yyDollar[3].byt != 0 {
				exists = true
			}
			yyVAL.statement = &DDL{Action: DropStr, FromTables: TableNames{yyDollar[4].tableName.ToViewName()}, IfExists: exists}
		}
	case 253:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:1475
		{
			yyVAL.statement = &DBDDL{Action: DropStr, DBName: string(yyDollar[4].bytes)}
		}
	case 254:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:1479
		{
			yyVAL.statement = &DBDDL{Action: DropStr, DBName: string(yyDollar[4].bytes)}
		}
	case 255:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1485
		{
			yyVAL.statement = &DDL{Action: TruncateStr, Table: yyDollar[3].tableName}
		}
	case 256:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1489
		{
			yyVAL.statement = &DDL{Action: TruncateStr, Table: yyDollar[2].tableName}
		}
	case 257:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1494
		{
			yyVAL.statement = &DDL{Action: AlterStr, Table: yyDollar[3].tableName}
		}
	case 258:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:1500
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes) + " " + string(yyDollar[3].bytes)}
		}
	case 259:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:1505
		{
			yyVAL.statement = &Show{Type: CharsetStr}
		}
	case 260:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1509
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes)}
		}
	case 261:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:1513
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes) + " " + string(yyDollar[3].bytes)}
		}
	case 262:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:1518
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes) + " " + string(yyDollar[3].bytes)}
		}
	case 263:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:1522
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes) + " " + string(yyDollar[3].bytes)}
		}
	case 264:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:1526
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes) + " " + string(yyDollar[3].bytes), Table: yyDollar[4].tableName}
		}
	case 265:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:1530
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes) + " " + string(yyDollar[3].bytes)}
		}
	case 266:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:1534
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes) + " " + string(yyDollar[3].bytes)}
		}
	case 267:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1538
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes)}
		}
	case 268:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1542
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes)}
		}
	case 269:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1546
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes)}
		}
	case 270:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1550
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes)}
		}
	case 271:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1554
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes)}
		}
	case 272:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1558
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes)}
		}
	case 273:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1562
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes)}
		}
	case 274:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:1566
		{
			yyVAL.statement = &Show{Scope: yyDollar[2].str, Type: string(yyDollar[3].bytes)}
		}
	case 275:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1570
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes)}
		}
	case 276:
		yyDollar = yyS[yypt-7 : yypt+1]
//line sql.y:1574
		{
			showTablesOpt := &ShowTablesOpt{Full: yyDollar[2].str, DbName: yyDollar[6].str, Filter: yyDollar[7].showFilter}
			yyVAL.statement = &Show{Type: string(yyDollar[3].str), ShowTablesOpt: showTablesOpt, OnTable: yyDollar[5].tableName}
		}
	case 277:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sql.y:1579
		{
			// this is ugly, but I couldn't find a better way for now
			if yyDollar[3].str == "processlist" {
				yyVAL.statement = &Show{Type: yyDollar[3].str}
			} else {
				showTablesOpt := &ShowTablesOpt{Full: yyDollar[2].str, DbName: yyDollar[4].str, Filter: yyDollar[5].showFilter}
				yyVAL.statement = &Show{Type: yyDollar[3].str, ShowTablesOpt: showTablesOpt}
			}
		}
	case 278:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:1589
		{
			yyVAL.statement = &Show{Scope: yyDollar[2].str, Type: string(yyDollar[3].bytes)}
		}
	case 279:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1593
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes)}
		}
	case 280:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:1597
		{
			// Cannot dereference $4 directly, or else the parser stackcannot be pooled. See yyParsePooled
			showCollationFilterOpt := yyDollar[4].expr
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes), ShowCollationFilterOpt: &showCollationFilterOpt}
		}
	case 281:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1603
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes)}
		}
	case 282:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1607
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes)}
		}
	case 283:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1611
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes)}
		}
	case 284:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1615
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes)}
		}
	case 285:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1619
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes) + " " + string(yyDollar[3].bytes)}
		}
	case 286:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1623
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes) + " " + string(yyDollar[3].bytes)}
		}
	case 287:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sql.y:1627
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes) + " " + string(yyDollar[3].bytes), OnTable: yyDollar[5].tableName}
		}
	case 288:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1631
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes)}
		}
	case 289:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1641
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes)}
		}
	case 290:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1647
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 291:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1651
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 292:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:1657
		{
			yyVAL.str = ""
		}
	case 293:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1661
		{
			yyVAL.str = "full "
		}
	case 294:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1667
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 295:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1671
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 296:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:1677
		{
			yyVAL.str = ""
		}
	case 297:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1681
		{
			yyVAL.str = yyDollar[2].tableIdent.v
		}
	case 298:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1685
		{
			yyVAL.str = yyDollar[2].tableIdent.v
		}
	case 299:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:1691
		{
			yyVAL.showFilter = nil
		}
	case 300:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1695
		{
			yyVAL.showFilter = &ShowFilter{Like: string(yyDollar[2].bytes)}
		}
	case 301:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1699
		{
			yyVAL.showFilter = &ShowFilter{Filter: yyDollar[2].expr}
		}
	case 302:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:1705
		{
			yyVAL.str = ""
		}
	case 303:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1709
		{
			yyVAL.str = SessionStr
		}
	case 304:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1713
		{
			yyVAL.str = GlobalStr
		}
	case 305:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1719
		{
			yyVAL.statement = &Use{DBName: yyDollar[2].tableIdent}
		}
	case 306:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1723
		{
			yyVAL.statement = &Use{DBName: TableIdent{v: ""}}
		}
	case 307:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1729
		{
			yyVAL.statement = &Begin{}
		}
	case 308:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1733
		{
			yyVAL.statement = &Begin{}
		}
	case 309:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1739
		{
			yyVAL.statement = &Commit{}
		}
	case 310:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1745
		{
			yyVAL.statement = &Rollback{}
		}
	case 311:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1751
		{
			yyVAL.statement = &OtherRead{}
		}
	case 312:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1755
		{
			yyVAL.statement = &OtherRead{}
		}
	case 313:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1759
		{
			yyVAL.statement = &OtherRead{}
		}
	case 314:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1763
		{
			yyVAL.statement = &OtherAdmin{}
		}
	case 315:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1767
		{
			yyVAL.statement = &OtherAdmin{}
		}
	case 316:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1771
		{
			yyVAL.statement = &OtherAdmin{}
		}
	case 317:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1775
		{
			yyVAL.statement = &OtherAdmin{}
		}
	case 318:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1781
		{
			yyVAL.statement = &DDL{Action: FlushStr}
		}
	case 319:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:1785
		{
			setAllowComments(yylex, true)
		}
	case 320:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1789
		{
			yyVAL.bytes2 = yyDollar[2].bytes2
			setAllowComments(yylex, false)
		}
	case 321:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:1795
		{
			yyVAL.bytes2 = nil
		}
	case 322:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1799
		{
			yyVAL.bytes2 = append(yyDollar[1].bytes2, yyDollar[2].bytes)
		}
	case 323:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1805
		{
			yyVAL.str = UnionStr
		}
	case 324:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1809
		{
			yyVAL.str = UnionAllStr
		}
	case 325:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1813
		{
			yyVAL.str = UnionDistinctStr
		}
	case 326:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:1818
		{
			yyVAL.str = ""
		}
	case 327:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1822
		{
			yyVAL.str = SQLNoCacheStr
		}
	case 328:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1826
		{
			yyVAL.str = SQLCacheStr
		}
	case 329:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:1831
		{
			yyVAL.str = ""
		}
	case 330:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1835
		{
			yyVAL.str = DistinctStr
		}
	case 331:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:1840
		{
			yyVAL.str = ""
		}
	case 332:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1844
		{
			yyVAL.str = StraightJoinHint
		}
	case 333:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:1849
		{
			yyVAL.selectExprs = nil
		}
	case 334:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1853
		{
			yyVAL.selectExprs = yyDollar[1].selectExprs
		}
	case 335:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1859
		{
			yyVAL.selectExprs = SelectExprs{yyDollar[1].selectExpr}
		}
	case 336:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1863
		{
			yyVAL.selectExprs = append(yyVAL.selectExprs, yyDollar[3].selectExpr)
		}
	case 337:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1869
		{
			yyVAL.selectExpr = &StarExpr{}
		}
	case 338:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1873
		{
			yyVAL.selectExpr = &AliasedExpr{Expr: yyDollar[1].expr, As: yyDollar[2].colIdent}
		}
	case 339:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1877
		{
			yyVAL.selectExpr = &StarExpr{TableName: TableName{Name: yyDollar[1].tableIdent}}
		}
	case 340:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sql.y:1881
		{
			yyVAL.selectExpr = &StarExpr{TableName: TableName{Qualifier: yyDollar[1].tableIdent, Name: yyDollar[3].tableIdent}}
		}
	case 341:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:1886
		{
			yyVAL.colIdent = ColIdent{}
		}
	case 342:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1890
		{
			yyVAL.colIdent = yyDollar[1].colIdent
		}
	case 343:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1894
		{
			yyVAL.colIdent = yyDollar[2].colIdent
		}
	case 345:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1901
		{
			yyVAL.colIdent = NewColIdent(string(yyDollar[1].bytes))
		}
	case 346:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:1906
		{
			yyVAL.tableExprs = TableExprs{&AliasedTableExpr{Expr: TableName{Name: NewTableIdent("dual")}}}
		}
	case 347:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1910
		{
			yyVAL.tableExprs = yyDollar[2].tableExprs
		}
	case 348:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1916
		{
			yyVAL.tableExprs = TableExprs{yyDollar[1].tableExpr}
		}
	case 349:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1920
		{
			yyVAL.tableExprs = append(yyVAL.tableExprs, yyDollar[3].tableExpr)
		}
	case 352:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1930
		{
			yyVAL.tableExpr = yyDollar[1].aliasedTableName
		}
	case 353:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1934
		{
			yyVAL.tableExpr = &AliasedTableExpr{Expr: yyDollar[1].subquery, As: yyDollar[3].tableIdent}
		}
	case 354:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1938
		{
			// missed alias for subquery
			yylex.Error("Every derived table must have its own alias")
			return 1
		}
	case 355:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1944
		{
			yyVAL.tableExpr = &ParenTableExpr{Exprs: yyDollar[2].tableExprs}
		}
	case 356:
		yyDollar = yyS[yypt-6 : yypt+1]
//line sql.y:1948
		{
			yyVAL.tableExpr = &TableValuedFunction{Name: NewColIdent(string(yyDollar[1].bytes)), Args: yyDollar[3].tableValuedFunctionArguments, As: yyDollar[6].tableIdent}
		}
	case 357:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1954
		{
			yyVAL.aliasedTableName = &AliasedTableExpr{Expr: yyDollar[1].tableName, As: yyDollar[2].tableIdent, Hints: yyDollar[3].indexHints}
		}
	case 358:
		yyDollar = yyS[yypt-7 : yypt+1]
//line sql.y:1958
		{
			yyVAL.aliasedTableName = &AliasedTableExpr{Expr: yyDollar[1].tableName, Partitions: yyDollar[4].partitions, As: yyDollar[6].tableIdent, Hints: yyDollar[7].indexHints}
		}
	case 359:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:1963
		{
			yyVAL.tableValuedFunctionArguments = nil
		}
	case 360:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1967
		{
			yyVAL.tableValuedFunctionArguments = yyDollar[1].tableValuedFunctionArguments
		}
	case 361:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1973
		{
			yyVAL.tableValuedFunctionArguments = TableValuedFunctionArguments{yyDollar[1].tableValuedFunctionArgument}
		}
	case 362:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1977
		{
			yyVAL.tableValuedFunctionArguments = append(yyVAL.tableValuedFunctionArguments, yyDollar[3].tableValuedFunctionArgument)
		}
	case 363:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1983
		{
			yyVAL.tableValuedFunctionArgument = &TableValuedFunctionArgument{Name: yyDollar[1].colIdent, Value: yyDollar[3].tableValuedFunctionArgumentValue}
		}
	case 364:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1989
		{
			yyVAL.tableValuedFunctionArgumentValue = &ExprTableValuedFunctionArgumentValue{Expr: yyDollar[1].expr}
		}
	case 365:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:1993
		{
			yyVAL.tableValuedFunctionArgumentValue = &TableDescriptorTableValuedFunctionArgumentValue{Table: yyDollar[3].tableExpr}
		}
	case 366:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:1997
		{
			yyVAL.tableValuedFunctionArgumentValue = &FieldDescriptorTableValuedFunctionArgumentValue{Field: yyDollar[3].colName}
		}
	case 367:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2003
		{
			yyVAL.columns = Columns{yyDollar[1].colIdent}
		}
	case 368:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2007
		{
			yyVAL.columns = append(yyVAL.columns, yyDollar[3].colIdent)
		}
	case 369:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2013
		{
			yyVAL.partitions = Partitions{yyDollar[1].colIdent}
		}
	case 370:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2017
		{
			yyVAL.partitions = append(yyVAL.partitions, yyDollar[3].colIdent)
		}
	case 371:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:2030
		{
			yyVAL.tableExpr = &JoinTableExpr{LeftExpr: yyDollar[1].tableExpr, Join: yyDollar[2].str, RightExpr: yyDollar[3].tableExpr, Condition: yyDollar[4].joinCondition}
		}
	case 372:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:2034
		{
			yyVAL.tableExpr = &JoinTableExpr{LeftExpr: yyDollar[1].tableExpr, Join: yyDollar[2].str, RightExpr: yyDollar[3].tableExpr, Condition: yyDollar[4].joinCondition}
		}
	case 373:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:2038
		{
			yyVAL.tableExpr = &JoinTableExpr{LeftExpr: yyDollar[1].tableExpr, Join: yyDollar[2].str, RightExpr: yyDollar[3].tableExpr, Condition: yyDollar[4].joinCondition}
		}
	case 374:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2042
		{
			yyVAL.tableExpr = &JoinTableExpr{LeftExpr: yyDollar[1].tableExpr, Join: yyDollar[2].str, RightExpr: yyDollar[3].tableExpr}
		}
	case 375:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2048
		{
			yyVAL.joinCondition = JoinCondition{On: yyDollar[2].expr}
		}
	case 376:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:2050
		{
			yyVAL.joinCondition = JoinCondition{Using: yyDollar[3].columns}
		}
	case 377:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:2054
		{
			yyVAL.joinCondition = JoinCondition{}
		}
	case 378:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2056
		{
			yyVAL.joinCondition = yyDollar[1].joinCondition
		}
	case 379:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:2060
		{
			yyVAL.joinCondition = JoinCondition{}
		}
	case 380:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2062
		{
			yyVAL.joinCondition = JoinCondition{On: yyDollar[2].expr}
		}
	case 381:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:2065
		{
			yyVAL.empty = struct{}{}
		}
	case 382:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2067
		{
			yyVAL.empty = struct{}{}
		}
	case 383:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:2070
		{
			yyVAL.tableIdent = NewTableIdent("")
		}
	case 384:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2074
		{
			yyVAL.tableIdent = yyDollar[1].tableIdent
		}
	case 385:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2078
		{
			yyVAL.tableIdent = yyDollar[2].tableIdent
		}
	case 387:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2085
		{
			yyVAL.tableIdent = NewTableIdent(string(yyDollar[1].bytes))
		}
	case 388:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2091
		{
			yyVAL.str = JoinStr
		}
	case 389:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2095
		{
			yyVAL.str = JoinStr
		}
	case 390:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2099
		{
			yyVAL.str = JoinStr
		}
	case 391:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2105
		{
			yyVAL.str = StraightJoinStr
		}
	case 392:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2111
		{
			yyVAL.str = LeftJoinStr
		}
	case 393:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2115
		{
			yyVAL.str = LeftJoinStr
		}
	case 394:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2119
		{
			yyVAL.str = RightJoinStr
		}
	case 395:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2123
		{
			yyVAL.str = RightJoinStr
		}
	case 396:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2129
		{
			yyVAL.str = NaturalJoinStr
		}
	case 397:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2133
		{
			if yyDollar[2].str == LeftJoinStr {
				yyVAL.str = NaturalLeftJoinStr
			} else {
				yyVAL.str = NaturalRightJoinStr
			}
		}
	case 398:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2143
		{
			yyVAL.tableName = yyDollar[2].tableName
		}
	case 399:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2147
		{
			yyVAL.tableName = yyDollar[1].tableName
		}
	case 400:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2153
		{
			yyVAL.tableName = TableName{Name: yyDollar[1].tableIdent}
		}
	case 401:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2157
		{
			yyVAL.tableName = TableName{Qualifier: yyDollar[1].tableIdent, Name: yyDollar[3].tableIdent}
		}
	case 402:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2163
		{
			yyVAL.tableName = TableName{Name: yyDollar[1].tableIdent}
		}
	case 403:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:2168
		{
			yyVAL.indexHints = nil
		}
	case 404:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sql.y:2172
		{
			yyVAL.indexHints = &IndexHints{Type: UseStr, Indexes: yyDollar[4].columns}
		}
	case 405:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sql.y:2176
		{
			yyVAL.indexHints = &IndexHints{Type: IgnoreStr, Indexes: yyDollar[4].columns}
		}
	case 406:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sql.y:2180
		{
			yyVAL.indexHints = &IndexHints{Type: ForceStr, Indexes: yyDollar[4].columns}
		}
	case 407:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:2185
		{
			yyVAL.expr = nil
		}
	case 408:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2189
		{
			yyVAL.expr = yyDollar[2].expr
		}
	case 409:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2195
		{
			yyVAL.expr = yyDollar[1].expr
		}
	case 410:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2199
		{
			yyVAL.expr = &AndExpr{Left: yyDollar[1].expr, Right: yyDollar[3].expr}
		}
	case 411:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2203
		{
			yyVAL.expr = &OrExpr{Left: yyDollar[1].expr, Right: yyDollar[3].expr}
		}
	case 412:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2207
		{
			yyVAL.expr = &NotExpr{Expr: yyDollar[2].expr}
		}
	case 413:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2211
		{
			yyVAL.expr = &IsExpr{Operator: yyDollar[3].str, Expr: yyDollar[1].expr}
		}
	case 414:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2215
		{
			yyVAL.expr = yyDollar[1].expr
		}
	case 415:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2219
		{
			yyVAL.expr = &Default{ColName: yyDollar[2].str}
		}
	case 416:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:2225
		{
			yyVAL.str = ""
		}
	case 417:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2229
		{
			yyVAL.str = string(yyDollar[2].bytes)
		}
	case 418:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2235
		{
			yyVAL.boolVal = BoolVal(true)
		}
	case 419:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2239
		{
			yyVAL.boolVal = BoolVal(false)
		}
	case 420:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2245
		{
			yyVAL.expr = &ComparisonExpr{Left: yyDollar[1].expr, Operator: yyDollar[2].str, Right: yyDollar[3].expr}
		}
	case 421:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2249
		{
			yyVAL.expr = &ComparisonExpr{Left: yyDollar[1].expr, Operator: InStr, Right: yyDollar[3].colTuple}
		}
	case 422:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:2253
		{
			yyVAL.expr = &ComparisonExpr{Left: yyDollar[1].expr, Operator: NotInStr, Right: yyDollar[4].colTuple}
		}
	case 423:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:2257
		{
			yyVAL.expr = &ComparisonExpr{Left: yyDollar[1].expr, Operator: LikeStr, Right: yyDollar[3].expr, Escape: yyDollar[4].expr}
		}
	case 424:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sql.y:2261
		{
			yyVAL.expr = &ComparisonExpr{Left: yyDollar[1].expr, Operator: NotLikeStr, Right: yyDollar[4].expr, Escape: yyDollar[5].expr}
		}
	case 425:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2265
		{
			yyVAL.expr = &ComparisonExpr{Left: yyDollar[1].expr, Operator: RegexpStr, Right: yyDollar[3].expr}
		}
	case 426:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:2269
		{
			yyVAL.expr = &ComparisonExpr{Left: yyDollar[1].expr, Operator: NotRegexpStr, Right: yyDollar[4].expr}
		}
	case 427:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sql.y:2273
		{
			yyVAL.expr = &RangeCond{Left: yyDollar[1].expr, Operator: BetweenStr, From: yyDollar[3].expr, To: yyDollar[5].expr}
		}
	case 428:
		yyDollar = yyS[yypt-6 : yypt+1]
//line sql.y:2277
		{
			yyVAL.expr = &RangeCond{Left: yyDollar[1].expr, Operator: NotBetweenStr, From: yyDollar[4].expr, To: yyDollar[6].expr}
		}
	case 429:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2281
		{
			yyVAL.expr = &ExistsExpr{Subquery: yyDollar[2].subquery}
		}
	case 430:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2287
		{
			yyVAL.str = IsNullStr
		}
	case 431:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2291
		{
			yyVAL.str = IsNotNullStr
		}
	case 432:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2295
		{
			yyVAL.str = IsTrueStr
		}
	case 433:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2299
		{
			yyVAL.str = IsNotTrueStr
		}
	case 434:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2303
		{
			yyVAL.str = IsFalseStr
		}
	case 435:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2307
		{
			yyVAL.str = IsNotFalseStr
		}
	case 436:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2313
		{
			yyVAL.str = EqualStr
		}
	case 437:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2317
		{
			yyVAL.str = LessThanStr
		}
	case 438:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2321
		{
			yyVAL.str = GreaterThanStr
		}
	case 439:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2325
		{
			yyVAL.str = LessEqualStr
		}
	case 440:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2329
		{
			yyVAL.str = GreaterEqualStr
		}
	case 441:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2333
		{
			yyVAL.str = NotEqualStr
		}
	case 442:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2337
		{
			yyVAL.str = NullSafeEqualStr
		}
	case 443:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:2342
		{
			yyVAL.expr = nil
		}
	case 444:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2346
		{
			yyVAL.expr = yyDollar[2].expr
		}
	case 445:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2352
		{
			yyVAL.colTuple = yyDollar[1].valTuple
		}
	case 446:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2356
		{
			yyVAL.colTuple = yyDollar[1].subquery
		}
	case 447:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2360
		{
			yyVAL.colTuple = ListArg(yyDollar[1].bytes)
		}
	case 448:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2366
		{
			yyVAL.subquery = &Subquery{yyDollar[2].selStmt}
		}
	case 449:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2372
		{
			yyVAL.exprs = Exprs{yyDollar[1].expr}
		}
	case 450:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2376
		{
			yyVAL.exprs = append(yyDollar[1].exprs, yyDollar[3].expr)
		}
	case 451:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2382
		{
			yyVAL.expr = yyDollar[1].expr
		}
	case 452:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2386
		{
			yyVAL.expr = yyDollar[1].boolVal
		}
	case 453:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2390
		{
			yyVAL.expr = yyDollar[1].colName
		}
	case 454:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2394
		{
			yyVAL.expr = yyDollar[1].expr
		}
	case 455:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2398
		{
			yyVAL.expr = yyDollar[1].subquery
		}
	case 456:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2402
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].expr, Operator: BitAndStr, Right: yyDollar[3].expr}
		}
	case 457:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2406
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].expr, Operator: BitOrStr, Right: yyDollar[3].expr}
		}
	case 458:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2410
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].expr, Operator: BitXorStr, Right: yyDollar[3].expr}
		}
	case 459:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2414
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].expr, Operator: PlusStr, Right: yyDollar[3].expr}
		}
	case 460:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2418
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].expr, Operator: MinusStr, Right: yyDollar[3].expr}
		}
	case 461:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2422
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].expr, Operator: MultStr, Right: yyDollar[3].expr}
		}
	case 462:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2426
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].expr, Operator: DivStr, Right: yyDollar[3].expr}
		}
	case 463:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2430
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].expr, Operator: IntDivStr, Right: yyDollar[3].expr}
		}
	case 464:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2434
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].expr, Operator: ModStr, Right: yyDollar[3].expr}
		}
	case 465:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2438
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].expr, Operator: ModStr, Right: yyDollar[3].expr}
		}
	case 466:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2442
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].expr, Operator: ShiftLeftStr, Right: yyDollar[3].expr}
		}
	case 467:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2446
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].expr, Operator: ShiftRightStr, Right: yyDollar[3].expr}
		}
	case 468:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2450
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].colName, Operator: JSONExtractOp, Right: yyDollar[3].expr}
		}
	case 469:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2454
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].colName, Operator: JSONUnquoteExtractOp, Right: yyDollar[3].expr}
		}
	case 470:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2458
		{
			yyVAL.expr = &CollateExpr{Expr: yyDollar[1].expr, Charset: yyDollar[3].str}
		}
	case 471:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2462
		{
			yyVAL.expr = &UnaryExpr{Operator: BinaryStr, Expr: yyDollar[2].expr}
		}
	case 472:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2466
		{
			yyVAL.expr = &UnaryExpr{Operator: UBinaryStr, Expr: yyDollar[2].expr}
		}
	case 473:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2470
		{
			yyVAL.expr = &UnaryExpr{Operator: Utf8mb4Str, Expr: yyDollar[2].expr}
		}
	case 474:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2474
		{
			if num, ok := yyDollar[2].expr.(*SQLVal); ok && num.Type == IntVal {
				yyVAL.expr = num
			} else {
				yyVAL.expr = &UnaryExpr{Operator: UPlusStr, Expr: yyDollar[2].expr}
			}
		}
	case 475:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2482
		{
			if num, ok := yyDollar[2].expr.(*SQLVal); ok && num.Type == IntVal {
				// Handle double negative
				if num.Val[0] == '-' {
					num.Val = num.Val[1:]
					yyVAL.expr = num
				} else {
					yyVAL.expr = NewIntVal(append([]byte("-"), num.Val...))
				}
			} else {
				yyVAL.expr = &UnaryExpr{Operator: UMinusStr, Expr: yyDollar[2].expr}
			}
		}
	case 476:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2496
		{
			yyVAL.expr = &UnaryExpr{Operator: TildaStr, Expr: yyDollar[2].expr}
		}
	case 477:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2500
		{
			yyVAL.expr = &UnaryExpr{Operator: BangStr, Expr: yyDollar[2].expr}
		}
	case 478:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2504
		{
			// This rule prevents the usage of INTERVAL
			// as a function. If support is needed for that,
			// we'll need to revisit this. The solution
			// will be non-trivial because of grammar conflicts.
			yyVAL.expr = &IntervalExpr{Expr: yyDollar[2].expr, Unit: yyDollar[3].colIdent.String()}
		}
	case 483:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:2522
		{
			yyVAL.expr = &FuncExpr{Name: yyDollar[1].colIdent, Exprs: yyDollar[3].selectExprs}
		}
	case 484:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sql.y:2526
		{
			yyVAL.expr = &FuncExpr{Name: yyDollar[1].colIdent, Distinct: true, Exprs: yyDollar[4].selectExprs}
		}
	case 485:
		yyDollar = yyS[yypt-6 : yypt+1]
//line sql.y:2530
		{
			yyVAL.expr = &FuncExpr{Qualifier: yyDollar[1].tableIdent, Name: yyDollar[3].colIdent, Exprs: yyDollar[5].selectExprs}
		}
	case 486:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:2540
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("left"), Exprs: yyDollar[3].selectExprs}
		}
	case 487:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:2544
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("right"), Exprs: yyDollar[3].selectExprs}
		}
	case 488:
		yyDollar = yyS[yypt-6 : yypt+1]
//line sql.y:2548
		{
			yyVAL.expr = &ConvertExpr{Expr: yyDollar[3].expr, Type: yyDollar[5].convertType}
		}
	case 489:
		yyDollar = yyS[yypt-6 : yypt+1]
//line sql.y:2552
		{
			yyVAL.expr = &ConvertExpr{Expr: yyDollar[3].expr, Type: yyDollar[5].convertType}
		}
	case 490:
		yyDollar = yyS[yypt-6 : yypt+1]
//line sql.y:2556
		{
			yyVAL.expr = &ConvertUsingExpr{Expr: yyDollar[3].expr, Type: yyDollar[5].str}
		}
	case 491:
		yyDollar = yyS[yypt-8 : yypt+1]
//line sql.y:2560
		{
			yyVAL.expr = &SubstrExpr{Name: yyDollar[3].colName, From: yyDollar[5].expr, To: yyDollar[7].expr}
		}
	case 492:
		yyDollar = yyS[yypt-8 : yypt+1]
//line sql.y:2564
		{
			yyVAL.expr = &SubstrExpr{Name: yyDollar[3].colName, From: yyDollar[5].expr, To: yyDollar[7].expr}
		}
	case 493:
		yyDollar = yyS[yypt-8 : yypt+1]
//line sql.y:2568
		{
			yyVAL.expr = &SubstrExpr{StrVal: NewStrVal(yyDollar[3].bytes), From: yyDollar[5].expr, To: yyDollar[7].expr}
		}
	case 494:
		yyDollar = yyS[yypt-8 : yypt+1]
//line sql.y:2572
		{
			yyVAL.expr = &SubstrExpr{StrVal: NewStrVal(yyDollar[3].bytes), From: yyDollar[5].expr, To: yyDollar[7].expr}
		}
	case 495:
		yyDollar = yyS[yypt-9 : yypt+1]
//line sql.y:2576
		{
			yyVAL.expr = &MatchExpr{Columns: yyDollar[3].selectExprs, Expr: yyDollar[7].expr, Option: yyDollar[8].str}
		}
	case 496:
		yyDollar = yyS[yypt-7 : yypt+1]
//line sql.y:2580
		{
			yyVAL.expr = &GroupConcatExpr{Distinct: yyDollar[3].str, Exprs: yyDollar[4].selectExprs, OrderBy: yyDollar[5].orderBy, Separator: yyDollar[6].str}
		}
	case 497:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sql.y:2584
		{
			yyVAL.expr = &CaseExpr{Expr: yyDollar[2].expr, Whens: yyDollar[3].whens, Else: yyDollar[4].expr}
		}
	case 498:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:2588
		{
			yyVAL.expr = &ValuesFuncExpr{Name: yyDollar[3].colName}
		}
	case 499:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2598
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("current_timestamp")}
		}
	case 500:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2602
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("utc_timestamp")}
		}
	case 501:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2606
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("utc_time")}
		}
	case 502:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2611
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("utc_date")}
		}
	case 503:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2616
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("localtime")}
		}
	case 504:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2621
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("localtimestamp")}
		}
	case 505:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2627
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("current_date")}
		}
	case 506:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2632
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("current_time")}
		}
	case 507:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2637
		{
			yyVAL.expr = &CurTimeFuncExpr{Name: NewColIdent("current_timestamp"), Fsp: yyDollar[2].expr}
		}
	case 508:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2641
		{
			yyVAL.expr = &CurTimeFuncExpr{Name: NewColIdent("utc_timestamp"), Fsp: yyDollar[2].expr}
		}
	case 509:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2645
		{
			yyVAL.expr = &CurTimeFuncExpr{Name: NewColIdent("utc_time"), Fsp: yyDollar[2].expr}
		}
	case 510:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2650
		{
			yyVAL.expr = &CurTimeFuncExpr{Name: NewColIdent("localtime"), Fsp: yyDollar[2].expr}
		}
	case 511:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2655
		{
			yyVAL.expr = &CurTimeFuncExpr{Name: NewColIdent("localtimestamp"), Fsp: yyDollar[2].expr}
		}
	case 512:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2660
		{
			yyVAL.expr = &CurTimeFuncExpr{Name: NewColIdent("current_time"), Fsp: yyDollar[2].expr}
		}
	case 513:
		yyDollar = yyS[yypt-8 : yypt+1]
//line sql.y:2664
		{
			yyVAL.expr = &TimestampFuncExpr{Name: string("timestampadd"), Unit: yyDollar[3].colIdent.String(), Expr1: yyDollar[5].expr, Expr2: yyDollar[7].expr}
		}
	case 514:
		yyDollar = yyS[yypt-8 : yypt+1]
//line sql.y:2668
		{
			yyVAL.expr = &TimestampFuncExpr{Name: string("timestampdiff"), Unit: yyDollar[3].colIdent.String(), Expr1: yyDollar[5].expr, Expr2: yyDollar[7].expr}
		}
	case 517:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2678
		{
			yyVAL.expr = yyDollar[2].expr
		}
	case 518:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:2688
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("if"), Exprs: yyDollar[3].selectExprs}
		}
	case 519:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:2692
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("database"), Exprs: yyDollar[3].selectExprs}
		}
	case 520:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:2696
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("mod"), Exprs: yyDollar[3].selectExprs}
		}
	case 521:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:2700
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("replace"), Exprs: yyDollar[3].selectExprs}
		}
	case 522:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:2704
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("substr"), Exprs: yyDollar[3].selectExprs}
		}
	case 523:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:2708
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("substr"), Exprs: yyDollar[3].selectExprs}
		}
	case 524:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:2714
		{
			yyVAL.str = ""
		}
	case 525:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2718
		{
			yyVAL.str = BooleanModeStr
		}
	case 526:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:2722
		{
			yyVAL.str = NaturalLanguageModeStr
		}
	case 527:
		yyDollar = yyS[yypt-7 : yypt+1]
//line sql.y:2726
		{
			yyVAL.str = NaturalLanguageModeWithQueryExpansionStr
		}
	case 528:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2730
		{
			yyVAL.str = QueryExpansionStr
		}
	case 529:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2736
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 530:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2740
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 531:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2746
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].sqlVal}
		}
	case 532:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2750
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].sqlVal, Charset: yyDollar[3].str, Operator: CharacterSetStr}
		}
	case 533:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2754
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].sqlVal, Charset: string(yyDollar[3].bytes)}
		}
	case 534:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2758
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes)}
		}
	case 535:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2762
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].sqlVal}
		}
	case 536:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2766
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes)}
			yyVAL.convertType.Length = yyDollar[2].LengthScaleOption.Length
			yyVAL.convertType.Scale = yyDollar[2].LengthScaleOption.Scale
		}
	case 537:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2772
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes)}
		}
	case 538:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2776
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].sqlVal}
		}
	case 539:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2780
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes)}
		}
	case 540:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2784
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes)}
		}
	case 541:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2788
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].sqlVal}
		}
	case 542:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2792
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes)}
		}
	case 543:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2796
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes)}
		}
	case 544:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:2801
		{
			yyVAL.expr = nil
		}
	case 545:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2805
		{
			yyVAL.expr = yyDollar[1].expr
		}
	case 546:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:2810
		{
			yyVAL.str = string("")
		}
	case 547:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2814
		{
			yyVAL.str = " separator '" + string(yyDollar[2].bytes) + "'"
		}
	case 548:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2820
		{
			yyVAL.whens = []*When{yyDollar[1].when}
		}
	case 549:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2824
		{
			yyVAL.whens = append(yyDollar[1].whens, yyDollar[2].when)
		}
	case 550:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:2830
		{
			yyVAL.when = &When{Cond: yyDollar[2].expr, Val: yyDollar[4].expr}
		}
	case 551:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:2835
		{
			yyVAL.expr = nil
		}
	case 552:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2839
		{
			yyVAL.expr = yyDollar[2].expr
		}
	case 553:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2845
		{
			yyVAL.colName = &ColName{Name: yyDollar[1].colIdent}
		}
	case 554:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2849
		{
			yyVAL.colName = &ColName{Qualifier: TableName{Name: yyDollar[1].tableIdent}, Name: yyDollar[3].colIdent}
		}
	case 555:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sql.y:2853
		{
			yyVAL.colName = &ColName{Qualifier: TableName{Qualifier: yyDollar[1].tableIdent, Name: yyDollar[3].tableIdent}, Name: yyDollar[5].colIdent}
		}
	case 556:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2859
		{
			yyVAL.expr = NewStrVal(yyDollar[1].bytes)
		}
	case 557:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2863
		{
			yyVAL.expr = NewHexVal(yyDollar[1].bytes)
		}
	case 558:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2867
		{
			yyVAL.expr = NewBitVal(yyDollar[1].bytes)
		}
	case 559:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2871
		{
			yyVAL.expr = NewIntVal(yyDollar[1].bytes)
		}
	case 560:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2875
		{
			yyVAL.expr = NewFloatVal(yyDollar[1].bytes)
		}
	case 561:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2879
		{
			yyVAL.expr = NewHexNum(yyDollar[1].bytes)
		}
	case 562:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2883
		{
			yyVAL.expr = NewValArg(yyDollar[1].bytes)
		}
	case 563:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2887
		{
			yyVAL.expr = &NullVal{}
		}
	case 564:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2893
		{
			// TODO(sougou): Deprecate this construct.
			if yyDollar[1].colIdent.Lowered() != "value" {
				yylex.Error("expecting value after next")
				return 1
			}
			yyVAL.expr = NewIntVal([]byte("1"))
		}
	case 565:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2902
		{
			yyVAL.expr = NewIntVal(yyDollar[1].bytes)
		}
	case 566:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2906
		{
			yyVAL.expr = NewValArg(yyDollar[1].bytes)
		}
	case 567:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:2911
		{
			yyVAL.exprs = nil
		}
	case 568:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2915
		{
			yyVAL.exprs = yyDollar[3].exprs
		}
	case 569:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:2920
		{
			yyVAL.expr = nil
		}
	case 570:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2924
		{
			yyVAL.expr = yyDollar[2].expr
		}
	case 571:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:2929
		{
			yyVAL.orderBy = nil
		}
	case 572:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2933
		{
			yyVAL.orderBy = yyDollar[3].orderBy
		}
	case 573:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2939
		{
			yyVAL.orderBy = OrderBy{yyDollar[1].order}
		}
	case 574:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2943
		{
			yyVAL.orderBy = append(yyDollar[1].orderBy, yyDollar[3].order)
		}
	case 575:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2949
		{
			yyVAL.order = &Order{Expr: yyDollar[1].expr, Direction: yyDollar[2].str}
		}
	case 576:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:2954
		{
			yyVAL.str = AscScr
		}
	case 577:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2958
		{
			yyVAL.str = AscScr
		}
	case 578:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2962
		{
			yyVAL.str = DescScr
		}
	case 579:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:2967
		{
			yyVAL.limit = nil
		}
	case 580:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2971
		{
			yyVAL.limit = &Limit{Rowcount: yyDollar[2].expr}
		}
	case 581:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:2975
		{
			yyVAL.limit = &Limit{Offset: yyDollar[2].expr, Rowcount: yyDollar[4].expr}
		}
	case 582:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:2979
		{
			yyVAL.limit = &Limit{Offset: yyDollar[4].expr, Rowcount: yyDollar[2].expr}
		}
	case 583:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:2984
		{
			yyVAL.str = ""
		}
	case 584:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2988
		{
			yyVAL.str = ForUpdateStr
		}
	case 585:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:2992
		{
			yyVAL.str = ShareModeStr
		}
	case 586:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:2997
		{
			yyVAL.triggers = nil
		}
	case 587:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:3001
		{
			yyVAL.triggers = yyDollar[2].triggers
		}
	case 588:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3007
		{
			yyVAL.triggers = []Trigger{yyDollar[1].trigger}
		}
	case 589:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:3011
		{
			yyVAL.triggers = append(yyDollar[1].triggers, yyDollar[3].trigger)
		}
	case 590:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:3017
		{
			yyVAL.trigger = &WatermarkTrigger{}
		}
	case 591:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:3021
		{
			yyVAL.trigger = &DelayTrigger{Delay: yyDollar[3].expr}
		}
	case 592:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:3025
		{
			yyVAL.trigger = &CountingTrigger{Count: yyDollar[2].expr}
		}
	case 593:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:3038
		{
			yyVAL.ins = &Insert{Rows: yyDollar[2].values}
		}
	case 594:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3042
		{
			yyVAL.ins = &Insert{Rows: yyDollar[1].selStmt}
		}
	case 595:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:3046
		{
			// Drop the redundant parenthesis.
			yyVAL.ins = &Insert{Rows: yyDollar[2].selStmt}
		}
	case 596:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sql.y:3051
		{
			yyVAL.ins = &Insert{Columns: yyDollar[2].columns, Rows: yyDollar[5].values}
		}
	case 597:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:3055
		{
			yyVAL.ins = &Insert{Columns: yyDollar[2].columns, Rows: yyDollar[4].selStmt}
		}
	case 598:
		yyDollar = yyS[yypt-6 : yypt+1]
//line sql.y:3059
		{
			// Drop the redundant parenthesis.
			yyVAL.ins = &Insert{Columns: yyDollar[2].columns, Rows: yyDollar[5].selStmt}
		}
	case 599:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3066
		{
			yyVAL.columns = Columns{yyDollar[1].colIdent}
		}
	case 600:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:3070
		{
			yyVAL.columns = Columns{yyDollar[3].colIdent}
		}
	case 601:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:3074
		{
			yyVAL.columns = append(yyVAL.columns, yyDollar[3].colIdent)
		}
	case 602:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sql.y:3078
		{
			yyVAL.columns = append(yyVAL.columns, yyDollar[5].colIdent)
		}
	case 603:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:3083
		{
			yyVAL.updateExprs = nil
		}
	case 604:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sql.y:3087
		{
			yyVAL.updateExprs = yyDollar[5].updateExprs
		}
	case 605:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3093
		{
			yyVAL.values = Values{yyDollar[1].valTuple}
		}
	case 606:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:3097
		{
			yyVAL.values = append(yyDollar[1].values, yyDollar[3].valTuple)
		}
	case 607:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3103
		{
			yyVAL.valTuple = yyDollar[1].valTuple
		}
	case 608:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:3107
		{
			yyVAL.valTuple = ValTuple{}
		}
	case 609:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:3113
		{
			yyVAL.valTuple = ValTuple(yyDollar[2].exprs)
		}
	case 610:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3119
		{
			if len(yyDollar[1].valTuple) == 1 {
				yyVAL.expr = &ParenExpr{yyDollar[1].valTuple[0]}
			} else {
				yyVAL.expr = yyDollar[1].valTuple
			}
		}
	case 611:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3129
		{
			yyVAL.updateExprs = UpdateExprs{yyDollar[1].updateExpr}
		}
	case 612:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:3133
		{
			yyVAL.updateExprs = append(yyDollar[1].updateExprs, yyDollar[3].updateExpr)
		}
	case 613:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:3139
		{
			yyVAL.updateExpr = &UpdateExpr{Name: yyDollar[1].colName, Expr: yyDollar[3].expr}
		}
	case 614:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3145
		{
			yyVAL.setExprs = SetExprs{yyDollar[1].setExpr}
		}
	case 615:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:3149
		{
			yyVAL.setExprs = append(yyDollar[1].setExprs, yyDollar[3].setExpr)
		}
	case 616:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:3155
		{
			yyVAL.setExpr = &SetExpr{Name: yyDollar[1].colIdent, Expr: NewStrVal([]byte("on"))}
		}
	case 617:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:3159
		{
			yyVAL.setExpr = &SetExpr{Name: yyDollar[1].colIdent, Expr: NewStrVal([]byte("off"))}
		}
	case 618:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:3163
		{
			yyVAL.setExpr = &SetExpr{Name: yyDollar[1].colIdent, Expr: yyDollar[3].expr}
		}
	case 619:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:3167
		{
			yyVAL.setExpr = &SetExpr{Name: NewColIdent(string(yyDollar[1].bytes)), Expr: yyDollar[2].expr}
		}
	case 621:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:3174
		{
			yyVAL.bytes = []byte("charset")
		}
	case 623:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3181
		{
			yyVAL.expr = NewStrVal([]byte(yyDollar[1].colIdent.String()))
		}
	case 624:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3185
		{
			yyVAL.expr = NewStrVal(yyDollar[1].bytes)
		}
	case 625:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3189
		{
			yyVAL.expr = &Default{}
		}
	case 628:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:3198
		{
			yyVAL.byt = 0
		}
	case 629:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:3200
		{
			yyVAL.byt = 1
		}
	case 630:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:3203
		{
			yyVAL.empty = struct{}{}
		}
	case 631:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:3205
		{
			yyVAL.empty = struct{}{}
		}
	case 632:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:3208
		{
			yyVAL.str = ""
		}
	case 633:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3210
		{
			yyVAL.str = IgnoreStr
		}
	case 634:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3214
		{
			yyVAL.empty = struct{}{}
		}
	case 635:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3216
		{
			yyVAL.empty = struct{}{}
		}
	case 636:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3218
		{
			yyVAL.empty = struct{}{}
		}
	case 637:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3220
		{
			yyVAL.empty = struct{}{}
		}
	case 638:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3222
		{
			yyVAL.empty = struct{}{}
		}
	case 639:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3224
		{
			yyVAL.empty = struct{}{}
		}
	case 640:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3226
		{
			yyVAL.empty = struct{}{}
		}
	case 641:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3228
		{
			yyVAL.empty = struct{}{}
		}
	case 642:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3230
		{
			yyVAL.empty = struct{}{}
		}
	case 643:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3232
		{
			yyVAL.empty = struct{}{}
		}
	case 644:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:3235
		{
			yyVAL.empty = struct{}{}
		}
	case 645:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3237
		{
			yyVAL.empty = struct{}{}
		}
	case 646:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3239
		{
			yyVAL.empty = struct{}{}
		}
	case 647:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3243
		{
			yyVAL.empty = struct{}{}
		}
	case 648:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3245
		{
			yyVAL.empty = struct{}{}
		}
	case 649:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:3248
		{
			yyVAL.empty = struct{}{}
		}
	case 650:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3250
		{
			yyVAL.empty = struct{}{}
		}
	case 651:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3252
		{
			yyVAL.empty = struct{}{}
		}
	case 652:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:3255
		{
			yyVAL.colIdent = ColIdent{}
		}
	case 653:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:3257
		{
			yyVAL.colIdent = yyDollar[2].colIdent
		}
	case 654:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3261
		{
			yyVAL.colIdent = NewColIdent(string(yyDollar[1].bytes))
		}
	case 655:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3265
		{
			yyVAL.colIdent = NewColIdent(string(yyDollar[1].bytes))
		}
	case 657:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3272
		{
			yyVAL.colIdent = NewColIdent(string(yyDollar[1].bytes))
		}
	case 658:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3278
		{
			yyVAL.tableIdent = NewTableIdent(string(yyDollar[1].bytes))
		}
	case 659:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3282
		{
			yyVAL.tableIdent = NewTableIdent(string(yyDollar[1].bytes))
		}
	case 661:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3289
		{
			yyVAL.tableIdent = NewTableIdent(string(yyDollar[1].bytes))
		}
	case 876:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3529
		{
			if incNesting(yylex) {
				yylex.Error("max nesting level reached")
				return 1
			}
		}
	case 877:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3538
		{
			decNesting(yylex)
		}
	case 878:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:3543
		{
			skipToEnd(yylex)
		}
	case 879:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:3548
		{
			skipToEnd(yylex)
		}
	case 880:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3552
		{
			skipToEnd(yylex)
		}
	case 881:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3556
		{
			skipToEnd(yylex)
		}
	}
	goto yystack /* stack new state and value */
}
