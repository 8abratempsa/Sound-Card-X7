// Code generated by goyacc -v sql.out -o sql.go sql.y. DO NOT EDIT.

//line sql.y:24
package sqlparser

import __yyfmt__ "fmt"

//line sql.y:24

func setParseTree(yylex interface{}, stmt Statement) {
	yylex.(*Tokenizer).ParseTree = stmt
}

func setAllowComments(yylex interface{}, allow bool) {
	yylex.(*Tokenizer).AllowComments = allow
}

func setDDL(yylex interface{}, ddl *DDL) {
	yylex.(*Tokenizer).partialDDL = ddl
}

func incNesting(yylex interface{}) bool {
	yylex.(*Tokenizer).nesting++
	if yylex.(*Tokenizer).nesting == 200 {
		return true
	}
	return false
}

func decNesting(yylex interface{}) {
	yylex.(*Tokenizer).nesting--
}

// skipToEnd forces the lexer to end prematurely. Not all SQL statements
// are supported by the Parser, thus calling skipToEnd will make the lexer
// return EOF early.
func skipToEnd(yylex interface{}) {
	yylex.(*Tokenizer).SkipToEnd = true
}

//line sql.y:59
type yySymType struct {
	yys                              int
	tableValuedFunctionArguments     TableValuedFunctionArguments
	tableValuedFunctionArgument      *TableValuedFunctionArgument
	tableValuedFunctionArgumentValue TableValuedFunctionArgumentValue
	commonTableExpression            *CommonTableExpression
	commonTableExpressions           CommonTableExpressions
	with                             *With
	empty                            struct{}
	statement                        Statement
	selStmt                          SelectStatement
	ddl                              *DDL
	ins                              *Insert
	byt                              byte
	bytes                            []byte
	bytes2                           [][]byte
	str                              string
	strs                             []string
	selectExprs                      SelectExprs
	selectExpr                       SelectExpr
	columns                          Columns
	partitions                       Partitions
	colName                          *ColName
	tableExprs                       TableExprs
	tableExpr                        TableExpr
	joinCondition                    JoinCondition
	tableName                        TableName
	tableNames                       TableNames
	indexHints                       *IndexHints
	expr                             Expr
	exprs                            Exprs
	boolVal                          BoolVal
	sqlVal                           *SQLVal
	colTuple                         ColTuple
	values                           Values
	valTuple                         ValTuple
	subquery                         *Subquery
	whens                            []*When
	when                             *When
	orderBy                          OrderBy
	order                            *Order
	limit                            *Limit
	triggers                         []Trigger
	trigger                          Trigger
	updateExprs                      UpdateExprs
	setExprs                         SetExprs
	updateExpr                       *UpdateExpr
	setExpr                          *SetExpr
	colIdent                         ColIdent
	tableIdent                       TableIdent
	convertType                      ConvertType
	aliasedTableName                 *AliasedTableExpr
	TableSpec                        *TableSpec
	columnType                       ColumnType
	colKeyOpt                        ColumnKeyOption
	optVal                           Expr
	LengthScaleOption                LengthScaleOption
	columnDefinition                 *ColumnDefinition
	indexDefinition                  *IndexDefinition
	indexInfo                        *IndexInfo
	indexOption                      *IndexOption
	indexOptions                     []*IndexOption
	indexColumn                      *IndexColumn
	indexColumns                     []*IndexColumn
	constraintDefinition             *ConstraintDefinition
	constraintInfo                   ConstraintInfo
	ReferenceAction                  ReferenceAction
	partDefs                         []*PartitionDefinition
	partDef                          *PartitionDefinition
	partSpec                         *PartitionSpec
	vindexParam                      VindexParam
	vindexParams                     []VindexParam
	showFilter                       *ShowFilter
	optLike                          *OptLike
}

const LEX_ERROR = 57346
const UNION = 57347
const SELECT = 57348
const STREAM = 57349
const INSERT = 57350
const UPDATE = 57351
const DELETE = 57352
const FROM = 57353
const WHERE = 57354
const GROUP = 57355
const HAVING = 57356
const ORDER = 57357
const BY = 57358
const LIMIT = 57359
const OFFSET = 57360
const FOR = 57361
const WATERMARK = 57362
const DELAY = 57363
const COUNTING = 57364
const AFTER = 57365
const ALL = 57366
const DISTINCT = 57367
const AS = 57368
const EXISTS = 57369
const ASC = 57370
const DESC = 57371
const INTO = 57372
const DUPLICATE = 57373
const KEY = 57374
const DEFAULT = 57375
const SET = 57376
const LOCK = 57377
const UNLOCK = 57378
const KEYS = 57379
const VALUES = 57380
const LAST_INSERT_ID = 57381
const NEXT = 57382
const VALUE = 57383
const SHARE = 57384
const MODE = 57385
const SQL_NO_CACHE = 57386
const SQL_CACHE = 57387
const JOIN = 57388
const STRAIGHT_JOIN = 57389
const LOOKUP = 57390
const LEFT = 57391
const RIGHT = 57392
const INNER = 57393
const OUTER = 57394
const CROSS = 57395
const NATURAL = 57396
const USE = 57397
const FORCE = 57398
const ON = 57399
const USING = 57400
const ID = 57401
const HEX = 57402
const STRING = 57403
const INTEGRAL = 57404
const FLOAT = 57405
const HEXNUM = 57406
const VALUE_ARG = 57407
const LIST_ARG = 57408
const COMMENT = 57409
const COMMENT_KEYWORD = 57410
const BIT_LITERAL = 57411
const LIST_TYPE = 57412
const OBJECT_TYPE = 57413
const NULL = 57414
const TRUE = 57415
const FALSE = 57416
const OFF = 57417
const OR = 57418
const AND = 57419
const NOT = 57420
const BETWEEN = 57421
const CASE = 57422
const WHEN = 57423
const THEN = 57424
const ELSE = 57425
const END = 57426
const OF = 57427
const LE = 57428
const GE = 57429
const NE = 57430
const NULL_SAFE_EQUAL = 57431
const IS = 57432
const LIKE = 57433
const REGEXP = 57434
const IN = 57435
const RIGHTARROW = 57436
const SHIFT_LEFT = 57437
const SHIFT_RIGHT = 57438
const DIV = 57439
const MOD = 57440
const NOT_LIKE_REGEXP = 57441
const LIKE_REGEXP_CASE_INSENSITIVE = 57442
const NOT_LIKE_REGEXP_CASE_INSENSITIVE = 57443
const UNARY = 57444
const COLLATE = 57445
const BINARY = 57446
const UNDERSCORE_BINARY = 57447
const UNDERSCORE_UTF8MB4 = 57448
const INTERVAL = 57449
const JSON_EXTRACT_OP = 57450
const JSON_UNQUOTE_EXTRACT_OP = 57451
const CREATE = 57452
const ALTER = 57453
const DROP = 57454
const RENAME = 57455
const ANALYZE = 57456
const ADD = 57457
const FLUSH = 57458
const SCHEMA = 57459
const TABLE = 57460
const DESCRIPTOR = 57461
const INDEX = 57462
const VIEW = 57463
const TO = 57464
const IGNORE = 57465
const IF = 57466
const UNIQUE = 57467
const PRIMARY = 57468
const COLUMN = 57469
const SPATIAL = 57470
const FULLTEXT = 57471
const KEY_BLOCK_SIZE = 57472
const ACTION = 57473
const CASCADE = 57474
const CONSTRAINT = 57475
const FOREIGN = 57476
const NO = 57477
const REFERENCES = 57478
const RESTRICT = 57479
const SHOW = 57480
const DESCRIBE = 57481
const EXPLAIN = 57482
const DATE = 57483
const ESCAPE = 57484
const REPAIR = 57485
const OPTIMIZE = 57486
const TRUNCATE = 57487
const MAXVALUE = 57488
const PARTITION = 57489
const REORGANIZE = 57490
const LESS = 57491
const THAN = 57492
const PROCEDURE = 57493
const TRIGGER = 57494
const VINDEX = 57495
const VINDEXES = 57496
const STATUS = 57497
const VARIABLES = 57498
const WARNINGS = 57499
const BEGIN = 57500
const START = 57501
const TRANSACTION = 57502
const COMMIT = 57503
const ROLLBACK = 57504
const BIT = 57505
const TINYINT = 57506
const SMALLINT = 57507
const MEDIUMINT = 57508
const INT = 57509
const INTEGER = 57510
const BIGINT = 57511
const INTNUM = 57512
const REAL = 57513
const DOUBLE = 57514
const FLOAT_TYPE = 57515
const DECIMAL = 57516
const NUMERIC = 57517
const TIME = 57518
const TIMESTAMP = 57519
const DATETIME = 57520
const YEAR = 57521
const CHAR = 57522
const VARCHAR = 57523
const BOOL = 57524
const CHARACTER = 57525
const VARBINARY = 57526
const NCHAR = 57527
const TEXT = 57528
const TINYTEXT = 57529
const MEDIUMTEXT = 57530
const LONGTEXT = 57531
const BLOB = 57532
const TINYBLOB = 57533
const MEDIUMBLOB = 57534
const LONGBLOB = 57535
const JSON = 57536
const ENUM = 57537
const GEOMETRY = 57538
const POINT = 57539
const LINESTRING = 57540
const POLYGON = 57541
const GEOMETRYCOLLECTION = 57542
const MULTIPOINT = 57543
const MULTILINESTRING = 57544
const MULTIPOLYGON = 57545
const NULLX = 57546
const AUTO_INCREMENT = 57547
const APPROXNUM = 57548
const SIGNED = 57549
const UNSIGNED = 57550
const ZEROFILL = 57551
const COLLATION = 57552
const DATABASES = 57553
const SCHEMAS = 57554
const TABLES = 57555
const VITESS_KEYSPACES = 57556
const VITESS_SHARDS = 57557
const VITESS_TABLETS = 57558
const VSCHEMA = 57559
const VSCHEMA_TABLES = 57560
const VITESS_TARGET = 57561
const FULL = 57562
const PROCESSLIST = 57563
const COLUMNS = 57564
const FIELDS = 57565
const ENGINES = 57566
const PLUGINS = 57567
const NAMES = 57568
const CHARSET = 57569
const GLOBAL = 57570
const SESSION = 57571
const ISOLATION = 57572
const LEVEL = 57573
const READ = 57574
const WRITE = 57575
const ONLY = 57576
const REPEATABLE = 57577
const COMMITTED = 57578
const UNCOMMITTED = 57579
const SERIALIZABLE = 57580
const CURRENT_TIMESTAMP = 57581
const DATABASE = 57582
const CURRENT_DATE = 57583
const CURRENT_TIME = 57584
const LOCALTIME = 57585
const LOCALTIMESTAMP = 57586
const UTC_DATE = 57587
const UTC_TIME = 57588
const UTC_TIMESTAMP = 57589
const REPLACE = 57590
const CONVERT = 57591
const CAST = 57592
const SUBSTR = 57593
const SUBSTRING = 57594
const GROUP_CONCAT = 57595
const SEPARATOR = 57596
const TIMESTAMPADD = 57597
const TIMESTAMPDIFF = 57598
const MATCH = 57599
const AGAINST = 57600
const BOOLEAN = 57601
const LANGUAGE = 57602
const WITH = 57603
const QUERY = 57604
const EXPANSION = 57605
const UNUSED = 57606

var yyToknames = [...]string{
	"$end",
	"error",
	"$unk",
	"LEX_ERROR",
	"UNION",
	"SELECT",
	"STREAM",
	"INSERT",
	"UPDATE",
	"DELETE",
	"FROM",
	"WHERE",
	"GROUP",
	"HAVING",
	"ORDER",
	"BY",
	"LIMIT",
	"OFFSET",
	"FOR",
	"WATERMARK",
	"DELAY",
	"COUNTING",
	"AFTER",
	"ALL",
	"DISTINCT",
	"AS",
	"EXISTS",
	"ASC",
	"DESC",
	"INTO",
	"DUPLICATE",
	"KEY",
	"DEFAULT",
	"SET",
	"LOCK",
	"UNLOCK",
	"KEYS",
	"VALUES",
	"LAST_INSERT_ID",
	"NEXT",
	"VALUE",
	"SHARE",
	"MODE",
	"SQL_NO_CACHE",
	"SQL_CACHE",
	"JOIN",
	"STRAIGHT_JOIN",
	"LOOKUP",
	"LEFT",
	"RIGHT",
	"INNER",
	"OUTER",
	"CROSS",
	"NATURAL",
	"USE",
	"FORCE",
	"ON",
	"USING",
	"'('",
	"','",
	"')'",
	"ID",
	"HEX",
	"STRING",
	"INTEGRAL",
	"FLOAT",
	"HEXNUM",
	"VALUE_ARG",
	"LIST_ARG",
	"COMMENT",
	"COMMENT_KEYWORD",
	"BIT_LITERAL",
	"LIST_TYPE",
	"OBJECT_TYPE",
	"NULL",
	"TRUE",
	"FALSE",
	"OFF",
	"OR",
	"AND",
	"NOT",
	"'!'",
	"BETWEEN",
	"CASE",
	"WHEN",
	"THEN",
	"ELSE",
	"END",
	"OF",
	"'='",
	"'<'",
	"'>'",
	"LE",
	"GE",
	"NE",
	"NULL_SAFE_EQUAL",
	"IS",
	"LIKE",
	"REGEXP",
	"IN",
	"RIGHTARROW",
	"'|'",
	"'&'",
	"SHIFT_LEFT",
	"SHIFT_RIGHT",
	"'+'",
	"'-'",
	"'*'",
	"'/'",
	"DIV",
	"'%'",
	"MOD",
	"'^'",
	"'~'",
	"NOT_LIKE_REGEXP",
	"LIKE_REGEXP_CASE_INSENSITIVE",
	"NOT_LIKE_REGEXP_CASE_INSENSITIVE",
	"UNARY",
	"COLLATE",
	"BINARY",
	"UNDERSCORE_BINARY",
	"UNDERSCORE_UTF8MB4",
	"INTERVAL",
	"'.'",
	"JSON_EXTRACT_OP",
	"JSON_UNQUOTE_EXTRACT_OP",
	"CREATE",
	"ALTER",
	"DROP",
	"RENAME",
	"ANALYZE",
	"ADD",
	"FLUSH",
	"SCHEMA",
	"TABLE",
	"DESCRIPTOR",
	"INDEX",
	"VIEW",
	"TO",
	"IGNORE",
	"IF",
	"UNIQUE",
	"PRIMARY",
	"COLUMN",
	"SPATIAL",
	"FULLTEXT",
	"KEY_BLOCK_SIZE",
	"ACTION",
	"CASCADE",
	"CONSTRAINT",
	"FOREIGN",
	"NO",
	"REFERENCES",
	"RESTRICT",
	"SHOW",
	"DESCRIBE",
	"EXPLAIN",
	"DATE",
	"ESCAPE",
	"REPAIR",
	"OPTIMIZE",
	"TRUNCATE",
	"MAXVALUE",
	"PARTITION",
	"REORGANIZE",
	"LESS",
	"THAN",
	"PROCEDURE",
	"TRIGGER",
	"VINDEX",
	"VINDEXES",
	"STATUS",
	"VARIABLES",
	"WARNINGS",
	"BEGIN",
	"START",
	"TRANSACTION",
	"COMMIT",
	"ROLLBACK",
	"BIT",
	"TINYINT",
	"SMALLINT",
	"MEDIUMINT",
	"INT",
	"INTEGER",
	"BIGINT",
	"INTNUM",
	"REAL",
	"DOUBLE",
	"FLOAT_TYPE",
	"DECIMAL",
	"NUMERIC",
	"TIME",
	"TIMESTAMP",
	"DATETIME",
	"YEAR",
	"CHAR",
	"VARCHAR",
	"BOOL",
	"CHARACTER",
	"VARBINARY",
	"NCHAR",
	"TEXT",
	"TINYTEXT",
	"MEDIUMTEXT",
	"LONGTEXT",
	"BLOB",
	"TINYBLOB",
	"MEDIUMBLOB",
	"LONGBLOB",
	"JSON",
	"ENUM",
	"GEOMETRY",
	"POINT",
	"LINESTRING",
	"POLYGON",
	"GEOMETRYCOLLECTION",
	"MULTIPOINT",
	"MULTILINESTRING",
	"MULTIPOLYGON",
	"NULLX",
	"AUTO_INCREMENT",
	"APPROXNUM",
	"SIGNED",
	"UNSIGNED",
	"ZEROFILL",
	"COLLATION",
	"DATABASES",
	"SCHEMAS",
	"TABLES",
	"VITESS_KEYSPACES",
	"VITESS_SHARDS",
	"VITESS_TABLETS",
	"VSCHEMA",
	"VSCHEMA_TABLES",
	"VITESS_TARGET",
	"FULL",
	"PROCESSLIST",
	"COLUMNS",
	"FIELDS",
	"ENGINES",
	"PLUGINS",
	"NAMES",
	"CHARSET",
	"GLOBAL",
	"SESSION",
	"ISOLATION",
	"LEVEL",
	"READ",
	"WRITE",
	"ONLY",
	"REPEATABLE",
	"COMMITTED",
	"UNCOMMITTED",
	"SERIALIZABLE",
	"CURRENT_TIMESTAMP",
	"DATABASE",
	"CURRENT_DATE",
	"CURRENT_TIME",
	"LOCALTIME",
	"LOCALTIMESTAMP",
	"UTC_DATE",
	"UTC_TIME",
	"UTC_TIMESTAMP",
	"REPLACE",
	"CONVERT",
	"CAST",
	"SUBSTR",
	"SUBSTRING",
	"GROUP_CONCAT",
	"SEPARATOR",
	"TIMESTAMPADD",
	"TIMESTAMPDIFF",
	"MATCH",
	"AGAINST",
	"BOOLEAN",
	"LANGUAGE",
	"WITH",
	"QUERY",
	"EXPANSION",
	"UNUSED",
	"';'",
	"'['",
	"']'",
}

var yyStatenames = [...]string{}

const yyEofCode = 1
const yyErrCode = 2
const yyInitialStackSize = 16

//line yacctab:1
var yyExca = [...]int{
	-1, 1,
	1, -1,
	-2, 0,
	-1, 38,
	172, 303,
	173, 303,
	-2, 293,
	-1, 282,
	124, 659,
	-2, 655,
	-1, 283,
	124, 660,
	-2, 656,
	-1, 351,
	90, 840,
	-2, 68,
	-1, 352,
	90, 795,
	-2, 69,
	-1, 357,
	90, 771,
	-2, 621,
	-1, 359,
	90, 816,
	-2, 623,
	-1, 633,
	46, 387,
	51, 387,
	53, 387,
	-2, 349,
	-1, 637,
	1, 355,
	7, 355,
	12, 355,
	13, 355,
	14, 355,
	15, 355,
	17, 355,
	19, 355,
	34, 355,
	35, 355,
	46, 355,
	47, 355,
	48, 355,
	49, 355,
	50, 355,
	51, 355,
	53, 355,
	54, 355,
	57, 355,
	58, 355,
	60, 355,
	61, 355,
	169, 355,
	282, 355,
	-2, 382,
	-1, 641,
	58, 49,
	60, 49,
	-2, 53,
	-1, 786,
	124, 662,
	-2, 658,
	-1, 1022,
	5, 35,
	-2, 456,
	-1, 1058,
	46, 387,
	51, 387,
	53, 387,
	-2, 350,
	-1, 1285,
	5, 35,
	-2, 596,
	-1, 1427,
	5, 35,
	-2, 599,
}

const yyPrivate = 57344

const yyLast = 14067

var yyAct = [...]int{
	283, 1477, 1467, 1439, 906, 1055, 1358, 1256, 287, 1078,
	593, 1151, 1413, 300, 1193, 1230, 1326, 1192, 258, 313,
	1209, 1076, 1189, 633, 66, 881, 876, 289, 62, 935,
	1056, 985, 1084, 208, 878, 915, 58, 66, 592, 3,
	66, 1199, 819, 1105, 750, 905, 830, 249, 737, 356,
	815, 1313, 902, 1013, 827, 634, 1131, 919, 1122, 868,
	654, 848, 788, 517, 458, 350, 345, 523, 532, 949,
	653, 861, 540, 270, 342, 347, 643, 607, 945, 57,
	1470, 1445, 1465, 1425, 1461, 1257, 1444, 488, 1424, 1181,
	25, 257, 570, 250, 251, 252, 253, 1277, 463, 256,
	608, 490, 61, 1224, 548, 1093, 555, 511, 1092, 897,
	898, 1094, 929, 572, 573, 574, 575, 576, 577, 578,
	570, 549, 554, 547, 896, 557, 556, 566, 567, 559,
	560, 561, 562, 563, 564, 565, 558, 550, 552, 551,
	553, 255, 568, 55, 1225, 1226, 570, 655, 571, 656,
	570, 1386, 254, 557, 556, 566, 567, 559, 560, 561,
	562, 563, 564, 565, 558, 210, 510, 212, 1113, 928,
	568, 1316, 464, 25, 492, 476, 571, 494, 936, 557,
	556, 566, 567, 559, 560, 561, 562, 563, 564, 565,
	558, 248, 500, 501, 66, 208, 568, 570, 829, 66,
	568, 66, 571, 22, 25, 1342, 571, 491, 493, 218,
	214, 66, 215, 216, 66, 280, 1154, 1153, 640, 724,
	66, 209, 1419, 66, 726, 208, 55, 208, 208, 570,
	208, 208, 1050, 208, 1463, 208, 1051, 274, 1457, 1481,
	1414, 558, 507, 1150, 208, 1406, 862, 568, 570, 920,
	508, 505, 506, 571, 1485, 220, 1367, 55, 477, 725,
	465, 211, 212, 66, 566, 567, 559, 560, 561, 562,
	563, 564, 565, 558, 1155, 516, 730, 208, 717, 568,
	1359, 853, 353, 570, 1219, 571, 922, 561, 562, 563,
	564, 565, 558, 1361, 1218, 1217, 489, 903, 568, 461,
	525, 528, 513, 514, 571, 529, 569, 727, 468, 222,
	1423, 213, 581, 1079, 1081, 1393, 557, 556, 566, 567,
	559, 560, 561, 562, 563, 564, 565, 558, 979, 1387,
	1288, 978, 217, 568, 569, 1161, 1280, 1089, 892, 571,
	66, 66, 66, 188, 1147, 570, 1216, 1041, 751, 208,
	1149, 473, 1007, 759, 1479, 208, 649, 1480, 544, 1478,
	569, 1016, 23, 483, 569, 526, 1368, 1366, 637, 1360,
	190, 191, 192, 193, 194, 632, 466, 467, 557, 556,
	566, 567, 559, 560, 561, 562, 563, 564, 565, 558,
	265, 921, 479, 480, 481, 568, 1242, 756, 1080, 987,
	539, 571, 1404, 459, 610, 612, 614, 616, 618, 620,
	621, 569, 344, 339, 340, 1376, 642, 460, 1203, 462,
	647, 470, 657, 471, 651, 197, 472, 611, 613, 469,
	617, 619, 475, 622, 1459, 922, 353, 752, 482, 457,
	1183, 484, 537, 569, 325, 23, 331, 332, 329, 330,
	328, 327, 326, 849, 1243, 1148, 795, 1146, 66, 539,
	333, 334, 569, 208, 198, 1106, 762, 763, 66, 66,
	208, 793, 794, 792, 66, 719, 23, 66, 1279, 1111,
	66, 538, 537, 1409, 66, 986, 208, 570, 1185, 1451,
	208, 208, 208, 66, 208, 208, 1274, 569, 849, 539,
	1038, 208, 208, 1004, 1005, 1006, 583, 584, 585, 586,
	587, 588, 589, 590, 1486, 534, 1431, 538, 537, 1322,
	557, 556, 566, 567, 559, 560, 561, 562, 563, 564,
	565, 558, 208, 739, 1433, 539, 66, 568, 1405, 515,
	921, 1321, 208, 571, 538, 537, 570, 765, 778, 780,
	781, 731, 1126, 1337, 779, 55, 1487, 1452, 631, 569,
	641, 758, 539, 925, 1125, 791, 764, 789, 816, 926,
	817, 821, 208, 1114, 1319, 790, 1027, 1158, 922, 557,
	556, 566, 567, 559, 560, 561, 562, 563, 564, 565,
	558, 208, 1123, 784, 786, 1402, 568, 1026, 1095, 1025,
	1096, 516, 571, 757, 767, 1364, 1462, 1450, 459, 839,
	842, 530, 1373, 871, 782, 850, 1435, 516, 538, 537,
	1364, 1417, 538, 537, 208, 208, 1364, 516, 1372, 538,
	537, 66, 785, 1259, 834, 1106, 539, 1364, 1394, 66,
	539, 66, 1364, 1363, 66, 66, 1101, 539, 66, 66,
	66, 208, 825, 872, 870, 873, 874, 1311, 1310, 1239,
	875, 1290, 516, 923, 208, 736, 637, 516, 55, 883,
	735, 637, 846, 1287, 516, 637, 665, 720, 887, 1249,
	1248, 858, 889, 921, 1245, 1246, 721, 722, 918, 916,
	718, 917, 728, 1245, 1244, 344, 914, 920, 734, 739,
	715, 569, 1020, 516, 865, 516, 832, 516, 937, 938,
	939, 744, 645, 885, 485, 890, 893, 478, 66, 208,
	886, 208, 644, 894, 276, 208, 208, 66, 66, 910,
	66, 66, 664, 663, 66, 208, 1190, 864, 353, 1202,
	1202, 832, 1283, 1375, 1164, 645, 865, 1247, 1273, 1085,
	66, 907, 66, 66, 774, 66, 1215, 1085, 1097, 646,
	569, 648, 787, 865, 895, 796, 797, 798, 799, 800,
	801, 802, 803, 804, 805, 806, 807, 808, 809, 810,
	811, 812, 813, 814, 951, 818, 931, 932, 933, 934,
	947, 948, 646, 1020, 644, 835, 836, 865, 570, 841,
	844, 845, 942, 943, 944, 1202, 1044, 1043, 994, 786,
	871, 766, 789, 59, 1020, 644, 650, 760, 729, 267,
	790, 262, 1446, 1328, 857, 854, 859, 860, 995, 997,
	930, 557, 556, 566, 567, 559, 560, 561, 562, 563,
	564, 565, 558, 1442, 1441, 1298, 1235, 785, 568, 863,
	872, 870, 873, 874, 571, 1009, 1100, 875, 1020, 950,
	1210, 1211, 1152, 888, 1210, 1211, 66, 946, 66, 66,
	66, 941, 55, 1057, 831, 833, 940, 66, 1440, 1472,
	66, 208, 953, 1468, 1237, 66, 871, 66, 1208, 1058,
	1190, 1127, 1064, 637, 754, 637, 637, 637, 733, 1068,
	1052, 773, 1066, 1213, 1212, 1069, 208, 637, 1067, 1037,
	1098, 1206, 1060, 1083, 637, 1205, 1455, 1061, 834, 1062,
	1087, 1086, 1088, 1063, 1443, 1065, 872, 870, 873, 874,
	271, 272, 1160, 875, 1070, 1071, 954, 873, 874, 991,
	1448, 1002, 533, 1001, 518, 976, 977, 1118, 980, 981,
	662, 1110, 982, 1411, 208, 208, 1090, 531, 1410, 1340,
	519, 1115, 1116, 1107, 1108, 1102, 1281, 1324, 984, 956,
	732, 1003, 877, 990, 263, 1103, 1104, 268, 269, 533,
	1453, 570, 259, 208, 520, 524, 1000, 1380, 1117, 260,
	1119, 1120, 1121, 907, 999, 59, 1379, 1330, 1085, 66,
	1124, 509, 1474, 1473, 545, 1032, 1130, 1031, 208, 1010,
	1011, 1012, 569, 1029, 1028, 749, 535, 1143, 559, 560,
	561, 562, 563, 564, 565, 558, 821, 1019, 821, 1157,
	1474, 568, 1390, 1317, 755, 1464, 187, 571, 189, 594,
	312, 56, 1, 1466, 1258, 1035, 996, 1325, 605, 962,
	1412, 866, 1357, 1229, 208, 208, 1191, 913, 904, 1057,
	66, 196, 456, 1167, 1168, 195, 1403, 1173, 1174, 912,
	1176, 1194, 1182, 206, 911, 1365, 1315, 1175, 924, 1112,
	927, 1236, 1109, 208, 1408, 670, 668, 637, 1201, 669,
	994, 786, 1196, 667, 672, 1166, 671, 666, 208, 233,
	208, 208, 348, 658, 1228, 314, 52, 1017, 952, 1018,
	536, 199, 1145, 1144, 958, 1204, 1022, 1023, 1024, 1223,
	503, 1221, 504, 1030, 1220, 235, 1033, 1034, 66, 1186,
	579, 998, 1040, 1091, 354, 1197, 1042, 1232, 1438, 1045,
	1046, 1047, 1048, 1227, 1418, 66, 761, 1233, 1234, 522,
	1378, 208, 1329, 1036, 208, 208, 66, 604, 52, 847,
	1073, 288, 208, 777, 301, 66, 298, 299, 1240, 1241,
	768, 285, 1049, 546, 286, 278, 636, 629, 869, 1251,
	867, 1059, 343, 1207, 1294, 907, 1301, 907, 1074, 1263,
	1075, 1252, 637, 1254, 635, 569, 1264, 1163, 1276, 1265,
	1385, 772, 27, 186, 273, 19, 18, 17, 20, 16,
	15, 1057, 14, 474, 1282, 31, 208, 1162, 21, 13,
	12, 11, 10, 9, 8, 1295, 7, 6, 208, 5,
	1170, 1171, 1098, 1292, 753, 355, 208, 1300, 1291, 4,
	1309, 1299, 60, 261, 1177, 1178, 264, 1179, 1180, 1166,
	24, 208, 2, 0, 0, 0, 0, 0, 208, 1187,
	1188, 0, 775, 776, 0, 355, 0, 355, 355, 0,
	355, 355, 0, 355, 1318, 355, 1320, 0, 486, 0,
	0, 0, 0, 0, 355, 0, 0, 0, 208, 208,
	0, 208, 266, 0, 0, 0, 0, 0, 1341, 208,
	66, 1172, 0, 1194, 0, 0, 208, 208, 208, 66,
	1348, 0, 208, 0, 0, 907, 0, 542, 0, 0,
	594, 0, 0, 837, 838, 1343, 1238, 1362, 0, 208,
	487, 1369, 487, 487, 1356, 487, 487, 883, 487, 0,
	487, 0, 0, 0, 1312, 1327, 1250, 0, 0, 487,
	1349, 0, 66, 0, 0, 0, 1214, 1353, 1354, 1355,
	1391, 1396, 1194, 1253, 1401, 208, 1400, 52, 0, 527,
	0, 1370, 52, 1371, 1262, 1395, 208, 208, 0, 637,
	1377, 1416, 901, 1392, 0, 1267, 0, 580, 0, 355,
	582, 1421, 1415, 0, 208, 659, 1426, 0, 0, 1057,
	0, 0, 0, 0, 0, 0, 0, 66, 0, 0,
	0, 0, 0, 0, 0, 208, 0, 0, 591, 0,
	595, 596, 597, 598, 599, 600, 601, 602, 603, 1437,
	606, 609, 609, 609, 615, 609, 609, 615, 609, 623,
	624, 625, 626, 627, 628, 1449, 638, 208, 1447, 1266,
	0, 0, 0, 0, 1458, 0, 1268, 1269, 1270, 0,
	0, 0, 0, 1327, 907, 0, 0, 0, 0, 1471,
	0, 0, 0, 0, 0, 0, 1482, 1284, 1285, 1286,
	0, 1289, 992, 993, 0, 524, 0, 1331, 1332, 1333,
	1334, 1335, 0, 0, 0, 1338, 1339, 0, 1456, 0,
	0, 0, 1308, 355, 0, 495, 496, 0, 497, 498,
	355, 499, 0, 502, 0, 0, 0, 0, 0, 0,
	0, 0, 512, 0, 0, 0, 355, 0, 0, 0,
	355, 355, 355, 0, 355, 355, 0, 0, 0, 0,
	0, 355, 355, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 1021, 1336, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 487, 1272,
	0, 0, 769, 0, 1039, 487, 0, 0, 0, 0,
	0, 0, 542, 0, 0, 355, 0, 0, 0, 0,
	0, 487, 0, 0, 0, 487, 487, 487, 0, 487,
	487, 0, 0, 0, 0, 0, 487, 487, 0, 0,
	0, 0, 824, 1381, 1382, 1383, 1384, 0, 0, 570,
	1388, 1389, 0, 0, 0, 1432, 0, 0, 0, 0,
	1271, 826, 0, 52, 0, 1397, 1398, 1399, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 851, 0, 0,
	0, 0, 557, 556, 566, 567, 559, 560, 561, 562,
	563, 564, 565, 558, 855, 856, 0, 1422, 0, 568,
	0, 0, 0, 0, 1427, 571, 0, 1429, 1430, 0,
	570, 0, 0, 0, 0, 1475, 0, 0, 52, 0,
	0, 355, 0, 0, 1434, 687, 0, 0, 0, 0,
	0, 595, 0, 1138, 355, 0, 0, 0, 0, 0,
	0, 0, 1159, 557, 556, 566, 567, 559, 560, 561,
	562, 563, 564, 565, 558, 0, 0, 0, 0, 0,
	568, 0, 0, 1136, 0, 0, 571, 0, 0, 0,
	0, 716, 0, 0, 879, 880, 0, 0, 723, 638,
	0, 570, 0, 638, 0, 0, 0, 1483, 1484, 355,
	0, 355, 1169, 1184, 740, 974, 975, 0, 741, 742,
	743, 0, 745, 746, 0, 355, 0, 0, 0, 747,
	748, 675, 0, 0, 557, 556, 566, 567, 559, 560,
	561, 562, 563, 564, 565, 558, 0, 0, 0, 0,
	355, 568, 0, 0, 0, 0, 0, 571, 1137, 0,
	1222, 0, 0, 1142, 1139, 1132, 1140, 1135, 0, 688,
	0, 1133, 1134, 0, 487, 0, 487, 0, 0, 0,
	0, 0, 0, 569, 0, 1141, 0, 0, 0, 0,
	487, 701, 704, 705, 706, 707, 708, 709, 0, 710,
	711, 712, 713, 714, 689, 690, 691, 692, 673, 674,
	702, 0, 676, 0, 677, 678, 679, 680, 681, 682,
	683, 684, 685, 686, 693, 694, 695, 696, 697, 698,
	699, 700, 0, 25, 26, 53, 28, 29, 0, 0,
	0, 1008, 0, 0, 569, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 851, 44, 521, 0, 0,
	1278, 30, 49, 50, 570, 0, 0, 0, 0, 0,
	594, 1077, 0, 0, 0, 0, 0, 0, 1293, 0,
	0, 63, 39, 1296, 0, 1297, 55, 703, 0, 0,
	0, 1302, 0, 0, 221, 0, 355, 247, 556, 566,
	567, 559, 560, 561, 562, 563, 564, 565, 558, 0,
	0, 0, 0, 0, 568, 569, 0, 1053, 1054, 0,
	571, 638, 0, 638, 638, 638, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 879, 0, 0, 1082, 0,
	0, 0, 638, 0, 1128, 355, 0, 955, 0, 957,
	0, 0, 0, 0, 32, 33, 35, 34, 37, 0,
	51, 0, 0, 983, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 355, 0, 0, 0, 0, 0, 0,
	570, 968, 38, 45, 46, 0, 0, 47, 48, 36,
	0, 0, 0, 0, 0, 0, 0, 0, 355, 967,
	0, 0, 40, 41, 0, 42, 43, 0, 0, 0,
	487, 0, 0, 557, 556, 566, 567, 559, 560, 561,
	562, 563, 564, 565, 558, 0, 0, 0, 972, 0,
	568, 0, 355, 0, 0, 0, 571, 966, 487, 0,
	0, 851, 0, 0, 1198, 1200, 0, 0, 277, 0,
	0, 346, 0, 0, 1420, 594, 221, 0, 221, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 221, 0,
	1014, 221, 0, 1200, 0, 0, 0, 221, 569, 0,
	221, 0, 0, 0, 0, 0, 0, 0, 355, 0,
	355, 1231, 54, 0, 963, 960, 961, 0, 959, 0,
	0, 0, 0, 0, 0, 23, 0, 1195, 0, 52,
	0, 0, 0, 0, 0, 638, 0, 1454, 0, 0,
	63, 570, 0, 0, 0, 0, 0, 0, 1460, 0,
	970, 973, 1015, 0, 0, 0, 0, 0, 0, 0,
	0, 1255, 0, 0, 1260, 1261, 0, 0, 0, 0,
	0, 0, 355, 0, 557, 556, 566, 567, 559, 560,
	561, 562, 563, 564, 565, 558, 965, 0, 0, 0,
	0, 568, 0, 0, 0, 0, 0, 571, 0, 0,
	0, 0, 0, 1129, 0, 0, 0, 0, 964, 0,
	0, 0, 0, 851, 569, 0, 0, 221, 221, 221,
	0, 0, 0, 0, 0, 0, 1077, 0, 0, 0,
	0, 1156, 0, 0, 0, 0, 570, 0, 355, 0,
	638, 0, 0, 0, 0, 0, 1314, 0, 0, 0,
	0, 0, 969, 0, 0, 0, 0, 1275, 0, 0,
	0, 355, 0, 0, 0, 0, 0, 971, 355, 557,
	556, 566, 567, 559, 560, 561, 562, 563, 564, 565,
	558, 0, 0, 0, 0, 0, 568, 0, 0, 0,
	0, 0, 571, 1305, 1306, 1307, 0, 0, 1345, 1346,
	0, 1347, 0, 0, 0, 0, 0, 0, 0, 1314,
	0, 0, 0, 0, 0, 0, 1314, 1314, 1314, 0,
	0, 0, 1231, 0, 0, 0, 487, 0, 0, 0,
	0, 0, 0, 0, 0, 221, 0, 0, 0, 1314,
	0, 0, 0, 0, 0, 221, 221, 0, 0, 0,
	0, 221, 0, 0, 221, 569, 230, 221, 0, 1195,
	0, 738, 1344, 851, 0, 0, 0, 0, 0, 0,
	221, 0, 0, 0, 0, 1407, 0, 0, 0, 1351,
	1352, 243, 0, 0, 0, 0, 355, 355, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	1374, 851, 0, 0, 1428, 0, 0, 0, 0, 0,
	0, 0, 0, 221, 0, 0, 0, 0, 1195, 0,
	52, 0, 738, 0, 0, 1436, 0, 638, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 223,
	0, 0, 0, 0, 0, 0, 225, 0, 0, 0,
	569, 0, 0, 0, 234, 0, 229, 1314, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 277,
	0, 0, 0, 0, 277, 277, 0, 0, 277, 277,
	277, 0, 0, 0, 852, 0, 0, 232, 0, 0,
	0, 0, 0, 242, 0, 0, 0, 0, 0, 1323,
	0, 0, 0, 277, 277, 277, 277, 0, 221, 0,
	0, 0, 0, 0, 0, 0, 221, 0, 63, 0,
	0, 221, 221, 0, 0, 221, 891, 738, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 1469,
	0, 0, 0, 0, 0, 0, 236, 226, 227, 0,
	237, 238, 239, 241, 0, 240, 246, 0, 0, 0,
	228, 231, 0, 224, 245, 244, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 221, 0, 0, 0, 0,
	0, 0, 0, 0, 221, 221, 0, 221, 221, 0,
	0, 221, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 221, 0, 988,
	989, 0, 221, 0, 0, 0, 0, 738, 129, 0,
	182, 89, 85, 67, 0, 0, 541, 0, 0, 0,
	277, 91, 0, 0, 0, 0, 0, 109, 0, 111,
	0, 0, 150, 120, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 207, 0, 543, 0, 0, 0, 0, 0,
	0, 82, 0, 0, 0, 0, 0, 0, 0, 538,
	537, 0, 0, 0, 0, 0, 277, 0, 93, 128,
	0, 0, 0, 0, 0, 0, 0, 539, 0, 0,
	0, 0, 0, 0, 277, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 852, 221, 0, 221, 221, 221, 0, 0,
	0, 0, 0, 98, 1072, 0, 0, 221, 172, 0,
	0, 0, 63, 136, 221, 153, 100, 108, 69, 76,
	0, 99, 126, 141, 145, 0, 0, 0, 86, 0,
	143, 131, 165, 0, 132, 142, 112, 158, 137, 0,
	173, 174, 155, 171, 181, 70, 154, 164, 83, 146,
	72, 162, 152, 118, 104, 105, 71, 0, 140, 90,
	96, 88, 127, 159, 160, 87, 184, 77, 170, 74,
	78, 169, 125, 157, 163, 119, 116, 73, 161, 117,
	115, 107, 94, 101, 134, 114, 135, 102, 122, 121,
	123, 0, 0, 0, 151, 167, 185, 80, 0, 147,
	156, 175, 176, 177, 178, 179, 180, 0, 0, 81,
	97, 92, 133, 124, 79, 103, 148, 106, 113, 139,
	183, 130, 144, 84, 166, 149, 221, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 277, 0, 0, 0,
	0, 0, 0, 0, 0, 68, 75, 110, 277, 138,
	95, 168, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 738,
	0, 0, 0, 0, 0, 0, 0, 0, 852, 0,
	0, 0, 0, 0, 0, 0, 0, 221, 0, 129,
	0, 182, 89, 85, 67, 0, 0, 0, 0, 0,
	0, 0, 91, 0, 0, 0, 0, 0, 109, 0,
	111, 0, 0, 150, 120, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 207, 0, 0, 0, 0, 0, 0,
	0, 0, 82, 0, 0, 0, 0, 0, 0, 0,
	201, 0, 0, 0, 0, 221, 0, 0, 0, 93,
	128, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 221, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 221, 0, 0, 0, 0, 0, 0,
	0, 0, 221, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 98, 203, 204, 0, 0, 200,
	0, 0, 0, 205, 136, 0, 153, 100, 108, 69,
	76, 0, 99, 126, 141, 145, 0, 0, 0, 86,
	852, 143, 131, 165, 0, 132, 142, 112, 158, 137,
	0, 173, 174, 155, 171, 181, 70, 154, 164, 83,
	146, 72, 162, 152, 118, 104, 105, 71, 0, 140,
	90, 96, 88, 127, 159, 160, 87, 184, 77, 170,
	74, 78, 169, 125, 157, 163, 119, 116, 73, 161,
	117, 115, 107, 94, 101, 134, 114, 135, 102, 122,
	121, 123, 0, 0, 0, 151, 167, 185, 80, 0,
	147, 156, 175, 176, 177, 178, 179, 180, 0, 0,
	81, 97, 92, 133, 124, 79, 103, 148, 106, 113,
	139, 183, 130, 144, 84, 166, 149, 1350, 202, 0,
	0, 0, 0, 0, 0, 0, 63, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 68, 75, 110, 0,
	138, 95, 168, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 221,
	852, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 852, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 443, 431, 221, 402, 446, 381, 394, 454,
	395, 396, 424, 367, 410, 129, 392, 182, 89, 85,
	67, 0, 384, 362, 389, 363, 382, 404, 91, 407,
	380, 433, 413, 445, 109, 452, 111, 418, 0, 150,
	120, 0, 0, 406, 435, 0, 408, 429, 401, 425,
	372, 417, 447, 393, 422, 448, 0, 0, 0, 207,
	0, 908, 909, 0, 0, 0, 0, 0, 82, 0,
	0, 0, 420, 442, 391, 421, 423, 361, 419, 0,
	365, 368, 453, 437, 387, 93, 128, 1099, 0, 0,
	0, 0, 0, 0, 405, 409, 426, 399, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 385, 0, 416,
	0, 0, 0, 0, 0, 0, 369, 366, 0, 0,
	403, 0, 0, 0, 371, 0, 386, 427, 0, 360,
	98, 430, 436, 0, 400, 172, 440, 398, 397, 444,
	136, 0, 153, 100, 108, 69, 76, 0, 99, 126,
	141, 145, 434, 383, 390, 86, 388, 143, 131, 165,
	415, 132, 142, 112, 158, 137, 441, 173, 174, 155,
	171, 181, 70, 154, 164, 83, 146, 72, 162, 152,
	118, 104, 105, 71, 0, 140, 90, 96, 88, 127,
	159, 160, 87, 184, 77, 170, 74, 78, 169, 125,
	157, 163, 119, 116, 73, 161, 117, 115, 107, 94,
	101, 134, 114, 135, 102, 122, 121, 123, 0, 364,
	0, 151, 167, 185, 80, 379, 147, 156, 175, 176,
	177, 178, 179, 180, 0, 0, 81, 97, 92, 133,
	124, 79, 103, 148, 106, 113, 139, 183, 130, 144,
	84, 166, 149, 375, 378, 373, 374, 411, 412, 449,
	450, 451, 428, 370, 0, 376, 377, 0, 432, 438,
	439, 414, 68, 75, 110, 455, 138, 95, 168, 443,
	431, 0, 402, 446, 381, 394, 454, 395, 396, 424,
	367, 410, 129, 392, 182, 89, 85, 67, 0, 384,
	362, 389, 363, 382, 404, 91, 407, 380, 433, 413,
	445, 109, 452, 111, 418, 0, 150, 120, 0, 0,
	406, 435, 0, 408, 429, 401, 425, 372, 417, 447,
	393, 422, 448, 0, 0, 0, 207, 0, 908, 909,
	0, 0, 0, 0, 0, 82, 0, 0, 0, 420,
	442, 391, 421, 423, 361, 419, 0, 365, 368, 453,
	437, 387, 93, 128, 0, 0, 0, 0, 0, 0,
	0, 405, 409, 426, 399, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 385, 0, 416, 0, 0, 0,
	0, 0, 0, 369, 366, 0, 0, 403, 0, 0,
	0, 371, 0, 386, 427, 0, 360, 98, 430, 436,
	0, 400, 172, 440, 398, 397, 444, 136, 0, 153,
	100, 108, 69, 76, 0, 99, 126, 141, 145, 434,
	383, 390, 86, 388, 143, 131, 165, 415, 132, 142,
	112, 158, 137, 441, 173, 174, 155, 171, 181, 70,
	154, 164, 83, 146, 72, 162, 152, 118, 104, 105,
	71, 0, 140, 90, 96, 88, 127, 159, 160, 87,
	184, 77, 170, 74, 78, 169, 125, 157, 163, 119,
	116, 73, 161, 117, 115, 107, 94, 101, 134, 114,
	135, 102, 122, 121, 123, 0, 364, 0, 151, 167,
	185, 80, 379, 147, 156, 175, 176, 177, 178, 179,
	180, 0, 0, 81, 97, 92, 133, 124, 79, 103,
	148, 106, 113, 139, 183, 130, 144, 84, 166, 149,
	375, 378, 373, 374, 411, 412, 449, 450, 451, 428,
	370, 0, 376, 377, 0, 432, 438, 439, 414, 68,
	75, 110, 455, 138, 95, 168, 443, 431, 0, 402,
	446, 381, 394, 454, 395, 396, 424, 367, 410, 129,
	392, 182, 89, 85, 67, 0, 384, 362, 389, 363,
	382, 404, 91, 407, 380, 433, 413, 445, 109, 452,
	111, 418, 0, 150, 120, 0, 0, 406, 435, 0,
	408, 429, 401, 425, 372, 417, 447, 393, 422, 448,
	55, 0, 0, 207, 0, 0, 0, 0, 0, 0,
	0, 0, 82, 0, 0, 0, 420, 442, 391, 421,
	423, 361, 419, 0, 365, 368, 453, 437, 387, 93,
	128, 0, 0, 0, 0, 0, 0, 0, 405, 409,
	426, 399, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 385, 0, 416, 0, 0, 0, 0, 0, 0,
	369, 366, 0, 0, 403, 0, 0, 0, 371, 0,
	386, 427, 0, 360, 98, 430, 436, 0, 400, 172,
	440, 398, 397, 444, 136, 0, 153, 100, 108, 69,
	76, 0, 99, 126, 141, 145, 434, 383, 390, 86,
	388, 143, 131, 165, 415, 132, 142, 112, 158, 137,
	441, 173, 174, 155, 171, 181, 70, 154, 164, 83,
	146, 72, 162, 152, 118, 104, 105, 71, 0, 140,
	90, 96, 88, 127, 159, 160, 87, 184, 77, 170,
	74, 78, 169, 125, 157, 163, 119, 116, 73, 161,
	117, 115, 107, 94, 101, 134, 114, 135, 102, 122,
	121, 123, 0, 364, 0, 151, 167, 185, 80, 379,
	147, 156, 175, 176, 177, 178, 179, 180, 0, 0,
	81, 97, 92, 133, 124, 79, 103, 148, 106, 113,
	139, 183, 130, 144, 84, 166, 149, 375, 378, 373,
	374, 411, 412, 449, 450, 451, 428, 370, 0, 376,
	377, 0, 432, 438, 439, 414, 68, 75, 110, 455,
	138, 95, 168, 443, 431, 0, 402, 446, 381, 394,
	454, 395, 396, 424, 367, 410, 129, 392, 182, 89,
	85, 67, 0, 384, 362, 389, 363, 382, 404, 91,
	407, 380, 433, 413, 445, 109, 452, 111, 418, 0,
	150, 120, 0, 0, 406, 435, 0, 408, 429, 401,
	425, 372, 417, 447, 393, 422, 448, 0, 0, 0,
	207, 0, 0, 0, 0, 0, 0, 0, 0, 82,
	0, 0, 0, 420, 442, 391, 421, 423, 361, 419,
	0, 365, 368, 453, 437, 387, 93, 128, 0, 0,
	0, 0, 0, 0, 0, 405, 409, 426, 399, 0,
	0, 0, 0, 0, 0, 0, 1165, 0, 385, 0,
	416, 0, 0, 0, 0, 0, 0, 369, 366, 0,
	0, 403, 0, 0, 0, 371, 0, 386, 427, 0,
	360, 98, 430, 436, 0, 400, 172, 440, 398, 397,
	444, 136, 0, 153, 100, 108, 69, 76, 0, 99,
	126, 141, 145, 434, 383, 390, 86, 388, 143, 131,
	165, 415, 132, 142, 112, 158, 137, 441, 173, 174,
	155, 171, 181, 70, 154, 164, 83, 146, 72, 162,
	152, 118, 104, 105, 71, 0, 140, 90, 96, 88,
	127, 159, 160, 87, 184, 77, 170, 74, 78, 169,
	125, 157, 163, 119, 116, 73, 161, 117, 115, 107,
	94, 101, 134, 114, 135, 102, 122, 121, 123, 0,
	364, 0, 151, 167, 185, 80, 379, 147, 156, 175,
	176, 177, 178, 179, 180, 0, 0, 81, 97, 92,
	133, 124, 79, 103, 148, 106, 113, 139, 183, 130,
	144, 84, 166, 149, 375, 378, 373, 374, 411, 412,
	449, 450, 451, 428, 370, 0, 376, 377, 0, 432,
	438, 439, 414, 68, 75, 110, 455, 138, 95, 168,
	443, 431, 0, 402, 446, 381, 394, 454, 395, 396,
	424, 367, 410, 129, 392, 182, 89, 85, 67, 0,
	384, 362, 389, 363, 382, 404, 91, 407, 380, 433,
	413, 445, 109, 452, 111, 418, 0, 150, 120, 0,
	0, 406, 435, 0, 408, 429, 401, 425, 372, 417,
	447, 393, 422, 448, 0, 0, 0, 65, 0, 0,
	0, 0, 0, 0, 0, 0, 82, 0, 0, 0,
	420, 442, 391, 421, 423, 361, 419, 0, 365, 368,
	453, 437, 387, 93, 128, 0, 0, 0, 0, 0,
	0, 0, 405, 409, 426, 399, 0, 0, 0, 0,
	0, 0, 0, 892, 0, 385, 0, 416, 0, 0,
	0, 0, 0, 0, 369, 366, 0, 0, 403, 0,
	0, 0, 371, 0, 386, 427, 0, 360, 98, 430,
	436, 0, 400, 172, 440, 398, 397, 444, 136, 0,
	153, 100, 108, 69, 76, 0, 99, 126, 141, 145,
	434, 383, 390, 86, 388, 143, 131, 165, 415, 132,
	142, 112, 158, 137, 441, 173, 174, 155, 171, 181,
	70, 154, 164, 83, 146, 72, 162, 152, 118, 104,
	105, 71, 0, 140, 90, 96, 88, 127, 159, 160,
	87, 184, 77, 170, 74, 78, 169, 125, 157, 163,
	119, 116, 73, 161, 117, 115, 107, 94, 101, 134,
	114, 135, 102, 122, 121, 123, 0, 364, 0, 151,
	167, 185, 80, 379, 147, 156, 175, 176, 177, 178,
	179, 180, 0, 0, 81, 97, 92, 133, 124, 79,
	103, 148, 106, 113, 139, 183, 130, 144, 84, 166,
	149, 375, 378, 373, 374, 411, 412, 449, 450, 451,
	428, 370, 0, 376, 377, 0, 432, 438, 439, 414,
	68, 75, 110, 455, 138, 95, 168, 443, 431, 0,
	402, 446, 381, 394, 454, 395, 396, 424, 367, 410,
	129, 392, 182, 89, 85, 67, 0, 384, 362, 389,
	363, 382, 404, 91, 407, 380, 433, 413, 445, 109,
	452, 111, 418, 0, 150, 120, 0, 0, 406, 435,
	0, 408, 429, 401, 425, 372, 417, 447, 393, 422,
	448, 0, 0, 0, 282, 0, 0, 0, 0, 0,
	0, 0, 0, 82, 0, 0, 0, 420, 442, 391,
	421, 423, 361, 419, 0, 365, 368, 453, 437, 387,
	93, 128, 0, 0, 0, 0, 0, 0, 0, 405,
	409, 426, 399, 0, 0, 0, 0, 0, 0, 0,
	783, 0, 385, 0, 416, 0, 0, 0, 0, 0,
	0, 369, 366, 0, 0, 403, 0, 0, 0, 371,
	0, 386, 427, 0, 360, 98, 430, 436, 0, 400,
	172, 440, 398, 397, 444, 136, 0, 153, 100, 108,
	69, 76, 0, 99, 126, 141, 145, 434, 383, 390,
	86, 388, 143, 131, 165, 415, 132, 142, 112, 158,
	137, 441, 173, 174, 155, 171, 181, 70, 154, 164,
	83, 146, 72, 162, 152, 118, 104, 105, 71, 0,
	140, 90, 96, 88, 127, 159, 160, 87, 184, 77,
	170, 74, 78, 169, 125, 157, 163, 119, 116, 73,
	161, 117, 115, 107, 94, 101, 134, 114, 135, 102,
	122, 121, 123, 0, 364, 0, 151, 167, 185, 80,
	379, 147, 156, 175, 176, 177, 178, 179, 180, 0,
	0, 81, 97, 92, 133, 124, 79, 103, 148, 106,
	113, 139, 183, 130, 144, 84, 166, 149, 375, 378,
	373, 374, 411, 412, 449, 450, 451, 428, 370, 0,
	376, 377, 0, 432, 438, 439, 414, 68, 75, 110,
	455, 138, 95, 168, 443, 431, 0, 402, 446, 381,
	394, 454, 395, 396, 424, 367, 410, 129, 392, 182,
	89, 85, 67, 0, 384, 362, 389, 363, 382, 404,
	91, 407, 380, 433, 413, 445, 109, 452, 111, 418,
	0, 150, 120, 0, 0, 406, 435, 0, 408, 429,
	401, 425, 372, 417, 447, 393, 422, 448, 0, 0,
	0, 207, 0, 0, 0, 0, 0, 0, 0, 0,
	82, 0, 0, 0, 420, 442, 391, 421, 423, 361,
	419, 0, 365, 368, 453, 437, 387, 93, 128, 0,
	0, 0, 0, 0, 0, 0, 405, 409, 426, 399,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 385,
	0, 416, 0, 0, 0, 0, 0, 0, 369, 366,
	0, 0, 403, 0, 0, 0, 371, 0, 386, 427,
	0, 360, 98, 430, 436, 0, 400, 172, 440, 398,
	397, 444, 136, 0, 153, 100, 108, 69, 76, 0,
	99, 126, 141, 145, 434, 383, 390, 86, 388, 143,
	131, 165, 415, 132, 142, 112, 158, 137, 441, 173,
	174, 155, 171, 181, 70, 154, 164, 83, 146, 72,
	162, 152, 118, 104, 105, 71, 0, 140, 90, 96,
	88, 127, 159, 160, 87, 184, 77, 170, 74, 78,
	169, 125, 157, 163, 119, 116, 73, 161, 117, 115,
	107, 94, 101, 134, 114, 135, 102, 122, 121, 123,
	0, 364, 0, 151, 167, 185, 80, 379, 147, 156,
	175, 176, 177, 178, 179, 180, 0, 0, 81, 97,
	92, 133, 124, 79, 103, 148, 106, 113, 139, 183,
	130, 144, 84, 166, 149, 375, 378, 373, 374, 411,
	412, 449, 450, 451, 428, 370, 0, 376, 377, 0,
	432, 438, 439, 414, 68, 75, 110, 455, 138, 95,
	168, 443, 431, 0, 402, 446, 381, 394, 454, 395,
	396, 424, 367, 410, 129, 392, 182, 89, 85, 67,
	0, 384, 362, 389, 363, 382, 404, 91, 407, 380,
	433, 413, 445, 109, 452, 111, 418, 0, 150, 120,
	0, 0, 406, 435, 0, 408, 429, 401, 425, 372,
	417, 447, 393, 422, 448, 0, 0, 0, 282, 0,
	0, 0, 0, 0, 0, 0, 0, 82, 0, 0,
	0, 420, 442, 391, 421, 423, 361, 419, 0, 365,
	368, 453, 437, 387, 93, 128, 0, 0, 0, 0,
	0, 0, 0, 405, 409, 426, 399, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 385, 0, 416, 0,
	0, 0, 0, 0, 0, 369, 366, 0, 0, 403,
	0, 0, 0, 371, 0, 386, 427, 0, 360, 98,
	430, 436, 0, 400, 172, 440, 398, 397, 444, 136,
	0, 153, 100, 108, 69, 76, 0, 99, 126, 141,
	145, 434, 383, 390, 86, 388, 143, 131, 165, 415,
	132, 142, 112, 158, 137, 441, 173, 174, 155, 171,
	181, 70, 154, 164, 83, 146, 72, 162, 152, 118,
	104, 105, 71, 0, 140, 90, 96, 88, 127, 159,
	160, 87, 184, 77, 170, 74, 78, 169, 125, 157,
	163, 119, 116, 73, 161, 117, 115, 107, 94, 101,
	134, 114, 135, 102, 122, 121, 123, 0, 364, 0,
	151, 167, 185, 80, 379, 147, 156, 175, 176, 177,
	178, 179, 180, 0, 0, 81, 97, 92, 133, 124,
	79, 103, 148, 106, 113, 139, 183, 130, 144, 84,
	166, 149, 375, 378, 373, 374, 411, 412, 449, 450,
	451, 428, 370, 0, 376, 377, 0, 432, 438, 439,
	414, 68, 75, 110, 455, 138, 95, 168, 443, 431,
	0, 402, 446, 381, 394, 454, 395, 396, 424, 367,
	410, 129, 392, 182, 89, 85, 67, 0, 384, 362,
	389, 363, 382, 404, 91, 407, 380, 433, 413, 445,
	109, 452, 111, 418, 0, 150, 120, 0, 0, 406,
	435, 0, 408, 429, 401, 425, 372, 417, 447, 393,
	422, 448, 0, 0, 0, 207, 0, 0, 0, 0,
	0, 0, 0, 0, 82, 0, 0, 0, 420, 442,
	391, 421, 423, 361, 419, 0, 365, 368, 453, 437,
	387, 93, 128, 0, 0, 0, 0, 0, 0, 0,
	405, 409, 426, 399, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 385, 0, 416, 0, 0, 0, 0,
	0, 0, 369, 366, 0, 0, 403, 0, 0, 0,
	371, 0, 386, 427, 0, 360, 98, 430, 436, 0,
	400, 172, 440, 398, 397, 444, 136, 0, 153, 100,
	108, 69, 76, 0, 99, 126, 141, 145, 434, 383,
	390, 86, 388, 143, 131, 165, 415, 132, 142, 112,
	158, 137, 441, 173, 174, 155, 171, 181, 70, 154,
	164, 83, 146, 72, 162, 152, 118, 104, 105, 71,
	0, 140, 90, 96, 88, 127, 159, 160, 87, 184,
	77, 170, 74, 358, 169, 125, 157, 163, 119, 116,
	73, 161, 117, 115, 107, 94, 101, 134, 114, 135,
	102, 122, 121, 123, 0, 364, 0, 151, 167, 185,
	80, 379, 147, 156, 175, 176, 177, 178, 179, 180,
	0, 0, 81, 97, 92, 133, 359, 357, 103, 148,
	106, 113, 139, 183, 130, 144, 84, 166, 149, 375,
	378, 373, 374, 411, 412, 449, 450, 451, 428, 370,
	0, 376, 377, 0, 432, 438, 439, 414, 68, 75,
	110, 455, 138, 95, 168, 443, 431, 0, 402, 446,
	381, 394, 454, 395, 396, 424, 367, 410, 129, 392,
	182, 89, 85, 67, 0, 384, 362, 389, 363, 382,
	404, 91, 407, 380, 433, 413, 445, 109, 452, 111,
	418, 0, 150, 120, 0, 0, 406, 435, 0, 408,
	429, 401, 425, 372, 417, 447, 393, 422, 448, 0,
	0, 0, 65, 0, 0, 0, 0, 0, 0, 0,
	0, 82, 0, 0, 0, 420, 442, 391, 421, 423,
	361, 419, 0, 365, 368, 453, 437, 387, 93, 128,
	0, 0, 0, 0, 0, 0, 0, 405, 409, 426,
	399, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	385, 0, 416, 0, 0, 0, 0, 0, 0, 369,
	366, 0, 0, 403, 0, 0, 0, 371, 0, 386,
	427, 0, 360, 98, 430, 436, 0, 400, 172, 440,
	398, 397, 444, 136, 0, 153, 100, 108, 69, 76,
	0, 99, 126, 141, 145, 434, 383, 390, 86, 388,
	143, 131, 165, 415, 132, 142, 112, 158, 137, 441,
	173, 174, 155, 171, 181, 70, 154, 164, 83, 146,
	72, 162, 152, 118, 104, 105, 71, 0, 140, 90,
	96, 88, 127, 159, 160, 87, 184, 77, 170, 74,
	78, 169, 125, 157, 163, 119, 116, 73, 161, 117,
	115, 107, 94, 101, 134, 114, 135, 102, 122, 121,
	123, 0, 364, 0, 151, 167, 185, 80, 379, 147,
	156, 175, 176, 177, 178, 179, 180, 0, 0, 81,
	97, 92, 133, 124, 79, 103, 148, 106, 113, 139,
	183, 130, 144, 84, 166, 149, 375, 378, 373, 374,
	411, 412, 449, 450, 451, 428, 370, 0, 376, 377,
	0, 432, 438, 439, 414, 68, 75, 110, 455, 138,
	95, 168, 443, 431, 0, 402, 446, 381, 394, 454,
	395, 396, 424, 367, 410, 129, 392, 182, 89, 85,
	67, 0, 384, 362, 389, 363, 382, 404, 91, 407,
	380, 433, 413, 445, 109, 452, 111, 418, 0, 150,
	120, 0, 0, 406, 435, 0, 408, 429, 401, 425,
	372, 417, 447, 393, 422, 448, 0, 0, 0, 207,
	0, 0, 0, 0, 0, 0, 0, 0, 82, 0,
	0, 0, 420, 442, 391, 421, 423, 361, 419, 0,
	365, 368, 453, 437, 387, 93, 128, 0, 0, 0,
	0, 0, 0, 0, 405, 409, 426, 399, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 385, 0, 416,
	0, 0, 0, 0, 0, 0, 369, 366, 0, 0,
	403, 0, 0, 0, 371, 0, 386, 427, 0, 360,
	98, 430, 436, 0, 400, 172, 440, 398, 397, 444,
	136, 0, 153, 100, 108, 69, 76, 0, 99, 126,
	141, 145, 434, 383, 390, 86, 388, 143, 131, 165,
	415, 132, 142, 112, 158, 137, 441, 173, 174, 155,
	171, 181, 70, 154, 652, 83, 146, 72, 162, 152,
	118, 104, 105, 71, 0, 140, 90, 96, 88, 127,
	159, 160, 87, 184, 77, 170, 74, 358, 169, 125,
	157, 163, 119, 116, 73, 161, 117, 115, 107, 94,
	101, 134, 114, 135, 102, 122, 121, 123, 0, 364,
	0, 151, 167, 185, 80, 379, 147, 156, 175, 176,
	177, 178, 179, 180, 0, 0, 81, 97, 92, 133,
	359, 357, 103, 148, 106, 113, 139, 183, 130, 144,
	84, 166, 149, 375, 378, 373, 374, 411, 412, 449,
	450, 451, 428, 370, 0, 376, 377, 0, 432, 438,
	439, 414, 68, 75, 110, 455, 138, 95, 168, 443,
	431, 0, 402, 446, 381, 394, 454, 395, 396, 424,
	367, 410, 129, 392, 182, 89, 85, 67, 0, 384,
	362, 389, 363, 382, 404, 91, 407, 380, 433, 413,
	445, 109, 452, 111, 418, 0, 150, 120, 0, 0,
	406, 435, 0, 408, 429, 401, 425, 372, 417, 447,
	393, 422, 448, 0, 0, 0, 207, 0, 0, 0,
	0, 0, 0, 0, 0, 82, 0, 0, 0, 420,
	442, 391, 421, 423, 361, 419, 0, 365, 368, 453,
	437, 387, 93, 128, 0, 0, 0, 0, 0, 0,
	0, 405, 409, 426, 399, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 385, 0, 416, 0, 0, 0,
	0, 0, 0, 369, 366, 0, 0, 403, 0, 0,
	0, 371, 0, 386, 427, 0, 360, 98, 430, 436,
	0, 400, 172, 440, 398, 397, 444, 136, 0, 153,
	100, 108, 69, 76, 0, 99, 126, 141, 145, 434,
	383, 390, 86, 388, 143, 131, 165, 415, 132, 142,
	112, 158, 137, 441, 173, 174, 155, 171, 181, 70,
	154, 349, 83, 146, 72, 162, 152, 118, 104, 105,
	71, 0, 140, 90, 96, 88, 127, 159, 160, 87,
	184, 77, 170, 74, 358, 169, 125, 157, 163, 119,
	116, 73, 161, 117, 115, 107, 94, 101, 134, 114,
	135, 102, 122, 121, 123, 0, 364, 0, 151, 167,
	185, 80, 379, 147, 156, 175, 176, 177, 178, 179,
	180, 0, 0, 81, 97, 92, 133, 359, 357, 352,
	351, 106, 113, 139, 183, 130, 144, 84, 166, 149,
	375, 378, 373, 374, 411, 412, 449, 450, 451, 428,
	370, 0, 376, 377, 0, 432, 438, 439, 414, 68,
	75, 110, 455, 138, 95, 168, 129, 0, 182, 89,
	85, 67, 0, 0, 0, 284, 0, 0, 0, 91,
	0, 281, 0, 0, 0, 109, 324, 111, 0, 0,
	150, 120, 0, 0, 0, 0, 0, 315, 316, 0,
	0, 0, 0, 0, 0, 0, 0, 55, 0, 0,
	282, 303, 302, 305, 306, 307, 308, 0, 0, 82,
	304, 0, 0, 309, 310, 311, 0, 0, 0, 279,
	296, 0, 323, 0, 0, 0, 93, 128, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 293, 294, 0, 0, 0, 0,
	337, 0, 295, 0, 0, 0, 0, 0, 290, 291,
	292, 297, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 98, 0, 1303, 1304, 0, 172, 0, 0, 335,
	0, 136, 0, 153, 100, 108, 69, 76, 0, 99,
	126, 141, 145, 0, 0, 0, 86, 0, 143, 131,
	165, 0, 132, 142, 112, 158, 137, 0, 173, 174,
	155, 171, 181, 70, 154, 164, 83, 146, 72, 162,
	152, 118, 104, 105, 71, 0, 140, 90, 96, 88,
	127, 159, 160, 87, 184, 77, 170, 74, 78, 169,
	125, 157, 163, 119, 116, 73, 161, 117, 115, 107,
	94, 101, 134, 114, 135, 102, 122, 121, 123, 0,
	0, 0, 151, 167, 185, 80, 0, 147, 156, 175,
	176, 177, 178, 179, 180, 0, 0, 81, 97, 92,
	133, 124, 79, 103, 148, 106, 113, 139, 183, 130,
	144, 84, 166, 149, 325, 336, 331, 332, 329, 330,
	328, 327, 326, 338, 317, 318, 319, 320, 322, 0,
	333, 334, 321, 68, 75, 110, 0, 138, 95, 168,
	129, 0, 182, 89, 85, 67, 0, 0, 0, 284,
	0, 0, 0, 91, 0, 281, 0, 0, 0, 109,
	324, 111, 0, 0, 150, 120, 0, 0, 0, 0,
	0, 315, 316, 0, 0, 0, 0, 0, 0, 899,
	0, 55, 0, 0, 282, 303, 302, 305, 306, 307,
	308, 0, 0, 82, 304, 0, 0, 309, 310, 311,
	900, 0, 0, 279, 296, 0, 323, 0, 0, 0,
	93, 128, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 293, 294,
	0, 0, 0, 0, 337, 0, 295, 0, 0, 0,
	0, 0, 290, 291, 292, 297, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 98, 0, 0, 0, 0,
	172, 0, 0, 335, 0, 136, 0, 153, 100, 108,
	69, 76, 0, 99, 126, 141, 145, 0, 0, 0,
	86, 0, 143, 131, 165, 0, 132, 142, 112, 158,
	137, 0, 173, 174, 155, 171, 181, 70, 154, 164,
	83, 146, 72, 162, 152, 118, 104, 105, 71, 0,
	140, 90, 96, 88, 127, 159, 160, 87, 184, 77,
	170, 74, 78, 169, 125, 157, 163, 119, 116, 73,
	161, 117, 115, 107, 94, 101, 134, 114, 135, 102,
	122, 121, 123, 0, 0, 0, 151, 167, 185, 80,
	0, 147, 156, 175, 176, 177, 178, 179, 180, 0,
	0, 81, 97, 92, 133, 124, 79, 103, 148, 106,
	113, 139, 183, 130, 144, 84, 166, 149, 325, 336,
	331, 332, 329, 330, 328, 327, 326, 338, 317, 318,
	319, 320, 322, 25, 333, 334, 321, 68, 75, 110,
	0, 138, 95, 168, 0, 129, 0, 182, 89, 85,
	67, 0, 0, 0, 284, 0, 0, 0, 91, 0,
	281, 0, 0, 0, 109, 324, 111, 0, 0, 150,
	120, 0, 0, 0, 0, 0, 315, 316, 0, 0,
	0, 0, 0, 0, 0, 0, 55, 0, 0, 282,
	303, 302, 305, 306, 307, 308, 0, 0, 82, 304,
	0, 0, 309, 310, 311, 0, 0, 0, 279, 296,
	0, 323, 0, 0, 0, 93, 128, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 293, 294, 0, 0, 0, 0, 337,
	0, 295, 0, 0, 0, 0, 0, 290, 291, 292,
	297, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	98, 0, 0, 0, 0, 172, 0, 0, 335, 0,
	136, 0, 153, 100, 108, 69, 76, 0, 99, 126,
	141, 145, 0, 0, 0, 86, 0, 143, 131, 165,
	0, 132, 142, 112, 158, 137, 0, 173, 174, 155,
	171, 181, 70, 154, 164, 83, 146, 72, 162, 152,
	118, 104, 105, 71, 0, 140, 90, 96, 88, 127,
	159, 160, 87, 184, 77, 170, 74, 78, 169, 125,
	157, 163, 119, 116, 73, 161, 117, 115, 107, 94,
	101, 134, 114, 135, 102, 122, 121, 123, 0, 0,
	0, 151, 167, 185, 80, 0, 147, 156, 175, 176,
	177, 178, 179, 180, 0, 0, 81, 97, 92, 133,
	124, 79, 103, 148, 106, 113, 139, 183, 130, 144,
	84, 166, 149, 325, 336, 331, 332, 329, 330, 328,
	327, 326, 338, 317, 318, 319, 320, 322, 0, 333,
	334, 321, 68, 75, 110, 23, 138, 95, 168, 129,
	0, 182, 89, 85, 67, 0, 828, 0, 284, 0,
	0, 0, 91, 0, 281, 0, 0, 0, 109, 324,
	111, 0, 0, 150, 120, 0, 0, 0, 0, 0,
	315, 316, 0, 0, 0, 0, 0, 0, 0, 0,
	55, 0, 0, 282, 303, 302, 305, 306, 307, 308,
	0, 0, 82, 304, 0, 0, 309, 310, 311, 0,
	0, 0, 279, 296, 0, 323, 0, 0, 0, 93,
	128, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 293, 294, 275,
	0, 0, 0, 337, 0, 295, 0, 0, 0, 0,
	0, 290, 291, 292, 297, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 98, 0, 0, 0, 0, 172,
	0, 0, 335, 0, 136, 0, 153, 100, 108, 69,
	76, 0, 99, 126, 141, 145, 0, 0, 0, 86,
	0, 143, 131, 165, 0, 132, 142, 112, 158, 137,
	0, 173, 174, 155, 171, 181, 70, 154, 164, 83,
	146, 72, 162, 152, 118, 104, 105, 71, 0, 140,
	90, 96, 88, 127, 159, 160, 87, 184, 77, 170,
	74, 78, 169, 125, 157, 163, 119, 116, 73, 161,
	117, 115, 107, 94, 101, 134, 114, 135, 102, 122,
	121, 123, 0, 0, 0, 151, 167, 185, 80, 0,
	147, 156, 175, 176, 177, 178, 179, 180, 0, 0,
	81, 97, 92, 133, 124, 79, 103, 148, 106, 113,
	139, 183, 130, 144, 84, 166, 149, 325, 336, 331,
	332, 329, 330, 328, 327, 326, 338, 317, 318, 319,
	320, 322, 0, 333, 334, 321, 68, 75, 110, 0,
	138, 95, 168, 129, 0, 182, 89, 85, 67, 0,
	0, 0, 284, 0, 0, 0, 91, 0, 281, 0,
	0, 0, 109, 324, 111, 0, 0, 150, 120, 0,
	0, 0, 0, 0, 315, 316, 0, 0, 0, 0,
	0, 0, 0, 0, 55, 0, 516, 282, 303, 302,
	305, 306, 307, 308, 0, 0, 82, 304, 0, 0,
	309, 310, 311, 0, 0, 0, 279, 296, 0, 323,
	0, 0, 0, 93, 128, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 293, 294, 0, 0, 0, 0, 337, 0, 295,
	0, 0, 0, 0, 0, 290, 291, 292, 297, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 98, 0,
	0, 0, 0, 172, 0, 0, 335, 0, 136, 0,
	153, 100, 108, 69, 76, 0, 99, 126, 141, 145,
	0, 0, 0, 86, 0, 143, 131, 165, 0, 132,
	142, 112, 158, 137, 0, 173, 174, 155, 171, 181,
	70, 154, 164, 83, 146, 72, 162, 152, 118, 104,
	105, 71, 0, 140, 90, 96, 88, 127, 159, 160,
	87, 184, 77, 170, 74, 78, 169, 125, 157, 163,
	119, 116, 73, 161, 117, 115, 107, 94, 101, 134,
	114, 135, 102, 122, 121, 123, 0, 0, 0, 151,
	167, 185, 80, 0, 147, 156, 175, 176, 177, 178,
	179, 180, 0, 0, 81, 97, 92, 133, 124, 79,
	103, 148, 106, 113, 139, 183, 130, 144, 84, 166,
	149, 325, 336, 331, 332, 329, 330, 328, 327, 326,
	338, 317, 318, 319, 320, 322, 0, 333, 334, 321,
	68, 75, 110, 0, 138, 95, 168, 129, 0, 182,
	89, 85, 67, 0, 0, 0, 284, 0, 0, 0,
	91, 0, 281, 0, 0, 0, 109, 324, 111, 0,
	0, 150, 120, 0, 0, 0, 0, 0, 315, 316,
	0, 0, 0, 0, 0, 0, 0, 0, 55, 0,
	0, 282, 303, 302, 305, 306, 307, 308, 0, 0,
	82, 304, 0, 0, 309, 310, 311, 0, 0, 0,
	279, 296, 0, 323, 0, 0, 0, 93, 128, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 293, 294, 275, 0, 0,
	0, 337, 0, 295, 0, 0, 0, 0, 0, 290,
	291, 292, 297, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 98, 0, 0, 0, 0, 172, 0, 0,
	335, 0, 136, 0, 153, 100, 108, 69, 76, 0,
	99, 126, 141, 145, 0, 0, 0, 86, 0, 143,
	131, 165, 0, 132, 142, 112, 158, 137, 0, 173,
	174, 155, 171, 181, 70, 154, 164, 83, 146, 72,
	162, 152, 118, 104, 105, 71, 0, 140, 90, 96,
	88, 127, 159, 160, 87, 184, 77, 170, 74, 78,
	169, 125, 157, 163, 119, 116, 73, 161, 117, 115,
	107, 94, 101, 134, 114, 135, 102, 122, 121, 123,
	0, 0, 0, 151, 167, 185, 80, 0, 147, 156,
	175, 176, 177, 178, 179, 180, 0, 0, 81, 97,
	92, 133, 124, 79, 103, 148, 106, 113, 139, 183,
	130, 144, 84, 166, 149, 325, 336, 331, 332, 329,
	330, 328, 327, 326, 338, 317, 318, 319, 320, 322,
	0, 333, 334, 321, 68, 75, 110, 0, 138, 95,
	168, 129, 0, 182, 89, 85, 67, 0, 0, 0,
	284, 0, 0, 0, 91, 0, 281, 0, 0, 0,
	109, 324, 111, 0, 0, 150, 120, 0, 0, 0,
	0, 0, 315, 316, 0, 0, 0, 0, 0, 0,
	0, 0, 55, 0, 0, 282, 303, 843, 305, 306,
	307, 308, 0, 0, 82, 304, 0, 0, 309, 310,
	311, 0, 0, 0, 279, 296, 0, 323, 0, 0,
	0, 93, 128, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 293,
	294, 275, 0, 0, 0, 337, 0, 295, 0, 0,
	0, 0, 0, 290, 291, 292, 297, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 98, 0, 0, 0,
	0, 172, 0, 0, 335, 0, 136, 0, 153, 100,
	108, 69, 76, 0, 99, 126, 141, 145, 0, 0,
	0, 86, 0, 143, 131, 165, 0, 132, 142, 112,
	158, 137, 0, 173, 174, 155, 171, 181, 70, 154,
	164, 83, 146, 72, 162, 152, 118, 104, 105, 71,
	0, 140, 90, 96, 88, 127, 159, 160, 87, 184,
	77, 170, 74, 78, 169, 125, 157, 163, 119, 116,
	73, 161, 117, 115, 107, 94, 101, 134, 114, 135,
	102, 122, 121, 123, 0, 0, 0, 151, 167, 185,
	80, 0, 147, 156, 175, 176, 177, 178, 179, 180,
	0, 0, 81, 97, 92, 133, 124, 79, 103, 148,
	106, 113, 139, 183, 130, 144, 84, 166, 149, 325,
	336, 331, 332, 329, 330, 328, 327, 326, 338, 317,
	318, 319, 320, 322, 0, 333, 334, 321, 68, 75,
	110, 0, 138, 95, 168, 129, 0, 182, 89, 85,
	67, 0, 0, 0, 284, 0, 0, 0, 91, 0,
	281, 0, 0, 0, 109, 324, 111, 0, 0, 150,
	120, 0, 0, 0, 0, 0, 315, 316, 0, 0,
	0, 0, 0, 0, 0, 0, 55, 0, 0, 282,
	303, 840, 305, 306, 307, 308, 0, 0, 82, 304,
	0, 0, 309, 310, 311, 0, 0, 0, 279, 296,
	0, 323, 0, 0, 0, 93, 128, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 293, 294, 275, 0, 0, 0, 337,
	0, 295, 0, 0, 0, 0, 0, 290, 291, 292,
	297, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	98, 0, 0, 0, 0, 172, 0, 0, 335, 0,
	136, 0, 153, 100, 108, 69, 76, 0, 99, 126,
	141, 145, 0, 0, 0, 86, 0, 143, 131, 165,
	0, 132, 142, 112, 158, 137, 0, 173, 174, 155,
	171, 181, 70, 154, 164, 83, 146, 72, 162, 152,
	118, 104, 105, 71, 0, 140, 90, 96, 88, 127,
	159, 160, 87, 184, 77, 170, 74, 78, 169, 125,
	157, 163, 119, 116, 73, 161, 117, 115, 107, 94,
	101, 134, 114, 135, 102, 122, 121, 123, 0, 0,
	0, 151, 167, 185, 80, 0, 147, 156, 175, 176,
	177, 178, 179, 180, 0, 0, 81, 97, 92, 133,
	124, 79, 103, 148, 106, 113, 139, 183, 130, 144,
	84, 166, 149, 325, 336, 331, 332, 329, 330, 328,
	327, 326, 338, 317, 318, 319, 320, 322, 0, 333,
	334, 321, 68, 75, 110, 0, 138, 95, 168, 129,
	0, 182, 89, 85, 67, 0, 0, 0, 284, 0,
	0, 0, 91, 0, 281, 0, 0, 0, 109, 324,
	111, 0, 0, 150, 120, 0, 0, 0, 0, 0,
	315, 316, 0, 0, 0, 0, 0, 0, 0, 0,
	55, 0, 0, 282, 303, 302, 305, 306, 307, 308,
	0, 0, 82, 304, 0, 0, 309, 310, 311, 0,
	0, 0, 279, 296, 0, 323, 0, 0, 0, 93,
	128, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 293, 294, 0,
	0, 0, 0, 337, 0, 295, 0, 0, 0, 0,
	0, 290, 291, 292, 297, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 98, 0, 0, 0, 0, 172,
	0, 0, 335, 0, 136, 0, 153, 100, 108, 69,
	76, 0, 99, 126, 141, 145, 0, 0, 0, 86,
	0, 143, 131, 165, 0, 132, 142, 112, 158, 137,
	0, 173, 174, 155, 171, 181, 70, 154, 164, 83,
	146, 72, 162, 152, 118, 104, 105, 71, 0, 140,
	90, 96, 88, 127, 159, 160, 87, 184, 77, 170,
	74, 78, 169, 125, 157, 163, 119, 116, 73, 161,
	117, 115, 107, 94, 101, 134, 114, 135, 102, 122,
	121, 123, 0, 0, 0, 151, 167, 185, 80, 0,
	147, 156, 175, 176, 177, 178, 179, 180, 0, 0,
	81, 97, 92, 133, 124, 79, 103, 148, 106, 113,
	139, 183, 130, 144, 84, 166, 149, 325, 336, 331,
	332, 329, 330, 328, 327, 326, 338, 317, 318, 319,
	320, 322, 0, 333, 334, 321, 68, 75, 110, 0,
	138, 95, 168, 129, 0, 182, 89, 85, 67, 0,
	0, 0, 0, 0, 0, 0, 91, 0, 0, 0,
	0, 0, 109, 324, 111, 0, 0, 150, 120, 0,
	0, 0, 0, 0, 315, 316, 0, 0, 0, 0,
	0, 0, 0, 0, 55, 0, 0, 282, 303, 302,
	305, 306, 307, 308, 0, 0, 82, 304, 0, 0,
	309, 310, 311, 0, 0, 0, 0, 296, 0, 323,
	0, 0, 0, 93, 128, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 293, 294, 0, 0, 0, 0, 337, 0, 295,
	0, 0, 0, 0, 0, 290, 291, 292, 297, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 98, 0,
	0, 0, 0, 172, 0, 0, 335, 0, 136, 0,
	153, 100, 108, 69, 76, 0, 99, 126, 141, 145,
	0, 0, 0, 86, 0, 143, 131, 165, 1476, 132,
	142, 112, 158, 137, 0, 173, 174, 155, 171, 181,
	70, 154, 164, 83, 146, 72, 162, 152, 118, 104,
	105, 71, 0, 140, 90, 96, 88, 127, 159, 160,
	87, 184, 77, 170, 74, 78, 169, 125, 157, 163,
	119, 116, 73, 161, 117, 115, 107, 94, 101, 134,
	114, 135, 102, 122, 121, 123, 0, 0, 0, 151,
	167, 185, 80, 0, 147, 156, 175, 176, 177, 178,
	179, 180, 0, 0, 81, 97, 92, 133, 124, 79,
	103, 148, 106, 113, 139, 183, 130, 144, 84, 166,
	149, 325, 336, 331, 332, 329, 330, 328, 327, 326,
	338, 317, 318, 319, 320, 322, 0, 333, 334, 321,
	68, 75, 110, 0, 138, 95, 168, 129, 0, 182,
	89, 85, 67, 0, 0, 0, 0, 0, 0, 0,
	91, 0, 0, 0, 0, 0, 109, 324, 111, 0,
	0, 150, 120, 0, 0, 0, 0, 0, 315, 316,
	0, 0, 0, 0, 0, 0, 0, 0, 55, 0,
	516, 282, 303, 302, 305, 306, 307, 308, 0, 0,
	82, 304, 0, 0, 309, 310, 311, 0, 0, 0,
	0, 296, 0, 323, 0, 0, 0, 93, 128, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 293, 294, 0, 0, 0,
	0, 337, 0, 295, 0, 0, 0, 0, 0, 290,
	291, 292, 297, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 98, 0, 0, 0, 0, 172, 0, 0,
	335, 0, 136, 0, 153, 100, 108, 69, 76, 0,
	99, 126, 141, 145, 0, 0, 0, 86, 0, 143,
	131, 165, 0, 132, 142, 112, 158, 137, 0, 173,
	174, 155, 171, 181, 70, 154, 164, 83, 146, 72,
	162, 152, 118, 104, 105, 71, 0, 140, 90, 96,
	88, 127, 159, 160, 87, 184, 77, 170, 74, 78,
	169, 125, 157, 163, 119, 116, 73, 161, 117, 115,
	107, 94, 101, 134, 114, 135, 102, 122, 121, 123,
	0, 0, 0, 151, 167, 185, 80, 0, 147, 156,
	175, 176, 177, 178, 179, 180, 0, 0, 81, 97,
	92, 133, 124, 79, 103, 148, 106, 113, 139, 183,
	130, 144, 84, 166, 149, 325, 336, 331, 332, 329,
	330, 328, 327, 326, 338, 317, 318, 319, 320, 322,
	0, 333, 334, 321, 68, 75, 110, 0, 138, 95,
	168, 129, 0, 182, 89, 85, 67, 0, 0, 0,
	0, 0, 0, 0, 91, 0, 0, 0, 0, 0,
	109, 324, 111, 0, 0, 150, 120, 0, 0, 0,
	0, 0, 315, 316, 0, 0, 0, 0, 0, 0,
	0, 0, 55, 0, 0, 282, 303, 302, 305, 306,
	307, 308, 0, 0, 82, 304, 0, 0, 309, 310,
	311, 0, 0, 0, 0, 296, 0, 323, 0, 0,
	0, 93, 128, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 293,
	294, 0, 0, 0, 0, 337, 0, 295, 0, 0,
	0, 0, 0, 290, 291, 292, 297, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 98, 0, 0, 0,
	0, 172, 0, 0, 335, 0, 136, 0, 153, 100,
	108, 69, 76, 0, 99, 126, 141, 145, 0, 0,
	0, 86, 0, 143, 131, 165, 0, 132, 142, 112,
	158, 137, 0, 173, 174, 155, 171, 181, 70, 154,
	164, 83, 146, 72, 162, 152, 118, 104, 105, 71,
	0, 140, 90, 96, 88, 127, 159, 160, 87, 184,
	77, 170, 74, 78, 169, 125, 157, 163, 119, 116,
	73, 161, 117, 115, 107, 94, 101, 134, 114, 135,
	102, 122, 121, 123, 0, 0, 0, 151, 167, 185,
	80, 0, 147, 156, 175, 176, 177, 178, 179, 180,
	0, 0, 81, 97, 92, 133, 124, 79, 103, 148,
	106, 113, 139, 183, 130, 144, 84, 166, 149, 325,
	336, 331, 332, 329, 330, 328, 327, 326, 338, 317,
	318, 319, 320, 322, 0, 333, 334, 321, 68, 75,
	110, 0, 138, 95, 168, 129, 0, 182, 89, 85,
	67, 0, 0, 0, 0, 0, 0, 0, 91, 0,
	0, 0, 0, 0, 109, 0, 111, 0, 0, 150,
	120, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 207,
	0, 0, 0, 0, 0, 0, 570, 0, 82, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 93, 128, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 557,
	556, 566, 567, 559, 560, 561, 562, 563, 564, 565,
	558, 0, 0, 0, 0, 0, 568, 0, 0, 0,
	0, 0, 571, 0, 0, 0, 0, 0, 0, 0,
	98, 0, 0, 0, 0, 172, 0, 0, 0, 0,
	136, 0, 153, 100, 108, 69, 76, 0, 99, 126,
	141, 145, 0, 0, 0, 86, 0, 143, 131, 165,
	0, 132, 142, 112, 158, 137, 0, 173, 174, 155,
	171, 181, 70, 154, 164, 83, 146, 72, 162, 152,
	118, 104, 105, 71, 0, 140, 90, 96, 88, 127,
	159, 160, 87, 184, 77, 170, 74, 78, 169, 125,
	157, 163, 119, 116, 73, 161, 117, 115, 107, 94,
	101, 134, 114, 135, 102, 122, 121, 123, 0, 0,
	0, 151, 167, 185, 80, 0, 147, 156, 175, 176,
	177, 178, 179, 180, 0, 0, 81, 97, 92, 133,
	124, 79, 103, 148, 106, 113, 139, 183, 130, 144,
	84, 166, 149, 0, 25, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 129, 0, 182, 89,
	85, 67, 68, 75, 110, 0, 138, 95, 168, 91,
	569, 0, 0, 0, 0, 109, 0, 111, 0, 0,
	150, 120, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 55, 0, 0,
	207, 0, 0, 0, 0, 0, 0, 0, 0, 82,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 93, 128, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 98, 0, 0, 0, 0, 172, 0, 0, 0,
	0, 136, 0, 153, 100, 108, 69, 76, 0, 99,
	126, 141, 145, 0, 0, 0, 86, 0, 143, 131,
	165, 0, 132, 142, 112, 158, 137, 0, 173, 174,
	155, 171, 181, 70, 154, 164, 83, 146, 72, 162,
	152, 118, 104, 105, 71, 0, 140, 90, 96, 88,
	127, 159, 160, 87, 184, 77, 170, 74, 78, 169,
	125, 157, 163, 119, 116, 73, 161, 117, 115, 107,
	94, 101, 134, 114, 135, 102, 122, 121, 123, 0,
	0, 0, 151, 167, 185, 80, 0, 147, 156, 175,
	176, 177, 178, 179, 180, 0, 0, 81, 97, 92,
	133, 124, 79, 103, 148, 106, 113, 139, 183, 130,
	144, 84, 166, 149, 0, 25, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 129, 0, 182,
	89, 85, 67, 68, 75, 110, 23, 138, 95, 168,
	91, 0, 0, 0, 0, 0, 109, 0, 111, 0,
	0, 150, 120, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 55, 0,
	0, 639, 0, 0, 0, 0, 0, 0, 0, 0,
	82, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 93, 128, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 98, 0, 0, 0, 0, 172, 0, 0,
	0, 0, 136, 0, 153, 100, 108, 69, 76, 0,
	99, 126, 141, 145, 0, 0, 0, 86, 0, 143,
	131, 165, 0, 132, 142, 112, 158, 137, 0, 173,
	174, 155, 171, 181, 70, 154, 164, 83, 146, 72,
	162, 152, 118, 104, 105, 71, 0, 140, 90, 96,
	88, 127, 159, 160, 87, 184, 77, 170, 74, 78,
	169, 125, 157, 163, 119, 116, 73, 161, 117, 115,
	107, 94, 101, 134, 114, 135, 102, 122, 121, 123,
	0, 0, 0, 151, 167, 185, 80, 0, 147, 156,
	175, 176, 177, 178, 179, 180, 0, 0, 81, 97,
	92, 133, 124, 79, 103, 148, 106, 113, 139, 183,
	130, 144, 84, 166, 149, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 68, 75, 110, 23, 138, 95,
	168, 129, 0, 182, 89, 85, 67, 0, 0, 884,
	0, 0, 0, 0, 91, 0, 0, 0, 0, 0,
	109, 0, 111, 0, 0, 150, 120, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 65, 0, 64, 0, 0,
	0, 0, 0, 0, 82, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 93, 128, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 98, 0, 0, 0,
	0, 172, 0, 0, 0, 0, 136, 0, 153, 100,
	108, 69, 76, 0, 99, 126, 141, 145, 0, 0,
	0, 86, 0, 143, 131, 165, 0, 132, 142, 112,
	158, 137, 0, 173, 174, 155, 171, 181, 70, 154,
	164, 83, 146, 72, 162, 152, 118, 104, 105, 71,
	0, 140, 90, 96, 88, 127, 159, 160, 87, 184,
	77, 170, 74, 78, 169, 125, 157, 163, 119, 116,
	73, 161, 117, 115, 107, 94, 101, 134, 114, 135,
	102, 122, 121, 123, 0, 0, 0, 151, 167, 185,
	80, 0, 147, 156, 175, 176, 177, 178, 179, 180,
	0, 0, 81, 97, 92, 133, 124, 79, 103, 148,
	106, 113, 139, 183, 130, 144, 84, 166, 149, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 129, 0,
	182, 89, 85, 67, 0, 0, 0, 0, 68, 75,
	110, 91, 138, 95, 168, 0, 0, 109, 0, 111,
	0, 0, 150, 120, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 820, 0, 0, 0, 0, 0, 0, 0,
	0, 82, 0, 822, 823, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 93, 128,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 98, 0, 0, 0, 0, 172, 0,
	0, 0, 0, 136, 0, 153, 100, 108, 69, 76,
	0, 99, 126, 141, 145, 0, 0, 0, 86, 0,
	143, 131, 165, 0, 132, 142, 112, 158, 137, 0,
	173, 174, 155, 171, 181, 70, 154, 164, 83, 146,
	72, 162, 152, 118, 104, 105, 71, 0, 140, 90,
	96, 88, 127, 159, 160, 87, 184, 77, 170, 74,
	78, 169, 125, 157, 163, 119, 116, 73, 161, 117,
	115, 107, 94, 101, 134, 114, 135, 102, 122, 121,
	123, 0, 0, 0, 151, 167, 185, 80, 0, 147,
	156, 175, 176, 177, 178, 179, 180, 0, 0, 81,
	97, 92, 133, 124, 79, 103, 148, 106, 113, 139,
	183, 130, 144, 84, 166, 149, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 129, 0, 182, 89, 85,
	67, 0, 0, 884, 0, 68, 75, 110, 91, 138,
	95, 168, 0, 0, 109, 0, 111, 0, 0, 150,
	120, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 65,
	0, 64, 0, 0, 0, 0, 0, 0, 82, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 93, 128, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	98, 0, 0, 0, 0, 172, 0, 0, 0, 0,
	136, 0, 153, 100, 108, 69, 76, 0, 99, 126,
	141, 145, 0, 0, 0, 86, 0, 143, 131, 165,
	0, 882, 142, 112, 158, 137, 0, 173, 174, 155,
	171, 181, 70, 154, 164, 83, 146, 72, 162, 152,
	118, 104, 105, 71, 0, 140, 90, 96, 88, 127,
	159, 160, 87, 184, 77, 170, 74, 78, 169, 125,
	157, 163, 119, 116, 73, 161, 117, 115, 107, 94,
	101, 134, 114, 135, 102, 122, 121, 123, 0, 0,
	0, 151, 167, 185, 80, 0, 147, 156, 175, 176,
	177, 178, 179, 180, 0, 0, 81, 97, 92, 133,
	124, 79, 103, 148, 106, 113, 139, 183, 130, 144,
	84, 166, 149, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 129, 0, 182, 89, 85, 67, 0, 0,
	0, 0, 68, 75, 110, 91, 138, 95, 168, 0,
	0, 109, 0, 111, 0, 0, 150, 120, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 207, 0, 0, 770,
	0, 0, 771, 0, 0, 82, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 93, 128, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 98, 0, 0,
	0, 0, 172, 0, 0, 0, 0, 136, 0, 153,
	100, 108, 69, 76, 0, 99, 126, 141, 145, 0,
	0, 0, 86, 0, 143, 131, 165, 0, 132, 142,
	112, 158, 137, 0, 173, 174, 155, 171, 181, 70,
	154, 164, 83, 146, 72, 162, 152, 118, 104, 105,
	71, 0, 140, 90, 96, 88, 127, 159, 160, 87,
	184, 77, 170, 74, 78, 169, 125, 157, 163, 119,
	116, 73, 161, 117, 115, 107, 94, 101, 134, 114,
	135, 102, 122, 121, 123, 0, 0, 0, 151, 167,
	185, 80, 0, 147, 156, 175, 176, 177, 178, 179,
	180, 0, 0, 81, 97, 92, 133, 124, 79, 103,
	148, 106, 113, 139, 183, 130, 144, 84, 166, 149,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 129, 0, 182, 89, 85, 67, 68,
	75, 110, 0, 138, 95, 168, 91, 0, 661, 0,
	0, 0, 109, 0, 111, 0, 0, 150, 120, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 207, 0, 660,
	0, 0, 0, 0, 0, 0, 82, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 93, 128, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 98, 0,
	0, 0, 0, 172, 0, 0, 0, 0, 136, 0,
	153, 100, 108, 69, 76, 0, 99, 126, 141, 145,
	0, 0, 0, 86, 0, 143, 131, 165, 0, 132,
	142, 112, 158, 137, 0, 173, 174, 155, 171, 181,
	70, 154, 164, 83, 146, 72, 162, 152, 118, 104,
	105, 71, 0, 140, 90, 96, 88, 127, 159, 160,
	87, 184, 77, 170, 74, 78, 169, 125, 157, 163,
	119, 116, 73, 161, 117, 115, 107, 94, 101, 134,
	114, 135, 102, 122, 121, 123, 0, 0, 0, 151,
	167, 185, 80, 0, 147, 156, 175, 176, 177, 178,
	179, 180, 0, 0, 81, 97, 92, 133, 124, 79,
	103, 148, 106, 113, 139, 183, 130, 144, 84, 166,
	149, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	129, 0, 182, 89, 85, 67, 0, 0, 0, 0,
	68, 75, 110, 91, 138, 95, 168, 0, 0, 109,
	0, 111, 0, 0, 150, 120, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 55, 0, 0, 639, 0, 0, 0, 0, 0,
	0, 0, 0, 82, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	93, 128, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 98, 0, 0, 0, 0,
	172, 0, 0, 0, 0, 136, 0, 153, 100, 108,
	69, 76, 0, 99, 126, 141, 145, 0, 0, 0,
	86, 0, 143, 131, 165, 0, 132, 142, 112, 158,
	137, 0, 173, 174, 155, 171, 181, 70, 154, 164,
	83, 146, 72, 162, 152, 118, 104, 105, 71, 0,
	140, 90, 96, 88, 127, 159, 160, 87, 184, 77,
	170, 74, 78, 169, 125, 157, 163, 119, 116, 73,
	161, 117, 115, 107, 94, 101, 134, 114, 135, 102,
	122, 121, 123, 0, 0, 0, 151, 167, 185, 80,
	0, 147, 156, 175, 176, 177, 178, 179, 180, 0,
	0, 81, 97, 92, 133, 124, 79, 103, 148, 106,
	113, 139, 183, 130, 144, 84, 166, 149, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 129, 0, 182,
	89, 85, 67, 0, 0, 0, 0, 68, 75, 110,
	91, 138, 95, 168, 0, 0, 109, 0, 111, 0,
	0, 150, 120, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 65, 0, 64, 0, 0, 0, 0, 0, 0,
	82, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 93, 128, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 98, 0, 0, 0, 0, 172, 0, 0,
	0, 0, 136, 0, 153, 100, 108, 69, 76, 0,
	99, 126, 141, 145, 0, 0, 0, 86, 0, 143,
	131, 165, 0, 132, 142, 112, 158, 137, 0, 173,
	174, 155, 171, 181, 70, 154, 164, 83, 146, 72,
	162, 152, 118, 104, 105, 71, 0, 140, 90, 96,
	88, 127, 159, 160, 87, 184, 77, 170, 74, 78,
	169, 125, 157, 163, 119, 116, 73, 161, 117, 115,
	107, 94, 101, 134, 114, 135, 102, 122, 121, 123,
	0, 0, 0, 151, 167, 185, 80, 0, 147, 156,
	175, 176, 177, 178, 179, 180, 0, 0, 81, 97,
	92, 133, 124, 79, 103, 148, 106, 113, 139, 183,
	130, 144, 84, 166, 149, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 129, 0, 182, 89, 85, 67,
	0, 0, 0, 0, 68, 75, 110, 91, 138, 95,
	168, 0, 0, 109, 0, 111, 0, 0, 150, 120,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 207, 0,
	543, 0, 0, 0, 0, 0, 0, 82, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 93, 128, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 98,
	0, 0, 0, 0, 172, 0, 0, 0, 0, 136,
	0, 153, 100, 108, 69, 76, 0, 99, 126, 141,
	145, 0, 0, 0, 86, 0, 143, 131, 165, 0,
	132, 142, 112, 158, 137, 0, 173, 174, 155, 171,
	181, 70, 154, 164, 83, 146, 72, 162, 152, 118,
	104, 105, 71, 0, 140, 90, 96, 88, 127, 159,
	160, 87, 184, 77, 170, 74, 78, 169, 125, 157,
	163, 119, 116, 73, 161, 117, 115, 107, 94, 101,
	134, 114, 135, 102, 122, 121, 123, 0, 0, 0,
	151, 167, 185, 80, 0, 147, 156, 175, 176, 177,
	178, 179, 180, 0, 0, 81, 97, 92, 133, 124,
	79, 103, 148, 106, 113, 139, 183, 130, 144, 84,
	166, 149, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 68, 75, 110, 0, 138, 95, 168, 129, 0,
	182, 89, 85, 67, 0, 0, 0, 0, 0, 0,
	630, 91, 0, 0, 0, 0, 0, 109, 0, 111,
	0, 0, 150, 120, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 65, 0, 0, 0, 0, 0, 0, 0,
	0, 82, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 93, 128,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 98, 0, 0, 0, 0, 172, 0,
	0, 0, 0, 136, 0, 153, 100, 108, 69, 76,
	0, 99, 126, 141, 145, 0, 0, 0, 86, 0,
	143, 131, 165, 0, 132, 142, 112, 158, 137, 0,
	173, 174, 155, 171, 181, 70, 154, 164, 83, 146,
	72, 162, 152, 118, 104, 105, 71, 0, 140, 90,
	96, 88, 127, 159, 160, 87, 184, 77, 170, 74,
	78, 169, 125, 157, 163, 119, 116, 73, 161, 117,
	115, 107, 94, 101, 134, 114, 135, 102, 122, 121,
	123, 0, 0, 0, 151, 167, 185, 80, 0, 147,
	156, 175, 176, 177, 178, 179, 180, 0, 0, 81,
	97, 92, 133, 124, 79, 103, 148, 106, 113, 139,
	183, 130, 144, 84, 166, 149, 0, 0, 341, 0,
	0, 0, 0, 0, 0, 129, 0, 182, 89, 85,
	67, 0, 0, 0, 0, 68, 75, 110, 91, 138,
	95, 168, 0, 0, 109, 0, 111, 0, 0, 150,
	120, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 65,
	0, 0, 0, 0, 0, 0, 0, 0, 82, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 93, 128, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	98, 0, 0, 0, 0, 172, 0, 0, 0, 0,
	136, 0, 153, 100, 108, 69, 76, 0, 99, 126,
	141, 145, 0, 0, 0, 86, 0, 143, 131, 165,
	0, 132, 142, 112, 158, 137, 0, 173, 174, 155,
	171, 181, 70, 154, 164, 83, 146, 72, 162, 152,
	118, 104, 105, 71, 0, 140, 90, 96, 88, 127,
	159, 160, 87, 184, 77, 170, 74, 78, 169, 125,
	157, 163, 119, 116, 73, 161, 117, 115, 107, 94,
	101, 134, 114, 135, 102, 122, 121, 123, 0, 0,
	0, 151, 167, 185, 80, 0, 147, 156, 175, 176,
	177, 178, 179, 180, 0, 0, 81, 97, 92, 133,
	124, 79, 103, 148, 106, 113, 139, 183, 130, 144,
	84, 166, 149, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 129, 0, 182, 89, 85, 67, 0, 0,
	0, 0, 68, 75, 110, 91, 138, 95, 168, 0,
	0, 109, 0, 111, 0, 0, 150, 120, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 65, 0, 0, 0,
	0, 0, 0, 0, 0, 82, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 93, 128, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 98, 0, 219,
	0, 0, 172, 0, 0, 0, 0, 136, 0, 153,
	100, 108, 69, 76, 0, 99, 126, 141, 145, 0,
	0, 0, 86, 0, 143, 131, 165, 0, 132, 142,
	112, 158, 137, 0, 173, 174, 155, 171, 181, 70,
	154, 164, 83, 146, 72, 162, 152, 118, 104, 105,
	71, 0, 140, 90, 96, 88, 127, 159, 160, 87,
	184, 77, 170, 74, 78, 169, 125, 157, 163, 119,
	116, 73, 161, 117, 115, 107, 94, 101, 134, 114,
	135, 102, 122, 121, 123, 0, 0, 0, 151, 167,
	185, 80, 0, 147, 156, 175, 176, 177, 178, 179,
	180, 0, 0, 81, 97, 92, 133, 124, 79, 103,
	148, 106, 113, 139, 183, 130, 144, 84, 166, 149,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 129,
	0, 182, 89, 85, 67, 0, 0, 0, 0, 68,
	75, 110, 91, 138, 95, 168, 0, 0, 109, 0,
	111, 0, 0, 150, 120, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 207, 0, 0, 0, 0, 0, 0,
	0, 0, 82, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 93,
	128, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 98, 0, 0, 0, 0, 172,
	0, 0, 0, 0, 136, 0, 153, 100, 108, 69,
	76, 0, 99, 126, 141, 145, 0, 0, 0, 86,
	0, 143, 131, 165, 0, 132, 142, 112, 158, 137,
	0, 173, 174, 155, 171, 181, 70, 154, 164, 83,
	146, 72, 162, 152, 118, 104, 105, 71, 0, 140,
	90, 96, 88, 127, 159, 160, 87, 184, 77, 170,
	74, 78, 169, 125, 157, 163, 119, 116, 73, 161,
	117, 115, 107, 94, 101, 134, 114, 135, 102, 122,
	121, 123, 0, 0, 0, 151, 167, 185, 80, 0,
	147, 156, 175, 176, 177, 178, 179, 180, 0, 0,
	81, 97, 92, 133, 124, 79, 103, 148, 106, 113,
	139, 183, 130, 144, 84, 166, 149, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 129, 0, 182, 89,
	85, 67, 0, 0, 0, 0, 68, 75, 110, 91,
	138, 95, 168, 0, 0, 109, 0, 111, 0, 0,
	150, 120, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	65, 0, 0, 0, 0, 0, 0, 0, 0, 82,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 93, 128, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 98, 0, 0, 0, 0, 172, 0, 0, 0,
	0, 136, 0, 153, 100, 108, 69, 76, 0, 99,
	126, 141, 145, 0, 0, 0, 86, 0, 143, 131,
	165, 0, 132, 142, 112, 158, 137, 0, 173, 174,
	155, 171, 181, 70, 154, 164, 83, 146, 72, 162,
	152, 118, 104, 105, 71, 0, 140, 90, 96, 88,
	127, 159, 160, 87, 184, 77, 170, 74, 78, 169,
	125, 157, 163, 119, 116, 73, 161, 117, 115, 107,
	94, 101, 134, 114, 135, 102, 122, 121, 123, 0,
	0, 0, 151, 167, 185, 80, 0, 147, 156, 175,
	176, 177, 178, 179, 180, 0, 0, 81, 97, 92,
	133, 124, 79, 103, 148, 106, 113, 139, 183, 130,
	144, 84, 166, 149, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 129, 0, 182, 89, 85, 67, 0,
	0, 0, 0, 68, 75, 110, 91, 138, 95, 168,
	0, 0, 109, 0, 111, 0, 0, 150, 120, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 282, 0, 0,
	0, 0, 0, 0, 0, 0, 82, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 93, 128, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 98, 0,
	0, 0, 0, 172, 0, 0, 0, 0, 136, 0,
	153, 100, 108, 69, 76, 0, 99, 126, 141, 145,
	0, 0, 0, 86, 0, 143, 131, 165, 0, 132,
	142, 112, 158, 137, 0, 173, 174, 155, 171, 181,
	70, 154, 164, 83, 146, 72, 162, 152, 118, 104,
	105, 71, 0, 140, 90, 96, 88, 127, 159, 160,
	87, 184, 77, 170, 74, 78, 169, 125, 157, 163,
	119, 116, 73, 161, 117, 115, 107, 94, 101, 134,
	114, 135, 102, 122, 121, 123, 0, 0, 0, 151,
	167, 185, 80, 0, 147, 156, 175, 176, 177, 178,
	179, 180, 0, 0, 81, 97, 92, 133, 124, 79,
	103, 148, 106, 113, 139, 183, 130, 144, 84, 166,
	149, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	68, 75, 110, 0, 138, 95, 168,
}

var yyPact = [...]int{
	1877, -1000, -203, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, 980, 12039, 1031, -1000, -1000, -1000, -1000, -1000,
	-1000, 366, 2951, 27, 176, 75, 13044, 174, 2349, 13538,
	-1000, 14, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -78,
	-89, -1000, 84, -1000, -1000, -1000, -1000, -1000, 965, 973,
	761, -1000, 948, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, 813, 953, 886, -1000,
	7939, 122, 122, 12797, 6354, -1000, -1000, 341, 13538, 162,
	13538, -167, 119, 119, 119, -1000, -1000, -1000, -1000, 173,
	13538, 294, -1000, 13538, 117, 655, 117, 117, 117, 13538,
	-1000, 239, 13538, 652, 3861, 39, 3861, 3861, -1000, 3861,
	3861, -1000, 3861, 20, 3861, 12, 989, -1000, -1000, -1000,
	-1000, -64, -1000, 3861, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, 540, 925, 8731,
	8731, 84, 12039, 609, 980, -1000, 84, -1000, -1000, -1000,
	917, -1000, -1000, 445, 1005, -1000, 2650, 234, -1000, 8731,
	23, 609, -1000, -1000, 609, -1000, -1000, -1000, -1000, -1000,
	9523, 9523, 9523, 9523, 9523, 9523, 9523, 9523, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, 609, -1000, 7147, 609, 609, 609, 609, 609,
	609, 609, 609, 8731, 609, 609, 609, 609, 609, 609,
	609, 609, 609, 609, 609, 609, 609, 609, 609, 12550,
	11792, 13538, 734, 701, -1000, -1000, 232, 756, 6077, -100,
	-1000, -1000, -1000, 332, 11545, -1000, -1000, -1000, 916, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, 672, 13538, -1000, 1661,
	-1000, 638, 3861, 140, 628, 394, 615, 13538, 13538, 3861,
	49, 89, 172, 13538, 758, 137, 13538, 943, 841, 13538,
	608, 603, -1000, 5800, -1000, 3861, -1000, -1000, -1000, 3861,
	3861, 3861, 13538, 3861, 3861, -1000, -1000, -1000, -1000, -1000,
	3861, 3861, -1000, 1004, 337, -1000, -1000, -1000, -1000, 8731,
	-1000, 837, -1000, -1000, -1000, -1000, -1000, -1000, 1025, 297,
	543, 229, 757, -1000, 438, -1000, -1000, 84, 965, 540,
	886, 11294, 854, -1000, -1000, 13538, -1000, 8731, 8731, 473,
	-1000, 12286, -1000, -1000, 4692, 303, 9523, 496, 373, 9523,
	9523, 9523, 9523, 9523, 9523, 9523, 9523, 9523, 9523, 9523,
	9523, 9523, 9523, 9523, 9523, 9523, 9523, 9523, 506, 9523,
	10800, 13291, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	590, -1000, 84, 81, 81, 81, 81, 81, 81, 81,
	9787, 7411, 540, 646, 465, 7147, 7939, 7939, 8731, 8731,
	8467, 8203, 7939, 954, 368, 465, 13785, -1000, -1000, 9259,
	-1000, -1000, -1000, -1000, -1000, 540, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, 13291, 13291, 7939, 7939, 7939, 7939, 82,
	13538, -1000, 703, 879, -1000, -1000, -1000, 946, 10289, 609,
	11047, 82, 662, 11792, 13538, -1000, -1000, 11792, 13538, 4415,
	5523, 756, -100, 704, -1000, -124, -141, 6882, 178, -1000,
	-1000, -1000, -1000, 3584, 546, 602, 488, -56, -1000, -1000,
	-1000, 771, -1000, 771, 771, 771, 771, -22, -22, -22,
	-22, -1000, -1000, -1000, -1000, -1000, 817, 812, -1000, 771,
	771, 771, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	808, 808, 808, 800, 800, 824, -1000, 13538, 3861, 942,
	3861, -1000, 2016, -1000, 13291, 13291, 13538, 13538, 199, 13538,
	13538, 755, -1000, 13538, 3861, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, 13538,
	387, 13538, 13538, 465, 13538, -1000, 897, 8731, 8731, 5246,
	8731, -1000, -1000, -1000, 540, 925, -1000, 954, 975, -1000,
	905, 903, 7939, -1000, -1000, 303, 362, -1000, -1000, 428,
	-1000, -1000, -1000, -1000, 228, 609, -1000, 2197, -1000, -1000,
	-1000, -1000, 496, 9523, 9523, 9523, 1961, 2197, 2197, 2197,
	2197, 2197, 2102, 160, 1845, 81, 179, 179, 128, 128,
	128, 128, 128, 912, 912, -1000, -1000, -1000, 77, -1000,
	-1000, -1000, -1000, -1000, -1000, 540, -1000, 540, 7939, 754,
	-1000, -1000, 8731, -1000, 540, 642, 642, 539, 550, 1003,
	1002, 642, 996, 994, 642, 642, 7939, 413, -1000, 8731,
	540, -1000, 223, -1000, 214, 747, 746, 642, 540, 642,
	642, 198, 609, -1000, 13785, 11792, 866, 11792, 11792, 11792,
	-1000, -1000, -1000, 856, 853, 888, 13538, -1000, 644, 10289,
	13291, 258, 609, -1000, 12039, 986, 11792, 737, -1000, 737,
	-1000, 213, -1000, -1000, 704, -100, -144, -1000, -1000, -1000,
	-1000, 465, -1000, 536, 698, 3307, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, 797, 584, -1000, 933, 254, 403, 573,
	932, -1000, -1000, -1000, 918, -1000, 404, -58, -1000, -1000,
	508, -22, -22, -1000, -1000, 178, 913, 178, 178, 178,
	528, 528, -1000, -1000, -1000, -1000, 499, -1000, -1000, -1000,
	487, -1000, 834, 13291, 3861, -1000, -1000, -1000, -1000, 1671,
	1671, 318, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, 79, 804, -1000, -1000, -1000, 47, 46,
	135, -1000, 3861, -1000, 337, -1000, 513, 8731, -1000, -1000,
	-1000, 889, 465, 465, 211, -1000, -1000, -1000, 13538, -1000,
	-1000, -1000, -1000, 733, -1000, -1000, -1000, 4138, 7939, -1000,
	1961, 2197, 1682, -1000, 9523, 9523, -1000, -1000, -1000, 642,
	7939, 465, -1000, -1000, -1000, 10800, 506, 10800, 9523, 9523,
	-1000, 9523, 9523, -1000, -186, 798, 352, -1000, 8731, 402,
	-1000, 5246, -1000, 9523, 9523, -1000, -1000, -1000, -1000, 833,
	13785, 609, -1000, 10038, 13291, 745, -1000, 328, 879, 11792,
	-1000, 869, 865, 831, 803, -1000, -1000, 858, -1000, 857,
	-1000, -1000, -1000, -1000, 540, 696, -1000, 245, -1000, 158,
	157, 147, 13291, -1000, 980, 8731, 737, -1000, -1000, 230,
	-1000, -1000, -146, -109, -1000, -1000, -1000, 3584, -1000, 3584,
	13291, 98, -1000, 573, 573, -1000, -1000, -1000, 787, 827,
	9523, -1000, -1000, -1000, 598, 178, 178, -1000, 334, -1000,
	-1000, -1000, 633, -1000, 624, 687, 619, 13538, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, 13538, -1000, -1000, -1000, -1000, -1000,
	13291, -193, 571, 13291, 13291, 13538, -1000, 387, -1000, 465,
	-1000, 4969, -1000, 986, 11792, -1000, -1000, 540, -1000, 9523,
	2197, 2197, -1000, -1000, 540, 540, 540, 1611, 1550, 729,
	477, 609, -174, -1000, 465, 8731, -1000, 418, 276, -1000,
	935, 679, 682, -1000, -1000, 7675, 540, 613, 206, 601,
	-1000, 980, 13785, 8731, 807, -1000, -1000, -1000, 8731, -1000,
	8731, 786, -1000, -1000, 946, 13291, 6618, 609, 609, 609,
	601, 965, 465, -1000, -1000, -1000, -1000, 3307, -1000, 597,
	-1000, 771, -1000, -1000, -1000, 13291, -51, 1024, 2197, -1000,
	-1000, -1000, -1000, -1000, -22, 510, -22, 476, -1000, 454,
	3861, -1000, -1000, -1000, -1000, 937, -1000, 4969, -1000, -1000,
	764, -1000, -1000, -1000, 984, 686, -1000, 2197, -1000, -1000,
	-1000, 9523, 9523, 9523, 9523, 9523, 540, 489, 465, 9523,
	9523, 927, -1000, 609, -1000, -1000, 167, 13291, 13291, -1000,
	13291, 965, -1000, 465, -1000, -1000, 465, 465, 13291, 13538,
	-1000, -1000, 465, 609, 609, 13291, 13291, 13291, 10553, -1000,
	222, 13291, -1000, 582, -1000, 224, -1000, 188, 178, -1000,
	178, 567, 551, -1000, 609, 683, -1000, 325, 13291, 982,
	971, 214, 214, 214, 214, 51, -1000, -1000, 214, 214,
	1023, -1000, 609, -1000, 84, 191, -1000, -1000, -1000, 577,
	-1000, 11792, 13785, 566, 566, 566, 258, 222, -1000, 533,
	312, 474, -1000, 92, 13291, 412, 926, -1000, 921, -1000,
	-1000, -1000, -1000, -1000, 76, 4969, 3584, 560, 53, 8731,
	8731, -1000, -1000, -1000, -1000, 540, 34, -196, -1000, -1000,
	13785, 682, 540, 13291, -1000, 606, 540, -1000, -1000, -1000,
	-1000, -1000, -1000, 451, -1000, -1000, 13538, -1000, -1000, 470,
	-1000, -1000, 556, -1000, 13291, -1000, -1000, 804, -1000, 821,
	465, 681, -1000, 881, -191, -199, 680, -1000, -1000, -1000,
	-1000, -1000, 763, -1000, -1000, 76, 902, -193, 547, -1000,
	469, 959, 8731, -1000, 873, -1000, 13291, -1000, 72, -1000,
	821, -1000, 345, 8731, 465, -194, 545, 67, -1000, 1028,
	465, -197, 826, 609, -1000, -200, 822, -1000, 993, 8995,
	-1000, -1000, 1021, 205, 205, 214, 540, -1000, -1000, -1000,
	106, 481, -1000, -1000, -1000, -1000, -1000, -1000,
}

var yyPgo = [...]int{
	0, 1252, 38, 203, 1250, 1246, 1243, 102, 1242, 1239,
	1229, 1227, 1226, 1224, 1223, 1222, 1221, 1220, 1219, 1218,
	1215, 1213, 1212, 1210, 1209, 1208, 1207, 1206, 1205, 343,
	1204, 1203, 1202, 68, 1201, 73, 1200, 1198, 53, 198,
	54, 46, 724, 1197, 34, 23, 55, 1194, 1190, 1188,
	21, 1186, 20, 1184, 1183, 74, 1182, 1181, 59, 1180,
	1178, 218, 1177, 66, 1176, 9, 32, 1175, 1174, 1173,
	1172, 1171, 215, 1170, 1167, 13, 1166, 1164, 100, 1163,
	62, 10, 17, 19, 14, 1161, 27, 8, 1159, 61,
	1157, 1153, 1152, 1150, 36, 1149, 67, 1146, 18, 63,
	1144, 1138, 3, 1135, 51, 71, 41, 22, 5, 75,
	70, 1134, 30, 65, 60, 1133, 1131, 221, 1130, 1125,
	44, 1122, 1120, 31, 175, 172, 1114, 1113, 1112, 1111,
	49, 0, 1040, 87, 72, 1110, 1108, 1103, 1907, 48,
	28, 25, 26, 47, 1278, 50, 1102, 1099, 42, 1097,
	1096, 1094, 1093, 1089, 1086, 1085, 112, 1084, 1082, 1081,
	29, 52, 1080, 1079, 78, 69, 1078, 1076, 1075, 58,
	64, 1074, 1069, 57, 43, 1066, 1065, 1062, 1061, 1058,
	45, 4, 1057, 15, 1053, 6, 1052, 1051, 35, 1050,
	12, 1049, 16, 1047, 7, 1044, 11, 56, 1, 1043,
	2, 1042, 1041, 1105, 281, 76, 1038, 77,
}

var yyR1 = [...]int{
	0, 201, 202, 202, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 2, 2, 2, 2, 6, 6,
	8, 8, 7, 9, 3, 4, 5, 5, 10, 10,
	32, 32, 11, 12, 12, 12, 12, 205, 205, 55,
	55, 56, 56, 105, 105, 13, 13, 13, 13, 110,
	110, 114, 114, 114, 115, 115, 115, 115, 146, 146,
	14, 14, 14, 14, 14, 14, 14, 196, 196, 195,
	194, 194, 193, 193, 192, 20, 176, 178, 178, 177,
	177, 177, 177, 170, 149, 149, 149, 149, 152, 152,
	150, 150, 150, 150, 150, 150, 150, 150, 150, 151,
	151, 151, 151, 151, 153, 153, 153, 153, 153, 154,
	154, 154, 154, 154, 154, 154, 154, 154, 154, 154,
	154, 154, 154, 154, 155, 155, 155, 155, 155, 155,
	155, 155, 169, 169, 156, 156, 164, 164, 165, 165,
	165, 162, 162, 163, 163, 166, 166, 166, 158, 158,
	159, 159, 167, 167, 160, 160, 160, 161, 161, 161,
	168, 168, 168, 168, 168, 157, 157, 171, 171, 186,
	186, 185, 185, 185, 175, 175, 182, 182, 182, 182,
	182, 173, 173, 174, 174, 184, 184, 183, 172, 172,
	188, 188, 188, 188, 199, 200, 198, 198, 198, 198,
	198, 179, 179, 179, 180, 180, 180, 181, 181, 181,
	15, 15, 15, 15, 15, 15, 15, 15, 15, 15,
	15, 15, 15, 197, 197, 197, 197, 197, 197, 197,
	197, 197, 197, 197, 191, 189, 189, 190, 190, 16,
	21, 21, 17, 17, 17, 17, 17, 18, 18, 22,
	23, 23, 23, 23, 23, 23, 23, 23, 23, 23,
	23, 23, 23, 23, 23, 23, 23, 23, 23, 23,
	23, 23, 23, 23, 23, 23, 23, 23, 23, 23,
	23, 121, 121, 119, 119, 122, 122, 120, 120, 120,
	123, 123, 123, 147, 147, 147, 24, 24, 26, 26,
	27, 28, 25, 25, 25, 25, 25, 25, 25, 19,
	206, 29, 30, 30, 31, 31, 31, 35, 35, 35,
	33, 33, 34, 34, 40, 40, 39, 39, 41, 41,
	41, 41, 135, 135, 135, 134, 134, 43, 43, 44,
	44, 45, 45, 46, 46, 46, 46, 46, 64, 64,
	49, 49, 48, 48, 50, 51, 51, 51, 104, 104,
	106, 106, 47, 47, 47, 47, 52, 52, 53, 53,
	54, 54, 142, 142, 141, 141, 141, 187, 187, 187,
	140, 140, 57, 57, 57, 59, 58, 58, 58, 58,
	60, 60, 62, 62, 61, 61, 63, 65, 65, 65,
	65, 66, 66, 42, 42, 42, 42, 42, 42, 42,
	118, 118, 68, 68, 67, 67, 67, 67, 67, 67,
	67, 67, 67, 67, 67, 67, 67, 67, 79, 79,
	79, 79, 79, 79, 69, 69, 69, 69, 69, 69,
	69, 38, 38, 80, 80, 80, 86, 81, 81, 72,
	72, 72, 72, 72, 72, 72, 72, 72, 72, 72,
	72, 72, 72, 72, 72, 72, 72, 72, 72, 72,
	72, 72, 72, 72, 72, 72, 72, 72, 72, 72,
	72, 72, 76, 76, 76, 74, 74, 74, 74, 74,
	74, 74, 74, 74, 74, 74, 74, 74, 75, 75,
	75, 75, 75, 75, 75, 75, 75, 75, 75, 75,
	75, 75, 75, 75, 207, 207, 78, 77, 77, 77,
	77, 77, 77, 36, 36, 36, 36, 36, 145, 145,
	148, 148, 148, 148, 90, 90, 37, 37, 88, 88,
	89, 91, 91, 87, 87, 87, 71, 71, 71, 71,
	71, 71, 71, 71, 73, 73, 73, 92, 92, 93,
	93, 94, 94, 95, 95, 96, 97, 97, 97, 98,
	98, 98, 98, 99, 99, 99, 100, 100, 101, 101,
	102, 102, 102, 102, 70, 70, 70, 70, 70, 70,
	103, 103, 103, 103, 107, 107, 82, 82, 84, 84,
	83, 85, 108, 108, 112, 109, 109, 113, 113, 113,
	113, 111, 111, 111, 137, 137, 137, 116, 116, 124,
	124, 125, 125, 117, 117, 126, 126, 126, 126, 126,
	126, 126, 126, 126, 126, 127, 127, 127, 128, 128,
	129, 129, 129, 136, 136, 132, 132, 133, 133, 138,
	138, 139, 139, 130, 130, 130, 130, 130, 130, 130,
	130, 130, 130, 130, 130, 130, 130, 130, 130, 130,
	130, 130, 130, 130, 130, 130, 130, 130, 130, 130,
	130, 130, 130, 130, 130, 130, 130, 130, 130, 130,
	130, 130, 130, 130, 130, 130, 130, 130, 130, 130,
	130, 130, 130, 130, 130, 130, 130, 130, 130, 130,
	130, 130, 130, 130, 130, 130, 130, 130, 130, 130,
	130, 130, 130, 130, 130, 130, 130, 130, 130, 130,
	130, 130, 130, 130, 130, 130, 130, 130, 130, 130,
	130, 130, 130, 130, 130, 130, 130, 130, 130, 131,
	131, 131, 131, 131, 131, 131, 131, 131, 131, 131,
	131, 131, 131, 131, 131, 131, 131, 131, 131, 131,
	131, 131, 131, 131, 131, 131, 131, 131, 131, 131,
	131, 131, 131, 131, 131, 131, 131, 131, 131, 131,
	131, 131, 131, 131, 131, 131, 131, 131, 131, 131,
	131, 131, 131, 131, 131, 131, 131, 131, 131, 131,
	131, 131, 131, 131, 131, 131, 131, 131, 131, 131,
	131, 131, 131, 131, 131, 131, 131, 131, 131, 131,
	131, 131, 131, 131, 131, 131, 131, 131, 131, 131,
	131, 131, 131, 131, 131, 131, 131, 131, 131, 131,
	131, 131, 131, 131, 131, 131, 131, 131, 131, 131,
	131, 131, 131, 131, 131, 131, 131, 131, 203, 204,
	143, 144, 144, 144,
}

var yyR2 = [...]int{
	0, 2, 0, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 0, 4, 4, 6, 7, 0, 1,
	1, 3, 5, 5, 11, 3, 1, 3, 7, 8,
	1, 1, 9, 8, 7, 6, 6, 1, 1, 1,
	3, 1, 3, 0, 4, 3, 4, 5, 4, 1,
	3, 3, 2, 2, 2, 2, 2, 1, 1, 1,
	2, 2, 8, 4, 6, 5, 5, 0, 2, 1,
	0, 2, 1, 3, 3, 4, 4, 2, 4, 1,
	3, 3, 3, 8, 3, 1, 1, 1, 2, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 2,
	2, 2, 2, 2, 1, 2, 2, 2, 1, 4,
	4, 2, 2, 3, 3, 3, 3, 1, 1, 1,
	1, 1, 6, 6, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 3, 0, 3, 0, 5, 0, 3,
	5, 0, 1, 0, 1, 0, 1, 2, 0, 2,
	0, 3, 0, 1, 0, 3, 3, 0, 2, 2,
	0, 2, 1, 2, 1, 0, 2, 5, 4, 1,
	2, 2, 3, 2, 0, 1, 2, 3, 3, 2,
	2, 1, 1, 0, 1, 1, 3, 2, 3, 1,
	10, 11, 11, 12, 3, 3, 1, 1, 2, 2,
	2, 0, 1, 3, 1, 2, 3, 1, 1, 1,
	6, 7, 7, 7, 7, 4, 5, 7, 5, 5,
	5, 12, 7, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 7, 1, 3, 8, 8, 3,
	3, 5, 4, 6, 5, 4, 4, 3, 2, 3,
	4, 3, 4, 4, 4, 4, 4, 4, 3, 3,
	2, 3, 3, 2, 3, 4, 3, 7, 5, 4,
	2, 4, 2, 2, 2, 2, 3, 3, 5, 2,
	3, 1, 1, 0, 1, 1, 1, 0, 2, 2,
	0, 2, 2, 0, 1, 1, 2, 1, 1, 2,
	1, 1, 2, 2, 2, 2, 2, 3, 3, 2,
	0, 2, 0, 2, 1, 2, 2, 0, 1, 1,
	0, 1, 0, 1, 0, 1, 1, 3, 1, 2,
	3, 5, 0, 1, 2, 1, 1, 0, 2, 1,
	3, 1, 1, 1, 3, 1, 3, 6, 3, 7,
	0, 1, 1, 3, 3, 1, 4, 4, 1, 3,
	1, 3, 5, 4, 4, 3, 2, 4, 0, 1,
	0, 2, 0, 1, 0, 1, 2, 0, 1, 1,
	1, 1, 1, 2, 2, 1, 2, 3, 2, 3,
	2, 2, 2, 1, 1, 3, 3, 0, 5, 5,
	5, 0, 2, 1, 3, 3, 2, 3, 1, 2,
	0, 3, 1, 1, 3, 3, 4, 4, 5, 3,
	3, 3, 3, 3, 4, 5, 6, 2, 1, 2,
	1, 2, 1, 2, 1, 1, 1, 1, 1, 1,
	1, 0, 2, 1, 1, 1, 3, 1, 3, 1,
	1, 1, 1, 1, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 2, 2, 2,
	2, 2, 2, 2, 3, 1, 1, 1, 1, 4,
	3, 3, 4, 5, 6, 4, 4, 6, 6, 6,
	8, 8, 8, 8, 9, 7, 5, 4, 2, 2,
	2, 2, 2, 2, 2, 2, 2, 2, 2, 2,
	2, 2, 8, 8, 0, 2, 3, 4, 4, 4,
	4, 4, 4, 0, 3, 4, 7, 3, 1, 1,
	1, 1, 1, 1, 0, 1, 0, 2, 1, 2,
	4, 0, 2, 1, 3, 5, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 2, 2, 0, 3, 0,
	2, 0, 3, 1, 3, 2, 0, 1, 1, 0,
	2, 4, 4, 0, 2, 4, 0, 2, 1, 3,
	2, 4, 3, 2, 2, 1, 3, 5, 4, 6,
	1, 3, 3, 5, 0, 5, 1, 3, 1, 2,
	3, 1, 1, 3, 3, 1, 3, 3, 3, 3,
	3, 1, 2, 1, 1, 1, 1, 1, 1, 0,
	2, 0, 3, 0, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 0, 1, 1, 1, 1,
	0, 1, 1, 0, 2, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	0, 0, 1, 1,
}

var yyChk = [...]int{
	-1000, -201, -1, -2, -9, -10, -11, -12, -13, -14,
	-15, -16, -17, -18, -22, -23, -24, -26, -27, -28,
	-25, -19, -3, 278, -4, 6, 7, -32, 9, 10,
	34, -20, 127, 128, 130, 129, 162, 131, 155, 55,
	175, 176, 178, 179, 29, 156, 157, 160, 161, 35,
	36, 133, -203, 8, 265, 59, -202, 282, -94, 15,
	-8, -7, -140, -138, 64, 62, -131, 23, 275, 148,
	175, 186, 180, 207, 199, 276, 149, 197, 200, 244,
	227, 239, 71, 178, 253, 22, 158, 195, 191, 21,
	189, 31, 241, 88, 212, 280, 190, 240, 133, 151,
	146, 213, 217, 245, 184, 185, 247, 211, 147, 37,
	277, 39, 166, 248, 215, 210, 206, 209, 183, 205,
	43, 219, 218, 220, 243, 202, 152, 192, 89, 18,
	251, 161, 164, 242, 214, 216, 143, 168, 279, 249,
	188, 153, 165, 160, 252, 154, 179, 229, 246, 255,
	42, 224, 182, 145, 176, 172, 230, 203, 167, 193,
	194, 208, 181, 204, 177, 162, 254, 225, 281, 201,
	198, 173, 138, 170, 171, 231, 232, 233, 234, 235,
	236, 174, 20, 250, 196, 226, -31, 5, -29, -206,
	-29, -29, -29, -29, -29, -176, -178, 59, 98, -129,
	138, 79, 257, 134, 135, 142, -132, 62, -131, -117,
	138, 234, 140, 135, 135, 137, 138, 257, 134, 135,
	-61, -138, 135, 120, 244, 127, 228, 229, 241, 137,
	37, 242, 168, -147, 135, -119, 227, 231, 232, 233,
	236, 234, 174, 62, 246, 245, 237, -138, 177, -143,
	-143, -143, -143, -143, 230, 230, -143, -2, -98, 17,
	16, -6, 60, 26, -5, -3, -203, 6, 24, 25,
	-35, 44, 45, -30, -41, 108, -42, -138, -67, 81,
	-72, 33, 62, -131, 27, -71, -68, -87, -85, -86,
	120, 121, 122, 106, 107, 114, 82, 123, -76, -74,
	-75, -77, 64, 63, 72, 65, 66, 67, 68, 75,
	76, 77, -132, -83, -203, 49, 50, 266, 267, 268,
	269, 274, 270, 84, 38, 256, 264, 263, 262, 260,
	261, 258, 259, 272, 273, 141, 257, 112, 265, -117,
	-117, 11, -55, -56, -61, -63, -138, -109, -146, 177,
	-113, 246, 245, -133, -111, -132, -130, 244, 200, 243,
	132, 80, 26, 28, 222, 83, 120, 16, 84, 119,
	266, 127, 53, 258, 259, 256, 268, 269, 257, 228,
	33, 10, 29, 156, 25, 110, 129, 87, 159, 27,
	157, 77, 19, 56, 11, 13, 14, 141, 140, 100,
	137, 51, 8, 123, 30, 97, 46, 32, 49, 98,
	17, 260, 261, 35, 274, 163, 112, 54, 40, 81,
	75, 78, 57, 79, 15, 52, 99, 130, 265, 50,
	134, 6, 271, 34, 155, 47, 135, 86, 272, 273,
	139, 169, 76, 5, 142, 36, 9, 55, 58, 262,
	263, 264, 38, 85, 12, 278, -177, 98, -170, 62,
	-61, 137, -61, 265, -125, 141, -125, -125, 135, -61,
	127, 129, 132, 57, -21, -61, -124, 141, 62, -124,
	-124, -124, -61, 124, -61, 62, -144, -203, -133, 257,
	62, 168, 135, 169, 138, -144, -144, -144, -144, -144,
	172, 173, -144, -122, -121, 239, 240, 230, 238, 12,
	230, 171, -144, -143, -143, -204, 61, -99, 19, 35,
	-42, -138, -95, -96, -42, -2, -7, -203, -94, -2,
	-29, 40, -33, 25, 70, 11, -135, 80, 79, 97,
	-134, 26, -132, 64, 124, -42, -69, 100, 81, 98,
	114, 116, 115, 117, 99, 83, 103, 102, 113, 106,
	107, 108, 109, 110, 111, 112, 104, 105, 119, 283,
	69, 125, 90, 91, 92, 93, 94, 95, 96, -118,
	-203, -86, -203, -72, -72, -72, -72, -72, -72, -72,
	-72, -203, -2, -81, -42, -203, -203, -203, -203, -203,
	-203, -203, -203, -203, -90, -42, -203, -207, -78, -203,
	-207, -78, -207, -78, -207, -203, -207, -78, -207, -78,
	-207, -207, -78, -203, -203, -203, -203, -203, -203, -62,
	30, -61, -44, -45, -46, -47, -64, -86, -203, 62,
	-61, -61, -55, -205, 60, 11, 58, -205, 60, 124,
	60, -109, 177, -110, -114, 247, 249, 90, -137, -132,
	64, 33, 34, 61, 60, -61, -149, -152, -154, -153,
	-155, -150, -151, 197, 198, 120, 201, 203, 204, 205,
	206, 207, 208, 209, 210, 211, 212, 34, 158, 193,
	194, 195, 196, 213, 214, 215, 216, 217, 218, 219,
	220, 180, 199, 276, 181, 182, 183, 184, 185, 186,
	188, 189, 190, 191, 192, 62, -144, 138, 62, 81,
	62, -61, -61, -144, 170, 170, 135, 135, -61, 60,
	139, -55, 27, 57, -61, 62, 62, -139, -138, -130,
	-144, -144, -144, -144, -61, -144, -144, -144, -144, 11,
	-120, 11, 100, -42, 57, 9, 100, 60, 18, 124,
	60, -97, 28, 29, -2, -98, -204, -35, -73, -132,
	65, 68, -34, 47, -61, -42, -42, -79, 75, 81,
	76, 77, -134, 108, -139, -133, -130, -72, -80, -83,
	-86, 69, 100, 98, 99, 83, -72, -72, -72, -72,
	-72, -72, -72, -72, -72, -72, -72, -72, -72, -72,
	-72, -72, -72, -72, -72, -145, 62, 64, -72, -148,
	62, -131, 73, 74, -132, 62, -132, -40, 25, -39,
	-41, -204, 60, -204, -2, -39, -39, -42, -42, -87,
	64, -39, -87, 64, -39, -39, -33, -88, -89, 85,
	-87, -132, -138, -204, -72, -132, -132, -39, -40, -39,
	-39, -105, 164, -61, 34, 60, -187, -59, -58, -60,
	48, 7, 47, 49, 50, 54, -142, 26, -44, -203,
	-203, -141, 164, -140, 26, -105, 58, -44, -61, -44,
	-63, -138, 108, -113, -110, 60, 248, 250, 251, 57,
	78, -42, -161, 119, -179, -180, -181, -133, 64, 65,
	-170, -171, -172, -182, 150, -188, 143, 145, 142, -173,
	151, 137, 32, 61, -166, 75, 81, -162, 225, -156,
	59, -156, -156, -156, -156, -160, 200, -160, -160, -160,
	59, 59, -156, -156, -156, -164, 59, -164, -164, -165,
	59, -165, -136, 58, -61, -144, 27, -144, -126, 132,
	129, 130, -191, 128, 222, 200, 71, 33, 15, 266,
	164, 281, 62, 165, -132, -132, -61, -61, 132, 129,
	-61, -61, -61, -144, -61, -123, 98, 12, -138, -138,
	-61, 42, -42, -42, -139, -96, -204, -99, -116, 19,
	11, 38, 38, -39, 75, 76, 77, 124, -203, -80,
	-72, -72, -72, -38, 159, 80, 284, -204, -204, -39,
	60, -42, -204, -204, -204, 60, 58, 26, 11, 11,
	-204, 11, 11, -204, -204, -39, -91, -89, 87, -42,
	-204, 124, -204, 60, 60, -204, -204, -204, -204, -70,
	34, 38, -2, -203, -203, -108, -112, -87, -45, -57,
	46, 51, 53, -46, -45, -46, 46, 52, 46, 52,
	46, -58, -138, -204, -49, -48, -50, -132, -65, 55,
	140, 56, -203, -140, -66, 12, -44, -66, -66, 124,
	-114, -115, 252, 249, 255, 62, 64, 60, -181, 90,
	59, 62, 32, -173, -173, -174, 62, -174, 32, -158,
	33, 75, -163, 226, 65, -160, -160, -161, 34, -161,
	-161, -161, -169, 64, -169, 65, 65, 57, -132, -144,
	-143, -197, 144, 150, 151, 146, 62, 137, 32, 143,
	145, 164, 142, -197, -127, -128, 139, 26, 137, 32,
	164, -196, 58, 170, 170, 139, -144, -120, 64, -42,
	43, 124, -61, -43, 11, 108, -133, -40, -38, 80,
	-72, -72, -204, -41, -148, -145, -148, -72, -72, -72,
	-72, 275, -94, 88, -42, 86, -133, -72, -72, -107,
	57, -108, -82, -84, -83, -203, -2, -103, -132, -106,
	-132, -66, 60, 90, -46, 46, 46, -54, 57, -52,
	57, 58, 46, 46, -204, 60, 101, 137, 137, 137,
	-106, -94, -42, -66, 249, 253, 254, -180, -181, -184,
	-183, -132, -188, -174, -174, 59, -159, 57, -72, 61,
	-161, -161, 62, 120, 61, 60, 61, 60, 61, 60,
	-61, -143, -143, -61, -143, -132, -194, 278, -195, 62,
	-132, -132, -61, -123, -66, -44, -204, -72, -204, -204,
	-204, 19, 19, 19, 19, -203, -37, 271, -42, 60,
	60, 31, -107, 60, -204, -204, -204, 60, 124, -204,
	60, -94, -112, -42, -53, -52, -42, -42, 59, -142,
	-50, -51, -42, 135, 136, -203, -203, -203, -204, -98,
	61, 60, -156, -104, -132, -167, 222, 9, -160, 64,
	-160, 65, 65, -144, 30, -193, -192, -133, 59, -92,
	13, -72, -72, -72, -72, -72, -204, 64, -72, -72,
	32, -84, 38, -2, -203, -132, -132, -132, -98, -104,
	-138, -203, -203, -104, -104, -104, -141, -186, -185, 58,
	147, 71, -183, 61, 60, -168, 143, 32, 142, -75,
	-161, -161, 61, 61, -203, 60, 90, -104, -93, 14,
	16, -204, -204, -204, -204, -36, 100, 278, -204, -204,
	9, -82, -2, 124, 61, -45, -87, -204, -204, -204,
	-65, -185, 62, -175, 90, 64, 153, -132, -157, 71,
	32, 32, -189, -190, 164, -192, -181, 61, -100, 169,
	-42, -81, -204, 276, 54, 279, -108, -204, -132, -204,
	-204, 65, -61, 64, -204, 60, -132, -196, -101, -102,
	57, 23, 22, 43, 277, 280, 59, -190, 38, -194,
	60, 20, 88, 21, -42, 43, -104, 166, -102, 89,
	-42, 278, 61, 167, 7, 279, -199, -200, 57, -203,
	280, -200, 57, 10, 9, -72, 163, -198, 154, 149,
	152, 34, -198, -204, -204, 148, 33, 75,
}

var yyDef = [...]int{
	23, -2, 2, 4, 5, 6, 7, 8, 9, 10,
	11, 12, 13, 14, 15, 16, 17, 18, 19, 20,
	21, 22, 571, 0, 0, 320, 320, 320, 320, 320,
	320, 0, 650, 633, 0, 0, 0, 0, -2, 307,
	308, 0, 310, 311, 880, 880, 880, 880, 880, 0,
	0, 880, 0, 40, 41, 878, 1, 3, 579, 0,
	28, 30, 0, 390, 391, 659, 660, 759, 760, 761,
	762, 763, 764, 765, 766, 767, 768, 769, 770, 771,
	772, 773, 774, 775, 776, 777, 778, 779, 780, 781,
	782, 783, 784, 785, 786, 787, 788, 789, 790, 791,
	792, 793, 794, 795, 796, 797, 798, 799, 800, 801,
	802, 803, 804, 805, 806, 807, 808, 809, 810, 811,
	812, 813, 814, 815, 816, 817, 818, 819, 820, 821,
	822, 823, 824, 825, 826, 827, 828, 829, 830, 831,
	832, 833, 834, 835, 836, 837, 838, 839, 840, 841,
	842, 843, 844, 845, 846, 847, 848, 849, 850, 851,
	852, 853, 854, 855, 856, 857, 858, 859, 860, 861,
	862, 863, 864, 865, 866, 867, 868, 869, 870, 871,
	872, 873, 874, 875, 876, 877, 0, 324, 327, 322,
	0, 633, 633, 0, 0, 70, 71, 0, 0, 0,
	864, 0, 631, 631, 631, 651, 652, 655, 656, 0,
	0, 0, 634, 0, 629, 0, 629, 629, 629, 0,
	258, 404, 0, 0, 881, 0, 881, 881, 270, 881,
	881, 273, 881, 0, 881, 0, 280, 282, 283, 284,
	285, 0, 289, 881, 304, 305, 294, 306, 309, 312,
	313, 314, 315, 316, 880, 880, 319, 0, 583, 0,
	0, 0, 29, 0, 571, 36, 0, 320, 325, 326,
	330, 328, 329, 321, 0, 338, 342, 0, 413, 0,
	418, 420, -2, -2, 0, 459, 460, 461, 462, 463,
	0, 0, 0, 0, 0, 0, 0, 0, 485, 486,
	487, 488, 556, 557, 558, 559, 560, 561, 562, 563,
	422, 423, 553, 611, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 544, 0, 524, 524, 524, 524, 524,
	524, 524, 524, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 49, 51, 404, 55, 0, 856,
	615, -2, -2, 0, 0, 657, 658, -2, 770, -2,
	663, 664, 665, 666, 667, 668, 669, 670, 671, 672,
	673, 674, 675, 676, 677, 678, 679, 680, 681, 682,
	683, 684, 685, 686, 687, 688, 689, 690, 691, 692,
	693, 694, 695, 696, 697, 698, 699, 700, 701, 702,
	703, 704, 705, 706, 707, 708, 709, 710, 711, 712,
	713, 714, 715, 716, 717, 718, 719, 720, 721, 722,
	723, 724, 725, 726, 727, 728, 729, 730, 731, 732,
	733, 734, 735, 736, 737, 738, 739, 740, 741, 742,
	743, 744, 745, 746, 747, 748, 749, 750, 751, 752,
	753, 754, 755, 756, 757, 758, 0, 0, 89, 0,
	87, 0, 881, 0, 0, 0, 0, 0, 0, 881,
	0, 0, 0, 0, 249, 0, 0, 0, 0, 0,
	0, 0, 257, 0, 259, 881, 261, 882, 883, 881,
	881, 881, 0, 881, 881, 268, 269, 271, 272, 274,
	881, 881, 276, 0, 297, 295, 296, 291, 292, 0,
	286, 287, 290, 317, 318, 35, 879, 24, 0, 0,
	580, 0, 572, 573, 576, 25, 31, 0, 579, 0,
	327, 0, 332, 331, 323, 0, 339, 0, 0, 0,
	343, 0, 345, 346, 0, 416, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 444, 445, 446, 447, 448, 449, 450, 419,
	0, 437, 0, 477, 478, 479, 480, 481, 482, 483,
	0, 334, 0, 0, 457, 0, 0, 0, 0, 0,
	0, 0, 0, 330, 0, 545, 0, 508, 516, 0,
	509, 517, 510, 518, 511, 0, 512, 519, 513, 520,
	514, 515, 521, 0, 0, 0, 334, 0, 0, 53,
	0, 403, 0, -2, 351, 352, 353, -2, 0, 659,
	384, -2, 0, 0, 0, 47, 48, 0, 0, 0,
	0, 56, 856, 58, 59, 0, 0, 0, 167, 624,
	625, 626, 622, 211, 0, 0, 155, 151, 95, 96,
	97, 144, 99, 144, 144, 144, 144, 164, 164, 164,
	164, 127, 128, 129, 130, 131, 0, 0, 114, 144,
	144, 144, 118, 134, 135, 136, 137, 138, 139, 140,
	141, 100, 101, 102, 103, 104, 105, 106, 107, 108,
	146, 146, 146, 148, 148, 653, 73, 0, 881, 0,
	881, 85, 0, 225, 0, 0, 0, 0, 0, 0,
	0, 252, 630, 0, 881, 255, 256, 405, 661, 662,
	260, 262, 263, 264, 265, 266, 267, 275, 279, 0,
	300, 0, 0, 281, 0, 584, 0, 0, 0, 0,
	0, 575, 577, 578, 0, 583, 37, 330, 0, 564,
	0, 0, 0, 333, 33, 414, 415, 417, 438, 0,
	440, 442, 344, 340, 0, 554, -2, 424, 425, 453,
	454, 455, 0, 0, 0, 0, 451, 429, 430, 431,
	432, 433, 0, 464, 465, 466, 467, 468, 469, 470,
	471, 472, 473, 474, 475, 476, 538, 539, 0, 490,
	540, 541, 542, 543, 491, 0, 484, 0, 0, 335,
	336, 456, 0, 610, 0, 0, 0, 0, 0, 461,
	556, 0, 461, 556, 0, 0, 0, 551, 548, 0,
	0, 553, 0, 525, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 402, 0, 0, 0, 0, 0, 0,
	388, 389, 395, 0, 0, 0, 0, 383, 0, 0,
	360, 407, 824, 385, 0, 411, 0, 411, 50, 411,
	52, 0, 406, 616, 57, 0, 0, 62, 63, 617,
	618, 619, 620, 0, 86, 212, 214, 217, 218, 219,
	90, 91, 92, 0, 0, 199, 0, 0, 193, 193,
	0, 191, 192, 88, 158, 156, 0, 153, 152, 98,
	0, 164, 164, 121, 122, 167, 0, 167, 167, 167,
	0, 0, 115, 116, 117, 109, 0, 110, 111, 112,
	0, 113, 0, 0, 881, 75, 632, 76, 880, 0,
	0, 645, 226, 635, 636, 637, 638, 639, 640, 641,
	642, 643, 644, 0, 77, 228, 230, 229, 0, 0,
	0, 250, 881, 254, 297, 278, 0, 0, 298, 299,
	288, 0, 581, 582, 0, 574, 32, 26, 0, 627,
	628, 565, 566, 347, 439, 441, 443, 0, 334, 426,
	451, 434, 0, 427, 0, 0, 489, 421, 492, 0,
	0, 458, -2, 495, 496, 0, 0, 0, 0, 0,
	531, 0, 0, 532, 0, 571, 0, 549, 0, 0,
	507, 0, 526, 0, 0, 527, 528, 529, 530, 604,
	0, 0, 595, 0, 0, 411, 612, 0, -2, 0,
	392, 0, 0, 380, 387, 375, 396, 0, 398, 0,
	400, 401, 354, 356, 0, 361, 362, 0, 358, 0,
	0, 0, 0, 386, 571, 0, 411, 45, 46, 0,
	60, 61, 0, 0, 67, 168, 169, 0, 215, 0,
	0, 0, 186, 193, 193, 189, 194, 190, 0, 160,
	0, 157, 94, 154, 0, 167, 167, 123, 0, 124,
	125, 126, 0, 142, 0, 0, 0, 0, 654, 74,
	220, 880, 233, 234, 235, 236, 237, 238, 239, 240,
	241, 242, 243, 880, 0, 880, 646, 647, 648, 649,
	0, 80, 0, 0, 0, 0, 253, 300, 301, 302,
	585, 0, 27, 411, 0, 341, 555, 0, 428, 0,
	452, 435, 493, 337, 0, 0, 0, 0, 0, 0,
	0, 0, 546, 506, 552, 0, 554, 0, 0, 38,
	0, 604, 594, 606, 608, 0, 0, 0, 600, 0,
	370, 571, 0, 0, 378, 393, 394, 373, 0, 374,
	0, 0, 397, 399, 382, 0, 0, 0, 0, 0,
	0, 579, 412, 44, 64, 65, 66, 213, 216, 0,
	195, 144, 198, 187, 188, 0, 162, 0, 159, 145,
	119, 120, 165, 166, 164, 0, 164, 0, 149, 0,
	881, 221, 222, 223, 224, 0, 227, 0, 78, 79,
	0, 232, 251, 277, 567, 348, 494, 436, 497, 499,
	498, 0, 0, 0, 0, 0, 0, 0, 550, 0,
	0, 0, 39, 0, 609, -2, 0, 0, 0, 54,
	0, 579, 613, 614, 372, 379, 381, 376, 0, 0,
	363, 364, 365, 0, 0, 0, 0, 0, 384, 43,
	178, 0, 197, 0, 368, 170, 163, 0, 167, 143,
	167, 0, 0, 72, 0, 81, 82, 0, 0, 569,
	0, 0, 0, 0, 0, 533, 505, 547, 0, 0,
	0, 607, 0, 598, 0, 602, 601, 371, 42, 0,
	357, 0, 0, 0, 0, 0, 407, 177, 179, 0,
	184, 0, 196, 0, 0, 175, 0, 172, 174, 161,
	132, 133, 147, 150, 0, 0, 0, 0, 586, 0,
	0, 500, 502, 501, 503, 0, 0, 0, 522, 523,
	0, 597, 0, 0, 377, 387, 0, 408, 409, 410,
	359, 180, 181, 0, 185, 183, 0, 369, 93, 0,
	171, 173, 0, 245, 0, 83, 84, 77, 34, 0,
	570, 568, 504, 0, 0, 0, 605, -2, 603, 366,
	367, 182, 0, 176, 244, 0, 0, 80, 587, 588,
	0, 0, 0, 534, 0, 537, 0, 246, 0, 231,
	0, 590, 0, 0, 593, 535, 0, 0, 589, 0,
	592, 0, 200, 0, 591, 0, 201, 202, 0, 0,
	536, 203, 0, 0, 0, 0, 0, 204, 206, 207,
	0, 0, 205, 247, 248, 208, 209, 210,
}

var yyTok1 = [...]int{
	1, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 82, 3, 3, 3, 111, 103, 3,
	59, 61, 108, 106, 60, 107, 124, 109, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 282,
	91, 90, 92, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 283, 3, 284, 113, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 102, 3, 114,
}

var yyTok2 = [...]int{
	2, 3, 4, 5, 6, 7, 8, 9, 10, 11,
	12, 13, 14, 15, 16, 17, 18, 19, 20, 21,
	22, 23, 24, 25, 26, 27, 28, 29, 30, 31,
	32, 33, 34, 35, 36, 37, 38, 39, 40, 41,
	42, 43, 44, 45, 46, 47, 48, 49, 50, 51,
	52, 53, 54, 55, 56, 57, 58, 62, 63, 64,
	65, 66, 67, 68, 69, 70, 71, 72, 73, 74,
	75, 76, 77, 78, 79, 80, 81, 83, 84, 85,
	86, 87, 88, 89, 93, 94, 95, 96, 97, 98,
	99, 100, 101, 104, 105, 110, 112, 115, 116, 117,
	118, 119, 120, 121, 122, 123, 125, 126, 127, 128,
	129, 130, 131, 132, 133, 134, 135, 136, 137, 138,
	139, 140, 141, 142, 143, 144, 145, 146, 147, 148,
	149, 150, 151, 152, 153, 154, 155, 156, 157, 158,
	159, 160, 161, 162, 163, 164, 165, 166, 167, 168,
	169, 170, 171, 172, 173, 174, 175, 176, 177, 178,
	179, 180, 181, 182, 183, 184, 185, 186, 187, 188,
	189, 190, 191, 192, 193, 194, 195, 196, 197, 198,
	199, 200, 201, 202, 203, 204, 205, 206, 207, 208,
	209, 210, 211, 212, 213, 214, 215, 216, 217, 218,
	219, 220, 221, 222, 223, 224, 225, 226, 227, 228,
	229, 230, 231, 232, 233, 234, 235, 236, 237, 238,
	239, 240, 241, 242, 243, 244, 245, 246, 247, 248,
	249, 250, 251, 252, 253, 254, 255, 256, 257, 258,
	259, 260, 261, 262, 263, 264, 265, 266, 267, 268,
	269, 270, 271, 272, 273, 274,
}

var yyTok3 = [...]int{
	57600, 275, 57601, 276, 57602, 277, 57603, 278, 57604, 279,
	57605, 280, 57606, 281, 0,
}

var yyErrorMessages = [...]struct {
	state int
	token int
	msg   string
}{}

//line yaccpar:1

/*	parser for yacc output	*/

var (
	yyDebug        = 0
	yyErrorVerbose = false
)

type yyLexer interface {
	Lex(lval *yySymType) int
	Error(s string)
}

type yyParser interface {
	Parse(yyLexer) int
	Lookahead() int
}

type yyParserImpl struct {
	lval  yySymType
	stack [yyInitialStackSize]yySymType
	char  int
}

func (p *yyParserImpl) Lookahead() int {
	return p.char
}

func yyNewParser() yyParser {
	return &yyParserImpl{}
}

const yyFlag = -1000

func yyTokname(c int) string {
	if c >= 1 && c-1 < len(yyToknames) {
		if yyToknames[c-1] != "" {
			return yyToknames[c-1]
		}
	}
	return __yyfmt__.Sprintf("tok-%v", c)
}

func yyStatname(s int) string {
	if s >= 0 && s < len(yyStatenames) {
		if yyStatenames[s] != "" {
			return yyStatenames[s]
		}
	}
	return __yyfmt__.Sprintf("state-%v", s)
}

func yyErrorMessage(state, lookAhead int) string {
	const TOKSTART = 4

	if !yyErrorVerbose {
		return "syntax error"
	}

	for _, e := range yyErrorMessages {
		if e.state == state && e.token == lookAhead {
			return "syntax error: " + e.msg
		}
	}

	res := "syntax error: unexpected " + yyTokname(lookAhead)

	// To match Bison, suggest at most four expected tokens.
	expected := make([]int, 0, 4)

	// Look for shiftable tokens.
	base := yyPact[state]
	for tok := TOKSTART; tok-1 < len(yyToknames); tok++ {
		if n := base + tok; n >= 0 && n < yyLast && yyChk[yyAct[n]] == tok {
			if len(expected) == cap(expected) {
				return res
			}
			expected = append(expected, tok)
		}
	}

	if yyDef[state] == -2 {
		i := 0
		for yyExca[i] != -1 || yyExca[i+1] != state {
			i += 2
		}

		// Look for tokens that we accept or reduce.
		for i += 2; yyExca[i] >= 0; i += 2 {
			tok := yyExca[i]
			if tok < TOKSTART || yyExca[i+1] == 0 {
				continue
			}
			if len(expected) == cap(expected) {
				return res
			}
			expected = append(expected, tok)
		}

		// If the default action is to accept or reduce, give up.
		if yyExca[i+1] != 0 {
			return res
		}
	}

	for i, tok := range expected {
		if i == 0 {
			res += ", expecting "
		} else {
			res += " or "
		}
		res += yyTokname(tok)
	}
	return res
}

func yylex1(lex yyLexer, lval *yySymType) (char, token int) {
	token = 0
	char = lex.Lex(lval)
	if char <= 0 {
		token = yyTok1[0]
		goto out
	}
	if char < len(yyTok1) {
		token = yyTok1[char]
		goto out
	}
	if char >= yyPrivate {
		if char < yyPrivate+len(yyTok2) {
			token = yyTok2[char-yyPrivate]
			goto out
		}
	}
	for i := 0; i < len(yyTok3); i += 2 {
		token = yyTok3[i+0]
		if token == char {
			token = yyTok3[i+1]
			goto out
		}
	}

out:
	if token == 0 {
		token = yyTok2[1] /* unknown char */
	}
	if yyDebug >= 3 {
		__yyfmt__.Printf("lex %s(%d)\n", yyTokname(token), uint(char))
	}
	return char, token
}

func yyParse(yylex yyLexer) int {
	return yyNewParser().Parse(yylex)
}

func (yyrcvr *yyParserImpl) Parse(yylex yyLexer) int {
	var yyn int
	var yyVAL yySymType
	var yyDollar []yySymType
	_ = yyDollar // silence set and not used
	yyS := yyrcvr.stack[:]

	Nerrs := 0   /* number of errors */
	Errflag := 0 /* error recovery flag */
	yystate := 0
	yyrcvr.char = -1
	yytoken := -1 // yyrcvr.char translated into internal numbering
	defer func() {
		// Make sure we report no lookahead when not parsing.
		yystate = -1
		yyrcvr.char = -1
		yytoken = -1
	}()
	yyp := -1
	goto yystack

ret0:
	return 0

ret1:
	return 1

yystack:
	/* put a state and value onto the stack */
	if yyDebug >= 4 {
		__yyfmt__.Printf("char %v in %v\n", yyTokname(yytoken), yyStatname(yystate))
	}

	yyp++
	if yyp >= len(yyS) {
		nyys := make([]yySymType, len(yyS)*2)
		copy(nyys, yyS)
		yyS = nyys
	}
	yyS[yyp] = yyVAL
	yyS[yyp].yys = yystate

yynewstate:
	yyn = yyPact[yystate]
	if yyn <= yyFlag {
		goto yydefault /* simple state */
	}
	if yyrcvr.char < 0 {
		yyrcvr.char, yytoken = yylex1(yylex, &yyrcvr.lval)
	}
	yyn += yytoken
	if yyn < 0 || yyn >= yyLast {
		goto yydefault
	}
	yyn = yyAct[yyn]
	if yyChk[yyn] == yytoken { /* valid shift */
		yyrcvr.char = -1
		yytoken = -1
		yyVAL = yyrcvr.lval
		yystate = yyn
		if Errflag > 0 {
			Errflag--
		}
		goto yystack
	}

yydefault:
	/* default state action */
	yyn = yyDef[yystate]
	if yyn == -2 {
		if yyrcvr.char < 0 {
			yyrcvr.char, yytoken = yylex1(yylex, &yyrcvr.lval)
		}

		/* look through exception table */
		xi := 0
		for {
			if yyExca[xi+0] == -1 && yyExca[xi+1] == yystate {
				break
			}
			xi += 2
		}
		for xi += 2; ; xi += 2 {
			yyn = yyExca[xi+0]
			if yyn < 0 || yyn == yytoken {
				break
			}
		}
		yyn = yyExca[xi+1]
		if yyn < 0 {
			goto ret0
		}
	}
	if yyn == 0 {
		/* error ... attempt to resume parsing */
		switch Errflag {
		case 0: /* brand new error */
			yylex.Error(yyErrorMessage(yystate, yytoken))
			Nerrs++
			if yyDebug >= 1 {
				__yyfmt__.Printf("%s", yyStatname(yystate))
				__yyfmt__.Printf(" saw %s\n", yyTokname(yytoken))
			}
			fallthrough

		case 1, 2: /* incompletely recovered error ... try again */
			Errflag = 3

			/* find a state where "error" is a legal shift action */
			for yyp >= 0 {
				yyn = yyPact[yyS[yyp].yys] + yyErrCode
				if yyn >= 0 && yyn < yyLast {
					yystate = yyAct[yyn] /* simulate a shift of "error" */
					if yyChk[yystate] == yyErrCode {
						goto yystack
					}
				}

				/* the current p has no shift on "error", pop stack */
				if yyDebug >= 2 {
					__yyfmt__.Printf("error recovery pops state %d\n", yyS[yyp].yys)
				}
				yyp--
			}
			/* there is no state on the stack with an error shift ... abort */
			goto ret1

		case 3: /* no shift yet; clobber input char */
			if yyDebug >= 2 {
				__yyfmt__.Printf("error recovery discards %s\n", yyTokname(yytoken))
			}
			if yytoken == yyEofCode {
				goto ret1
			}
			yyrcvr.char = -1
			yytoken = -1
			goto yynewstate /* try again in the same state */
		}
	}

	/* reduction by production yyn */
	if yyDebug >= 2 {
		__yyfmt__.Printf("reduce %v in:\n\t%v\n", yyn, yyStatname(yystate))
	}

	yynt := yyn
	yypt := yyp
	_ = yypt // guard against "declared and not used"

	yyp -= yyR2[yyn]
	// yyp is now the index of $0. Perform the default action. Iff the
	// reduced production is ε, $1 is possibly out of range.
	if yyp+1 >= len(yyS) {
		nyys := make([]yySymType, len(yyS)*2)
		copy(nyys, yyS)
		yyS = nyys
	}
	yyVAL = yyS[yyp+1]

	/* consult goto table to find next state */
	yyn = yyR1[yyn]
	yyg := yyPgo[yyn]
	yyj := yyg + yyS[yyp].yys + 1

	if yyj >= yyLast {
		yystate = yyAct[yyg]
	} else {
		yystate = yyAct[yyj]
		if yyChk[yystate] != -yyn {
			yystate = yyAct[yyg]
		}
	}
	// dummy call; replaced with literal code
	switch yynt {

	case 1:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:340
		{
			setParseTree(yylex, yyDollar[1].statement)
		}
	case 2:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:345
		{
		}
	case 3:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:346
		{
		}
	case 4:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:350
		{
			yyVAL.statement = yyDollar[1].selStmt
		}
	case 23:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:372
		{
			setParseTree(yylex, nil)
		}
	case 24:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:378
		{
			sel := yyDollar[1].selStmt.(*Select)
			sel.OrderBy = yyDollar[2].orderBy
			sel.Limit = yyDollar[3].limit
			sel.Lock = yyDollar[4].str
			yyVAL.selStmt = sel
		}
	case 25:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:386
		{
			yyVAL.selStmt = &With{CommonTableExpressions: yyDollar[2].commonTableExpressions, Select: yyDollar[4].selStmt}
		}
	case 26:
		yyDollar = yyS[yypt-6 : yypt+1]
//line sql.y:390
		{
			yyVAL.selStmt = &Union{Type: yyDollar[2].str, Left: yyDollar[1].selStmt, Right: yyDollar[3].selStmt, OrderBy: yyDollar[4].orderBy, Limit: yyDollar[5].limit, Lock: yyDollar[6].str}
		}
	case 27:
		yyDollar = yyS[yypt-7 : yypt+1]
//line sql.y:394
		{
			yyVAL.selStmt = &Select{Comments: Comments(yyDollar[2].bytes2), Cache: yyDollar[3].str, SelectExprs: SelectExprs{Nextval{Expr: yyDollar[5].expr}}, From: TableExprs{&AliasedTableExpr{Expr: yyDollar[7].tableName}}}
		}
	case 28:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:399
		{
			yyVAL.bytes = nil
		}
	case 29:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:403
		{
			yyVAL.bytes = []byte(",")
		}
	case 30:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:410
		{
			yyVAL.commonTableExpressions = []*CommonTableExpression{yyDollar[1].commonTableExpression}
		}
	case 31:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:414
		{
			yyVAL.commonTableExpressions = append(yyDollar[1].commonTableExpressions, yyDollar[3].commonTableExpression)
		}
	case 32:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sql.y:420
		{
			yyVAL.commonTableExpression = &CommonTableExpression{Name: yyDollar[1].tableIdent, Select: yyDollar[4].selStmt}
		}
	case 33:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sql.y:427
		{
			yyVAL.statement = &Stream{Comments: Comments(yyDollar[2].bytes2), SelectExpr: yyDollar[3].selectExpr, Table: yyDollar[5].tableName}
		}
	case 34:
		yyDollar = yyS[yypt-11 : yypt+1]
//line sql.y:434
		{
			yyVAL.selStmt = &Select{Comments: Comments(yyDollar[2].bytes2), Cache: yyDollar[3].str, Distinct: yyDollar[4].str, Hints: yyDollar[5].str, SelectExprs: yyDollar[6].selectExprs, From: yyDollar[7].tableExprs, Where: NewWhere(WhereStr, yyDollar[8].expr), GroupBy: GroupBy(yyDollar[9].exprs), Having: NewWhere(HavingStr, yyDollar[10].expr), Trigger: yyDollar[11].triggers}
		}
	case 35:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:440
		{
			yyVAL.selStmt = &ParenSelect{Select: yyDollar[2].selStmt}
		}
	case 36:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:446
		{
			yyVAL.selStmt = yyDollar[1].selStmt
		}
	case 37:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:450
		{
			yyVAL.selStmt = &ParenSelect{Select: yyDollar[2].selStmt}
		}
	case 38:
		yyDollar = yyS[yypt-7 : yypt+1]
//line sql.y:457
		{
			// insert_data returns a *Insert pre-filled with Columns & Values
			ins := yyDollar[6].ins
			ins.Action = yyDollar[1].str
			ins.Comments = yyDollar[2].bytes2
			ins.Ignore = yyDollar[3].str
			ins.Table = yyDollar[4].tableName
			ins.Partitions = yyDollar[5].partitions
			ins.OnDup = OnDup(yyDollar[7].updateExprs)
			yyVAL.statement = ins
		}
	case 39:
		yyDollar = yyS[yypt-8 : yypt+1]
//line sql.y:469
		{
			cols := make(Columns, 0, len(yyDollar[7].updateExprs))
			vals := make(ValTuple, 0, len(yyDollar[8].updateExprs))
			for _, updateList := range yyDollar[7].updateExprs {
				cols = append(cols, updateList.Name.Name)
				vals = append(vals, updateList.Expr)
			}
			yyVAL.statement = &Insert{Action: yyDollar[1].str, Comments: Comments(yyDollar[2].bytes2), Ignore: yyDollar[3].str, Table: yyDollar[4].tableName, Partitions: yyDollar[5].partitions, Columns: cols, Rows: Values{vals}, OnDup: OnDup(yyDollar[8].updateExprs)}
		}
	case 40:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:481
		{
			yyVAL.str = InsertStr
		}
	case 41:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:485
		{
			yyVAL.str = ReplaceStr
		}
	case 42:
		yyDollar = yyS[yypt-9 : yypt+1]
//line sql.y:491
		{
			yyVAL.statement = &Update{Comments: Comments(yyDollar[2].bytes2), Ignore: yyDollar[3].str, TableExprs: yyDollar[4].tableExprs, Exprs: yyDollar[6].updateExprs, Where: NewWhere(WhereStr, yyDollar[7].expr), OrderBy: yyDollar[8].orderBy, Limit: yyDollar[9].limit}
		}
	case 43:
		yyDollar = yyS[yypt-8 : yypt+1]
//line sql.y:497
		{
			yyVAL.statement = &Delete{Comments: Comments(yyDollar[2].bytes2), TableExprs: TableExprs{&AliasedTableExpr{Expr: yyDollar[4].tableName}}, Partitions: yyDollar[5].partitions, Where: NewWhere(WhereStr, yyDollar[6].expr), OrderBy: yyDollar[7].orderBy, Limit: yyDollar[8].limit}
		}
	case 44:
		yyDollar = yyS[yypt-7 : yypt+1]
//line sql.y:501
		{
			yyVAL.statement = &Delete{Comments: Comments(yyDollar[2].bytes2), Targets: yyDollar[4].tableNames, TableExprs: yyDollar[6].tableExprs, Where: NewWhere(WhereStr, yyDollar[7].expr)}
		}
	case 45:
		yyDollar = yyS[yypt-6 : yypt+1]
//line sql.y:505
		{
			yyVAL.statement = &Delete{Comments: Comments(yyDollar[2].bytes2), Targets: yyDollar[3].tableNames, TableExprs: yyDollar[5].tableExprs, Where: NewWhere(WhereStr, yyDollar[6].expr)}
		}
	case 46:
		yyDollar = yyS[yypt-6 : yypt+1]
//line sql.y:509
		{
			yyVAL.statement = &Delete{Comments: Comments(yyDollar[2].bytes2), Targets: yyDollar[3].tableNames, TableExprs: yyDollar[5].tableExprs, Where: NewWhere(WhereStr, yyDollar[6].expr)}
		}
	case 47:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:514
		{
		}
	case 48:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:515
		{
		}
	case 49:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:519
		{
			yyVAL.tableNames = TableNames{yyDollar[1].tableName}
		}
	case 50:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:523
		{
			yyVAL.tableNames = append(yyVAL.tableNames, yyDollar[3].tableName)
		}
	case 51:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:529
		{
			yyVAL.tableNames = TableNames{yyDollar[1].tableName}
		}
	case 52:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:533
		{
			yyVAL.tableNames = append(yyVAL.tableNames, yyDollar[3].tableName)
		}
	case 53:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:538
		{
			yyVAL.partitions = nil
		}
	case 54:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:542
		{
			yyVAL.partitions = yyDollar[3].partitions
		}
	case 55:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:548
		{
			yyVAL.statement = &Set{Comments: Comments(yyDollar[2].bytes2), Exprs: yyDollar[3].setExprs}
		}
	case 56:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:552
		{
			yyVAL.statement = &Set{Comments: Comments(yyDollar[2].bytes2), Scope: yyDollar[3].str, Exprs: yyDollar[4].setExprs}
		}
	case 57:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sql.y:556
		{
			yyVAL.statement = &Set{Comments: Comments(yyDollar[2].bytes2), Scope: yyDollar[3].str, Exprs: yyDollar[5].setExprs}
		}
	case 58:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:560
		{
			yyVAL.statement = &Set{Comments: Comments(yyDollar[2].bytes2), Exprs: yyDollar[4].setExprs}
		}
	case 59:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:566
		{
			yyVAL.setExprs = SetExprs{yyDollar[1].setExpr}
		}
	case 60:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:570
		{
			yyVAL.setExprs = append(yyVAL.setExprs, yyDollar[3].setExpr)
		}
	case 61:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:576
		{
			yyVAL.setExpr = &SetExpr{Name: NewColIdent(TransactionStr), Expr: NewStrVal([]byte(yyDollar[3].str))}
		}
	case 62:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:580
		{
			yyVAL.setExpr = &SetExpr{Name: NewColIdent(TransactionStr), Expr: NewStrVal([]byte(TxReadWrite))}
		}
	case 63:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:584
		{
			yyVAL.setExpr = &SetExpr{Name: NewColIdent(TransactionStr), Expr: NewStrVal([]byte(TxReadOnly))}
		}
	case 64:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:590
		{
			yyVAL.str = IsolationLevelRepeatableRead
		}
	case 65:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:594
		{
			yyVAL.str = IsolationLevelReadCommitted
		}
	case 66:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:598
		{
			yyVAL.str = IsolationLevelReadUncommitted
		}
	case 67:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:602
		{
			yyVAL.str = IsolationLevelSerializable
		}
	case 68:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:608
		{
			yyVAL.str = SessionStr
		}
	case 69:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:612
		{
			yyVAL.str = GlobalStr
		}
	case 70:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:618
		{
			yyDollar[1].ddl.TableSpec = yyDollar[2].TableSpec
			yyVAL.statement = yyDollar[1].ddl
		}
	case 71:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:623
		{
			// Create table [name] like [name]
			yyDollar[1].ddl.OptLike = yyDollar[2].optLike
			yyVAL.statement = yyDollar[1].ddl
		}
	case 72:
		yyDollar = yyS[yypt-8 : yypt+1]
//line sql.y:629
		{
			// Change this to an alter statement
			yyVAL.statement = &DDL{Action: AlterStr, Table: yyDollar[7].tableName}
		}
	case 73:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:634
		{
			yyVAL.statement = &DDL{Action: CreateStr, Table: yyDollar[3].tableName.ToViewName()}
		}
	case 74:
		yyDollar = yyS[yypt-6 : yypt+1]
//line sql.y:638
		{
			yyVAL.statement = &DDL{Action: CreateStr, Table: yyDollar[5].tableName.ToViewName()}
		}
	case 75:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sql.y:642
		{
			yyVAL.statement = &DBDDL{Action: CreateStr, DBName: string(yyDollar[4].bytes)}
		}
	case 76:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sql.y:646
		{
			yyVAL.statement = &DBDDL{Action: CreateStr, DBName: string(yyDollar[4].bytes)}
		}
	case 77:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:651
		{
			yyVAL.colIdent = NewColIdent("")
		}
	case 78:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:655
		{
			yyVAL.colIdent = yyDollar[2].colIdent
		}
	case 79:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:661
		{
			yyVAL.colIdent = NewColIdent(string(yyDollar[1].bytes))
		}
	case 80:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:666
		{
			var v []VindexParam
			yyVAL.vindexParams = v
		}
	case 81:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:671
		{
			yyVAL.vindexParams = yyDollar[2].vindexParams
		}
	case 82:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:677
		{
			yyVAL.vindexParams = make([]VindexParam, 0, 4)
			yyVAL.vindexParams = append(yyVAL.vindexParams, yyDollar[1].vindexParam)
		}
	case 83:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:682
		{
			yyVAL.vindexParams = append(yyVAL.vindexParams, yyDollar[3].vindexParam)
		}
	case 84:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:688
		{
			yyVAL.vindexParam = VindexParam{Key: yyDollar[1].colIdent, Val: yyDollar[3].str}
		}
	case 85:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:694
		{
			yyVAL.ddl = &DDL{Action: CreateStr, Table: yyDollar[4].tableName}
			setDDL(yylex, yyVAL.ddl)
		}
	case 86:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:701
		{
			yyVAL.TableSpec = yyDollar[2].TableSpec
			yyVAL.TableSpec.Options = yyDollar[4].str
		}
	case 87:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:708
		{
			yyVAL.optLike = &OptLike{LikeTable: yyDollar[2].tableName}
		}
	case 88:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:712
		{
			yyVAL.optLike = &OptLike{LikeTable: yyDollar[3].tableName}
		}
	case 89:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:718
		{
			yyVAL.TableSpec = &TableSpec{}
			yyVAL.TableSpec.AddColumn(yyDollar[1].columnDefinition)
		}
	case 90:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:723
		{
			yyVAL.TableSpec.AddColumn(yyDollar[3].columnDefinition)
		}
	case 91:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:727
		{
			yyVAL.TableSpec.AddIndex(yyDollar[3].indexDefinition)
		}
	case 92:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:731
		{
			yyVAL.TableSpec.AddConstraint(yyDollar[3].constraintDefinition)
		}
	case 93:
		yyDollar = yyS[yypt-8 : yypt+1]
//line sql.y:737
		{
			yyDollar[2].columnType.NotNull = yyDollar[3].boolVal
			yyDollar[2].columnType.Default = yyDollar[4].optVal
			yyDollar[2].columnType.OnUpdate = yyDollar[5].optVal
			yyDollar[2].columnType.Autoincrement = yyDollar[6].boolVal
			yyDollar[2].columnType.KeyOpt = yyDollar[7].colKeyOpt
			yyDollar[2].columnType.Comment = yyDollar[8].sqlVal
			yyVAL.columnDefinition = &ColumnDefinition{Name: NewColIdent(string(yyDollar[1].bytes)), Type: yyDollar[2].columnType}
		}
	case 94:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:748
		{
			yyVAL.columnType = yyDollar[1].columnType
			yyVAL.columnType.Unsigned = yyDollar[2].boolVal
			yyVAL.columnType.Zerofill = yyDollar[3].boolVal
		}
	case 98:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:759
		{
			yyVAL.columnType = yyDollar[1].columnType
			yyVAL.columnType.Length = yyDollar[2].sqlVal
		}
	case 99:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:764
		{
			yyVAL.columnType = yyDollar[1].columnType
		}
	case 100:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:770
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 101:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:774
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 102:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:778
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 103:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:782
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 104:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:786
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 105:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:790
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 106:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:794
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 107:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:798
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 108:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:802
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 109:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:808
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
			yyVAL.columnType.Length = yyDollar[2].LengthScaleOption.Length
			yyVAL.columnType.Scale = yyDollar[2].LengthScaleOption.Scale
		}
	case 110:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:814
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
			yyVAL.columnType.Length = yyDollar[2].LengthScaleOption.Length
			yyVAL.columnType.Scale = yyDollar[2].LengthScaleOption.Scale
		}
	case 111:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:820
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
			yyVAL.columnType.Length = yyDollar[2].LengthScaleOption.Length
			yyVAL.columnType.Scale = yyDollar[2].LengthScaleOption.Scale
		}
	case 112:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:826
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
			yyVAL.columnType.Length = yyDollar[2].LengthScaleOption.Length
			yyVAL.columnType.Scale = yyDollar[2].LengthScaleOption.Scale
		}
	case 113:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:832
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
			yyVAL.columnType.Length = yyDollar[2].LengthScaleOption.Length
			yyVAL.columnType.Scale = yyDollar[2].LengthScaleOption.Scale
		}
	case 114:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:840
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 115:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:844
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].sqlVal}
		}
	case 116:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:848
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].sqlVal}
		}
	case 117:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:852
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].sqlVal}
		}
	case 118:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:856
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 119:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:862
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].sqlVal, Charset: yyDollar[3].str, Collate: yyDollar[4].str}
		}
	case 120:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:866
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].sqlVal, Charset: yyDollar[3].str, Collate: yyDollar[4].str}
		}
	case 121:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:870
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].sqlVal}
		}
	case 122:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:874
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].sqlVal}
		}
	case 123:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:878
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), Charset: yyDollar[2].str, Collate: yyDollar[3].str}
		}
	case 124:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:882
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), Charset: yyDollar[2].str, Collate: yyDollar[3].str}
		}
	case 125:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:886
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), Charset: yyDollar[2].str, Collate: yyDollar[3].str}
		}
	case 126:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:890
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), Charset: yyDollar[2].str, Collate: yyDollar[3].str}
		}
	case 127:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:894
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 128:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:898
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 129:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:902
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 130:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:906
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 131:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:910
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 132:
		yyDollar = yyS[yypt-6 : yypt+1]
//line sql.y:914
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), EnumValues: yyDollar[3].strs, Charset: yyDollar[5].str, Collate: yyDollar[6].str}
		}
	case 133:
		yyDollar = yyS[yypt-6 : yypt+1]
//line sql.y:919
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), EnumValues: yyDollar[3].strs, Charset: yyDollar[5].str, Collate: yyDollar[6].str}
		}
	case 134:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:925
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 135:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:929
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 136:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:933
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 137:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:937
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 138:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:941
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 139:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:945
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 140:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:949
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 141:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:953
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 142:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:959
		{
			yyVAL.strs = make([]string, 0, 4)
			yyVAL.strs = append(yyVAL.strs, "'"+string(yyDollar[1].bytes)+"'")
		}
	case 143:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:964
		{
			yyVAL.strs = append(yyDollar[1].strs, "'"+string(yyDollar[3].bytes)+"'")
		}
	case 144:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:969
		{
			yyVAL.sqlVal = nil
		}
	case 145:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:973
		{
			yyVAL.sqlVal = NewIntVal(yyDollar[2].bytes)
		}
	case 146:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:978
		{
			yyVAL.LengthScaleOption = LengthScaleOption{}
		}
	case 147:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sql.y:982
		{
			yyVAL.LengthScaleOption = LengthScaleOption{
				Length: NewIntVal(yyDollar[2].bytes),
				Scale:  NewIntVal(yyDollar[4].bytes),
			}
		}
	case 148:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:990
		{
			yyVAL.LengthScaleOption = LengthScaleOption{}
		}
	case 149:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:994
		{
			yyVAL.LengthScaleOption = LengthScaleOption{
				Length: NewIntVal(yyDollar[2].bytes),
			}
		}
	case 150:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sql.y:1000
		{
			yyVAL.LengthScaleOption = LengthScaleOption{
				Length: NewIntVal(yyDollar[2].bytes),
				Scale:  NewIntVal(yyDollar[4].bytes),
			}
		}
	case 151:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:1008
		{
			yyVAL.boolVal = BoolVal(false)
		}
	case 152:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1012
		{
			yyVAL.boolVal = BoolVal(true)
		}
	case 153:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:1017
		{
			yyVAL.boolVal = BoolVal(false)
		}
	case 154:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1021
		{
			yyVAL.boolVal = BoolVal(true)
		}
	case 155:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:1027
		{
			yyVAL.boolVal = BoolVal(false)
		}
	case 156:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1031
		{
			yyVAL.boolVal = BoolVal(false)
		}
	case 157:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1035
		{
			yyVAL.boolVal = BoolVal(true)
		}
	case 158:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:1040
		{
			yyVAL.optVal = nil
		}
	case 159:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1044
		{
			yyVAL.optVal = yyDollar[2].expr
		}
	case 160:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:1049
		{
			yyVAL.optVal = nil
		}
	case 161:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1053
		{
			yyVAL.optVal = yyDollar[3].expr
		}
	case 162:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:1058
		{
			yyVAL.boolVal = BoolVal(false)
		}
	case 163:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1062
		{
			yyVAL.boolVal = BoolVal(true)
		}
	case 164:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:1067
		{
			yyVAL.str = ""
		}
	case 165:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1071
		{
			yyVAL.str = string(yyDollar[3].bytes)
		}
	case 166:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1075
		{
			yyVAL.str = string(yyDollar[3].bytes)
		}
	case 167:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:1080
		{
			yyVAL.str = ""
		}
	case 168:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1084
		{
			yyVAL.str = string(yyDollar[2].bytes)
		}
	case 169:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1088
		{
			yyVAL.str = string(yyDollar[2].bytes)
		}
	case 170:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:1093
		{
			yyVAL.colKeyOpt = colKeyNone
		}
	case 171:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1097
		{
			yyVAL.colKeyOpt = colKeyPrimary
		}
	case 172:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1101
		{
			yyVAL.colKeyOpt = colKey
		}
	case 173:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1105
		{
			yyVAL.colKeyOpt = colKeyUniqueKey
		}
	case 174:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1109
		{
			yyVAL.colKeyOpt = colKeyUnique
		}
	case 175:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:1114
		{
			yyVAL.sqlVal = nil
		}
	case 176:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1118
		{
			yyVAL.sqlVal = NewStrVal(yyDollar[2].bytes)
		}
	case 177:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sql.y:1124
		{
			yyVAL.indexDefinition = &IndexDefinition{Info: yyDollar[1].indexInfo, Columns: yyDollar[3].indexColumns, Options: yyDollar[5].indexOptions}
		}
	case 178:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:1128
		{
			yyVAL.indexDefinition = &IndexDefinition{Info: yyDollar[1].indexInfo, Columns: yyDollar[3].indexColumns}
		}
	case 179:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1134
		{
			yyVAL.indexOptions = []*IndexOption{yyDollar[1].indexOption}
		}
	case 180:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1138
		{
			yyVAL.indexOptions = append(yyVAL.indexOptions, yyDollar[2].indexOption)
		}
	case 181:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1144
		{
			yyVAL.indexOption = &IndexOption{Name: string(yyDollar[1].bytes), Using: string(yyDollar[2].bytes)}
		}
	case 182:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1148
		{
			// should not be string
			yyVAL.indexOption = &IndexOption{Name: string(yyDollar[1].bytes), Value: NewIntVal(yyDollar[3].bytes)}
		}
	case 183:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1153
		{
			yyVAL.indexOption = &IndexOption{Name: string(yyDollar[1].bytes), Value: NewStrVal(yyDollar[2].bytes)}
		}
	case 184:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:1159
		{
			yyVAL.str = ""
		}
	case 185:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1163
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 186:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1169
		{
			yyVAL.indexInfo = &IndexInfo{Type: string(yyDollar[1].bytes) + " " + string(yyDollar[2].bytes), Name: NewColIdent("PRIMARY"), Primary: true, Unique: true}
		}
	case 187:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1173
		{
			yyVAL.indexInfo = &IndexInfo{Type: string(yyDollar[1].bytes) + " " + string(yyDollar[2].str), Name: NewColIdent(yyDollar[3].str), Spatial: true, Unique: false}
		}
	case 188:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1177
		{
			yyVAL.indexInfo = &IndexInfo{Type: string(yyDollar[1].bytes) + " " + string(yyDollar[2].str), Name: NewColIdent(yyDollar[3].str), Unique: true}
		}
	case 189:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1181
		{
			yyVAL.indexInfo = &IndexInfo{Type: string(yyDollar[1].bytes), Name: NewColIdent(yyDollar[2].str), Unique: true}
		}
	case 190:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1185
		{
			yyVAL.indexInfo = &IndexInfo{Type: string(yyDollar[1].str), Name: NewColIdent(yyDollar[2].str), Unique: false}
		}
	case 191:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1191
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 192:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1195
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 193:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:1200
		{
			yyVAL.str = ""
		}
	case 194:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1204
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 195:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1210
		{
			yyVAL.indexColumns = []*IndexColumn{yyDollar[1].indexColumn}
		}
	case 196:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1214
		{
			yyVAL.indexColumns = append(yyVAL.indexColumns, yyDollar[3].indexColumn)
		}
	case 197:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1220
		{
			yyVAL.indexColumn = &IndexColumn{Column: yyDollar[1].colIdent, Length: yyDollar[2].sqlVal}
		}
	case 198:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1226
		{
			yyVAL.constraintDefinition = &ConstraintDefinition{Name: string(yyDollar[2].bytes), Details: yyDollar[3].constraintInfo}
		}
	case 199:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1230
		{
			yyVAL.constraintDefinition = &ConstraintDefinition{Details: yyDollar[1].constraintInfo}
		}
	case 200:
		yyDollar = yyS[yypt-10 : yypt+1]
//line sql.y:1237
		{
			yyVAL.constraintInfo = &ForeignKeyDefinition{Source: yyDollar[4].columns, ReferencedTable: yyDollar[7].tableName, ReferencedColumns: yyDollar[9].columns}
		}
	case 201:
		yyDollar = yyS[yypt-11 : yypt+1]
//line sql.y:1241
		{
			yyVAL.constraintInfo = &ForeignKeyDefinition{Source: yyDollar[4].columns, ReferencedTable: yyDollar[7].tableName, ReferencedColumns: yyDollar[9].columns, OnDelete: yyDollar[11].ReferenceAction}
		}
	case 202:
		yyDollar = yyS[yypt-11 : yypt+1]
//line sql.y:1245
		{
			yyVAL.constraintInfo = &ForeignKeyDefinition{Source: yyDollar[4].columns, ReferencedTable: yyDollar[7].tableName, ReferencedColumns: yyDollar[9].columns, OnUpdate: yyDollar[11].ReferenceAction}
		}
	case 203:
		yyDollar = yyS[yypt-12 : yypt+1]
//line sql.y:1249
		{
			yyVAL.constraintInfo = &ForeignKeyDefinition{Source: yyDollar[4].columns, ReferencedTable: yyDollar[7].tableName, ReferencedColumns: yyDollar[9].columns, OnDelete: yyDollar[11].ReferenceAction, OnUpdate: yyDollar[12].ReferenceAction}
		}
	case 204:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1255
		{
			yyVAL.ReferenceAction = yyDollar[3].ReferenceAction
		}
	case 205:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1261
		{
			yyVAL.ReferenceAction = yyDollar[3].ReferenceAction
		}
	case 206:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1267
		{
			yyVAL.ReferenceAction = Restrict
		}
	case 207:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1271
		{
			yyVAL.ReferenceAction = Cascade
		}
	case 208:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1275
		{
			yyVAL.ReferenceAction = NoAction
		}
	case 209:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1279
		{
			yyVAL.ReferenceAction = SetDefault
		}
	case 210:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1283
		{
			yyVAL.ReferenceAction = SetNull
		}
	case 211:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:1288
		{
			yyVAL.str = ""
		}
	case 212:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1292
		{
			yyVAL.str = " " + string(yyDollar[1].str)
		}
	case 213:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1296
		{
			yyVAL.str = string(yyDollar[1].str) + ", " + string(yyDollar[3].str)
		}
	case 214:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1304
		{
			yyVAL.str = yyDollar[1].str
		}
	case 215:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1308
		{
			yyVAL.str = yyDollar[1].str + " " + yyDollar[2].str
		}
	case 216:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1312
		{
			yyVAL.str = yyDollar[1].str + "=" + yyDollar[3].str
		}
	case 217:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1318
		{
			yyVAL.str = yyDollar[1].colIdent.String()
		}
	case 218:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1322
		{
			yyVAL.str = "'" + string(yyDollar[1].bytes) + "'"
		}
	case 219:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1326
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 220:
		yyDollar = yyS[yypt-6 : yypt+1]
//line sql.y:1332
		{
			yyVAL.statement = &DDL{Action: AlterStr, Table: yyDollar[4].tableName}
		}
	case 221:
		yyDollar = yyS[yypt-7 : yypt+1]
//line sql.y:1336
		{
			yyVAL.statement = &DDL{Action: AlterStr, Table: yyDollar[4].tableName}
		}
	case 222:
		yyDollar = yyS[yypt-7 : yypt+1]
//line sql.y:1340
		{
			yyVAL.statement = &DDL{Action: AlterStr, Table: yyDollar[4].tableName}
		}
	case 223:
		yyDollar = yyS[yypt-7 : yypt+1]
//line sql.y:1344
		{
			// Change this to a rename statement
			yyVAL.statement = &DDL{Action: RenameStr, FromTables: TableNames{yyDollar[4].tableName}, ToTables: TableNames{yyDollar[7].tableName}}
		}
	case 224:
		yyDollar = yyS[yypt-7 : yypt+1]
//line sql.y:1349
		{
			// Rename an index can just be an alter
			yyVAL.statement = &DDL{Action: AlterStr, Table: yyDollar[4].tableName}
		}
	case 225:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:1354
		{
			yyVAL.statement = &DDL{Action: AlterStr, Table: yyDollar[3].tableName.ToViewName()}
		}
	case 226:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sql.y:1358
		{
			yyVAL.statement = &DDL{Action: AlterStr, Table: yyDollar[4].tableName, PartitionSpec: yyDollar[5].partSpec}
		}
	case 227:
		yyDollar = yyS[yypt-7 : yypt+1]
//line sql.y:1362
		{
			yyVAL.statement = &DDL{Action: CreateVindexStr, VindexSpec: &VindexSpec{
				Name:   yyDollar[5].colIdent,
				Type:   yyDollar[6].colIdent,
				Params: yyDollar[7].vindexParams,
			}}
		}
	case 228:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sql.y:1370
		{
			yyVAL.statement = &DDL{Action: DropVindexStr, VindexSpec: &VindexSpec{
				Name: yyDollar[5].colIdent,
			}}
		}
	case 229:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sql.y:1376
		{
			yyVAL.statement = &DDL{Action: AddVschemaTableStr, Table: yyDollar[5].tableName}
		}
	case 230:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sql.y:1380
		{
			yyVAL.statement = &DDL{Action: DropVschemaTableStr, Table: yyDollar[5].tableName}
		}
	case 231:
		yyDollar = yyS[yypt-12 : yypt+1]
//line sql.y:1384
		{
			yyVAL.statement = &DDL{
				Action: AddColVindexStr,
				Table:  yyDollar[4].tableName,
				VindexSpec: &VindexSpec{
					Name:   yyDollar[7].colIdent,
					Type:   yyDollar[11].colIdent,
					Params: yyDollar[12].vindexParams,
				},
				VindexCols: yyDollar[9].columns,
			}
		}
	case 232:
		yyDollar = yyS[yypt-7 : yypt+1]
//line sql.y:1397
		{
			yyVAL.statement = &DDL{
				Action: DropColVindexStr,
				Table:  yyDollar[4].tableName,
				VindexSpec: &VindexSpec{
					Name: yyDollar[7].colIdent,
				},
			}
		}
	case 244:
		yyDollar = yyS[yypt-7 : yypt+1]
//line sql.y:1422
		{
			yyVAL.partSpec = &PartitionSpec{Action: ReorganizeStr, Name: yyDollar[3].colIdent, Definitions: yyDollar[6].partDefs}
		}
	case 245:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1428
		{
			yyVAL.partDefs = []*PartitionDefinition{yyDollar[1].partDef}
		}
	case 246:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1432
		{
			yyVAL.partDefs = append(yyDollar[1].partDefs, yyDollar[3].partDef)
		}
	case 247:
		yyDollar = yyS[yypt-8 : yypt+1]
//line sql.y:1438
		{
			yyVAL.partDef = &PartitionDefinition{Name: yyDollar[2].colIdent, Limit: yyDollar[7].expr}
		}
	case 248:
		yyDollar = yyS[yypt-8 : yypt+1]
//line sql.y:1442
		{
			yyVAL.partDef = &PartitionDefinition{Name: yyDollar[2].colIdent, Maxvalue: true}
		}
	case 249:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1448
		{
			yyVAL.statement = yyDollar[3].ddl
		}
	case 250:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1454
		{
			yyVAL.ddl = &DDL{Action: RenameStr, FromTables: TableNames{yyDollar[1].tableName}, ToTables: TableNames{yyDollar[3].tableName}}
		}
	case 251:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sql.y:1458
		{
			yyVAL.ddl = yyDollar[1].ddl
			yyVAL.ddl.FromTables = append(yyVAL.ddl.FromTables, yyDollar[3].tableName)
			yyVAL.ddl.ToTables = append(yyVAL.ddl.ToTables, yyDollar[5].tableName)
		}
	case 252:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:1466
		{
			var exists bool
			if yyDollar[3].byt != 0 {
				exists = true
			}
			yyVAL.statement = &DDL{Action: DropStr, FromTables: yyDollar[4].tableNames, IfExists: exists}
		}
	case 253:
		yyDollar = yyS[yypt-6 : yypt+1]
//line sql.y:1474
		{
			// Change this to an alter statement
			yyVAL.statement = &DDL{Action: AlterStr, Table: yyDollar[5].tableName}
		}
	case 254:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sql.y:1479
		{
			var exists bool
			if yyDollar[3].byt != 0 {
				exists = true
			}
			yyVAL.statement = &DDL{Action: DropStr, FromTables: TableNames{yyDollar[4].tableName.ToViewName()}, IfExists: exists}
		}
	case 255:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:1487
		{
			yyVAL.statement = &DBDDL{Action: DropStr, DBName: string(yyDollar[4].bytes)}
		}
	case 256:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:1491
		{
			yyVAL.statement = &DBDDL{Action: DropStr, DBName: string(yyDollar[4].bytes)}
		}
	case 257:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1497
		{
			yyVAL.statement = &DDL{Action: TruncateStr, Table: yyDollar[3].tableName}
		}
	case 258:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1501
		{
			yyVAL.statement = &DDL{Action: TruncateStr, Table: yyDollar[2].tableName}
		}
	case 259:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1506
		{
			yyVAL.statement = &DDL{Action: AlterStr, Table: yyDollar[3].tableName}
		}
	case 260:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:1512
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes) + " " + string(yyDollar[3].bytes)}
		}
	case 261:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1517
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes)}
		}
	case 262:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:1521
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes) + " " + string(yyDollar[3].bytes)}
		}
	case 263:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:1526
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes) + " " + string(yyDollar[3].bytes)}
		}
	case 264:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:1530
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes) + " " + string(yyDollar[3].bytes)}
		}
	case 265:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:1534
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes) + " " + string(yyDollar[3].bytes), Table: yyDollar[4].tableName}
		}
	case 266:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:1538
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes) + " " + string(yyDollar[3].bytes)}
		}
	case 267:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:1542
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes) + " " + string(yyDollar[3].bytes)}
		}
	case 268:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1546
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes)}
		}
	case 269:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1550
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes)}
		}
	case 270:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1554
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes)}
		}
	case 271:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1558
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes)}
		}
	case 272:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1562
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes)}
		}
	case 273:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1566
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes)}
		}
	case 274:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1570
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes)}
		}
	case 275:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:1574
		{
			yyVAL.statement = &Show{Scope: yyDollar[2].str, Type: string(yyDollar[3].bytes)}
		}
	case 276:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1578
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes)}
		}
	case 277:
		yyDollar = yyS[yypt-7 : yypt+1]
//line sql.y:1582
		{
			showTablesOpt := &ShowTablesOpt{Full: yyDollar[2].str, DbName: yyDollar[6].str, Filter: yyDollar[7].showFilter}
			yyVAL.statement = &Show{Type: string(yyDollar[3].str), ShowTablesOpt: showTablesOpt, OnTable: yyDollar[5].tableName}
		}
	case 278:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sql.y:1587
		{
			// this is ugly, but I couldn't find a better way for now
			if yyDollar[3].str == "processlist" {
				yyVAL.statement = &Show{Type: yyDollar[3].str}
			} else {
				showTablesOpt := &ShowTablesOpt{Full: yyDollar[2].str, DbName: yyDollar[4].str, Filter: yyDollar[5].showFilter}
				yyVAL.statement = &Show{Type: yyDollar[3].str, ShowTablesOpt: showTablesOpt}
			}
		}
	case 279:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:1597
		{
			yyVAL.statement = &Show{Scope: yyDollar[2].str, Type: string(yyDollar[3].bytes)}
		}
	case 280:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1601
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes)}
		}
	case 281:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:1605
		{
			// Cannot dereference $4 directly, or else the parser stackcannot be pooled. See yyParsePooled
			showCollationFilterOpt := yyDollar[4].expr
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes), ShowCollationFilterOpt: &showCollationFilterOpt}
		}
	case 282:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1611
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes)}
		}
	case 283:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1615
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes)}
		}
	case 284:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1619
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes)}
		}
	case 285:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1623
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes)}
		}
	case 286:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1627
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes) + " " + string(yyDollar[3].bytes)}
		}
	case 287:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1631
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes) + " " + string(yyDollar[3].bytes)}
		}
	case 288:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sql.y:1635
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes) + " " + string(yyDollar[3].bytes), OnTable: yyDollar[5].tableName}
		}
	case 289:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1639
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes)}
		}
	case 290:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1649
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes)}
		}
	case 291:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1655
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 292:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1659
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 293:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:1665
		{
			yyVAL.str = ""
		}
	case 294:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1669
		{
			yyVAL.str = "full "
		}
	case 295:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1675
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 296:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1679
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 297:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:1685
		{
			yyVAL.str = ""
		}
	case 298:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1689
		{
			yyVAL.str = yyDollar[2].tableIdent.v
		}
	case 299:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1693
		{
			yyVAL.str = yyDollar[2].tableIdent.v
		}
	case 300:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:1699
		{
			yyVAL.showFilter = nil
		}
	case 301:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1703
		{
			yyVAL.showFilter = &ShowFilter{Like: string(yyDollar[2].bytes)}
		}
	case 302:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1707
		{
			yyVAL.showFilter = &ShowFilter{Filter: yyDollar[2].expr}
		}
	case 303:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:1713
		{
			yyVAL.str = ""
		}
	case 304:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1717
		{
			yyVAL.str = SessionStr
		}
	case 305:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1721
		{
			yyVAL.str = GlobalStr
		}
	case 306:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1727
		{
			yyVAL.statement = &Use{DBName: yyDollar[2].tableIdent}
		}
	case 307:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1731
		{
			yyVAL.statement = &Use{DBName: TableIdent{v: ""}}
		}
	case 308:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1737
		{
			yyVAL.statement = &Begin{}
		}
	case 309:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1741
		{
			yyVAL.statement = &Begin{}
		}
	case 310:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1747
		{
			yyVAL.statement = &Commit{}
		}
	case 311:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1753
		{
			yyVAL.statement = &Rollback{}
		}
	case 312:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1759
		{
			yyVAL.statement = &OtherRead{}
		}
	case 313:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1763
		{
			yyVAL.statement = &OtherRead{}
		}
	case 314:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1767
		{
			yyVAL.statement = &OtherRead{}
		}
	case 315:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1771
		{
			yyVAL.statement = &OtherAdmin{}
		}
	case 316:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1775
		{
			yyVAL.statement = &OtherAdmin{}
		}
	case 317:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1779
		{
			yyVAL.statement = &OtherAdmin{}
		}
	case 318:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1783
		{
			yyVAL.statement = &OtherAdmin{}
		}
	case 319:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1789
		{
			yyVAL.statement = &DDL{Action: FlushStr}
		}
	case 320:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:1793
		{
			setAllowComments(yylex, true)
		}
	case 321:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1797
		{
			yyVAL.bytes2 = yyDollar[2].bytes2
			setAllowComments(yylex, false)
		}
	case 322:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:1803
		{
			yyVAL.bytes2 = nil
		}
	case 323:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1807
		{
			yyVAL.bytes2 = append(yyDollar[1].bytes2, yyDollar[2].bytes)
		}
	case 324:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1813
		{
			yyVAL.str = UnionStr
		}
	case 325:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1817
		{
			yyVAL.str = UnionAllStr
		}
	case 326:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1821
		{
			yyVAL.str = UnionDistinctStr
		}
	case 327:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:1826
		{
			yyVAL.str = ""
		}
	case 328:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1830
		{
			yyVAL.str = SQLNoCacheStr
		}
	case 329:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1834
		{
			yyVAL.str = SQLCacheStr
		}
	case 330:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:1839
		{
			yyVAL.str = ""
		}
	case 331:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1843
		{
			yyVAL.str = DistinctStr
		}
	case 332:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:1848
		{
			yyVAL.str = ""
		}
	case 333:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1852
		{
			yyVAL.str = StraightJoinHint
		}
	case 334:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:1857
		{
			yyVAL.selectExprs = nil
		}
	case 335:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1861
		{
			yyVAL.selectExprs = yyDollar[1].selectExprs
		}
	case 336:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1867
		{
			yyVAL.selectExprs = SelectExprs{yyDollar[1].selectExpr}
		}
	case 337:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1871
		{
			yyVAL.selectExprs = append(yyVAL.selectExprs, yyDollar[3].selectExpr)
		}
	case 338:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1877
		{
			yyVAL.selectExpr = &StarExpr{}
		}
	case 339:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1881
		{
			yyVAL.selectExpr = &AliasedExpr{Expr: yyDollar[1].expr, As: yyDollar[2].colIdent}
		}
	case 340:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1885
		{
			yyVAL.selectExpr = &StarExpr{TableName: TableName{Name: yyDollar[1].tableIdent}}
		}
	case 341:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sql.y:1889
		{
			yyVAL.selectExpr = &StarExpr{TableName: TableName{Qualifier: yyDollar[1].tableIdent, Name: yyDollar[3].tableIdent}}
		}
	case 342:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:1894
		{
			yyVAL.colIdent = ColIdent{}
		}
	case 343:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1898
		{
			yyVAL.colIdent = yyDollar[1].colIdent
		}
	case 344:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1902
		{
			yyVAL.colIdent = yyDollar[2].colIdent
		}
	case 346:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1909
		{
			yyVAL.colIdent = NewColIdent(string(yyDollar[1].bytes))
		}
	case 347:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:1914
		{
			yyVAL.tableExprs = TableExprs{&AliasedTableExpr{Expr: TableName{Name: NewTableIdent("dual")}}}
		}
	case 348:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1918
		{
			yyVAL.tableExprs = yyDollar[2].tableExprs
		}
	case 349:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1924
		{
			yyVAL.tableExprs = TableExprs{yyDollar[1].tableExpr}
		}
	case 350:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1928
		{
			yyVAL.tableExprs = append(yyVAL.tableExprs, yyDollar[3].tableExpr)
		}
	case 353:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1938
		{
			yyVAL.tableExpr = yyDollar[1].aliasedTableName
		}
	case 354:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1942
		{
			yyVAL.tableExpr = &AliasedTableExpr{Expr: yyDollar[1].subquery, As: yyDollar[3].tableIdent}
		}
	case 355:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1946
		{
			// missed alias for subquery
			yylex.Error("Every derived table must have its own alias")
			return 1
		}
	case 356:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1952
		{
			yyVAL.tableExpr = &ParenTableExpr{Exprs: yyDollar[2].tableExprs}
		}
	case 357:
		yyDollar = yyS[yypt-6 : yypt+1]
//line sql.y:1956
		{
			yyVAL.tableExpr = &TableValuedFunction{Name: NewColIdent(string(yyDollar[1].bytes)), Args: yyDollar[3].tableValuedFunctionArguments, As: yyDollar[6].tableIdent}
		}
	case 358:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1962
		{
			yyVAL.aliasedTableName = &AliasedTableExpr{Expr: yyDollar[1].tableName, As: yyDollar[2].tableIdent, Hints: yyDollar[3].indexHints}
		}
	case 359:
		yyDollar = yyS[yypt-7 : yypt+1]
//line sql.y:1966
		{
			yyVAL.aliasedTableName = &AliasedTableExpr{Expr: yyDollar[1].tableName, Partitions: yyDollar[4].partitions, As: yyDollar[6].tableIdent, Hints: yyDollar[7].indexHints}
		}
	case 360:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:1971
		{
			yyVAL.tableValuedFunctionArguments = nil
		}
	case 361:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1975
		{
			yyVAL.tableValuedFunctionArguments = yyDollar[1].tableValuedFunctionArguments
		}
	case 362:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1981
		{
			yyVAL.tableValuedFunctionArguments = TableValuedFunctionArguments{yyDollar[1].tableValuedFunctionArgument}
		}
	case 363:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1985
		{
			yyVAL.tableValuedFunctionArguments = append(yyVAL.tableValuedFunctionArguments, yyDollar[3].tableValuedFunctionArgument)
		}
	case 364:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1991
		{
			yyVAL.tableValuedFunctionArgument = &TableValuedFunctionArgument{Name: yyDollar[1].colIdent, Value: yyDollar[3].tableValuedFunctionArgumentValue}
		}
	case 365:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1997
		{
			yyVAL.tableValuedFunctionArgumentValue = &ExprTableValuedFunctionArgumentValue{Expr: yyDollar[1].expr}
		}
	case 366:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:2001
		{
			yyVAL.tableValuedFunctionArgumentValue = &TableDescriptorTableValuedFunctionArgumentValue{Table: yyDollar[3].tableExpr}
		}
	case 367:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:2005
		{
			yyVAL.tableValuedFunctionArgumentValue = &FieldDescriptorTableValuedFunctionArgumentValue{Field: yyDollar[3].colName}
		}
	case 368:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2011
		{
			yyVAL.columns = Columns{yyDollar[1].colIdent}
		}
	case 369:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2015
		{
			yyVAL.columns = append(yyVAL.columns, yyDollar[3].colIdent)
		}
	case 370:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2021
		{
			yyVAL.partitions = Partitions{yyDollar[1].colIdent}
		}
	case 371:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2025
		{
			yyVAL.partitions = append(yyVAL.partitions, yyDollar[3].colIdent)
		}
	case 372:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sql.y:2038
		{
			yyVAL.tableExpr = &JoinTableExpr{LeftExpr: yyDollar[1].tableExpr, Strategy: yyDollar[2].str, Join: yyDollar[3].str, RightExpr: yyDollar[4].tableExpr, Condition: yyDollar[5].joinCondition}
		}
	case 373:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:2042
		{
			yyVAL.tableExpr = &JoinTableExpr{LeftExpr: yyDollar[1].tableExpr, Join: yyDollar[2].str, RightExpr: yyDollar[3].tableExpr, Condition: yyDollar[4].joinCondition}
		}
	case 374:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:2046
		{
			yyVAL.tableExpr = &JoinTableExpr{LeftExpr: yyDollar[1].tableExpr, Join: yyDollar[2].str, RightExpr: yyDollar[3].tableExpr, Condition: yyDollar[4].joinCondition}
		}
	case 375:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2050
		{
			yyVAL.tableExpr = &JoinTableExpr{LeftExpr: yyDollar[1].tableExpr, Join: yyDollar[2].str, RightExpr: yyDollar[3].tableExpr}
		}
	case 376:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2056
		{
			yyVAL.joinCondition = JoinCondition{On: yyDollar[2].expr}
		}
	case 377:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:2058
		{
			yyVAL.joinCondition = JoinCondition{Using: yyDollar[3].columns}
		}
	case 378:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:2062
		{
			yyVAL.joinCondition = JoinCondition{}
		}
	case 379:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2064
		{
			yyVAL.joinCondition = yyDollar[1].joinCondition
		}
	case 380:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:2068
		{
			yyVAL.joinCondition = JoinCondition{}
		}
	case 381:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2070
		{
			yyVAL.joinCondition = JoinCondition{On: yyDollar[2].expr}
		}
	case 382:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:2073
		{
			yyVAL.empty = struct{}{}
		}
	case 383:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2075
		{
			yyVAL.empty = struct{}{}
		}
	case 384:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:2078
		{
			yyVAL.tableIdent = NewTableIdent("")
		}
	case 385:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2082
		{
			yyVAL.tableIdent = yyDollar[1].tableIdent
		}
	case 386:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2086
		{
			yyVAL.tableIdent = yyDollar[2].tableIdent
		}
	case 387:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:2091
		{
			yyVAL.str = UndefinedJoinStrategy
		}
	case 388:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2093
		{
			yyVAL.str = LookupJoinStrategy
		}
	case 389:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2095
		{
			yyVAL.str = StreamJoinStrategy
		}
	case 391:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2100
		{
			yyVAL.tableIdent = NewTableIdent(string(yyDollar[1].bytes))
		}
	case 392:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2106
		{
			yyVAL.str = JoinStr
		}
	case 393:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2110
		{
			yyVAL.str = JoinStr
		}
	case 394:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2114
		{
			yyVAL.str = JoinStr
		}
	case 395:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2120
		{
			yyVAL.str = StraightJoinStr
		}
	case 396:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2126
		{
			yyVAL.str = LeftJoinStr
		}
	case 397:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2130
		{
			yyVAL.str = LeftJoinStr
		}
	case 398:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2134
		{
			yyVAL.str = RightJoinStr
		}
	case 399:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2138
		{
			yyVAL.str = RightJoinStr
		}
	case 400:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2144
		{
			yyVAL.str = NaturalJoinStr
		}
	case 401:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2148
		{
			if yyDollar[2].str == LeftJoinStr {
				yyVAL.str = NaturalLeftJoinStr
			} else {
				yyVAL.str = NaturalRightJoinStr
			}
		}
	case 402:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2158
		{
			yyVAL.tableName = yyDollar[2].tableName
		}
	case 403:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2162
		{
			yyVAL.tableName = yyDollar[1].tableName
		}
	case 404:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2168
		{
			yyVAL.tableName = TableName{Name: yyDollar[1].tableIdent}
		}
	case 405:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2172
		{
			yyVAL.tableName = TableName{Qualifier: yyDollar[1].tableIdent, Name: yyDollar[3].tableIdent}
		}
	case 406:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2178
		{
			yyVAL.tableName = TableName{Name: yyDollar[1].tableIdent}
		}
	case 407:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:2183
		{
			yyVAL.indexHints = nil
		}
	case 408:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sql.y:2187
		{
			yyVAL.indexHints = &IndexHints{Type: UseStr, Indexes: yyDollar[4].columns}
		}
	case 409:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sql.y:2191
		{
			yyVAL.indexHints = &IndexHints{Type: IgnoreStr, Indexes: yyDollar[4].columns}
		}
	case 410:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sql.y:2195
		{
			yyVAL.indexHints = &IndexHints{Type: ForceStr, Indexes: yyDollar[4].columns}
		}
	case 411:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:2200
		{
			yyVAL.expr = nil
		}
	case 412:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2204
		{
			yyVAL.expr = yyDollar[2].expr
		}
	case 413:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2210
		{
			yyVAL.expr = yyDollar[1].expr
		}
	case 414:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2214
		{
			yyVAL.expr = &AndExpr{Left: yyDollar[1].expr, Right: yyDollar[3].expr}
		}
	case 415:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2218
		{
			yyVAL.expr = &OrExpr{Left: yyDollar[1].expr, Right: yyDollar[3].expr}
		}
	case 416:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2222
		{
			yyVAL.expr = &NotExpr{Expr: yyDollar[2].expr}
		}
	case 417:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2226
		{
			yyVAL.expr = &IsExpr{Operator: yyDollar[3].str, Expr: yyDollar[1].expr}
		}
	case 418:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2230
		{
			yyVAL.expr = yyDollar[1].expr
		}
	case 419:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2234
		{
			yyVAL.expr = &Default{ColName: yyDollar[2].str}
		}
	case 420:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:2240
		{
			yyVAL.str = ""
		}
	case 421:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2244
		{
			yyVAL.str = string(yyDollar[2].bytes)
		}
	case 422:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2250
		{
			yyVAL.boolVal = BoolVal(true)
		}
	case 423:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2254
		{
			yyVAL.boolVal = BoolVal(false)
		}
	case 424:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2260
		{
			yyVAL.expr = &ComparisonExpr{Left: yyDollar[1].expr, Operator: yyDollar[2].str, Right: yyDollar[3].expr}
		}
	case 425:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2264
		{
			yyVAL.expr = &ComparisonExpr{Left: yyDollar[1].expr, Operator: InStr, Right: yyDollar[3].colTuple}
		}
	case 426:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:2268
		{
			yyVAL.expr = &ComparisonExpr{Left: yyDollar[1].expr, Operator: NotInStr, Right: yyDollar[4].colTuple}
		}
	case 427:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:2272
		{
			yyVAL.expr = &ComparisonExpr{Left: yyDollar[1].expr, Operator: LikeStr, Right: yyDollar[3].expr, Escape: yyDollar[4].expr}
		}
	case 428:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sql.y:2276
		{
			yyVAL.expr = &ComparisonExpr{Left: yyDollar[1].expr, Operator: NotLikeStr, Right: yyDollar[4].expr, Escape: yyDollar[5].expr}
		}
	case 429:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2280
		{
			yyVAL.expr = &ComparisonExpr{Left: yyDollar[1].expr, Operator: LikeRegexpStr, Right: yyDollar[3].expr}
		}
	case 430:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2284
		{
			yyVAL.expr = &ComparisonExpr{Left: yyDollar[1].expr, Operator: LikeRegexpCaseInsensitiveStr, Right: yyDollar[3].expr}
		}
	case 431:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2288
		{
			yyVAL.expr = &ComparisonExpr{Left: yyDollar[1].expr, Operator: NotLikeRegexpStr, Right: yyDollar[3].expr}
		}
	case 432:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2292
		{
			yyVAL.expr = &ComparisonExpr{Left: yyDollar[1].expr, Operator: NotLikeRegexpCaseInsensitiveStr, Right: yyDollar[3].expr}
		}
	case 433:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2296
		{
			yyVAL.expr = &ComparisonExpr{Left: yyDollar[1].expr, Operator: RegexpStr, Right: yyDollar[3].expr}
		}
	case 434:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:2300
		{
			yyVAL.expr = &ComparisonExpr{Left: yyDollar[1].expr, Operator: NotRegexpStr, Right: yyDollar[4].expr}
		}
	case 435:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sql.y:2304
		{
			yyVAL.expr = &RangeCond{Left: yyDollar[1].expr, Operator: BetweenStr, From: yyDollar[3].expr, To: yyDollar[5].expr}
		}
	case 436:
		yyDollar = yyS[yypt-6 : yypt+1]
//line sql.y:2308
		{
			yyVAL.expr = &RangeCond{Left: yyDollar[1].expr, Operator: NotBetweenStr, From: yyDollar[4].expr, To: yyDollar[6].expr}
		}
	case 437:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2312
		{
			yyVAL.expr = &ExistsExpr{Subquery: yyDollar[2].subquery}
		}
	case 438:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2318
		{
			yyVAL.str = IsNullStr
		}
	case 439:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2322
		{
			yyVAL.str = IsNotNullStr
		}
	case 440:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2326
		{
			yyVAL.str = IsTrueStr
		}
	case 441:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2330
		{
			yyVAL.str = IsNotTrueStr
		}
	case 442:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2334
		{
			yyVAL.str = IsFalseStr
		}
	case 443:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2338
		{
			yyVAL.str = IsNotFalseStr
		}
	case 444:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2344
		{
			yyVAL.str = EqualStr
		}
	case 445:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2348
		{
			yyVAL.str = LessThanStr
		}
	case 446:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2352
		{
			yyVAL.str = GreaterThanStr
		}
	case 447:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2356
		{
			yyVAL.str = LessEqualStr
		}
	case 448:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2360
		{
			yyVAL.str = GreaterEqualStr
		}
	case 449:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2364
		{
			yyVAL.str = NotEqualStr
		}
	case 450:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2368
		{
			yyVAL.str = NullSafeEqualStr
		}
	case 451:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:2373
		{
			yyVAL.expr = nil
		}
	case 452:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2377
		{
			yyVAL.expr = yyDollar[2].expr
		}
	case 453:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2383
		{
			yyVAL.colTuple = yyDollar[1].valTuple
		}
	case 454:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2387
		{
			yyVAL.colTuple = yyDollar[1].subquery
		}
	case 455:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2391
		{
			yyVAL.colTuple = ListArg(yyDollar[1].bytes)
		}
	case 456:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2397
		{
			yyVAL.subquery = &Subquery{yyDollar[2].selStmt}
		}
	case 457:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2403
		{
			yyVAL.exprs = Exprs{yyDollar[1].expr}
		}
	case 458:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2407
		{
			yyVAL.exprs = append(yyDollar[1].exprs, yyDollar[3].expr)
		}
	case 459:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2413
		{
			yyVAL.expr = yyDollar[1].expr
		}
	case 460:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2417
		{
			yyVAL.expr = yyDollar[1].boolVal
		}
	case 461:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2421
		{
			yyVAL.expr = yyDollar[1].colName
		}
	case 462:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2425
		{
			yyVAL.expr = yyDollar[1].expr
		}
	case 463:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2429
		{
			yyVAL.expr = yyDollar[1].subquery
		}
	case 464:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2433
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].expr, Operator: BitAndStr, Right: yyDollar[3].expr}
		}
	case 465:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2437
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].expr, Operator: BitOrStr, Right: yyDollar[3].expr}
		}
	case 466:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2441
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].expr, Operator: BitXorStr, Right: yyDollar[3].expr}
		}
	case 467:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2445
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].expr, Operator: PlusStr, Right: yyDollar[3].expr}
		}
	case 468:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2449
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].expr, Operator: MinusStr, Right: yyDollar[3].expr}
		}
	case 469:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2453
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].expr, Operator: MultStr, Right: yyDollar[3].expr}
		}
	case 470:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2457
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].expr, Operator: DivStr, Right: yyDollar[3].expr}
		}
	case 471:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2461
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].expr, Operator: IntDivStr, Right: yyDollar[3].expr}
		}
	case 472:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2465
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].expr, Operator: ModStr, Right: yyDollar[3].expr}
		}
	case 473:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2469
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].expr, Operator: ModStr, Right: yyDollar[3].expr}
		}
	case 474:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2473
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].expr, Operator: ShiftLeftStr, Right: yyDollar[3].expr}
		}
	case 475:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2477
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].expr, Operator: ShiftRightStr, Right: yyDollar[3].expr}
		}
	case 476:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2481
		{
			yyVAL.expr = &CollateExpr{Expr: yyDollar[1].expr, Charset: yyDollar[3].str}
		}
	case 477:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2485
		{
			yyVAL.expr = &UnaryExpr{Operator: BinaryStr, Expr: yyDollar[2].expr}
		}
	case 478:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2489
		{
			yyVAL.expr = &UnaryExpr{Operator: UBinaryStr, Expr: yyDollar[2].expr}
		}
	case 479:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2493
		{
			yyVAL.expr = &UnaryExpr{Operator: Utf8mb4Str, Expr: yyDollar[2].expr}
		}
	case 480:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2497
		{
			if num, ok := yyDollar[2].expr.(*SQLVal); ok && num.Type == IntVal {
				yyVAL.expr = num
			} else {
				yyVAL.expr = &UnaryExpr{Operator: UPlusStr, Expr: yyDollar[2].expr}
			}
		}
	case 481:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2505
		{
			if num, ok := yyDollar[2].expr.(*SQLVal); ok && num.Type == IntVal {
				// Handle double negative
				if num.Val[0] == '-' {
					num.Val = num.Val[1:]
					yyVAL.expr = num
				} else {
					yyVAL.expr = NewIntVal(append([]byte("-"), num.Val...))
				}
			} else {
				yyVAL.expr = &UnaryExpr{Operator: UMinusStr, Expr: yyDollar[2].expr}
			}
		}
	case 482:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2519
		{
			yyVAL.expr = &UnaryExpr{Operator: TildaStr, Expr: yyDollar[2].expr}
		}
	case 483:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2523
		{
			yyVAL.expr = &UnaryExpr{Operator: BangStr, Expr: yyDollar[2].expr}
		}
	case 484:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2527
		{
			// This rule prevents the usage of INTERVAL
			// as a function. If support is needed for that,
			// we'll need to revisit this. The solution
			// will be non-trivial because of grammar conflicts.
			yyVAL.expr = &IntervalExpr{Expr: yyDollar[2].expr, Unit: yyDollar[3].colIdent.String()}
		}
	case 489:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:2539
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].expr, Operator: ArrayElement, Right: yyDollar[3].expr}
		}
	case 490:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2543
		{
			yyVAL.expr = &ConvertExpr{Expr: yyDollar[1].expr, Type: yyDollar[3].convertType}
		}
	case 491:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2547
		{
			yyVAL.expr = &ObjectFieldAccess{Object: yyDollar[1].expr, Field: yyDollar[3].colIdent}
		}
	case 492:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:2557
		{
			yyVAL.expr = &FuncExpr{Name: yyDollar[1].colIdent, Exprs: yyDollar[3].selectExprs}
		}
	case 493:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sql.y:2561
		{
			yyVAL.expr = &FuncExpr{Name: yyDollar[1].colIdent, Distinct: true, Exprs: yyDollar[4].selectExprs}
		}
	case 494:
		yyDollar = yyS[yypt-6 : yypt+1]
//line sql.y:2565
		{
			yyVAL.expr = &FuncExpr{Qualifier: yyDollar[1].tableIdent, Name: yyDollar[3].colIdent, Exprs: yyDollar[5].selectExprs}
		}
	case 495:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:2575
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("left"), Exprs: yyDollar[3].selectExprs}
		}
	case 496:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:2579
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("right"), Exprs: yyDollar[3].selectExprs}
		}
	case 497:
		yyDollar = yyS[yypt-6 : yypt+1]
//line sql.y:2583
		{
			yyVAL.expr = &ConvertExpr{Expr: yyDollar[3].expr, Type: yyDollar[5].convertType}
		}
	case 498:
		yyDollar = yyS[yypt-6 : yypt+1]
//line sql.y:2587
		{
			yyVAL.expr = &ConvertExpr{Expr: yyDollar[3].expr, Type: yyDollar[5].convertType}
		}
	case 499:
		yyDollar = yyS[yypt-6 : yypt+1]
//line sql.y:2591
		{
			yyVAL.expr = &ConvertUsingExpr{Expr: yyDollar[3].expr, Type: yyDollar[5].str}
		}
	case 500:
		yyDollar = yyS[yypt-8 : yypt+1]
//line sql.y:2595
		{
			yyVAL.expr = &SubstrExpr{Name: yyDollar[3].colName, From: yyDollar[5].expr, To: yyDollar[7].expr}
		}
	case 501:
		yyDollar = yyS[yypt-8 : yypt+1]
//line sql.y:2599
		{
			yyVAL.expr = &SubstrExpr{Name: yyDollar[3].colName, From: yyDollar[5].expr, To: yyDollar[7].expr}
		}
	case 502:
		yyDollar = yyS[yypt-8 : yypt+1]
//line sql.y:2603
		{
			yyVAL.expr = &SubstrExpr{StrVal: NewStrVal(yyDollar[3].bytes), From: yyDollar[5].expr, To: yyDollar[7].expr}
		}
	case 503:
		yyDollar = yyS[yypt-8 : yypt+1]
//line sql.y:2607
		{
			yyVAL.expr = &SubstrExpr{StrVal: NewStrVal(yyDollar[3].bytes), From: yyDollar[5].expr, To: yyDollar[7].expr}
		}
	case 504:
		yyDollar = yyS[yypt-9 : yypt+1]
//line sql.y:2611
		{
			yyVAL.expr = &MatchExpr{Columns: yyDollar[3].selectExprs, Expr: yyDollar[7].expr, Option: yyDollar[8].str}
		}
	case 505:
		yyDollar = yyS[yypt-7 : yypt+1]
//line sql.y:2615
		{
			yyVAL.expr = &GroupConcatExpr{Distinct: yyDollar[3].str, Exprs: yyDollar[4].selectExprs, OrderBy: yyDollar[5].orderBy, Separator: yyDollar[6].str}
		}
	case 506:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sql.y:2619
		{
			yyVAL.expr = &CaseExpr{Expr: yyDollar[2].expr, Whens: yyDollar[3].whens, Else: yyDollar[4].expr}
		}
	case 507:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:2623
		{
			yyVAL.expr = &ValuesFuncExpr{Name: yyDollar[3].colName}
		}
	case 508:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2633
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("current_timestamp")}
		}
	case 509:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2637
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("utc_timestamp")}
		}
	case 510:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2641
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("utc_time")}
		}
	case 511:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2646
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("utc_date")}
		}
	case 512:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2651
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("localtime")}
		}
	case 513:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2656
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("localtimestamp")}
		}
	case 514:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2662
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("current_date")}
		}
	case 515:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2667
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("current_time")}
		}
	case 516:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2672
		{
			yyVAL.expr = &CurTimeFuncExpr{Name: NewColIdent("current_timestamp"), Fsp: yyDollar[2].expr}
		}
	case 517:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2676
		{
			yyVAL.expr = &CurTimeFuncExpr{Name: NewColIdent("utc_timestamp"), Fsp: yyDollar[2].expr}
		}
	case 518:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2680
		{
			yyVAL.expr = &CurTimeFuncExpr{Name: NewColIdent("utc_time"), Fsp: yyDollar[2].expr}
		}
	case 519:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2685
		{
			yyVAL.expr = &CurTimeFuncExpr{Name: NewColIdent("localtime"), Fsp: yyDollar[2].expr}
		}
	case 520:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2690
		{
			yyVAL.expr = &CurTimeFuncExpr{Name: NewColIdent("localtimestamp"), Fsp: yyDollar[2].expr}
		}
	case 521:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2695
		{
			yyVAL.expr = &CurTimeFuncExpr{Name: NewColIdent("current_time"), Fsp: yyDollar[2].expr}
		}
	case 522:
		yyDollar = yyS[yypt-8 : yypt+1]
//line sql.y:2699
		{
			yyVAL.expr = &TimestampFuncExpr{Name: string("timestampadd"), Unit: yyDollar[3].colIdent.String(), Expr1: yyDollar[5].expr, Expr2: yyDollar[7].expr}
		}
	case 523:
		yyDollar = yyS[yypt-8 : yypt+1]
//line sql.y:2703
		{
			yyVAL.expr = &TimestampFuncExpr{Name: string("timestampdiff"), Unit: yyDollar[3].colIdent.String(), Expr1: yyDollar[5].expr, Expr2: yyDollar[7].expr}
		}
	case 526:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2713
		{
			yyVAL.expr = yyDollar[2].expr
		}
	case 527:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:2723
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("if"), Exprs: yyDollar[3].selectExprs}
		}
	case 528:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:2727
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("database"), Exprs: yyDollar[3].selectExprs}
		}
	case 529:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:2731
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("mod"), Exprs: yyDollar[3].selectExprs}
		}
	case 530:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:2735
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("replace"), Exprs: yyDollar[3].selectExprs}
		}
	case 531:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:2739
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("substr"), Exprs: yyDollar[3].selectExprs}
		}
	case 532:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:2743
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("substr"), Exprs: yyDollar[3].selectExprs}
		}
	case 533:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:2749
		{
			yyVAL.str = ""
		}
	case 534:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2753
		{
			yyVAL.str = BooleanModeStr
		}
	case 535:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:2757
		{
			yyVAL.str = NaturalLanguageModeStr
		}
	case 536:
		yyDollar = yyS[yypt-7 : yypt+1]
//line sql.y:2761
		{
			yyVAL.str = NaturalLanguageModeWithQueryExpansionStr
		}
	case 537:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2765
		{
			yyVAL.str = QueryExpansionStr
		}
	case 538:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2771
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 539:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2775
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 540:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2781
		{
			yyVAL.convertType = &ConvertTypeSimple{Name: string(yyDollar[1].bytes)}
		}
	case 541:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2785
		{
			yyVAL.convertType = &ConvertTypeSimple{Name: string(yyDollar[1].bytes)}
		}
	case 542:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2789
		{
			yyVAL.convertType = &ConvertTypeList{}
		}
	case 543:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2793
		{
			yyVAL.convertType = &ConvertTypeObject{}
		}
	case 544:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:2798
		{
			yyVAL.expr = nil
		}
	case 545:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2802
		{
			yyVAL.expr = yyDollar[1].expr
		}
	case 546:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:2807
		{
			yyVAL.str = string("")
		}
	case 547:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2811
		{
			yyVAL.str = " separator '" + string(yyDollar[2].bytes) + "'"
		}
	case 548:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2817
		{
			yyVAL.whens = []*When{yyDollar[1].when}
		}
	case 549:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2821
		{
			yyVAL.whens = append(yyDollar[1].whens, yyDollar[2].when)
		}
	case 550:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:2827
		{
			yyVAL.when = &When{Cond: yyDollar[2].expr, Val: yyDollar[4].expr}
		}
	case 551:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:2832
		{
			yyVAL.expr = nil
		}
	case 552:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2836
		{
			yyVAL.expr = yyDollar[2].expr
		}
	case 553:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2842
		{
			yyVAL.colName = &ColName{Name: yyDollar[1].colIdent}
		}
	case 554:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2846
		{
			yyVAL.colName = &ColName{Qualifier: TableName{Name: yyDollar[1].tableIdent}, Name: yyDollar[3].colIdent}
		}
	case 555:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sql.y:2850
		{
			yyVAL.colName = &ColName{Qualifier: TableName{Qualifier: yyDollar[1].tableIdent, Name: yyDollar[3].tableIdent}, Name: yyDollar[5].colIdent}
		}
	case 556:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2856
		{
			yyVAL.expr = NewStrVal(yyDollar[1].bytes)
		}
	case 557:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2860
		{
			yyVAL.expr = NewHexVal(yyDollar[1].bytes)
		}
	case 558:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2864
		{
			yyVAL.expr = NewBitVal(yyDollar[1].bytes)
		}
	case 559:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2868
		{
			yyVAL.expr = NewIntVal(yyDollar[1].bytes)
		}
	case 560:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2872
		{
			yyVAL.expr = NewFloatVal(yyDollar[1].bytes)
		}
	case 561:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2876
		{
			yyVAL.expr = NewHexNum(yyDollar[1].bytes)
		}
	case 562:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2880
		{
			yyVAL.expr = NewValArg(yyDollar[1].bytes)
		}
	case 563:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2884
		{
			yyVAL.expr = &NullVal{}
		}
	case 564:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2890
		{
			// TODO(sougou): Deprecate this construct.
			if yyDollar[1].colIdent.Lowered() != "value" {
				yylex.Error("expecting value after next")
				return 1
			}
			yyVAL.expr = NewIntVal([]byte("1"))
		}
	case 565:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2899
		{
			yyVAL.expr = NewIntVal(yyDollar[1].bytes)
		}
	case 566:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2903
		{
			yyVAL.expr = NewValArg(yyDollar[1].bytes)
		}
	case 567:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:2908
		{
			yyVAL.exprs = nil
		}
	case 568:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2912
		{
			yyVAL.exprs = yyDollar[3].exprs
		}
	case 569:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:2917
		{
			yyVAL.expr = nil
		}
	case 570:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2921
		{
			yyVAL.expr = yyDollar[2].expr
		}
	case 571:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:2926
		{
			yyVAL.orderBy = nil
		}
	case 572:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2930
		{
			yyVAL.orderBy = yyDollar[3].orderBy
		}
	case 573:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2936
		{
			yyVAL.orderBy = OrderBy{yyDollar[1].order}
		}
	case 574:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2940
		{
			yyVAL.orderBy = append(yyDollar[1].orderBy, yyDollar[3].order)
		}
	case 575:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2946
		{
			yyVAL.order = &Order{Expr: yyDollar[1].expr, Direction: yyDollar[2].str}
		}
	case 576:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:2951
		{
			yyVAL.str = AscScr
		}
	case 577:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2955
		{
			yyVAL.str = AscScr
		}
	case 578:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2959
		{
			yyVAL.str = DescScr
		}
	case 579:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:2964
		{
			yyVAL.limit = nil
		}
	case 580:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2968
		{
			yyVAL.limit = &Limit{Rowcount: yyDollar[2].expr}
		}
	case 581:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:2972
		{
			yyVAL.limit = &Limit{Offset: yyDollar[2].expr, Rowcount: yyDollar[4].expr}
		}
	case 582:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:2976
		{
			yyVAL.limit = &Limit{Offset: yyDollar[4].expr, Rowcount: yyDollar[2].expr}
		}
	case 583:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:2981
		{
			yyVAL.str = ""
		}
	case 584:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2985
		{
			yyVAL.str = ForUpdateStr
		}
	case 585:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:2989
		{
			yyVAL.str = ShareModeStr
		}
	case 586:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:2994
		{
			yyVAL.triggers = nil
		}
	case 587:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2998
		{
			yyVAL.triggers = yyDollar[2].triggers
		}
	case 588:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3004
		{
			yyVAL.triggers = []Trigger{yyDollar[1].trigger}
		}
	case 589:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:3008
		{
			yyVAL.triggers = append(yyDollar[1].triggers, yyDollar[3].trigger)
		}
	case 590:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:3014
		{
			yyVAL.trigger = &WatermarkTrigger{}
		}
	case 591:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:3018
		{
			yyVAL.trigger = &EndOfStreamTrigger{}
		}
	case 592:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:3022
		{
			yyVAL.trigger = &DelayTrigger{Delay: yyDollar[3].expr}
		}
	case 593:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:3026
		{
			yyVAL.trigger = &CountingTrigger{Count: yyDollar[2].expr}
		}
	case 594:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:3039
		{
			yyVAL.ins = &Insert{Rows: yyDollar[2].values}
		}
	case 595:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3043
		{
			yyVAL.ins = &Insert{Rows: yyDollar[1].selStmt}
		}
	case 596:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:3047
		{
			// Drop the redundant parenthesis.
			yyVAL.ins = &Insert{Rows: yyDollar[2].selStmt}
		}
	case 597:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sql.y:3052
		{
			yyVAL.ins = &Insert{Columns: yyDollar[2].columns, Rows: yyDollar[5].values}
		}
	case 598:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:3056
		{
			yyVAL.ins = &Insert{Columns: yyDollar[2].columns, Rows: yyDollar[4].selStmt}
		}
	case 599:
		yyDollar = yyS[yypt-6 : yypt+1]
//line sql.y:3060
		{
			// Drop the redundant parenthesis.
			yyVAL.ins = &Insert{Columns: yyDollar[2].columns, Rows: yyDollar[5].selStmt}
		}
	case 600:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3067
		{
			yyVAL.columns = Columns{yyDollar[1].colIdent}
		}
	case 601:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:3071
		{
			yyVAL.columns = Columns{yyDollar[3].colIdent}
		}
	case 602:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:3075
		{
			yyVAL.columns = append(yyVAL.columns, yyDollar[3].colIdent)
		}
	case 603:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sql.y:3079
		{
			yyVAL.columns = append(yyVAL.columns, yyDollar[5].colIdent)
		}
	case 604:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:3084
		{
			yyVAL.updateExprs = nil
		}
	case 605:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sql.y:3088
		{
			yyVAL.updateExprs = yyDollar[5].updateExprs
		}
	case 606:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3094
		{
			yyVAL.values = Values{yyDollar[1].valTuple}
		}
	case 607:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:3098
		{
			yyVAL.values = append(yyDollar[1].values, yyDollar[3].valTuple)
		}
	case 608:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3104
		{
			yyVAL.valTuple = yyDollar[1].valTuple
		}
	case 609:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:3108
		{
			yyVAL.valTuple = ValTuple{}
		}
	case 610:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:3114
		{
			yyVAL.valTuple = ValTuple(yyDollar[2].exprs)
		}
	case 611:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3120
		{
			if len(yyDollar[1].valTuple) == 1 {
				yyVAL.expr = &ParenExpr{yyDollar[1].valTuple[0]}
			} else {
				yyVAL.expr = yyDollar[1].valTuple
			}
		}
	case 612:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3130
		{
			yyVAL.updateExprs = UpdateExprs{yyDollar[1].updateExpr}
		}
	case 613:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:3134
		{
			yyVAL.updateExprs = append(yyDollar[1].updateExprs, yyDollar[3].updateExpr)
		}
	case 614:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:3140
		{
			yyVAL.updateExpr = &UpdateExpr{Name: yyDollar[1].colName, Expr: yyDollar[3].expr}
		}
	case 615:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3146
		{
			yyVAL.setExprs = SetExprs{yyDollar[1].setExpr}
		}
	case 616:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:3150
		{
			yyVAL.setExprs = append(yyDollar[1].setExprs, yyDollar[3].setExpr)
		}
	case 617:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:3156
		{
			yyVAL.setExpr = &SetExpr{Name: yyDollar[1].colIdent, Expr: NewStrVal([]byte("on"))}
		}
	case 618:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:3160
		{
			yyVAL.setExpr = &SetExpr{Name: yyDollar[1].colIdent, Expr: NewStrVal([]byte("off"))}
		}
	case 619:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:3164
		{
			yyVAL.setExpr = &SetExpr{Name: yyDollar[1].colIdent, Expr: yyDollar[3].expr}
		}
	case 620:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:3168
		{
			yyVAL.setExpr = &SetExpr{Name: NewColIdent(string(yyDollar[1].bytes)), Expr: yyDollar[2].expr}
		}
	case 622:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:3175
		{
			yyVAL.bytes = []byte("charset")
		}
	case 624:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3182
		{
			yyVAL.expr = NewStrVal([]byte(yyDollar[1].colIdent.String()))
		}
	case 625:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3186
		{
			yyVAL.expr = NewStrVal(yyDollar[1].bytes)
		}
	case 626:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3190
		{
			yyVAL.expr = &Default{}
		}
	case 629:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:3199
		{
			yyVAL.byt = 0
		}
	case 630:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:3201
		{
			yyVAL.byt = 1
		}
	case 631:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:3204
		{
			yyVAL.empty = struct{}{}
		}
	case 632:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:3206
		{
			yyVAL.empty = struct{}{}
		}
	case 633:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:3209
		{
			yyVAL.str = ""
		}
	case 634:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3211
		{
			yyVAL.str = IgnoreStr
		}
	case 635:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3215
		{
			yyVAL.empty = struct{}{}
		}
	case 636:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3217
		{
			yyVAL.empty = struct{}{}
		}
	case 637:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3219
		{
			yyVAL.empty = struct{}{}
		}
	case 638:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3221
		{
			yyVAL.empty = struct{}{}
		}
	case 639:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3223
		{
			yyVAL.empty = struct{}{}
		}
	case 640:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3225
		{
			yyVAL.empty = struct{}{}
		}
	case 641:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3227
		{
			yyVAL.empty = struct{}{}
		}
	case 642:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3229
		{
			yyVAL.empty = struct{}{}
		}
	case 643:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3231
		{
			yyVAL.empty = struct{}{}
		}
	case 644:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3233
		{
			yyVAL.empty = struct{}{}
		}
	case 645:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:3236
		{
			yyVAL.empty = struct{}{}
		}
	case 646:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3238
		{
			yyVAL.empty = struct{}{}
		}
	case 647:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3240
		{
			yyVAL.empty = struct{}{}
		}
	case 648:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3244
		{
			yyVAL.empty = struct{}{}
		}
	case 649:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3246
		{
			yyVAL.empty = struct{}{}
		}
	case 650:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:3249
		{
			yyVAL.empty = struct{}{}
		}
	case 651:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3251
		{
			yyVAL.empty = struct{}{}
		}
	case 652:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3253
		{
			yyVAL.empty = struct{}{}
		}
	case 653:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:3256
		{
			yyVAL.colIdent = ColIdent{}
		}
	case 654:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:3258
		{
			yyVAL.colIdent = yyDollar[2].colIdent
		}
	case 655:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3262
		{
			yyVAL.colIdent = NewColIdent(string(yyDollar[1].bytes))
		}
	case 656:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3266
		{
			yyVAL.colIdent = NewColIdent(string(yyDollar[1].bytes))
		}
	case 658:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3273
		{
			yyVAL.colIdent = NewColIdent(string(yyDollar[1].bytes))
		}
	case 659:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3279
		{
			yyVAL.tableIdent = NewTableIdent(string(yyDollar[1].bytes))
		}
	case 660:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3283
		{
			yyVAL.tableIdent = NewTableIdent(string(yyDollar[1].bytes))
		}
	case 662:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3290
		{
			yyVAL.tableIdent = NewTableIdent(string(yyDollar[1].bytes))
		}
	case 878:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3531
		{
			if incNesting(yylex) {
				yylex.Error("max nesting level reached")
				return 1
			}
		}
	case 879:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3540
		{
			decNesting(yylex)
		}
	case 880:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:3545
		{
			skipToEnd(yylex)
		}
	case 881:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:3550
		{
			skipToEnd(yylex)
		}
	case 882:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3554
		{
			skipToEnd(yylex)
		}
	case 883:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3558
		{
			skipToEnd(yylex)
		}
	}
	goto yystack /* stack new state and value */
}
