// Code generated by goyacc -v test.out -o sql.go sql.y. DO NOT EDIT.

//line sql.y:24
package sqlparser

import __yyfmt__ "fmt"

//line sql.y:24

func setParseTree(yylex interface{}, stmt Statement) {
	yylex.(*Tokenizer).ParseTree = stmt
}

func setAllowComments(yylex interface{}, allow bool) {
	yylex.(*Tokenizer).AllowComments = allow
}

func setDDL(yylex interface{}, ddl *DDL) {
	yylex.(*Tokenizer).partialDDL = ddl
}

func incNesting(yylex interface{}) bool {
	yylex.(*Tokenizer).nesting++
	if yylex.(*Tokenizer).nesting == 200 {
		return true
	}
	return false
}

func decNesting(yylex interface{}) {
	yylex.(*Tokenizer).nesting--
}

// skipToEnd forces the lexer to end prematurely. Not all SQL statements
// are supported by the Parser, thus calling skipToEnd will make the lexer
// return EOF early.
func skipToEnd(yylex interface{}) {
	yylex.(*Tokenizer).SkipToEnd = true
}

//line sql.y:59
type yySymType struct {
	yys                              int
	tableValuedFunctionArguments     TableValuedFunctionArguments
	tableValuedFunctionArgument      *TableValuedFunctionArgument
	tableValuedFunctionArgumentValue TableValuedFunctionArgumentValue
	commonTableExpression            *CommonTableExpression
	commonTableExpressions           CommonTableExpressions
	with                             *With
	empty                            struct{}
	statement                        Statement
	selStmt                          SelectStatement
	ddl                              *DDL
	ins                              *Insert
	byt                              byte
	bytes                            []byte
	bytes2                           [][]byte
	str                              string
	strs                             []string
	selectExprs                      SelectExprs
	selectExpr                       SelectExpr
	columns                          Columns
	partitions                       Partitions
	colName                          *ColName
	tableExprs                       TableExprs
	tableExpr                        TableExpr
	joinCondition                    JoinCondition
	tableName                        TableName
	tableNames                       TableNames
	indexHints                       *IndexHints
	expr                             Expr
	exprs                            Exprs
	boolVal                          BoolVal
	sqlVal                           *SQLVal
	colTuple                         ColTuple
	values                           Values
	valTuple                         ValTuple
	subquery                         *Subquery
	whens                            []*When
	when                             *When
	orderBy                          OrderBy
	order                            *Order
	limit                            *Limit
	triggers                         []Trigger
	trigger                          Trigger
	updateExprs                      UpdateExprs
	setExprs                         SetExprs
	updateExpr                       *UpdateExpr
	setExpr                          *SetExpr
	colIdent                         ColIdent
	tableIdent                       TableIdent
	convertType                      *ConvertType
	aliasedTableName                 *AliasedTableExpr
	TableSpec                        *TableSpec
	columnType                       ColumnType
	colKeyOpt                        ColumnKeyOption
	optVal                           Expr
	LengthScaleOption                LengthScaleOption
	columnDefinition                 *ColumnDefinition
	indexDefinition                  *IndexDefinition
	indexInfo                        *IndexInfo
	indexOption                      *IndexOption
	indexOptions                     []*IndexOption
	indexColumn                      *IndexColumn
	indexColumns                     []*IndexColumn
	constraintDefinition             *ConstraintDefinition
	constraintInfo                   ConstraintInfo
	ReferenceAction                  ReferenceAction
	partDefs                         []*PartitionDefinition
	partDef                          *PartitionDefinition
	partSpec                         *PartitionSpec
	vindexParam                      VindexParam
	vindexParams                     []VindexParam
	showFilter                       *ShowFilter
	optLike                          *OptLike
}

const LEX_ERROR = 57346
const UNION = 57347
const SELECT = 57348
const STREAM = 57349
const INSERT = 57350
const UPDATE = 57351
const DELETE = 57352
const FROM = 57353
const WHERE = 57354
const GROUP = 57355
const HAVING = 57356
const ORDER = 57357
const BY = 57358
const LIMIT = 57359
const OFFSET = 57360
const FOR = 57361
const WATERMARK = 57362
const DELAY = 57363
const COUNTING = 57364
const AFTER = 57365
const ALL = 57366
const DISTINCT = 57367
const AS = 57368
const EXISTS = 57369
const ASC = 57370
const DESC = 57371
const INTO = 57372
const DUPLICATE = 57373
const KEY = 57374
const DEFAULT = 57375
const SET = 57376
const LOCK = 57377
const UNLOCK = 57378
const KEYS = 57379
const VALUES = 57380
const LAST_INSERT_ID = 57381
const NEXT = 57382
const VALUE = 57383
const SHARE = 57384
const MODE = 57385
const SQL_NO_CACHE = 57386
const SQL_CACHE = 57387
const JOIN = 57388
const STRAIGHT_JOIN = 57389
const LOOKUP = 57390
const LEFT = 57391
const RIGHT = 57392
const INNER = 57393
const OUTER = 57394
const CROSS = 57395
const NATURAL = 57396
const USE = 57397
const FORCE = 57398
const ON = 57399
const USING = 57400
const ID = 57401
const HEX = 57402
const STRING = 57403
const INTEGRAL = 57404
const FLOAT = 57405
const HEXNUM = 57406
const VALUE_ARG = 57407
const LIST_ARG = 57408
const COMMENT = 57409
const COMMENT_KEYWORD = 57410
const BIT_LITERAL = 57411
const NULL = 57412
const TRUE = 57413
const FALSE = 57414
const OFF = 57415
const OR = 57416
const AND = 57417
const NOT = 57418
const BETWEEN = 57419
const CASE = 57420
const WHEN = 57421
const THEN = 57422
const ELSE = 57423
const END = 57424
const LE = 57425
const GE = 57426
const NE = 57427
const NULL_SAFE_EQUAL = 57428
const IS = 57429
const LIKE = 57430
const REGEXP = 57431
const IN = 57432
const RIGHTARROW = 57433
const SHIFT_LEFT = 57434
const SHIFT_RIGHT = 57435
const DIV = 57436
const MOD = 57437
const NOT_LIKE_REGEXP = 57438
const LIKE_REGEXP_CASE_INSENSITIVE = 57439
const NOT_LIKE_REGEXP_CASE_INSENSITIVE = 57440
const UNARY = 57441
const COLLATE = 57442
const BINARY = 57443
const UNDERSCORE_BINARY = 57444
const UNDERSCORE_UTF8MB4 = 57445
const INTERVAL = 57446
const JSON_EXTRACT_OP = 57447
const JSON_UNQUOTE_EXTRACT_OP = 57448
const CREATE = 57449
const ALTER = 57450
const DROP = 57451
const RENAME = 57452
const ANALYZE = 57453
const ADD = 57454
const FLUSH = 57455
const SCHEMA = 57456
const TABLE = 57457
const DESCRIPTOR = 57458
const INDEX = 57459
const VIEW = 57460
const TO = 57461
const IGNORE = 57462
const IF = 57463
const UNIQUE = 57464
const PRIMARY = 57465
const COLUMN = 57466
const SPATIAL = 57467
const FULLTEXT = 57468
const KEY_BLOCK_SIZE = 57469
const ACTION = 57470
const CASCADE = 57471
const CONSTRAINT = 57472
const FOREIGN = 57473
const NO = 57474
const REFERENCES = 57475
const RESTRICT = 57476
const SHOW = 57477
const DESCRIBE = 57478
const EXPLAIN = 57479
const DATE = 57480
const ESCAPE = 57481
const REPAIR = 57482
const OPTIMIZE = 57483
const TRUNCATE = 57484
const MAXVALUE = 57485
const PARTITION = 57486
const REORGANIZE = 57487
const LESS = 57488
const THAN = 57489
const PROCEDURE = 57490
const TRIGGER = 57491
const VINDEX = 57492
const VINDEXES = 57493
const STATUS = 57494
const VARIABLES = 57495
const WARNINGS = 57496
const BEGIN = 57497
const START = 57498
const TRANSACTION = 57499
const COMMIT = 57500
const ROLLBACK = 57501
const BIT = 57502
const TINYINT = 57503
const SMALLINT = 57504
const MEDIUMINT = 57505
const INT = 57506
const INTEGER = 57507
const BIGINT = 57508
const INTNUM = 57509
const REAL = 57510
const DOUBLE = 57511
const FLOAT_TYPE = 57512
const DECIMAL = 57513
const NUMERIC = 57514
const TIME = 57515
const TIMESTAMP = 57516
const DATETIME = 57517
const YEAR = 57518
const CHAR = 57519
const VARCHAR = 57520
const BOOL = 57521
const CHARACTER = 57522
const VARBINARY = 57523
const NCHAR = 57524
const TEXT = 57525
const TINYTEXT = 57526
const MEDIUMTEXT = 57527
const LONGTEXT = 57528
const BLOB = 57529
const TINYBLOB = 57530
const MEDIUMBLOB = 57531
const LONGBLOB = 57532
const JSON = 57533
const ENUM = 57534
const GEOMETRY = 57535
const POINT = 57536
const LINESTRING = 57537
const POLYGON = 57538
const GEOMETRYCOLLECTION = 57539
const MULTIPOINT = 57540
const MULTILINESTRING = 57541
const MULTIPOLYGON = 57542
const NULLX = 57543
const AUTO_INCREMENT = 57544
const APPROXNUM = 57545
const SIGNED = 57546
const UNSIGNED = 57547
const ZEROFILL = 57548
const COLLATION = 57549
const DATABASES = 57550
const SCHEMAS = 57551
const TABLES = 57552
const VITESS_KEYSPACES = 57553
const VITESS_SHARDS = 57554
const VITESS_TABLETS = 57555
const VSCHEMA = 57556
const VSCHEMA_TABLES = 57557
const VITESS_TARGET = 57558
const FULL = 57559
const PROCESSLIST = 57560
const COLUMNS = 57561
const FIELDS = 57562
const ENGINES = 57563
const PLUGINS = 57564
const NAMES = 57565
const CHARSET = 57566
const GLOBAL = 57567
const SESSION = 57568
const ISOLATION = 57569
const LEVEL = 57570
const READ = 57571
const WRITE = 57572
const ONLY = 57573
const REPEATABLE = 57574
const COMMITTED = 57575
const UNCOMMITTED = 57576
const SERIALIZABLE = 57577
const CURRENT_TIMESTAMP = 57578
const DATABASE = 57579
const CURRENT_DATE = 57580
const CURRENT_TIME = 57581
const LOCALTIME = 57582
const LOCALTIMESTAMP = 57583
const UTC_DATE = 57584
const UTC_TIME = 57585
const UTC_TIMESTAMP = 57586
const REPLACE = 57587
const CONVERT = 57588
const CAST = 57589
const SUBSTR = 57590
const SUBSTRING = 57591
const GROUP_CONCAT = 57592
const SEPARATOR = 57593
const TIMESTAMPADD = 57594
const TIMESTAMPDIFF = 57595
const MATCH = 57596
const AGAINST = 57597
const BOOLEAN = 57598
const LANGUAGE = 57599
const WITH = 57600
const QUERY = 57601
const EXPANSION = 57602
const UNUSED = 57603

var yyToknames = [...]string{
	"$end",
	"error",
	"$unk",
	"LEX_ERROR",
	"UNION",
	"SELECT",
	"STREAM",
	"INSERT",
	"UPDATE",
	"DELETE",
	"FROM",
	"WHERE",
	"GROUP",
	"HAVING",
	"ORDER",
	"BY",
	"LIMIT",
	"OFFSET",
	"FOR",
	"WATERMARK",
	"DELAY",
	"COUNTING",
	"AFTER",
	"ALL",
	"DISTINCT",
	"AS",
	"EXISTS",
	"ASC",
	"DESC",
	"INTO",
	"DUPLICATE",
	"KEY",
	"DEFAULT",
	"SET",
	"LOCK",
	"UNLOCK",
	"KEYS",
	"VALUES",
	"LAST_INSERT_ID",
	"NEXT",
	"VALUE",
	"SHARE",
	"MODE",
	"SQL_NO_CACHE",
	"SQL_CACHE",
	"JOIN",
	"STRAIGHT_JOIN",
	"LOOKUP",
	"LEFT",
	"RIGHT",
	"INNER",
	"OUTER",
	"CROSS",
	"NATURAL",
	"USE",
	"FORCE",
	"ON",
	"USING",
	"'('",
	"','",
	"')'",
	"ID",
	"HEX",
	"STRING",
	"INTEGRAL",
	"FLOAT",
	"HEXNUM",
	"VALUE_ARG",
	"LIST_ARG",
	"COMMENT",
	"COMMENT_KEYWORD",
	"BIT_LITERAL",
	"NULL",
	"TRUE",
	"FALSE",
	"OFF",
	"OR",
	"AND",
	"NOT",
	"'!'",
	"BETWEEN",
	"CASE",
	"WHEN",
	"THEN",
	"ELSE",
	"END",
	"'='",
	"'<'",
	"'>'",
	"LE",
	"GE",
	"NE",
	"NULL_SAFE_EQUAL",
	"IS",
	"LIKE",
	"REGEXP",
	"IN",
	"RIGHTARROW",
	"'|'",
	"'&'",
	"SHIFT_LEFT",
	"SHIFT_RIGHT",
	"'+'",
	"'-'",
	"'*'",
	"'/'",
	"DIV",
	"'%'",
	"MOD",
	"'^'",
	"'~'",
	"NOT_LIKE_REGEXP",
	"LIKE_REGEXP_CASE_INSENSITIVE",
	"NOT_LIKE_REGEXP_CASE_INSENSITIVE",
	"UNARY",
	"COLLATE",
	"BINARY",
	"UNDERSCORE_BINARY",
	"UNDERSCORE_UTF8MB4",
	"INTERVAL",
	"'.'",
	"JSON_EXTRACT_OP",
	"JSON_UNQUOTE_EXTRACT_OP",
	"CREATE",
	"ALTER",
	"DROP",
	"RENAME",
	"ANALYZE",
	"ADD",
	"FLUSH",
	"SCHEMA",
	"TABLE",
	"DESCRIPTOR",
	"INDEX",
	"VIEW",
	"TO",
	"IGNORE",
	"IF",
	"UNIQUE",
	"PRIMARY",
	"COLUMN",
	"SPATIAL",
	"FULLTEXT",
	"KEY_BLOCK_SIZE",
	"ACTION",
	"CASCADE",
	"CONSTRAINT",
	"FOREIGN",
	"NO",
	"REFERENCES",
	"RESTRICT",
	"SHOW",
	"DESCRIBE",
	"EXPLAIN",
	"DATE",
	"ESCAPE",
	"REPAIR",
	"OPTIMIZE",
	"TRUNCATE",
	"MAXVALUE",
	"PARTITION",
	"REORGANIZE",
	"LESS",
	"THAN",
	"PROCEDURE",
	"TRIGGER",
	"VINDEX",
	"VINDEXES",
	"STATUS",
	"VARIABLES",
	"WARNINGS",
	"BEGIN",
	"START",
	"TRANSACTION",
	"COMMIT",
	"ROLLBACK",
	"BIT",
	"TINYINT",
	"SMALLINT",
	"MEDIUMINT",
	"INT",
	"INTEGER",
	"BIGINT",
	"INTNUM",
	"REAL",
	"DOUBLE",
	"FLOAT_TYPE",
	"DECIMAL",
	"NUMERIC",
	"TIME",
	"TIMESTAMP",
	"DATETIME",
	"YEAR",
	"CHAR",
	"VARCHAR",
	"BOOL",
	"CHARACTER",
	"VARBINARY",
	"NCHAR",
	"TEXT",
	"TINYTEXT",
	"MEDIUMTEXT",
	"LONGTEXT",
	"BLOB",
	"TINYBLOB",
	"MEDIUMBLOB",
	"LONGBLOB",
	"JSON",
	"ENUM",
	"GEOMETRY",
	"POINT",
	"LINESTRING",
	"POLYGON",
	"GEOMETRYCOLLECTION",
	"MULTIPOINT",
	"MULTILINESTRING",
	"MULTIPOLYGON",
	"NULLX",
	"AUTO_INCREMENT",
	"APPROXNUM",
	"SIGNED",
	"UNSIGNED",
	"ZEROFILL",
	"COLLATION",
	"DATABASES",
	"SCHEMAS",
	"TABLES",
	"VITESS_KEYSPACES",
	"VITESS_SHARDS",
	"VITESS_TABLETS",
	"VSCHEMA",
	"VSCHEMA_TABLES",
	"VITESS_TARGET",
	"FULL",
	"PROCESSLIST",
	"COLUMNS",
	"FIELDS",
	"ENGINES",
	"PLUGINS",
	"NAMES",
	"CHARSET",
	"GLOBAL",
	"SESSION",
	"ISOLATION",
	"LEVEL",
	"READ",
	"WRITE",
	"ONLY",
	"REPEATABLE",
	"COMMITTED",
	"UNCOMMITTED",
	"SERIALIZABLE",
	"CURRENT_TIMESTAMP",
	"DATABASE",
	"CURRENT_DATE",
	"CURRENT_TIME",
	"LOCALTIME",
	"LOCALTIMESTAMP",
	"UTC_DATE",
	"UTC_TIME",
	"UTC_TIMESTAMP",
	"REPLACE",
	"CONVERT",
	"CAST",
	"SUBSTR",
	"SUBSTRING",
	"GROUP_CONCAT",
	"SEPARATOR",
	"TIMESTAMPADD",
	"TIMESTAMPDIFF",
	"MATCH",
	"AGAINST",
	"BOOLEAN",
	"LANGUAGE",
	"WITH",
	"QUERY",
	"EXPANSION",
	"UNUSED",
	"';'",
}
var yyStatenames = [...]string{}

const yyEofCode = 1
const yyErrCode = 2
const yyInitialStackSize = 16

//line yacctab:1
var yyExca = [...]int{
	-1, 1,
	1, -1,
	-2, 0,
	-1, 38,
	169, 304,
	170, 304,
	-2, 294,
	-1, 281,
	121, 666,
	-2, 662,
	-1, 282,
	121, 667,
	-2, 663,
	-1, 350,
	87, 846,
	-2, 68,
	-1, 351,
	87, 802,
	-2, 69,
	-1, 356,
	87, 779,
	-2, 628,
	-1, 358,
	87, 823,
	-2, 630,
	-1, 633,
	46, 388,
	51, 388,
	53, 388,
	-2, 350,
	-1, 637,
	1, 356,
	12, 356,
	13, 356,
	14, 356,
	15, 356,
	17, 356,
	19, 356,
	34, 356,
	35, 356,
	46, 356,
	47, 356,
	48, 356,
	49, 356,
	50, 356,
	51, 356,
	53, 356,
	54, 356,
	57, 356,
	58, 356,
	60, 356,
	61, 356,
	166, 356,
	279, 356,
	-2, 383,
	-1, 641,
	58, 49,
	60, 49,
	-2, 53,
	-1, 787,
	121, 669,
	-2, 665,
	-1, 1016,
	5, 35,
	-2, 456,
	-1, 1052,
	46, 388,
	51, 388,
	53, 388,
	-2, 351,
	-1, 1297,
	5, 35,
	-2, 603,
	-1, 1441,
	5, 35,
	-2, 606,
}

const yyPrivate = 57344

const yyLast = 13777

var yyAct = [...]int{

	282, 1488, 1478, 1427, 1453, 1260, 1145, 286, 1049, 593,
	1072, 1325, 1338, 1372, 312, 1196, 299, 62, 1234, 876,
	897, 633, 257, 1070, 66, 871, 1213, 489, 1193, 1197,
	980, 901, 924, 206, 1050, 1203, 58, 66, 873, 910,
	66, 900, 944, 1099, 816, 1168, 1078, 823, 737, 826,
	1008, 634, 248, 751, 1116, 914, 275, 654, 518, 1125,
	844, 592, 3, 864, 940, 355, 789, 524, 458, 349,
	857, 533, 541, 269, 341, 346, 643, 284, 607, 653,
	25, 57, 1481, 1459, 1476, 1439, 324, 344, 330, 331,
	328, 329, 327, 326, 325, 608, 1473, 25, 249, 250,
	251, 252, 332, 333, 255, 963, 1261, 1438, 1044, 1458,
	1185, 1289, 1045, 930, 256, 25, 463, 1228, 61, 1087,
	1229, 1230, 1086, 962, 891, 1088, 25, 26, 53, 28,
	29, 254, 1400, 55, 558, 557, 567, 568, 560, 561,
	562, 563, 564, 565, 566, 559, 655, 1356, 656, 44,
	55, 569, 967, 253, 30, 49, 50, 892, 893, 186,
	1107, 961, 508, 491, 208, 923, 210, 1328, 55, 512,
	509, 506, 507, 1344, 931, 39, 476, 1280, 22, 55,
	288, 216, 212, 464, 213, 214, 188, 189, 190, 191,
	192, 1278, 66, 206, 247, 501, 502, 66, 1148, 66,
	1147, 724, 726, 1433, 1475, 1470, 207, 1428, 1144, 66,
	858, 1420, 66, 1492, 915, 958, 955, 956, 66, 954,
	352, 66, 1496, 477, 206, 1381, 206, 206, 511, 206,
	206, 465, 206, 493, 206, 1132, 495, 725, 273, 1073,
	1075, 210, 1149, 206, 32, 33, 35, 34, 37, 730,
	51, 965, 968, 717, 1407, 1223, 1222, 917, 1221, 917,
	209, 461, 66, 1141, 727, 1130, 492, 494, 468, 1143,
	220, 1373, 38, 45, 46, 211, 206, 47, 48, 36,
	974, 581, 582, 973, 1375, 1169, 1300, 960, 1025, 1100,
	1022, 1155, 40, 41, 1083, 42, 43, 1035, 1002, 760,
	529, 649, 545, 483, 215, 473, 514, 515, 931, 959,
	1401, 559, 898, 569, 1246, 521, 525, 569, 1220, 887,
	757, 1074, 526, 1171, 540, 1490, 1437, 530, 1491, 982,
	1489, 752, 1382, 1380, 1418, 546, 538, 1131, 1390, 66,
	66, 66, 1136, 1133, 1126, 1134, 1129, 195, 206, 23,
	1127, 1128, 540, 964, 206, 490, 1173, 1374, 1177, 916,
	1172, 916, 1170, 264, 1135, 459, 23, 1175, 966, 1247,
	594, 1142, 470, 1140, 471, 352, 1174, 472, 632, 605,
	527, 1207, 54, 196, 23, 466, 467, 657, 1187, 1176,
	1178, 479, 480, 481, 845, 23, 338, 339, 457, 581,
	582, 581, 582, 719, 610, 612, 614, 616, 618, 620,
	621, 845, 981, 1032, 917, 642, 1105, 753, 1423, 647,
	535, 611, 613, 651, 617, 619, 531, 622, 558, 557,
	567, 568, 560, 561, 562, 563, 564, 565, 566, 559,
	1445, 849, 539, 538, 459, 569, 557, 567, 568, 560,
	561, 562, 563, 564, 565, 566, 559, 796, 66, 540,
	920, 1497, 569, 206, 579, 55, 921, 1334, 66, 66,
	206, 794, 795, 793, 66, 792, 1333, 66, 1120, 1020,
	66, 1019, 763, 764, 66, 1009, 206, 206, 999, 1000,
	1001, 206, 206, 206, 66, 206, 206, 1119, 539, 538,
	1108, 1498, 206, 206, 560, 561, 562, 563, 564, 565,
	566, 559, 1447, 1419, 517, 540, 916, 569, 313, 52,
	637, 913, 911, 817, 912, 818, 1351, 539, 538, 909,
	915, 539, 538, 206, 1189, 1331, 1152, 66, 517, 779,
	781, 782, 1117, 206, 540, 780, 1416, 759, 540, 739,
	1263, 731, 766, 567, 568, 560, 561, 562, 563, 564,
	565, 566, 559, 790, 1089, 1021, 1090, 754, 569, 1378,
	1474, 52, 1100, 786, 1449, 517, 558, 557, 567, 568,
	560, 561, 562, 563, 564, 565, 566, 559, 1095, 758,
	765, 206, 819, 569, 785, 776, 777, 1378, 1431, 562,
	563, 564, 565, 566, 559, 768, 539, 538, 835, 838,
	569, 787, 1378, 517, 846, 783, 539, 538, 736, 867,
	866, 868, 869, 540, 206, 206, 870, 1378, 1408, 1214,
	1215, 66, 735, 540, 1378, 1377, 1323, 1322, 1387, 66,
	720, 66, 1302, 517, 66, 66, 1299, 517, 66, 66,
	66, 206, 594, 1253, 1252, 833, 834, 830, 878, 820,
	821, 1249, 1250, 1386, 206, 1249, 1248, 302, 301, 304,
	305, 306, 307, 718, 854, 842, 303, 308, 352, 1014,
	517, 1243, 882, 1286, 311, 715, 884, 867, 866, 868,
	869, 902, 861, 517, 870, 828, 517, 1158, 516, 664,
	663, 517, 918, 265, 485, 478, 926, 927, 928, 929,
	1194, 645, 880, 1206, 896, 739, 1464, 204, 66, 206,
	888, 206, 937, 938, 939, 206, 206, 66, 66, 791,
	66, 66, 889, 905, 66, 206, 885, 59, 645, 1206,
	828, 1079, 488, 1079, 488, 488, 1014, 488, 488, 860,
	488, 66, 488, 66, 66, 1295, 66, 946, 646, 1389,
	648, 488, 861, 558, 557, 567, 568, 560, 561, 562,
	563, 564, 565, 566, 559, 861, 942, 943, 1251, 52,
	569, 528, 1014, 1219, 52, 646, 1091, 644, 786, 861,
	890, 1206, 932, 933, 934, 881, 1038, 644, 1037, 578,
	1014, 644, 580, 650, 761, 729, 266, 261, 790, 989,
	55, 1460, 1340, 925, 1310, 987, 988, 945, 525, 637,
	1214, 1215, 1483, 1239, 637, 992, 787, 1094, 637, 990,
	591, 941, 595, 596, 597, 598, 599, 600, 601, 602,
	603, 936, 606, 609, 609, 609, 615, 609, 609, 615,
	609, 623, 624, 625, 626, 627, 628, 935, 638, 55,
	1004, 1146, 66, 948, 66, 66, 66, 1479, 1051, 1241,
	1456, 1455, 66, 825, 1212, 66, 206, 354, 1194, 1121,
	66, 755, 66, 1052, 733, 1015, 1058, 867, 866, 868,
	869, 1054, 1217, 1062, 870, 1216, 1055, 1077, 1056, 1063,
	1060, 206, 1033, 774, 1031, 1454, 1061, 1210, 354, 1209,
	354, 354, 1468, 354, 354, 1057, 354, 1059, 354, 1046,
	1080, 1064, 270, 271, 868, 869, 1457, 354, 902, 1081,
	1154, 1082, 1092, 986, 1065, 1462, 830, 534, 997, 996,
	519, 1112, 662, 486, 1104, 1425, 1424, 1354, 1084, 206,
	206, 1111, 532, 1113, 1114, 1115, 520, 1102, 1101, 1096,
	543, 1293, 1336, 951, 732, 872, 267, 268, 1097, 1098,
	262, 534, 767, 1466, 791, 1465, 995, 258, 206, 1394,
	259, 488, 59, 1393, 994, 1342, 1079, 510, 488, 1485,
	1484, 1118, 1026, 1023, 66, 750, 536, 1485, 1404, 1329,
	756, 185, 187, 206, 488, 488, 1124, 56, 1, 488,
	488, 488, 1477, 488, 488, 1137, 1262, 1337, 957, 1426,
	488, 488, 862, 1371, 1233, 908, 899, 194, 456, 193,
	1160, 1417, 354, 1151, 827, 829, 907, 906, 659, 1153,
	1109, 1110, 637, 1379, 637, 637, 637, 52, 206, 206,
	1327, 1161, 1051, 1195, 66, 637, 1162, 919, 1106, 922,
	1198, 1240, 637, 1190, 1167, 1179, 1186, 1180, 1103, 1422,
	670, 668, 669, 667, 672, 671, 666, 206, 232, 347,
	658, 947, 537, 197, 989, 1139, 1138, 953, 504, 1188,
	505, 234, 206, 577, 206, 206, 1205, 993, 1085, 52,
	353, 787, 1201, 1452, 1432, 1208, 762, 523, 1392, 1200,
	1341, 1030, 1224, 604, 595, 1225, 843, 287, 778, 902,
	300, 902, 66, 297, 298, 1232, 769, 1227, 1043, 547,
	1244, 1245, 285, 1231, 277, 1236, 1226, 636, 629, 66,
	865, 1237, 1238, 863, 1053, 206, 342, 354, 206, 206,
	66, 1211, 1306, 1313, 354, 1068, 206, 874, 875, 66,
	1069, 635, 638, 1157, 1288, 1399, 638, 773, 27, 184,
	354, 354, 272, 19, 18, 354, 354, 354, 1255, 354,
	354, 17, 1267, 1160, 20, 16, 354, 354, 15, 14,
	1256, 474, 1258, 31, 21, 13, 12, 1269, 11, 10,
	9, 8, 1273, 1274, 1268, 1275, 7, 991, 1277, 6,
	1279, 5, 4, 60, 1051, 260, 1276, 770, 263, 24,
	206, 2, 0, 0, 1294, 0, 0, 543, 0, 0,
	354, 0, 206, 0, 637, 1307, 0, 488, 0, 488,
	206, 1304, 1303, 1312, 1311, 0, 1290, 0, 1321, 0,
	0, 0, 0, 488, 0, 206, 594, 0, 0, 902,
	0, 1011, 206, 1092, 1305, 1012, 0, 0, 1324, 1308,
	0, 1309, 1016, 1017, 1018, 822, 0, 1314, 0, 1024,
	0, 0, 1027, 1028, 0, 0, 0, 0, 1034, 1339,
	0, 847, 1036, 0, 0, 1039, 1040, 1041, 1042, 0,
	206, 206, 0, 206, 0, 1003, 0, 0, 851, 852,
	1198, 206, 66, 0, 0, 1067, 0, 0, 206, 206,
	206, 66, 1363, 0, 206, 1355, 1362, 0, 0, 1367,
	1368, 1369, 0, 0, 0, 354, 0, 0, 878, 637,
	1370, 206, 1376, 0, 0, 0, 1383, 0, 354, 0,
	0, 1384, 1391, 1385, 0, 0, 0, 0, 0, 0,
	1357, 0, 1330, 0, 1332, 0, 66, 0, 0, 0,
	640, 1198, 1405, 0, 1410, 0, 1047, 1048, 0, 206,
	638, 1414, 638, 638, 638, 1415, 0, 1409, 1343, 0,
	206, 206, 0, 874, 0, 0, 1076, 0, 0, 279,
	638, 0, 1429, 354, 1435, 354, 0, 218, 206, 969,
	970, 0, 1051, 1440, 0, 0, 0, 1339, 902, 354,
	1406, 66, 1430, 0, 0, 0, 0, 0, 0, 206,
	0, 0, 0, 0, 0, 0, 0, 0, 1451, 0,
	0, 0, 0, 0, 0, 354, 0, 0, 0, 0,
	1434, 594, 0, 1461, 0, 1166, 0, 1463, 0, 0,
	0, 206, 0, 0, 0, 0, 0, 0, 488, 1471,
	831, 832, 1469, 0, 837, 840, 841, 0, 0, 0,
	1482, 0, 0, 0, 0, 1292, 0, 1493, 0, 0,
	0, 0, 0, 0, 0, 0, 488, 0, 0, 853,
	0, 855, 856, 0, 0, 0, 0, 0, 0, 1291,
	1218, 0, 0, 1467, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 1472, 558, 557, 567, 568, 560, 561,
	562, 563, 564, 565, 566, 559, 0, 0, 0, 0,
	0, 569, 0, 0, 0, 847, 637, 0, 558, 557,
	567, 568, 560, 561, 562, 563, 564, 565, 566, 559,
	1071, 0, 343, 0, 1199, 569, 52, 460, 1285, 462,
	0, 0, 638, 0, 0, 0, 0, 0, 0, 469,
	0, 0, 475, 0, 0, 354, 0, 0, 482, 0,
	0, 484, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 1270, 0, 0, 0, 0, 0, 0,
	1272, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 1281, 1282, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 1122, 354, 0, 0, 0, 0, 0,
	0, 1296, 1297, 1298, 0, 1301, 0, 998, 558, 557,
	567, 568, 560, 561, 562, 563, 564, 565, 566, 559,
	487, 0, 354, 0, 0, 569, 1320, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 638, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 354, 0, 583,
	584, 585, 586, 587, 588, 589, 590, 0, 1013, 0,
	0, 0, 0, 0, 1287, 0, 0, 0, 0, 631,
	0, 641, 0, 522, 0, 0, 1029, 0, 0, 0,
	354, 0, 0, 0, 0, 0, 0, 0, 0, 847,
	1350, 0, 1202, 1204, 0, 0, 0, 63, 0, 0,
	1317, 1318, 1319, 0, 0, 0, 0, 0, 0, 0,
	219, 0, 0, 246, 0, 0, 0, 0, 0, 0,
	0, 1204, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 488, 0, 1163, 354, 0, 354, 1235,
	0, 0, 0, 0, 0, 0, 0, 1395, 1396, 1397,
	1398, 0, 0, 0, 1402, 1403, 558, 557, 567, 568,
	560, 561, 562, 563, 564, 565, 566, 559, 0, 1411,
	1412, 1413, 0, 569, 1199, 0, 0, 1358, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 665, 1259,
	0, 0, 1264, 1265, 1365, 1366, 0, 0, 721, 722,
	354, 1436, 0, 0, 728, 0, 0, 343, 1441, 0,
	734, 1443, 1444, 0, 0, 1388, 0, 0, 0, 0,
	0, 0, 0, 0, 745, 0, 0, 0, 1448, 0,
	0, 0, 0, 0, 0, 1199, 0, 52, 0, 0,
	0, 0, 0, 0, 638, 0, 496, 497, 0, 498,
	499, 847, 500, 0, 503, 0, 0, 0, 0, 0,
	0, 0, 276, 513, 1071, 345, 0, 775, 0, 0,
	219, 0, 219, 0, 0, 0, 354, 0, 0, 0,
	0, 0, 219, 0, 1326, 219, 0, 0, 1494, 1495,
	0, 219, 0, 0, 219, 0, 0, 0, 0, 354,
	0, 0, 0, 0, 0, 0, 354, 788, 0, 0,
	797, 798, 799, 800, 801, 802, 803, 804, 805, 806,
	807, 808, 809, 810, 811, 812, 813, 814, 815, 0,
	0, 0, 0, 0, 0, 63, 0, 0, 0, 0,
	0, 0, 0, 0, 1359, 1360, 0, 1361, 0, 0,
	0, 0, 0, 0, 1480, 1326, 1284, 0, 0, 0,
	0, 859, 1326, 1326, 1326, 0, 0, 0, 1235, 850,
	549, 0, 556, 0, 0, 883, 0, 0, 570, 571,
	572, 573, 574, 575, 576, 1326, 550, 555, 548, 0,
	558, 557, 567, 568, 560, 561, 562, 563, 564, 565,
	566, 559, 551, 553, 552, 554, 0, 569, 0, 0,
	0, 847, 219, 219, 219, 0, 0, 687, 0, 0,
	0, 0, 0, 1421, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 354, 354, 558, 557, 567, 568,
	560, 561, 562, 563, 564, 565, 566, 559, 949, 847,
	0, 0, 1442, 569, 0, 0, 0, 971, 972, 0,
	975, 976, 0, 0, 977, 0, 0, 0, 0, 0,
	0, 0, 0, 1450, 0, 0, 0, 0, 0, 0,
	0, 979, 0, 716, 0, 0, 985, 0, 0, 0,
	723, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	675, 0, 0, 0, 0, 1326, 740, 741, 0, 0,
	0, 742, 743, 744, 0, 746, 747, 0, 0, 0,
	0, 0, 748, 749, 0, 0, 0, 0, 0, 0,
	0, 219, 0, 0, 0, 0, 0, 0, 688, 0,
	1283, 219, 219, 0, 0, 0, 0, 219, 0, 0,
	219, 0, 0, 219, 1005, 1006, 1007, 738, 0, 0,
	701, 704, 705, 706, 707, 708, 709, 219, 710, 711,
	712, 713, 714, 689, 690, 691, 692, 673, 674, 702,
	0, 676, 0, 677, 678, 679, 680, 681, 682, 683,
	684, 685, 686, 693, 694, 695, 696, 697, 698, 699,
	700, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	219, 0, 0, 0, 0, 0, 0, 1010, 0, 738,
	558, 557, 567, 568, 560, 561, 562, 563, 564, 565,
	566, 559, 0, 0, 0, 0, 0, 569, 558, 557,
	567, 568, 560, 561, 562, 563, 564, 565, 566, 559,
	0, 0, 0, 0, 0, 569, 703, 0, 0, 0,
	0, 0, 0, 0, 0, 276, 0, 0, 0, 0,
	276, 276, 0, 0, 276, 276, 276, 0, 0, 0,
	848, 558, 557, 567, 568, 560, 561, 562, 563, 564,
	565, 566, 559, 0, 0, 0, 0, 0, 569, 276,
	276, 276, 276, 0, 219, 0, 0, 0, 0, 0,
	0, 0, 219, 0, 63, 0, 0, 219, 219, 0,
	0, 219, 886, 738, 1156, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 950,
	0, 952, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 978, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 1164,
	1165, 229, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 1181, 1182, 0, 1183, 1184, 0, 0, 0,
	0, 219, 0, 0, 0, 0, 242, 1191, 1192, 0,
	219, 219, 0, 219, 219, 0, 0, 219, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 219, 0, 983, 984, 0, 219,
	0, 0, 0, 0, 738, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 276, 0, 0,
	0, 221, 1254, 0, 0, 0, 0, 0, 224, 0,
	0, 0, 0, 0, 1242, 0, 233, 0, 228, 1257,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	1266, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 276, 231,
	0, 0, 0, 0, 0, 241, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 276, 0, 0, 0,
	0, 0, 0, 1271, 0, 0, 0, 0, 0, 0,
	0, 222, 0, 0, 848, 219, 0, 219, 219, 219,
	0, 0, 0, 0, 0, 1066, 0, 0, 219, 0,
	0, 0, 0, 63, 0, 219, 0, 0, 235, 225,
	226, 0, 236, 237, 238, 240, 0, 239, 245, 0,
	1123, 0, 227, 230, 0, 223, 244, 243, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 1150, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 1345, 1346, 1347, 1348, 1349, 0, 0,
	0, 1352, 1353, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 219, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 276, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 276, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 738,
	0, 0, 0, 0, 0, 0, 0, 0, 848, 0,
	0, 0, 0, 0, 0, 0, 0, 219, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 1446, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 127, 0,
	180, 89, 85, 67, 0, 0, 0, 0, 0, 0,
	0, 91, 0, 0, 0, 219, 0, 108, 0, 110,
	0, 0, 148, 119, 0, 0, 0, 0, 0, 0,
	0, 0, 219, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 205, 219, 0, 0, 0, 0, 0, 0,
	0, 82, 219, 0, 0, 0, 0, 0, 0, 0,
	1486, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 558,
	557, 567, 568, 560, 561, 562, 563, 564, 565, 566,
	559, 0, 0, 0, 0, 1335, 569, 0, 0, 0,
	848, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	97, 0, 0, 0, 0, 170, 0, 0, 0, 0,
	134, 0, 151, 99, 107, 69, 76, 0, 98, 125,
	139, 143, 0, 0, 0, 86, 0, 141, 129, 163,
	0, 130, 140, 111, 156, 135, 0, 171, 172, 153,
	169, 179, 70, 152, 162, 83, 144, 72, 160, 150,
	117, 103, 104, 71, 0, 138, 90, 95, 88, 126,
	157, 158, 87, 182, 77, 168, 74, 78, 167, 124,
	155, 161, 118, 115, 73, 159, 116, 114, 106, 93,
	100, 132, 113, 133, 101, 121, 120, 122, 0, 0,
	0, 149, 165, 183, 80, 1364, 145, 154, 173, 174,
	175, 176, 177, 178, 63, 0, 81, 96, 92, 131,
	123, 79, 102, 146, 105, 112, 137, 181, 128, 142,
	84, 164, 147, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 68, 75, 109, 0, 136, 94, 166, 219,
	848, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 848, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 443, 431, 219, 402, 446, 380, 394, 454,
	395, 396, 424, 366, 410, 127, 392, 180, 89, 85,
	67, 0, 383, 361, 389, 362, 381, 404, 91, 407,
	379, 433, 413, 445, 108, 452, 110, 418, 0, 148,
	119, 0, 0, 406, 435, 0, 408, 429, 401, 425,
	371, 417, 447, 393, 422, 448, 0, 0, 0, 205,
	0, 903, 904, 0, 0, 0, 0, 0, 82, 0,
	420, 442, 391, 421, 423, 360, 419, 0, 364, 367,
	453, 437, 386, 387, 1093, 0, 0, 0, 0, 0,
	0, 405, 409, 426, 399, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 384, 0, 416, 0, 0, 0,
	0, 0, 0, 368, 365, 0, 0, 403, 0, 0,
	0, 370, 0, 385, 427, 0, 359, 97, 430, 436,
	0, 400, 170, 440, 398, 397, 444, 134, 0, 151,
	99, 107, 69, 76, 0, 98, 125, 139, 143, 434,
	382, 390, 86, 388, 141, 129, 163, 415, 130, 140,
	111, 156, 135, 441, 171, 172, 153, 169, 179, 70,
	152, 162, 83, 144, 72, 160, 150, 117, 103, 104,
	71, 0, 138, 90, 95, 88, 126, 157, 158, 87,
	182, 77, 168, 74, 78, 167, 124, 155, 161, 118,
	115, 73, 159, 116, 114, 106, 93, 100, 132, 113,
	133, 101, 121, 120, 122, 0, 363, 0, 149, 165,
	183, 80, 378, 145, 154, 173, 174, 175, 176, 177,
	178, 0, 0, 81, 96, 92, 131, 123, 79, 102,
	146, 105, 112, 137, 181, 128, 142, 84, 164, 147,
	374, 377, 372, 373, 411, 412, 449, 450, 451, 428,
	369, 0, 375, 376, 0, 432, 438, 439, 414, 68,
	75, 109, 455, 136, 94, 166, 443, 431, 0, 402,
	446, 380, 394, 454, 395, 396, 424, 366, 410, 127,
	392, 180, 89, 85, 67, 0, 383, 361, 389, 362,
	381, 404, 91, 407, 379, 433, 413, 445, 108, 452,
	110, 418, 0, 148, 119, 0, 0, 406, 435, 0,
	408, 429, 401, 425, 371, 417, 447, 393, 422, 448,
	0, 0, 0, 205, 0, 903, 904, 0, 0, 0,
	0, 0, 82, 0, 420, 442, 391, 421, 423, 360,
	419, 0, 364, 367, 453, 437, 386, 387, 0, 0,
	0, 0, 0, 0, 0, 405, 409, 426, 399, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 384, 0,
	416, 0, 0, 0, 0, 0, 0, 368, 365, 0,
	0, 403, 0, 0, 0, 370, 0, 385, 427, 0,
	359, 97, 430, 436, 0, 400, 170, 440, 398, 397,
	444, 134, 0, 151, 99, 107, 69, 76, 0, 98,
	125, 139, 143, 434, 382, 390, 86, 388, 141, 129,
	163, 415, 130, 140, 111, 156, 135, 441, 171, 172,
	153, 169, 179, 70, 152, 162, 83, 144, 72, 160,
	150, 117, 103, 104, 71, 0, 138, 90, 95, 88,
	126, 157, 158, 87, 182, 77, 168, 74, 78, 167,
	124, 155, 161, 118, 115, 73, 159, 116, 114, 106,
	93, 100, 132, 113, 133, 101, 121, 120, 122, 0,
	363, 0, 149, 165, 183, 80, 378, 145, 154, 173,
	174, 175, 176, 177, 178, 0, 0, 81, 96, 92,
	131, 123, 79, 102, 146, 105, 112, 137, 181, 128,
	142, 84, 164, 147, 374, 377, 372, 373, 411, 412,
	449, 450, 451, 428, 369, 0, 375, 376, 0, 432,
	438, 439, 414, 68, 75, 109, 455, 136, 94, 166,
	443, 431, 0, 402, 446, 380, 394, 454, 395, 396,
	424, 366, 410, 127, 392, 180, 89, 85, 67, 0,
	383, 361, 389, 362, 381, 404, 91, 407, 379, 433,
	413, 445, 108, 452, 110, 418, 0, 148, 119, 0,
	0, 406, 435, 0, 408, 429, 401, 425, 371, 417,
	447, 393, 422, 448, 55, 0, 0, 205, 0, 0,
	0, 0, 0, 0, 0, 0, 82, 0, 420, 442,
	391, 421, 423, 360, 419, 0, 364, 367, 453, 437,
	386, 387, 0, 0, 0, 0, 0, 0, 0, 405,
	409, 426, 399, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 384, 0, 416, 0, 0, 0, 0, 0,
	0, 368, 365, 0, 0, 403, 0, 0, 0, 370,
	0, 385, 427, 0, 359, 97, 430, 436, 0, 400,
	170, 440, 398, 397, 444, 134, 0, 151, 99, 107,
	69, 76, 0, 98, 125, 139, 143, 434, 382, 390,
	86, 388, 141, 129, 163, 415, 130, 140, 111, 156,
	135, 441, 171, 172, 153, 169, 179, 70, 152, 162,
	83, 144, 72, 160, 150, 117, 103, 104, 71, 0,
	138, 90, 95, 88, 126, 157, 158, 87, 182, 77,
	168, 74, 78, 167, 124, 155, 161, 118, 115, 73,
	159, 116, 114, 106, 93, 100, 132, 113, 133, 101,
	121, 120, 122, 0, 363, 0, 149, 165, 183, 80,
	378, 145, 154, 173, 174, 175, 176, 177, 178, 0,
	0, 81, 96, 92, 131, 123, 79, 102, 146, 105,
	112, 137, 181, 128, 142, 84, 164, 147, 374, 377,
	372, 373, 411, 412, 449, 450, 451, 428, 369, 0,
	375, 376, 0, 432, 438, 439, 414, 68, 75, 109,
	455, 136, 94, 166, 443, 431, 0, 402, 446, 380,
	394, 454, 395, 396, 424, 366, 410, 127, 392, 180,
	89, 85, 67, 0, 383, 361, 389, 362, 381, 404,
	91, 407, 379, 433, 413, 445, 108, 452, 110, 418,
	0, 148, 119, 0, 0, 406, 435, 0, 408, 429,
	401, 425, 371, 417, 447, 393, 422, 448, 0, 0,
	0, 205, 0, 0, 0, 0, 0, 0, 0, 0,
	82, 0, 420, 442, 391, 421, 423, 360, 419, 0,
	364, 367, 453, 437, 386, 387, 0, 0, 0, 0,
	0, 0, 0, 405, 409, 426, 399, 0, 0, 0,
	0, 0, 0, 0, 1159, 0, 384, 0, 416, 0,
	0, 0, 0, 0, 0, 368, 365, 0, 0, 403,
	0, 0, 0, 370, 0, 385, 427, 0, 359, 97,
	430, 436, 0, 400, 170, 440, 398, 397, 444, 134,
	0, 151, 99, 107, 69, 76, 0, 98, 125, 139,
	143, 434, 382, 390, 86, 388, 141, 129, 163, 415,
	130, 140, 111, 156, 135, 441, 171, 172, 153, 169,
	179, 70, 152, 162, 83, 144, 72, 160, 150, 117,
	103, 104, 71, 0, 138, 90, 95, 88, 126, 157,
	158, 87, 182, 77, 168, 74, 78, 167, 124, 155,
	161, 118, 115, 73, 159, 116, 114, 106, 93, 100,
	132, 113, 133, 101, 121, 120, 122, 0, 363, 0,
	149, 165, 183, 80, 378, 145, 154, 173, 174, 175,
	176, 177, 178, 0, 0, 81, 96, 92, 131, 123,
	79, 102, 146, 105, 112, 137, 181, 128, 142, 84,
	164, 147, 374, 377, 372, 373, 411, 412, 449, 450,
	451, 428, 369, 0, 375, 376, 0, 432, 438, 439,
	414, 68, 75, 109, 455, 136, 94, 166, 443, 431,
	0, 402, 446, 380, 394, 454, 395, 396, 424, 366,
	410, 127, 392, 180, 89, 85, 67, 0, 383, 361,
	389, 362, 381, 404, 91, 407, 379, 433, 413, 445,
	108, 452, 110, 418, 0, 148, 119, 0, 0, 406,
	435, 0, 408, 429, 401, 425, 371, 417, 447, 393,
	422, 448, 0, 0, 0, 65, 0, 0, 0, 0,
	0, 0, 0, 0, 82, 0, 420, 442, 391, 421,
	423, 360, 419, 0, 364, 367, 453, 437, 386, 387,
	0, 0, 0, 0, 0, 0, 0, 405, 409, 426,
	399, 0, 0, 0, 0, 0, 0, 0, 887, 0,
	384, 0, 416, 0, 0, 0, 0, 0, 0, 368,
	365, 0, 0, 403, 0, 0, 0, 370, 0, 385,
	427, 0, 359, 97, 430, 436, 0, 400, 170, 440,
	398, 397, 444, 134, 0, 151, 99, 107, 69, 76,
	0, 98, 125, 139, 143, 434, 382, 390, 86, 388,
	141, 129, 163, 415, 130, 140, 111, 156, 135, 441,
	171, 172, 153, 169, 179, 70, 152, 162, 83, 144,
	72, 160, 150, 117, 103, 104, 71, 0, 138, 90,
	95, 88, 126, 157, 158, 87, 182, 77, 168, 74,
	78, 167, 124, 155, 161, 118, 115, 73, 159, 116,
	114, 106, 93, 100, 132, 113, 133, 101, 121, 120,
	122, 0, 363, 0, 149, 165, 183, 80, 378, 145,
	154, 173, 174, 175, 176, 177, 178, 0, 0, 81,
	96, 92, 131, 123, 79, 102, 146, 105, 112, 137,
	181, 128, 142, 84, 164, 147, 374, 377, 372, 373,
	411, 412, 449, 450, 451, 428, 369, 0, 375, 376,
	0, 432, 438, 439, 414, 68, 75, 109, 455, 136,
	94, 166, 443, 431, 0, 402, 446, 380, 394, 454,
	395, 396, 424, 366, 410, 127, 392, 180, 89, 85,
	67, 0, 383, 361, 389, 362, 381, 404, 91, 407,
	379, 433, 413, 445, 108, 452, 110, 418, 0, 148,
	119, 0, 0, 406, 435, 0, 408, 429, 401, 425,
	371, 417, 447, 393, 422, 448, 0, 0, 0, 281,
	0, 0, 0, 0, 0, 0, 0, 0, 82, 0,
	420, 442, 391, 421, 423, 360, 419, 0, 364, 367,
	453, 437, 386, 387, 0, 0, 0, 0, 0, 0,
	0, 405, 409, 426, 399, 0, 0, 0, 0, 0,
	0, 0, 784, 0, 384, 0, 416, 0, 0, 0,
	0, 0, 0, 368, 365, 0, 0, 403, 0, 0,
	0, 370, 0, 385, 427, 0, 359, 97, 430, 436,
	0, 400, 170, 440, 398, 397, 444, 134, 0, 151,
	99, 107, 69, 76, 0, 98, 125, 139, 143, 434,
	382, 390, 86, 388, 141, 129, 163, 415, 130, 140,
	111, 156, 135, 441, 171, 172, 153, 169, 179, 70,
	152, 162, 83, 144, 72, 160, 150, 117, 103, 104,
	71, 0, 138, 90, 95, 88, 126, 157, 158, 87,
	182, 77, 168, 74, 78, 167, 124, 155, 161, 118,
	115, 73, 159, 116, 114, 106, 93, 100, 132, 113,
	133, 101, 121, 120, 122, 0, 363, 0, 149, 165,
	183, 80, 378, 145, 154, 173, 174, 175, 176, 177,
	178, 0, 0, 81, 96, 92, 131, 123, 79, 102,
	146, 105, 112, 137, 181, 128, 142, 84, 164, 147,
	374, 377, 372, 373, 411, 412, 449, 450, 451, 428,
	369, 0, 375, 376, 0, 432, 438, 439, 414, 68,
	75, 109, 455, 136, 94, 166, 443, 431, 0, 402,
	446, 380, 394, 454, 395, 396, 424, 366, 410, 127,
	392, 180, 89, 85, 67, 0, 383, 361, 389, 362,
	381, 404, 91, 407, 379, 433, 413, 445, 108, 452,
	110, 418, 0, 148, 119, 0, 0, 406, 435, 0,
	408, 429, 401, 425, 371, 417, 447, 393, 422, 448,
	0, 0, 0, 205, 0, 0, 0, 0, 0, 0,
	0, 0, 82, 0, 420, 442, 391, 421, 423, 360,
	419, 0, 364, 367, 453, 437, 386, 387, 0, 0,
	0, 0, 0, 0, 0, 405, 409, 426, 399, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 384, 0,
	416, 0, 0, 0, 0, 0, 0, 368, 365, 0,
	0, 403, 0, 0, 0, 370, 0, 385, 427, 0,
	359, 97, 430, 436, 0, 400, 170, 440, 398, 397,
	444, 134, 0, 151, 99, 107, 69, 76, 0, 98,
	125, 139, 143, 434, 382, 390, 86, 388, 141, 129,
	163, 415, 130, 140, 111, 156, 135, 441, 171, 172,
	153, 169, 179, 70, 152, 162, 83, 144, 72, 160,
	150, 117, 103, 104, 71, 0, 138, 90, 95, 88,
	126, 157, 158, 87, 182, 77, 168, 74, 78, 167,
	124, 155, 161, 118, 115, 73, 159, 116, 114, 106,
	93, 100, 132, 113, 133, 101, 121, 120, 122, 0,
	363, 0, 149, 165, 183, 80, 378, 145, 154, 173,
	174, 175, 176, 177, 178, 0, 0, 81, 96, 92,
	131, 123, 79, 102, 146, 105, 112, 137, 181, 128,
	142, 84, 164, 147, 374, 377, 372, 373, 411, 412,
	449, 450, 451, 428, 369, 0, 375, 376, 0, 432,
	438, 439, 414, 68, 75, 109, 455, 136, 94, 166,
	443, 431, 0, 402, 446, 380, 394, 454, 395, 396,
	424, 366, 410, 127, 392, 180, 89, 85, 67, 0,
	383, 361, 389, 362, 381, 404, 91, 407, 379, 433,
	413, 445, 108, 452, 110, 418, 0, 148, 119, 0,
	0, 406, 435, 0, 408, 429, 401, 425, 371, 417,
	447, 393, 422, 448, 0, 0, 0, 281, 0, 0,
	0, 0, 0, 0, 0, 0, 82, 0, 420, 442,
	391, 421, 423, 360, 419, 0, 364, 367, 453, 437,
	386, 387, 0, 0, 0, 0, 0, 0, 0, 405,
	409, 426, 399, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 384, 0, 416, 0, 0, 0, 0, 0,
	0, 368, 365, 0, 0, 403, 0, 0, 0, 370,
	0, 385, 427, 0, 359, 97, 430, 436, 0, 400,
	170, 440, 398, 397, 444, 134, 0, 151, 99, 107,
	69, 76, 0, 98, 125, 139, 143, 434, 382, 390,
	86, 388, 141, 129, 163, 415, 130, 140, 111, 156,
	135, 441, 171, 172, 153, 169, 179, 70, 152, 162,
	83, 144, 72, 160, 150, 117, 103, 104, 71, 0,
	138, 90, 95, 88, 126, 157, 158, 87, 182, 77,
	168, 74, 78, 167, 124, 155, 161, 118, 115, 73,
	159, 116, 114, 106, 93, 100, 132, 113, 133, 101,
	121, 120, 122, 0, 363, 0, 149, 165, 183, 80,
	378, 145, 154, 173, 174, 175, 176, 177, 178, 0,
	0, 81, 96, 92, 131, 123, 79, 102, 146, 105,
	112, 137, 181, 128, 142, 84, 164, 147, 374, 377,
	372, 373, 411, 412, 449, 450, 451, 428, 369, 0,
	375, 376, 0, 432, 438, 439, 414, 68, 75, 109,
	455, 136, 94, 166, 443, 431, 0, 402, 446, 380,
	394, 454, 395, 396, 424, 366, 410, 127, 392, 180,
	89, 85, 67, 0, 383, 361, 389, 362, 381, 404,
	91, 407, 379, 433, 413, 445, 108, 452, 110, 418,
	0, 148, 119, 0, 0, 406, 435, 0, 408, 429,
	401, 425, 371, 417, 447, 393, 422, 448, 0, 0,
	0, 205, 0, 0, 0, 0, 0, 0, 0, 0,
	82, 0, 420, 442, 391, 421, 423, 360, 419, 0,
	364, 367, 453, 437, 386, 387, 0, 0, 0, 0,
	0, 0, 0, 405, 409, 426, 399, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 384, 0, 416, 0,
	0, 0, 0, 0, 0, 368, 365, 0, 0, 403,
	0, 0, 0, 370, 0, 385, 427, 0, 359, 97,
	430, 436, 0, 400, 170, 440, 398, 397, 444, 134,
	0, 151, 99, 107, 69, 76, 0, 98, 125, 139,
	143, 434, 382, 390, 86, 388, 141, 129, 163, 415,
	130, 140, 111, 156, 135, 441, 171, 172, 153, 169,
	179, 70, 152, 162, 83, 144, 72, 160, 150, 117,
	103, 104, 71, 0, 138, 90, 95, 88, 126, 157,
	158, 87, 182, 77, 168, 74, 357, 167, 124, 155,
	161, 118, 115, 73, 159, 116, 114, 106, 93, 100,
	132, 113, 133, 101, 121, 120, 122, 0, 363, 0,
	149, 165, 183, 80, 378, 145, 154, 173, 174, 175,
	176, 177, 178, 0, 0, 81, 96, 92, 131, 358,
	356, 102, 146, 105, 112, 137, 181, 128, 142, 84,
	164, 147, 374, 377, 372, 373, 411, 412, 449, 450,
	451, 428, 369, 0, 375, 376, 0, 432, 438, 439,
	414, 68, 75, 109, 455, 136, 94, 166, 443, 431,
	0, 402, 446, 380, 394, 454, 395, 396, 424, 366,
	410, 127, 392, 180, 89, 85, 67, 0, 383, 361,
	389, 362, 381, 404, 91, 407, 379, 433, 413, 445,
	108, 452, 110, 418, 0, 148, 119, 0, 0, 406,
	435, 0, 408, 429, 401, 425, 371, 417, 447, 393,
	422, 448, 0, 0, 0, 65, 0, 0, 0, 0,
	0, 0, 0, 0, 82, 0, 420, 442, 391, 421,
	423, 360, 419, 0, 364, 367, 453, 437, 386, 387,
	0, 0, 0, 0, 0, 0, 0, 405, 409, 426,
	399, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	384, 0, 416, 0, 0, 0, 0, 0, 0, 368,
	365, 0, 0, 403, 0, 0, 0, 370, 0, 385,
	427, 0, 359, 97, 430, 436, 0, 400, 170, 440,
	398, 397, 444, 134, 0, 151, 99, 107, 69, 76,
	0, 98, 125, 139, 143, 434, 382, 390, 86, 388,
	141, 129, 163, 415, 130, 140, 111, 156, 135, 441,
	171, 172, 153, 169, 179, 70, 152, 162, 83, 144,
	72, 160, 150, 117, 103, 104, 71, 0, 138, 90,
	95, 88, 126, 157, 158, 87, 182, 77, 168, 74,
	78, 167, 124, 155, 161, 118, 115, 73, 159, 116,
	114, 106, 93, 100, 132, 113, 133, 101, 121, 120,
	122, 0, 363, 0, 149, 165, 183, 80, 378, 145,
	154, 173, 174, 175, 176, 177, 178, 0, 0, 81,
	96, 92, 131, 123, 79, 102, 146, 105, 112, 137,
	181, 128, 142, 84, 164, 147, 374, 377, 372, 373,
	411, 412, 449, 450, 451, 428, 369, 0, 375, 376,
	0, 432, 438, 439, 414, 68, 75, 109, 455, 136,
	94, 166, 443, 431, 0, 402, 446, 380, 394, 454,
	395, 396, 424, 366, 410, 127, 392, 180, 89, 85,
	67, 0, 383, 361, 389, 362, 381, 404, 91, 407,
	379, 433, 413, 445, 108, 452, 110, 418, 0, 148,
	119, 0, 0, 406, 435, 0, 408, 429, 401, 425,
	371, 417, 447, 393, 422, 448, 0, 0, 0, 205,
	0, 0, 0, 0, 0, 0, 0, 0, 82, 0,
	420, 442, 391, 421, 423, 360, 419, 0, 364, 367,
	453, 437, 386, 387, 0, 0, 0, 0, 0, 0,
	0, 405, 409, 426, 399, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 384, 0, 416, 0, 0, 0,
	0, 0, 0, 368, 365, 0, 0, 403, 0, 0,
	0, 370, 0, 385, 427, 0, 359, 97, 430, 436,
	0, 400, 170, 440, 398, 397, 444, 134, 0, 151,
	99, 107, 69, 76, 0, 98, 125, 139, 143, 434,
	382, 390, 86, 388, 141, 129, 163, 415, 130, 140,
	111, 156, 135, 441, 171, 172, 153, 169, 179, 70,
	152, 652, 83, 144, 72, 160, 150, 117, 103, 104,
	71, 0, 138, 90, 95, 88, 126, 157, 158, 87,
	182, 77, 168, 74, 357, 167, 124, 155, 161, 118,
	115, 73, 159, 116, 114, 106, 93, 100, 132, 113,
	133, 101, 121, 120, 122, 0, 363, 0, 149, 165,
	183, 80, 378, 145, 154, 173, 174, 175, 176, 177,
	178, 0, 0, 81, 96, 92, 131, 358, 356, 102,
	146, 105, 112, 137, 181, 128, 142, 84, 164, 147,
	374, 377, 372, 373, 411, 412, 449, 450, 451, 428,
	369, 0, 375, 376, 0, 432, 438, 439, 414, 68,
	75, 109, 455, 136, 94, 166, 443, 431, 0, 402,
	446, 380, 394, 454, 395, 396, 424, 366, 410, 127,
	392, 180, 89, 85, 67, 0, 383, 361, 389, 362,
	381, 404, 91, 407, 379, 433, 413, 445, 108, 452,
	110, 418, 0, 148, 119, 0, 0, 406, 435, 0,
	408, 429, 401, 425, 371, 417, 447, 393, 422, 448,
	0, 0, 0, 205, 0, 0, 0, 0, 0, 0,
	0, 0, 82, 0, 420, 442, 391, 421, 423, 360,
	419, 0, 364, 367, 453, 437, 386, 387, 0, 0,
	0, 0, 0, 0, 0, 405, 409, 426, 399, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 384, 0,
	416, 0, 0, 0, 0, 0, 0, 368, 365, 0,
	0, 403, 0, 0, 0, 370, 0, 385, 427, 0,
	359, 97, 430, 436, 0, 400, 170, 440, 398, 397,
	444, 134, 0, 151, 99, 107, 69, 76, 0, 98,
	125, 139, 143, 434, 382, 390, 86, 388, 141, 129,
	163, 415, 130, 140, 111, 156, 135, 441, 171, 172,
	153, 169, 179, 70, 152, 348, 83, 144, 72, 160,
	150, 117, 103, 104, 71, 0, 138, 90, 95, 88,
	126, 157, 158, 87, 182, 77, 168, 74, 357, 167,
	124, 155, 161, 118, 115, 73, 159, 116, 114, 106,
	93, 100, 132, 113, 133, 101, 121, 120, 122, 0,
	363, 0, 149, 165, 183, 80, 378, 145, 154, 173,
	174, 175, 176, 177, 178, 0, 0, 81, 96, 92,
	131, 358, 356, 351, 350, 105, 112, 137, 181, 128,
	142, 84, 164, 147, 374, 377, 372, 373, 411, 412,
	449, 450, 451, 428, 369, 0, 375, 376, 0, 432,
	438, 439, 414, 68, 75, 109, 455, 136, 94, 166,
	127, 0, 180, 89, 85, 67, 0, 0, 0, 283,
	0, 0, 0, 91, 0, 280, 0, 0, 0, 108,
	323, 110, 0, 0, 148, 119, 0, 0, 0, 0,
	0, 314, 315, 0, 0, 0, 0, 0, 0, 0,
	0, 55, 0, 0, 281, 302, 301, 304, 305, 306,
	307, 0, 0, 82, 303, 308, 309, 310, 0, 0,
	0, 278, 295, 0, 322, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 292, 293, 0, 0, 0,
	0, 336, 0, 294, 0, 0, 0, 0, 0, 289,
	290, 291, 296, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 97, 0, 1315, 1316, 0, 170, 0, 0,
	334, 0, 134, 0, 151, 99, 107, 69, 76, 0,
	98, 125, 139, 143, 0, 0, 0, 86, 0, 141,
	129, 163, 0, 130, 140, 111, 156, 135, 0, 171,
	172, 153, 169, 179, 70, 152, 162, 83, 144, 72,
	160, 150, 117, 103, 104, 71, 0, 138, 90, 95,
	88, 126, 157, 158, 87, 182, 77, 168, 74, 78,
	167, 124, 155, 161, 118, 115, 73, 159, 116, 114,
	106, 93, 100, 132, 113, 133, 101, 121, 120, 122,
	0, 0, 0, 149, 165, 183, 80, 0, 145, 154,
	173, 174, 175, 176, 177, 178, 0, 0, 81, 96,
	92, 131, 123, 79, 102, 146, 105, 112, 137, 181,
	128, 142, 84, 164, 147, 324, 335, 330, 331, 328,
	329, 327, 326, 325, 337, 316, 317, 318, 319, 321,
	0, 332, 333, 320, 68, 75, 109, 0, 136, 94,
	166, 127, 0, 180, 89, 85, 67, 0, 0, 0,
	283, 0, 0, 0, 91, 0, 280, 0, 0, 0,
	108, 323, 110, 0, 0, 148, 119, 0, 0, 0,
	0, 0, 314, 315, 0, 0, 0, 0, 0, 0,
	894, 0, 55, 0, 0, 281, 302, 301, 304, 305,
	306, 307, 0, 0, 82, 303, 308, 309, 310, 895,
	0, 0, 278, 295, 0, 322, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 292, 293, 0, 0,
	0, 0, 336, 0, 294, 0, 0, 0, 0, 0,
	289, 290, 291, 296, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 97, 0, 0, 0, 0, 170, 0,
	0, 334, 0, 134, 0, 151, 99, 107, 69, 76,
	0, 98, 125, 139, 143, 0, 0, 0, 86, 0,
	141, 129, 163, 0, 130, 140, 111, 156, 135, 0,
	171, 172, 153, 169, 179, 70, 152, 162, 83, 144,
	72, 160, 150, 117, 103, 104, 71, 0, 138, 90,
	95, 88, 126, 157, 158, 87, 182, 77, 168, 74,
	78, 167, 124, 155, 161, 118, 115, 73, 159, 116,
	114, 106, 93, 100, 132, 113, 133, 101, 121, 120,
	122, 0, 0, 0, 149, 165, 183, 80, 0, 145,
	154, 173, 174, 175, 176, 177, 178, 0, 0, 81,
	96, 92, 131, 123, 79, 102, 146, 105, 112, 137,
	181, 128, 142, 84, 164, 147, 324, 335, 330, 331,
	328, 329, 327, 326, 325, 337, 316, 317, 318, 319,
	321, 25, 332, 333, 320, 68, 75, 109, 0, 136,
	94, 166, 0, 127, 0, 180, 89, 85, 67, 0,
	0, 0, 283, 0, 0, 0, 91, 0, 280, 0,
	0, 0, 108, 323, 110, 0, 0, 148, 119, 0,
	0, 0, 0, 0, 314, 315, 0, 0, 0, 0,
	0, 0, 0, 0, 55, 0, 0, 281, 302, 301,
	304, 305, 306, 307, 0, 0, 82, 303, 308, 309,
	310, 0, 0, 0, 278, 295, 0, 322, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 292, 293,
	0, 0, 0, 0, 336, 0, 294, 0, 0, 0,
	0, 0, 289, 290, 291, 296, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 97, 0, 0, 0, 0,
	170, 0, 0, 334, 0, 134, 0, 151, 99, 107,
	69, 76, 0, 98, 125, 139, 143, 0, 0, 0,
	86, 0, 141, 129, 163, 0, 130, 140, 111, 156,
	135, 0, 171, 172, 153, 169, 179, 70, 152, 162,
	83, 144, 72, 160, 150, 117, 103, 104, 71, 0,
	138, 90, 95, 88, 126, 157, 158, 87, 182, 77,
	168, 74, 78, 167, 124, 155, 161, 118, 115, 73,
	159, 116, 114, 106, 93, 100, 132, 113, 133, 101,
	121, 120, 122, 0, 0, 0, 149, 165, 183, 80,
	0, 145, 154, 173, 174, 175, 176, 177, 178, 0,
	0, 81, 96, 92, 131, 123, 79, 102, 146, 105,
	112, 137, 181, 128, 142, 84, 164, 147, 324, 335,
	330, 331, 328, 329, 327, 326, 325, 337, 316, 317,
	318, 319, 321, 0, 332, 333, 320, 68, 75, 109,
	23, 136, 94, 166, 127, 0, 180, 89, 85, 67,
	0, 824, 0, 283, 0, 0, 0, 91, 0, 280,
	0, 0, 0, 108, 323, 110, 0, 0, 148, 119,
	0, 0, 0, 0, 0, 314, 315, 0, 0, 0,
	0, 0, 0, 0, 0, 55, 0, 0, 281, 302,
	301, 304, 305, 306, 307, 0, 0, 82, 303, 308,
	309, 310, 0, 0, 0, 278, 295, 0, 322, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 292,
	293, 274, 0, 0, 0, 336, 0, 294, 0, 0,
	0, 0, 0, 289, 290, 291, 296, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 97, 0, 0, 0,
	0, 170, 0, 0, 334, 0, 134, 0, 151, 99,
	107, 69, 76, 0, 98, 125, 139, 143, 0, 0,
	0, 86, 0, 141, 129, 163, 0, 130, 140, 111,
	156, 135, 0, 171, 172, 153, 169, 179, 70, 152,
	162, 83, 144, 72, 160, 150, 117, 103, 104, 71,
	0, 138, 90, 95, 88, 126, 157, 158, 87, 182,
	77, 168, 74, 78, 167, 124, 155, 161, 118, 115,
	73, 159, 116, 114, 106, 93, 100, 132, 113, 133,
	101, 121, 120, 122, 0, 0, 0, 149, 165, 183,
	80, 0, 145, 154, 173, 174, 175, 176, 177, 178,
	0, 0, 81, 96, 92, 131, 123, 79, 102, 146,
	105, 112, 137, 181, 128, 142, 84, 164, 147, 324,
	335, 330, 331, 328, 329, 327, 326, 325, 337, 316,
	317, 318, 319, 321, 0, 332, 333, 320, 68, 75,
	109, 0, 136, 94, 166, 127, 0, 180, 89, 85,
	67, 0, 0, 0, 283, 0, 0, 0, 91, 0,
	280, 0, 0, 0, 108, 323, 110, 0, 0, 148,
	119, 0, 0, 0, 0, 0, 314, 315, 0, 0,
	0, 0, 0, 0, 0, 0, 55, 0, 517, 281,
	302, 301, 304, 305, 306, 307, 0, 0, 82, 303,
	308, 309, 310, 0, 0, 0, 278, 295, 0, 322,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	292, 293, 0, 0, 0, 0, 336, 0, 294, 0,
	0, 0, 0, 0, 289, 290, 291, 296, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 97, 0, 0,
	0, 0, 170, 0, 0, 334, 0, 134, 0, 151,
	99, 107, 69, 76, 0, 98, 125, 139, 143, 0,
	0, 0, 86, 0, 141, 129, 163, 0, 130, 140,
	111, 156, 135, 0, 171, 172, 153, 169, 179, 70,
	152, 162, 83, 144, 72, 160, 150, 117, 103, 104,
	71, 0, 138, 90, 95, 88, 126, 157, 158, 87,
	182, 77, 168, 74, 78, 167, 124, 155, 161, 118,
	115, 73, 159, 116, 114, 106, 93, 100, 132, 113,
	133, 101, 121, 120, 122, 0, 0, 0, 149, 165,
	183, 80, 0, 145, 154, 173, 174, 175, 176, 177,
	178, 0, 0, 81, 96, 92, 131, 123, 79, 102,
	146, 105, 112, 137, 181, 128, 142, 84, 164, 147,
	324, 335, 330, 331, 328, 329, 327, 326, 325, 337,
	316, 317, 318, 319, 321, 0, 332, 333, 320, 68,
	75, 109, 0, 136, 94, 166, 127, 0, 180, 89,
	85, 67, 0, 0, 0, 283, 0, 0, 0, 91,
	0, 280, 0, 0, 0, 108, 323, 110, 0, 0,
	148, 119, 0, 0, 0, 0, 0, 314, 315, 0,
	0, 0, 0, 0, 0, 0, 0, 55, 0, 0,
	281, 302, 301, 304, 305, 306, 307, 0, 0, 82,
	303, 308, 309, 310, 0, 0, 0, 278, 295, 0,
	322, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 292, 293, 274, 0, 0, 0, 336, 0, 294,
	0, 0, 0, 0, 0, 289, 290, 291, 296, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 97, 0,
	0, 0, 0, 170, 0, 0, 334, 0, 134, 0,
	151, 99, 107, 69, 76, 0, 98, 125, 139, 143,
	0, 0, 0, 86, 0, 141, 129, 163, 0, 130,
	140, 111, 156, 135, 0, 171, 172, 153, 169, 179,
	70, 152, 162, 83, 144, 72, 160, 150, 117, 103,
	104, 71, 0, 138, 90, 95, 88, 126, 157, 158,
	87, 182, 77, 168, 74, 78, 167, 124, 155, 161,
	118, 115, 73, 159, 116, 114, 106, 93, 100, 132,
	113, 133, 101, 121, 120, 122, 0, 0, 0, 149,
	165, 183, 80, 0, 145, 154, 173, 174, 175, 176,
	177, 178, 0, 0, 81, 96, 92, 131, 123, 79,
	102, 146, 105, 112, 137, 181, 128, 142, 84, 164,
	147, 324, 335, 330, 331, 328, 329, 327, 326, 325,
	337, 316, 317, 318, 319, 321, 0, 332, 333, 320,
	68, 75, 109, 0, 136, 94, 166, 127, 0, 180,
	89, 85, 67, 0, 0, 0, 283, 0, 0, 0,
	91, 0, 280, 0, 0, 0, 108, 323, 110, 0,
	0, 148, 119, 0, 0, 0, 0, 0, 314, 315,
	0, 0, 0, 0, 0, 0, 0, 0, 55, 0,
	0, 281, 302, 839, 304, 305, 306, 307, 0, 0,
	82, 303, 308, 309, 310, 0, 0, 0, 278, 295,
	0, 322, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 292, 293, 274, 0, 0, 0, 336, 0,
	294, 0, 0, 0, 0, 0, 289, 290, 291, 296,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 97,
	0, 0, 0, 0, 170, 0, 0, 334, 0, 134,
	0, 151, 99, 107, 69, 76, 0, 98, 125, 139,
	143, 0, 0, 0, 86, 0, 141, 129, 163, 0,
	130, 140, 111, 156, 135, 0, 171, 172, 153, 169,
	179, 70, 152, 162, 83, 144, 72, 160, 150, 117,
	103, 104, 71, 0, 138, 90, 95, 88, 126, 157,
	158, 87, 182, 77, 168, 74, 78, 167, 124, 155,
	161, 118, 115, 73, 159, 116, 114, 106, 93, 100,
	132, 113, 133, 101, 121, 120, 122, 0, 0, 0,
	149, 165, 183, 80, 0, 145, 154, 173, 174, 175,
	176, 177, 178, 0, 0, 81, 96, 92, 131, 123,
	79, 102, 146, 105, 112, 137, 181, 128, 142, 84,
	164, 147, 324, 335, 330, 331, 328, 329, 327, 326,
	325, 337, 316, 317, 318, 319, 321, 0, 332, 333,
	320, 68, 75, 109, 0, 136, 94, 166, 127, 0,
	180, 89, 85, 67, 0, 0, 0, 283, 0, 0,
	0, 91, 0, 280, 0, 0, 0, 108, 323, 110,
	0, 0, 148, 119, 0, 0, 0, 0, 0, 314,
	315, 0, 0, 0, 0, 0, 0, 0, 0, 55,
	0, 0, 281, 302, 836, 304, 305, 306, 307, 0,
	0, 82, 303, 308, 309, 310, 0, 0, 0, 278,
	295, 0, 322, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 292, 293, 274, 0, 0, 0, 336,
	0, 294, 0, 0, 0, 0, 0, 289, 290, 291,
	296, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	97, 0, 0, 0, 0, 170, 0, 0, 334, 0,
	134, 0, 151, 99, 107, 69, 76, 0, 98, 125,
	139, 143, 0, 0, 0, 86, 0, 141, 129, 163,
	0, 130, 140, 111, 156, 135, 0, 171, 172, 153,
	169, 179, 70, 152, 162, 83, 144, 72, 160, 150,
	117, 103, 104, 71, 0, 138, 90, 95, 88, 126,
	157, 158, 87, 182, 77, 168, 74, 78, 167, 124,
	155, 161, 118, 115, 73, 159, 116, 114, 106, 93,
	100, 132, 113, 133, 101, 121, 120, 122, 0, 0,
	0, 149, 165, 183, 80, 0, 145, 154, 173, 174,
	175, 176, 177, 178, 0, 0, 81, 96, 92, 131,
	123, 79, 102, 146, 105, 112, 137, 181, 128, 142,
	84, 164, 147, 324, 335, 330, 331, 328, 329, 327,
	326, 325, 337, 316, 317, 318, 319, 321, 0, 332,
	333, 320, 68, 75, 109, 0, 136, 94, 166, 127,
	0, 180, 89, 85, 67, 0, 0, 0, 283, 0,
	0, 0, 91, 0, 280, 0, 0, 0, 108, 323,
	110, 0, 0, 148, 119, 0, 0, 0, 0, 0,
	314, 315, 0, 0, 0, 0, 0, 0, 0, 0,
	55, 0, 0, 281, 302, 301, 304, 305, 306, 307,
	0, 0, 82, 303, 308, 309, 310, 0, 0, 0,
	278, 295, 0, 322, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 292, 293, 0, 0, 0, 0,
	336, 0, 294, 0, 0, 0, 0, 0, 289, 290,
	291, 296, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 97, 0, 0, 0, 0, 170, 0, 0, 334,
	0, 134, 0, 151, 99, 107, 69, 76, 0, 98,
	125, 139, 143, 0, 0, 0, 86, 0, 141, 129,
	163, 0, 130, 140, 111, 156, 135, 0, 171, 172,
	153, 169, 179, 70, 152, 162, 83, 144, 72, 160,
	150, 117, 103, 104, 71, 0, 138, 90, 95, 88,
	126, 157, 158, 87, 182, 77, 168, 74, 78, 167,
	124, 155, 161, 118, 115, 73, 159, 116, 114, 106,
	93, 100, 132, 113, 133, 101, 121, 120, 122, 0,
	0, 0, 149, 165, 183, 80, 0, 145, 154, 173,
	174, 175, 176, 177, 178, 0, 0, 81, 96, 92,
	131, 123, 79, 102, 146, 105, 112, 137, 181, 128,
	142, 84, 164, 147, 324, 335, 330, 331, 328, 329,
	327, 326, 325, 337, 316, 317, 318, 319, 321, 0,
	332, 333, 320, 68, 75, 109, 0, 136, 94, 166,
	127, 0, 180, 89, 85, 67, 0, 0, 0, 0,
	0, 0, 0, 91, 0, 0, 0, 0, 0, 108,
	323, 110, 0, 0, 148, 119, 0, 0, 0, 0,
	0, 314, 315, 0, 0, 0, 0, 0, 0, 0,
	0, 55, 0, 0, 281, 302, 301, 304, 305, 306,
	307, 0, 0, 82, 303, 308, 309, 310, 0, 0,
	0, 0, 295, 0, 322, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 292, 293, 0, 0, 0,
	0, 336, 0, 294, 0, 0, 0, 0, 0, 289,
	290, 291, 296, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 97, 0, 0, 0, 0, 170, 0, 0,
	334, 0, 134, 0, 151, 99, 107, 69, 76, 0,
	98, 125, 139, 143, 0, 0, 0, 86, 0, 141,
	129, 163, 1487, 130, 140, 111, 156, 135, 0, 171,
	172, 153, 169, 179, 70, 152, 162, 83, 144, 72,
	160, 150, 117, 103, 104, 71, 0, 138, 90, 95,
	88, 126, 157, 158, 87, 182, 77, 168, 74, 78,
	167, 124, 155, 161, 118, 115, 73, 159, 116, 114,
	106, 93, 100, 132, 113, 133, 101, 121, 120, 122,
	0, 0, 0, 149, 165, 183, 80, 0, 145, 154,
	173, 174, 175, 176, 177, 178, 0, 0, 81, 96,
	92, 131, 123, 79, 102, 146, 105, 112, 137, 181,
	128, 142, 84, 164, 147, 324, 335, 330, 331, 328,
	329, 327, 326, 325, 337, 316, 317, 318, 319, 321,
	0, 332, 333, 320, 68, 75, 109, 0, 136, 94,
	166, 127, 0, 180, 89, 85, 67, 0, 0, 0,
	0, 0, 0, 0, 91, 0, 0, 0, 0, 0,
	108, 323, 110, 0, 0, 148, 119, 0, 0, 0,
	0, 0, 314, 315, 0, 0, 0, 0, 0, 0,
	0, 0, 55, 0, 517, 281, 302, 301, 304, 305,
	306, 307, 0, 0, 82, 303, 308, 309, 310, 0,
	0, 0, 0, 295, 0, 322, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 292, 293, 0, 0,
	0, 0, 336, 0, 294, 0, 0, 0, 0, 0,
	289, 290, 291, 296, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 97, 0, 0, 0, 0, 170, 0,
	0, 334, 0, 134, 0, 151, 99, 107, 69, 76,
	0, 98, 125, 139, 143, 0, 0, 0, 86, 0,
	141, 129, 163, 0, 130, 140, 111, 156, 135, 0,
	171, 172, 153, 169, 179, 70, 152, 162, 83, 144,
	72, 160, 150, 117, 103, 104, 71, 0, 138, 90,
	95, 88, 126, 157, 158, 87, 182, 77, 168, 74,
	78, 167, 124, 155, 161, 118, 115, 73, 159, 116,
	114, 106, 93, 100, 132, 113, 133, 101, 121, 120,
	122, 0, 0, 0, 149, 165, 183, 80, 0, 145,
	154, 173, 174, 175, 176, 177, 178, 0, 0, 81,
	96, 92, 131, 123, 79, 102, 146, 105, 112, 137,
	181, 128, 142, 84, 164, 147, 324, 335, 330, 331,
	328, 329, 327, 326, 325, 337, 316, 317, 318, 319,
	321, 0, 332, 333, 320, 68, 75, 109, 0, 136,
	94, 166, 127, 0, 180, 89, 85, 67, 0, 0,
	0, 0, 0, 0, 0, 91, 0, 0, 0, 0,
	0, 108, 323, 110, 0, 0, 148, 119, 0, 0,
	0, 0, 0, 314, 315, 0, 0, 0, 0, 0,
	0, 0, 0, 55, 0, 0, 281, 302, 301, 304,
	305, 306, 307, 0, 0, 82, 303, 308, 309, 310,
	0, 0, 0, 0, 295, 0, 322, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 292, 293, 0,
	0, 0, 0, 336, 0, 294, 0, 0, 0, 0,
	0, 289, 290, 291, 296, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 97, 0, 0, 0, 0, 170,
	0, 0, 334, 0, 134, 0, 151, 99, 107, 69,
	76, 0, 98, 125, 139, 143, 0, 0, 0, 86,
	0, 141, 129, 163, 0, 130, 140, 111, 156, 135,
	0, 171, 172, 153, 169, 179, 70, 152, 162, 83,
	144, 72, 160, 150, 117, 103, 104, 71, 0, 138,
	90, 95, 88, 126, 157, 158, 87, 182, 77, 168,
	74, 78, 167, 124, 155, 161, 118, 115, 73, 159,
	116, 114, 106, 93, 100, 132, 113, 133, 101, 121,
	120, 122, 0, 0, 0, 149, 165, 183, 80, 0,
	145, 154, 173, 174, 175, 176, 177, 178, 0, 0,
	81, 96, 92, 131, 123, 79, 102, 146, 105, 112,
	137, 181, 128, 142, 84, 164, 147, 324, 335, 330,
	331, 328, 329, 327, 326, 325, 337, 316, 317, 318,
	319, 321, 0, 332, 333, 320, 68, 75, 109, 0,
	136, 94, 166, 127, 0, 180, 89, 85, 67, 0,
	0, 542, 0, 0, 0, 0, 91, 0, 0, 0,
	0, 0, 108, 0, 110, 0, 0, 148, 119, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 205, 0, 544,
	0, 0, 0, 0, 0, 0, 82, 0, 0, 0,
	0, 0, 539, 538, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 540,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 97, 0, 0, 0, 0,
	170, 0, 0, 0, 0, 134, 0, 151, 99, 107,
	69, 76, 0, 98, 125, 139, 143, 0, 0, 0,
	86, 0, 141, 129, 163, 0, 130, 140, 111, 156,
	135, 0, 171, 172, 153, 169, 179, 70, 152, 162,
	83, 144, 72, 160, 150, 117, 103, 104, 71, 0,
	138, 90, 95, 88, 126, 157, 158, 87, 182, 77,
	168, 74, 78, 167, 124, 155, 161, 118, 115, 73,
	159, 116, 114, 106, 93, 100, 132, 113, 133, 101,
	121, 120, 122, 0, 0, 0, 149, 165, 183, 80,
	0, 145, 154, 173, 174, 175, 176, 177, 178, 0,
	0, 81, 96, 92, 131, 123, 79, 102, 146, 105,
	112, 137, 181, 128, 142, 84, 164, 147, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 127, 0, 180,
	89, 85, 67, 0, 0, 0, 0, 68, 75, 109,
	91, 136, 94, 166, 0, 0, 108, 0, 110, 0,
	0, 148, 119, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 205, 0, 0, 0, 0, 0, 0, 0, 0,
	82, 0, 0, 0, 0, 0, 199, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 97,
	201, 202, 0, 0, 198, 0, 0, 0, 203, 134,
	0, 151, 99, 107, 69, 76, 0, 98, 125, 139,
	143, 0, 0, 0, 86, 0, 141, 129, 163, 0,
	130, 140, 111, 156, 135, 0, 171, 172, 153, 169,
	179, 70, 152, 162, 83, 144, 72, 160, 150, 117,
	103, 104, 71, 0, 138, 90, 95, 88, 126, 157,
	158, 87, 182, 77, 168, 74, 78, 167, 124, 155,
	161, 118, 115, 73, 159, 116, 114, 106, 93, 100,
	132, 113, 133, 101, 121, 120, 122, 0, 0, 0,
	149, 165, 183, 80, 0, 145, 154, 173, 174, 175,
	176, 177, 178, 0, 0, 81, 96, 92, 131, 123,
	79, 102, 146, 105, 112, 137, 181, 128, 142, 84,
	164, 147, 0, 200, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 25, 0, 0, 0,
	0, 68, 75, 109, 0, 136, 94, 166, 127, 0,
	180, 89, 85, 67, 0, 0, 0, 0, 0, 0,
	0, 91, 0, 0, 0, 0, 0, 108, 0, 110,
	0, 0, 148, 119, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 55,
	0, 0, 205, 0, 0, 0, 0, 0, 0, 0,
	0, 82, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	97, 0, 0, 0, 0, 170, 0, 0, 0, 0,
	134, 0, 151, 99, 107, 69, 76, 0, 98, 125,
	139, 143, 0, 0, 0, 86, 0, 141, 129, 163,
	0, 130, 140, 111, 156, 135, 0, 171, 172, 153,
	169, 179, 70, 152, 162, 83, 144, 72, 160, 150,
	117, 103, 104, 71, 0, 138, 90, 95, 88, 126,
	157, 158, 87, 182, 77, 168, 74, 78, 167, 124,
	155, 161, 118, 115, 73, 159, 116, 114, 106, 93,
	100, 132, 113, 133, 101, 121, 120, 122, 0, 0,
	0, 149, 165, 183, 80, 0, 145, 154, 173, 174,
	175, 176, 177, 178, 0, 0, 81, 96, 92, 131,
	123, 79, 102, 146, 105, 112, 137, 181, 128, 142,
	84, 164, 147, 0, 25, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 127, 0, 180, 89,
	85, 67, 68, 75, 109, 23, 136, 94, 166, 91,
	0, 0, 0, 0, 0, 108, 0, 110, 0, 0,
	148, 119, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 55, 0, 0,
	639, 0, 0, 0, 0, 0, 0, 0, 0, 82,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 97, 0,
	0, 0, 0, 170, 0, 0, 0, 0, 134, 0,
	151, 99, 107, 69, 76, 0, 98, 125, 139, 143,
	0, 0, 0, 86, 0, 141, 129, 163, 0, 130,
	140, 111, 156, 135, 0, 171, 172, 153, 169, 179,
	70, 152, 162, 83, 144, 72, 160, 150, 117, 103,
	104, 71, 0, 138, 90, 95, 88, 126, 157, 158,
	87, 182, 77, 168, 74, 78, 167, 124, 155, 161,
	118, 115, 73, 159, 116, 114, 106, 93, 100, 132,
	113, 133, 101, 121, 120, 122, 0, 0, 0, 149,
	165, 183, 80, 0, 145, 154, 173, 174, 175, 176,
	177, 178, 0, 0, 81, 96, 92, 131, 123, 79,
	102, 146, 105, 112, 137, 181, 128, 142, 84, 164,
	147, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	68, 75, 109, 23, 136, 94, 166, 127, 0, 180,
	89, 85, 67, 0, 0, 879, 0, 0, 0, 0,
	91, 0, 0, 0, 0, 0, 108, 0, 110, 0,
	0, 148, 119, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 65, 0, 64, 0, 0, 0, 0, 0, 0,
	82, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 97,
	0, 0, 0, 0, 170, 0, 0, 0, 0, 134,
	0, 151, 99, 107, 69, 76, 0, 98, 125, 139,
	143, 0, 0, 0, 86, 0, 141, 129, 163, 0,
	130, 140, 111, 156, 135, 0, 171, 172, 153, 169,
	179, 70, 152, 162, 83, 144, 72, 160, 150, 117,
	103, 104, 71, 0, 138, 90, 95, 88, 126, 157,
	158, 87, 182, 77, 168, 74, 78, 167, 124, 155,
	161, 118, 115, 73, 159, 116, 114, 106, 93, 100,
	132, 113, 133, 101, 121, 120, 122, 0, 0, 0,
	149, 165, 183, 80, 0, 145, 154, 173, 174, 175,
	176, 177, 178, 0, 0, 81, 96, 92, 131, 123,
	79, 102, 146, 105, 112, 137, 181, 128, 142, 84,
	164, 147, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 127, 0, 180, 89, 85, 67, 0, 0, 879,
	0, 68, 75, 109, 91, 136, 94, 166, 0, 0,
	108, 0, 110, 0, 0, 148, 119, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 65, 0, 64, 0, 0,
	0, 0, 0, 0, 82, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 97, 0, 0, 0, 0, 170, 0,
	0, 0, 0, 134, 0, 151, 99, 107, 69, 76,
	0, 98, 125, 139, 143, 0, 0, 0, 86, 0,
	141, 129, 163, 0, 877, 140, 111, 156, 135, 0,
	171, 172, 153, 169, 179, 70, 152, 162, 83, 144,
	72, 160, 150, 117, 103, 104, 71, 0, 138, 90,
	95, 88, 126, 157, 158, 87, 182, 77, 168, 74,
	78, 167, 124, 155, 161, 118, 115, 73, 159, 116,
	114, 106, 93, 100, 132, 113, 133, 101, 121, 120,
	122, 0, 0, 0, 149, 165, 183, 80, 0, 145,
	154, 173, 174, 175, 176, 177, 178, 0, 0, 81,
	96, 92, 131, 123, 79, 102, 146, 105, 112, 137,
	181, 128, 142, 84, 164, 147, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 127, 0, 180, 89, 85,
	67, 0, 0, 0, 0, 68, 75, 109, 91, 136,
	94, 166, 0, 0, 108, 0, 110, 0, 0, 148,
	119, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 205,
	0, 0, 771, 0, 0, 772, 0, 0, 82, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 97, 0, 0,
	0, 0, 170, 0, 0, 0, 0, 134, 0, 151,
	99, 107, 69, 76, 0, 98, 125, 139, 143, 0,
	0, 0, 86, 0, 141, 129, 163, 0, 130, 140,
	111, 156, 135, 0, 171, 172, 153, 169, 179, 70,
	152, 162, 83, 144, 72, 160, 150, 117, 103, 104,
	71, 0, 138, 90, 95, 88, 126, 157, 158, 87,
	182, 77, 168, 74, 78, 167, 124, 155, 161, 118,
	115, 73, 159, 116, 114, 106, 93, 100, 132, 113,
	133, 101, 121, 120, 122, 0, 0, 0, 149, 165,
	183, 80, 0, 145, 154, 173, 174, 175, 176, 177,
	178, 0, 0, 81, 96, 92, 131, 123, 79, 102,
	146, 105, 112, 137, 181, 128, 142, 84, 164, 147,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 127, 0, 180, 89, 85, 67, 68,
	75, 109, 0, 136, 94, 166, 91, 0, 661, 0,
	0, 0, 108, 0, 110, 0, 0, 148, 119, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 205, 0, 660,
	0, 0, 0, 0, 0, 0, 82, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 97, 0, 0, 0, 0,
	170, 0, 0, 0, 0, 134, 0, 151, 99, 107,
	69, 76, 0, 98, 125, 139, 143, 0, 0, 0,
	86, 0, 141, 129, 163, 0, 130, 140, 111, 156,
	135, 0, 171, 172, 153, 169, 179, 70, 152, 162,
	83, 144, 72, 160, 150, 117, 103, 104, 71, 0,
	138, 90, 95, 88, 126, 157, 158, 87, 182, 77,
	168, 74, 78, 167, 124, 155, 161, 118, 115, 73,
	159, 116, 114, 106, 93, 100, 132, 113, 133, 101,
	121, 120, 122, 0, 0, 0, 149, 165, 183, 80,
	0, 145, 154, 173, 174, 175, 176, 177, 178, 0,
	0, 81, 96, 92, 131, 123, 79, 102, 146, 105,
	112, 137, 181, 128, 142, 84, 164, 147, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 127, 0, 180,
	89, 85, 67, 0, 0, 0, 0, 68, 75, 109,
	91, 136, 94, 166, 0, 0, 108, 0, 110, 0,
	0, 148, 119, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 55, 0,
	0, 639, 0, 0, 0, 0, 0, 0, 0, 0,
	82, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 97,
	0, 0, 0, 0, 170, 0, 0, 0, 0, 134,
	0, 151, 99, 107, 69, 76, 0, 98, 125, 139,
	143, 0, 0, 0, 86, 0, 141, 129, 163, 0,
	130, 140, 111, 156, 135, 0, 171, 172, 153, 169,
	179, 70, 152, 162, 83, 144, 72, 160, 150, 117,
	103, 104, 71, 0, 138, 90, 95, 88, 126, 157,
	158, 87, 182, 77, 168, 74, 78, 167, 124, 155,
	161, 118, 115, 73, 159, 116, 114, 106, 93, 100,
	132, 113, 133, 101, 121, 120, 122, 0, 0, 0,
	149, 165, 183, 80, 0, 145, 154, 173, 174, 175,
	176, 177, 178, 0, 0, 81, 96, 92, 131, 123,
	79, 102, 146, 105, 112, 137, 181, 128, 142, 84,
	164, 147, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 127, 0, 180, 89, 85, 67, 0, 0, 0,
	0, 68, 75, 109, 91, 136, 94, 166, 0, 0,
	108, 0, 110, 0, 0, 148, 119, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 65, 0, 64, 0, 0,
	0, 0, 0, 0, 82, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 97, 0, 0, 0, 0, 170, 0,
	0, 0, 0, 134, 0, 151, 99, 107, 69, 76,
	0, 98, 125, 139, 143, 0, 0, 0, 86, 0,
	141, 129, 163, 0, 130, 140, 111, 156, 135, 0,
	171, 172, 153, 169, 179, 70, 152, 162, 83, 144,
	72, 160, 150, 117, 103, 104, 71, 0, 138, 90,
	95, 88, 126, 157, 158, 87, 182, 77, 168, 74,
	78, 167, 124, 155, 161, 118, 115, 73, 159, 116,
	114, 106, 93, 100, 132, 113, 133, 101, 121, 120,
	122, 0, 0, 0, 149, 165, 183, 80, 0, 145,
	154, 173, 174, 175, 176, 177, 178, 0, 0, 81,
	96, 92, 131, 123, 79, 102, 146, 105, 112, 137,
	181, 128, 142, 84, 164, 147, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 127, 0, 180, 89, 85,
	67, 0, 0, 0, 0, 68, 75, 109, 91, 136,
	94, 166, 0, 0, 108, 0, 110, 0, 0, 148,
	119, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 205,
	0, 544, 0, 0, 0, 0, 0, 0, 82, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 97, 0, 0,
	0, 0, 170, 0, 0, 0, 0, 134, 0, 151,
	99, 107, 69, 76, 0, 98, 125, 139, 143, 0,
	0, 0, 86, 0, 141, 129, 163, 0, 130, 140,
	111, 156, 135, 0, 171, 172, 153, 169, 179, 70,
	152, 162, 83, 144, 72, 160, 150, 117, 103, 104,
	71, 0, 138, 90, 95, 88, 126, 157, 158, 87,
	182, 77, 168, 74, 78, 167, 124, 155, 161, 118,
	115, 73, 159, 116, 114, 106, 93, 100, 132, 113,
	133, 101, 121, 120, 122, 0, 0, 0, 149, 165,
	183, 80, 0, 145, 154, 173, 174, 175, 176, 177,
	178, 0, 0, 81, 96, 92, 131, 123, 79, 102,
	146, 105, 112, 137, 181, 128, 142, 84, 164, 147,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 68,
	75, 109, 0, 136, 94, 166, 127, 0, 180, 89,
	85, 67, 0, 0, 0, 0, 0, 0, 630, 91,
	0, 0, 0, 0, 0, 108, 0, 110, 0, 0,
	148, 119, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	65, 0, 0, 0, 0, 0, 0, 0, 0, 82,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 97, 0,
	0, 0, 0, 170, 0, 0, 0, 0, 134, 0,
	151, 99, 107, 69, 76, 0, 98, 125, 139, 143,
	0, 0, 0, 86, 0, 141, 129, 163, 0, 130,
	140, 111, 156, 135, 0, 171, 172, 153, 169, 179,
	70, 152, 162, 83, 144, 72, 160, 150, 117, 103,
	104, 71, 0, 138, 90, 95, 88, 126, 157, 158,
	87, 182, 77, 168, 74, 78, 167, 124, 155, 161,
	118, 115, 73, 159, 116, 114, 106, 93, 100, 132,
	113, 133, 101, 121, 120, 122, 0, 0, 0, 149,
	165, 183, 80, 0, 145, 154, 173, 174, 175, 176,
	177, 178, 0, 0, 81, 96, 92, 131, 123, 79,
	102, 146, 105, 112, 137, 181, 128, 142, 84, 164,
	147, 0, 0, 340, 0, 0, 0, 0, 0, 0,
	127, 0, 180, 89, 85, 67, 0, 0, 0, 0,
	68, 75, 109, 91, 136, 94, 166, 0, 0, 108,
	0, 110, 0, 0, 148, 119, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 65, 0, 0, 0, 0, 0,
	0, 0, 0, 82, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 97, 0, 0, 0, 0, 170, 0, 0,
	0, 0, 134, 0, 151, 99, 107, 69, 76, 0,
	98, 125, 139, 143, 0, 0, 0, 86, 0, 141,
	129, 163, 0, 130, 140, 111, 156, 135, 0, 171,
	172, 153, 169, 179, 70, 152, 162, 83, 144, 72,
	160, 150, 117, 103, 104, 71, 0, 138, 90, 95,
	88, 126, 157, 158, 87, 182, 77, 168, 74, 78,
	167, 124, 155, 161, 118, 115, 73, 159, 116, 114,
	106, 93, 100, 132, 113, 133, 101, 121, 120, 122,
	0, 0, 0, 149, 165, 183, 80, 0, 145, 154,
	173, 174, 175, 176, 177, 178, 0, 0, 81, 96,
	92, 131, 123, 79, 102, 146, 105, 112, 137, 181,
	128, 142, 84, 164, 147, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 127, 0, 180, 89, 85, 67,
	0, 0, 0, 0, 68, 75, 109, 91, 136, 94,
	166, 0, 0, 108, 0, 110, 0, 0, 148, 119,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 65, 0,
	0, 0, 0, 0, 0, 0, 0, 82, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 97, 0, 217, 0,
	0, 170, 0, 0, 0, 0, 134, 0, 151, 99,
	107, 69, 76, 0, 98, 125, 139, 143, 0, 0,
	0, 86, 0, 141, 129, 163, 0, 130, 140, 111,
	156, 135, 0, 171, 172, 153, 169, 179, 70, 152,
	162, 83, 144, 72, 160, 150, 117, 103, 104, 71,
	0, 138, 90, 95, 88, 126, 157, 158, 87, 182,
	77, 168, 74, 78, 167, 124, 155, 161, 118, 115,
	73, 159, 116, 114, 106, 93, 100, 132, 113, 133,
	101, 121, 120, 122, 0, 0, 0, 149, 165, 183,
	80, 0, 145, 154, 173, 174, 175, 176, 177, 178,
	0, 0, 81, 96, 92, 131, 123, 79, 102, 146,
	105, 112, 137, 181, 128, 142, 84, 164, 147, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 127, 0,
	180, 89, 85, 67, 0, 0, 0, 0, 68, 75,
	109, 91, 136, 94, 166, 0, 0, 108, 0, 110,
	0, 0, 148, 119, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 205, 0, 0, 0, 0, 0, 0, 0,
	0, 82, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	97, 0, 0, 0, 0, 170, 0, 0, 0, 0,
	134, 0, 151, 99, 107, 69, 76, 0, 98, 125,
	139, 143, 0, 0, 0, 86, 0, 141, 129, 163,
	0, 130, 140, 111, 156, 135, 0, 171, 172, 153,
	169, 179, 70, 152, 162, 83, 144, 72, 160, 150,
	117, 103, 104, 71, 0, 138, 90, 95, 88, 126,
	157, 158, 87, 182, 77, 168, 74, 78, 167, 124,
	155, 161, 118, 115, 73, 159, 116, 114, 106, 93,
	100, 132, 113, 133, 101, 121, 120, 122, 0, 0,
	0, 149, 165, 183, 80, 0, 145, 154, 173, 174,
	175, 176, 177, 178, 0, 0, 81, 96, 92, 131,
	123, 79, 102, 146, 105, 112, 137, 181, 128, 142,
	84, 164, 147, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 127, 0, 180, 89, 85, 67, 0, 0,
	0, 0, 68, 75, 109, 91, 136, 94, 166, 0,
	0, 108, 0, 110, 0, 0, 148, 119, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 65, 0, 0, 0,
	0, 0, 0, 0, 0, 82, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 97, 0, 0, 0, 0, 170,
	0, 0, 0, 0, 134, 0, 151, 99, 107, 69,
	76, 0, 98, 125, 139, 143, 0, 0, 0, 86,
	0, 141, 129, 163, 0, 130, 140, 111, 156, 135,
	0, 171, 172, 153, 169, 179, 70, 152, 162, 83,
	144, 72, 160, 150, 117, 103, 104, 71, 0, 138,
	90, 95, 88, 126, 157, 158, 87, 182, 77, 168,
	74, 78, 167, 124, 155, 161, 118, 115, 73, 159,
	116, 114, 106, 93, 100, 132, 113, 133, 101, 121,
	120, 122, 0, 0, 0, 149, 165, 183, 80, 0,
	145, 154, 173, 174, 175, 176, 177, 178, 0, 0,
	81, 96, 92, 131, 123, 79, 102, 146, 105, 112,
	137, 181, 128, 142, 84, 164, 147, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 127, 0, 180, 89,
	85, 67, 0, 0, 0, 0, 68, 75, 109, 91,
	136, 94, 166, 0, 0, 108, 0, 110, 0, 0,
	148, 119, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	281, 0, 0, 0, 0, 0, 0, 0, 0, 82,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 97, 0,
	0, 0, 0, 170, 0, 0, 0, 0, 134, 0,
	151, 99, 107, 69, 76, 0, 98, 125, 139, 143,
	0, 0, 0, 86, 0, 141, 129, 163, 0, 130,
	140, 111, 156, 135, 0, 171, 172, 153, 169, 179,
	70, 152, 162, 83, 144, 72, 160, 150, 117, 103,
	104, 71, 0, 138, 90, 95, 88, 126, 157, 158,
	87, 182, 77, 168, 74, 78, 167, 124, 155, 161,
	118, 115, 73, 159, 116, 114, 106, 93, 100, 132,
	113, 133, 101, 121, 120, 122, 0, 0, 0, 149,
	165, 183, 80, 0, 145, 154, 173, 174, 175, 176,
	177, 178, 0, 0, 81, 96, 92, 131, 123, 79,
	102, 146, 105, 112, 137, 181, 128, 142, 84, 164,
	147, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	68, 75, 109, 0, 136, 94, 166,
}
var yyPact = [...]int{

	120, -1000, -198, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, 967, 11773, 996, -1000, -1000, -1000, -1000, -1000,
	-1000, 288, 9779, 29, 143, 50, 12766, 138, 2374, 13254,
	-1000, 20, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -74,
	-96, -1000, 91, -1000, -1000, -1000, -1000, -1000, 960, 964,
	747, -1000, 944, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, 800, 942, 878, -1000, 7708, 104,
	104, 12522, 6141, -1000, -1000, 303, 13254, 127, 13254, -146,
	93, 93, 93, -1000, -1000, -1000, -1000, 136, 13254, 248,
	-1000, 13254, 85, 643, 85, 85, 85, 13254, -1000, 182,
	13254, 642, 909, 3675, 101, 3675, 3675, -1000, 3675, 3675,
	-1000, 3675, 26, 3675, -65, 975, -1000, -1000, -1000, -1000,
	1, -1000, 3675, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, 453, 921, 8491, 8491,
	91, 11773, 751, 967, -1000, 91, -1000, -1000, -1000, 912,
	-1000, -1000, 350, 985, -1000, 9535, 181, -1000, 8491, 1931,
	751, -1000, -1000, 751, -1000, -1000, 159, -1000, -1000, 9274,
	9274, 9274, 9274, 9274, 9274, 9274, 9274, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, 751, -1000, 6925, 751, 751, 751, 751, 751, 751,
	751, 751, 8491, 751, 751, 751, 751, 751, 751, 751,
	751, 751, 751, 751, 751, 751, 751, 751, 12278, 11529,
	13254, 727, 700, -1000, -1000, 180, 743, 5867, -98, -1000,
	-1000, -1000, 300, 11285, -1000, -1000, -1000, 908, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, 639, 13254, -1000, 2023,
	-1000, 623, 3675, 118, 611, 324, 578, 13254, 13254, 3675,
	34, 70, 132, 13254, 745, 113, 13254, 937, 827, 13254,
	570, 556, -1000, 5593, -1000, 3675, 3675, -1000, -1000, -1000,
	3675, 3675, 3675, 13254, 3675, 3675, -1000, -1000, -1000, -1000,
	-1000, 3675, 3675, -1000, 984, 320, -1000, -1000, -1000, -1000,
	8491, -1000, 824, -1000, -1000, -1000, -1000, -1000, -1000, 991,
	223, 529, 178, 744, -1000, 454, -1000, -1000, 91, 960,
	453, 878, 11037, 856, -1000, -1000, 13254, -1000, 8491, 8491,
	466, -1000, 12017, -1000, -1000, 4497, 230, 9274, 406, 376,
	9274, 9274, 9274, 9274, 9274, 9274, 9274, 9274, 9274, 9274,
	9274, 9274, 9274, 9274, 9274, 9274, 9274, 9274, 9274, 461,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, 530, -1000,
	91, 604, 604, 197, 197, 197, 197, 197, 197, 197,
	2800, 7186, 453, 635, 365, 6925, 7708, 7708, 8491, 8491,
	8230, 7969, 7708, 946, 311, 365, 13498, -1000, -1000, 9013,
	-1000, -1000, -1000, -1000, -1000, 453, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, 13010, 13010, 7708, 7708, 7708, 7708, 49,
	13254, -1000, 715, 840, -1000, -1000, -1000, 939, 10288, 751,
	10793, 49, 737, 11529, 13254, -1000, -1000, 11529, 13254, 4223,
	5319, 743, -98, 730, -1000, -121, -90, 6663, 196, -1000,
	-1000, -1000, -1000, 3401, 382, 641, 387, -57, -1000, -1000,
	-1000, 754, -1000, 754, 754, 754, 754, -23, -23, -23,
	-23, -1000, -1000, -1000, -1000, -1000, 798, 782, -1000, 754,
	754, 754, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	772, 772, 772, 758, 758, 805, -1000, 13254, 3675, 936,
	3675, -1000, 90, -1000, 13010, 13010, 13254, 13254, 154, 13254,
	13254, 741, -1000, 13254, 3675, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	13254, 317, 13254, 13254, 365, 13254, -1000, 891, 8491, 8491,
	5045, 8491, -1000, -1000, -1000, 453, 921, -1000, 946, 965,
	-1000, 901, 900, 7708, -1000, -1000, 230, 258, -1000, -1000,
	415, -1000, -1000, -1000, -1000, 177, 751, -1000, 2222, -1000,
	-1000, -1000, -1000, 406, 9274, 9274, 9274, 329, 2222, 2222,
	2222, 2222, 2222, 2179, 452, 346, 197, 494, 494, 201,
	201, 201, 201, 201, 401, 401, -1000, -1000, -1000, 453,
	-1000, -1000, -1000, 453, 7708, 740, -1000, -1000, 8491, -1000,
	453, 619, 619, 421, 539, 279, 982, 619, 277, 981,
	619, 619, 7708, 328, -1000, 8491, 453, -1000, 176, -1000,
	477, 738, 736, 619, 453, 619, 619, 74, 751, -1000,
	13498, 11529, 845, 11529, 11529, 11529, -1000, -1000, 854, 847,
	875, 13254, -1000, 632, 10288, 13010, 184, 751, -1000, 11773,
	974, 11529, 729, -1000, 729, -1000, 173, -1000, -1000, 730,
	-98, -127, -1000, -1000, -1000, -1000, 365, -1000, 502, 726,
	3127, -1000, -1000, -1000, -1000, -1000, -1000, -1000, 768, 526,
	-1000, 927, 225, 227, 510, 925, -1000, -1000, -1000, 911,
	-1000, 343, -63, -1000, -1000, 435, -23, -23, -1000, -1000,
	196, 907, 196, 196, 196, 478, 478, -1000, -1000, -1000,
	-1000, 432, -1000, -1000, -1000, 413, -1000, 822, 13010, 3675,
	-1000, -1000, -1000, -1000, 203, 203, 237, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, 47, 803,
	-1000, -1000, -1000, 33, 31, 106, -1000, 3675, -1000, 320,
	-1000, 472, 8491, -1000, -1000, -1000, 887, 365, 365, 170,
	-1000, -1000, -1000, 13254, -1000, -1000, -1000, -1000, 686, -1000,
	-1000, -1000, 3949, 7708, -1000, 329, 2222, 1697, -1000, 9274,
	9274, -1000, -1000, 619, 7708, 365, -1000, -1000, -1000, 168,
	461, 168, 9274, 9274, -1000, 9274, 9274, -1000, -162, 722,
	302, -1000, 8491, 450, -1000, 5045, -1000, 9274, 9274, -1000,
	-1000, -1000, -1000, 821, 13498, 751, -1000, 10040, 13010, 731,
	-1000, 294, 840, 11529, -1000, 863, 861, 817, 572, -1000,
	-1000, 849, -1000, 846, -1000, -1000, -1000, -1000, 453, 723,
	-1000, 220, -1000, 124, 122, 121, 13010, -1000, 967, 8491,
	729, -1000, -1000, 214, -1000, -1000, -129, -130, -1000, -1000,
	-1000, 3401, -1000, 3401, 13010, 66, -1000, 510, 510, -1000,
	-1000, -1000, 764, 812, 9274, -1000, -1000, -1000, 620, 196,
	196, -1000, 252, -1000, -1000, -1000, 605, -1000, 601, 718,
	593, 13254, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, 13254, -1000,
	-1000, -1000, -1000, -1000, 13010, -169, 488, 13010, 13010, 13254,
	-1000, 317, -1000, 365, -1000, 4771, -1000, 974, 11529, -1000,
	-1000, 453, -1000, 9274, 2222, 2222, -1000, -1000, 453, 754,
	754, -1000, 754, 758, -1000, 754, 9, 754, -5, 453,
	453, 2161, 1977, 1549, 664, 751, -157, -1000, 365, 8491,
	-1000, 1449, 1425, -1000, 930, 653, 695, -1000, -1000, 7447,
	453, 586, 165, 582, -1000, 967, 13498, 8491, 763, -1000,
	-1000, -1000, 8491, -1000, 8491, 755, -1000, -1000, 939, 13010,
	6402, 751, 751, 751, 582, 960, 365, -1000, -1000, -1000,
	-1000, 3127, -1000, 576, -1000, 754, -1000, -1000, -1000, 13010,
	-52, 990, 2222, -1000, -1000, -1000, -1000, -1000, -23, 471,
	-23, 411, -1000, 402, 3675, -1000, -1000, -1000, -1000, 932,
	-1000, 4771, -1000, -1000, 753, -1000, -1000, -1000, 972, 702,
	-1000, 2222, -1000, -1000, 111, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, 9274, 9274, 9274, 9274, 9274, 453, 462,
	365, 9274, 9274, 915, -1000, 751, -1000, -1000, 109, 13010,
	13010, -1000, 13010, 960, -1000, 365, -1000, -1000, 365, 365,
	13010, 13254, -1000, -1000, 365, 751, 751, 13010, 13010, 13010,
	10549, -1000, 213, 13010, -1000, 574, -1000, 193, -1000, -167,
	196, -1000, 196, 602, 577, -1000, 751, 699, -1000, 251,
	13010, 969, 963, -1000, -1000, 477, 477, 477, 477, 35,
	-1000, -1000, 477, 477, 989, -1000, 751, -1000, 91, 133,
	-1000, -1000, -1000, 567, -1000, 11529, 13498, 552, 552, 552,
	184, 213, -1000, 484, 247, 449, -1000, 61, 13010, 347,
	914, -1000, 913, -1000, -1000, -1000, -1000, -1000, 46, 4771,
	3401, 537, 37, 8491, 8491, -1000, -1000, -1000, -1000, 453,
	53, -191, -1000, -1000, 13498, 695, 453, 13010, -1000, 640,
	453, -1000, -1000, -1000, -1000, -1000, -1000, 375, -1000, -1000,
	13254, -1000, -1000, 448, -1000, -1000, 514, -1000, 13010, -1000,
	-1000, 803, -1000, 848, 365, 680, -1000, 883, -165, -194,
	679, -1000, -1000, -1000, -1000, -1000, 752, -1000, -1000, 46,
	897, -169, 656, -1000, 955, 952, 8491, -1000, 869, -1000,
	13010, -1000, 42, -1000, 848, -1000, 8491, 365, -179, 509,
	40, -1000, 365, -192, 810, 751, -195, 765, -1000, 980,
	8752, -1000, -1000, 988, 179, 179, 477, 453, -1000, -1000,
	-1000, 77, 428, -1000, -1000, -1000, -1000, -1000, -1000,
}
var yyPgo = [...]int{

	0, 1221, 61, 178, 1219, 1218, 1215, 118, 1213, 1212,
	1211, 1209, 1206, 1201, 1200, 1199, 1198, 1196, 1195, 1194,
	1193, 1191, 1189, 1188, 1185, 1184, 1181, 1174, 1173, 159,
	1172, 1169, 1168, 71, 1167, 73, 1165, 1164, 50, 873,
	47, 49, 56, 1163, 38, 21, 51, 1161, 1160, 1155,
	23, 1153, 26, 1152, 1151, 74, 1146, 1144, 63, 1143,
	1140, 1370, 1138, 87, 1137, 10, 46, 1134, 1132, 1129,
	1128, 77, 1399, 1126, 1124, 16, 1123, 1120, 95, 1118,
	66, 9, 15, 14, 29, 1117, 180, 7, 1116, 60,
	1113, 1111, 1110, 1108, 36, 1107, 67, 1106, 22, 58,
	1104, 1103, 4, 1102, 11, 70, 35, 28, 8, 75,
	79, 1100, 34, 69, 57, 1098, 1097, 206, 1093, 1091,
	53, 1090, 1088, 30, 176, 183, 1087, 1086, 1085, 1083,
	65, 0, 684, 27, 72, 1082, 1081, 1080, 1713, 48,
	17, 19, 25, 52, 1660, 44, 1079, 1078, 45, 1076,
	1075, 1074, 1073, 1072, 1071, 1070, 32, 1069, 1068, 1061,
	113, 20, 1059, 1058, 64, 42, 1057, 1050, 1043, 54,
	68, 1037, 1036, 55, 43, 1031, 1029, 1028, 1027, 1026,
	41, 31, 1025, 18, 1024, 13, 1023, 1022, 39, 1019,
	3, 1018, 12, 1017, 5, 1016, 6, 59, 1, 1012,
	2, 1008, 1007, 518, 441, 76, 1002, 78,
}
var yyR1 = [...]int{

	0, 201, 202, 202, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 2, 2, 2, 2, 6, 6,
	8, 8, 7, 9, 3, 4, 5, 5, 10, 10,
	32, 32, 11, 12, 12, 12, 12, 205, 205, 55,
	55, 56, 56, 105, 105, 13, 13, 13, 13, 110,
	110, 114, 114, 114, 115, 115, 115, 115, 146, 146,
	14, 14, 14, 14, 14, 14, 14, 196, 196, 195,
	194, 194, 193, 193, 192, 20, 176, 178, 178, 177,
	177, 177, 177, 170, 149, 149, 149, 149, 152, 152,
	150, 150, 150, 150, 150, 150, 150, 150, 150, 151,
	151, 151, 151, 151, 153, 153, 153, 153, 153, 154,
	154, 154, 154, 154, 154, 154, 154, 154, 154, 154,
	154, 154, 154, 154, 155, 155, 155, 155, 155, 155,
	155, 155, 169, 169, 156, 156, 164, 164, 165, 165,
	165, 162, 162, 163, 163, 166, 166, 166, 158, 158,
	159, 159, 167, 167, 160, 160, 160, 161, 161, 161,
	168, 168, 168, 168, 168, 157, 157, 171, 171, 186,
	186, 185, 185, 185, 175, 175, 182, 182, 182, 182,
	182, 173, 173, 174, 174, 184, 184, 183, 172, 172,
	188, 188, 188, 188, 199, 200, 198, 198, 198, 198,
	198, 179, 179, 179, 180, 180, 180, 181, 181, 181,
	15, 15, 15, 15, 15, 15, 15, 15, 15, 15,
	15, 15, 15, 197, 197, 197, 197, 197, 197, 197,
	197, 197, 197, 197, 191, 189, 189, 190, 190, 16,
	21, 21, 17, 17, 17, 17, 17, 18, 18, 22,
	23, 23, 23, 23, 23, 23, 23, 23, 23, 23,
	23, 23, 23, 23, 23, 23, 23, 23, 23, 23,
	23, 23, 23, 23, 23, 23, 23, 23, 23, 23,
	23, 23, 121, 121, 119, 119, 122, 122, 120, 120,
	120, 123, 123, 123, 147, 147, 147, 24, 24, 26,
	26, 27, 28, 25, 25, 25, 25, 25, 25, 25,
	19, 206, 29, 30, 30, 31, 31, 31, 35, 35,
	35, 33, 33, 34, 34, 40, 40, 39, 39, 41,
	41, 41, 41, 135, 135, 135, 134, 134, 43, 43,
	44, 44, 45, 45, 46, 46, 46, 46, 46, 64,
	64, 49, 49, 48, 48, 50, 51, 51, 51, 104,
	104, 106, 106, 47, 47, 47, 47, 52, 52, 53,
	53, 54, 54, 142, 142, 141, 141, 141, 187, 187,
	140, 140, 57, 57, 57, 59, 58, 58, 58, 58,
	60, 60, 62, 62, 61, 61, 63, 65, 65, 65,
	65, 66, 66, 42, 42, 42, 42, 42, 42, 42,
	118, 118, 68, 68, 67, 67, 67, 67, 67, 67,
	67, 67, 67, 67, 67, 67, 67, 67, 79, 79,
	79, 79, 79, 79, 69, 69, 69, 69, 69, 69,
	69, 38, 38, 80, 80, 80, 86, 81, 81, 72,
	72, 72, 72, 72, 72, 72, 72, 72, 72, 72,
	72, 72, 72, 72, 72, 72, 72, 72, 72, 72,
	72, 72, 72, 72, 72, 72, 72, 72, 72, 72,
	72, 76, 76, 76, 74, 74, 74, 74, 74, 74,
	74, 74, 74, 74, 74, 74, 74, 75, 75, 75,
	75, 75, 75, 75, 75, 75, 75, 75, 75, 75,
	75, 75, 75, 207, 207, 78, 77, 77, 77, 77,
	77, 77, 36, 36, 36, 36, 36, 145, 145, 148,
	148, 148, 148, 148, 148, 148, 148, 148, 148, 148,
	148, 148, 90, 90, 37, 37, 88, 88, 89, 91,
	91, 87, 87, 87, 71, 71, 71, 71, 71, 71,
	71, 71, 73, 73, 73, 92, 92, 93, 93, 94,
	94, 95, 95, 96, 97, 97, 97, 98, 98, 98,
	98, 99, 99, 99, 100, 100, 101, 101, 102, 102,
	102, 70, 70, 70, 70, 70, 70, 103, 103, 103,
	103, 107, 107, 82, 82, 84, 84, 83, 85, 108,
	108, 112, 109, 109, 113, 113, 113, 113, 111, 111,
	111, 137, 137, 137, 116, 116, 124, 124, 125, 125,
	117, 117, 126, 126, 126, 126, 126, 126, 126, 126,
	126, 126, 127, 127, 127, 128, 128, 129, 129, 129,
	136, 136, 132, 132, 133, 133, 138, 138, 139, 139,
	130, 130, 130, 130, 130, 130, 130, 130, 130, 130,
	130, 130, 130, 130, 130, 130, 130, 130, 130, 130,
	130, 130, 130, 130, 130, 130, 130, 130, 130, 130,
	130, 130, 130, 130, 130, 130, 130, 130, 130, 130,
	130, 130, 130, 130, 130, 130, 130, 130, 130, 130,
	130, 130, 130, 130, 130, 130, 130, 130, 130, 130,
	130, 130, 130, 130, 130, 130, 130, 130, 130, 130,
	130, 130, 130, 130, 130, 130, 130, 130, 130, 130,
	130, 130, 130, 130, 130, 130, 130, 130, 130, 130,
	130, 130, 130, 130, 130, 130, 130, 131, 131, 131,
	131, 131, 131, 131, 131, 131, 131, 131, 131, 131,
	131, 131, 131, 131, 131, 131, 131, 131, 131, 131,
	131, 131, 131, 131, 131, 131, 131, 131, 131, 131,
	131, 131, 131, 131, 131, 131, 131, 131, 131, 131,
	131, 131, 131, 131, 131, 131, 131, 131, 131, 131,
	131, 131, 131, 131, 131, 131, 131, 131, 131, 131,
	131, 131, 131, 131, 131, 131, 131, 131, 131, 131,
	131, 131, 131, 131, 131, 131, 131, 131, 131, 131,
	131, 131, 131, 131, 131, 131, 131, 131, 131, 131,
	131, 131, 131, 131, 131, 131, 131, 131, 131, 131,
	131, 131, 131, 131, 131, 131, 131, 131, 131, 131,
	131, 131, 131, 131, 203, 204, 143, 144, 144, 144,
}
var yyR2 = [...]int{

	0, 2, 0, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 0, 4, 4, 6, 7, 0, 1,
	1, 3, 5, 5, 11, 3, 1, 3, 7, 8,
	1, 1, 9, 8, 7, 6, 6, 1, 1, 1,
	3, 1, 3, 0, 4, 3, 4, 5, 4, 1,
	3, 3, 2, 2, 2, 2, 2, 1, 1, 1,
	2, 2, 8, 4, 6, 5, 5, 0, 2, 1,
	0, 2, 1, 3, 3, 4, 4, 2, 4, 1,
	3, 3, 3, 8, 3, 1, 1, 1, 2, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 2,
	2, 2, 2, 2, 1, 2, 2, 2, 1, 4,
	4, 2, 2, 3, 3, 3, 3, 1, 1, 1,
	1, 1, 6, 6, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 3, 0, 3, 0, 5, 0, 3,
	5, 0, 1, 0, 1, 0, 1, 2, 0, 2,
	0, 3, 0, 1, 0, 3, 3, 0, 2, 2,
	0, 2, 1, 2, 1, 0, 2, 5, 4, 1,
	2, 2, 3, 2, 0, 1, 2, 3, 3, 2,
	2, 1, 1, 0, 1, 1, 3, 2, 3, 1,
	10, 11, 11, 12, 3, 3, 1, 1, 2, 2,
	2, 0, 1, 3, 1, 2, 3, 1, 1, 1,
	6, 7, 7, 7, 7, 4, 5, 7, 5, 5,
	5, 12, 7, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 7, 1, 3, 8, 8, 3,
	3, 5, 4, 6, 5, 4, 4, 3, 2, 3,
	4, 4, 3, 4, 4, 4, 4, 4, 4, 3,
	3, 2, 3, 3, 2, 3, 4, 3, 7, 5,
	4, 2, 4, 2, 2, 2, 2, 3, 3, 5,
	2, 3, 1, 1, 0, 1, 1, 1, 0, 2,
	2, 0, 2, 2, 0, 1, 1, 2, 1, 1,
	2, 1, 1, 2, 2, 2, 2, 2, 3, 3,
	2, 0, 2, 0, 2, 1, 2, 2, 0, 1,
	1, 0, 1, 0, 1, 0, 1, 1, 3, 1,
	2, 3, 5, 0, 1, 2, 1, 1, 0, 2,
	1, 3, 1, 1, 1, 3, 1, 3, 6, 3,
	7, 0, 1, 1, 3, 3, 1, 4, 4, 1,
	3, 1, 3, 5, 4, 4, 3, 2, 4, 0,
	1, 0, 2, 0, 1, 0, 1, 2, 0, 1,
	1, 1, 1, 2, 2, 1, 2, 3, 2, 3,
	2, 2, 2, 1, 1, 3, 3, 0, 5, 5,
	5, 0, 2, 1, 3, 3, 2, 3, 1, 2,
	0, 3, 1, 1, 3, 3, 4, 4, 5, 3,
	3, 3, 3, 3, 4, 5, 6, 2, 1, 2,
	1, 2, 1, 2, 1, 1, 1, 1, 1, 1,
	1, 0, 2, 1, 1, 1, 3, 1, 3, 1,
	1, 1, 1, 1, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 2,
	2, 2, 2, 2, 2, 2, 3, 1, 1, 1,
	1, 4, 5, 6, 4, 4, 6, 6, 6, 8,
	8, 8, 8, 9, 7, 5, 4, 2, 2, 2,
	2, 2, 2, 2, 2, 2, 2, 2, 2, 2,
	2, 8, 8, 0, 2, 3, 4, 4, 4, 4,
	4, 4, 0, 3, 4, 7, 3, 1, 1, 2,
	3, 3, 1, 2, 2, 1, 2, 1, 2, 2,
	1, 2, 0, 1, 0, 2, 1, 2, 4, 0,
	2, 1, 3, 5, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 2, 2, 0, 3, 0, 2, 0,
	3, 1, 3, 2, 0, 1, 1, 0, 2, 4,
	4, 0, 2, 4, 0, 2, 1, 3, 2, 3,
	2, 2, 1, 3, 5, 4, 6, 1, 3, 3,
	5, 0, 5, 1, 3, 1, 2, 3, 1, 1,
	3, 3, 1, 3, 3, 3, 3, 3, 1, 2,
	1, 1, 1, 1, 1, 1, 0, 2, 0, 3,
	0, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 0, 1, 1, 1, 1, 0, 1, 1,
	0, 2, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 0, 0, 1, 1,
}
var yyChk = [...]int{

	-1000, -201, -1, -2, -9, -10, -11, -12, -13, -14,
	-15, -16, -17, -18, -22, -23, -24, -26, -27, -28,
	-25, -19, -3, 275, -4, 6, 7, -32, 9, 10,
	34, -20, 124, 125, 127, 126, 159, 128, 152, 55,
	172, 173, 175, 176, 29, 153, 154, 157, 158, 35,
	36, 130, -203, 8, 262, 59, -202, 279, -94, 15,
	-8, -7, -140, -138, 64, 62, -131, 23, 272, 145,
	172, 183, 177, 204, 196, 273, 146, 194, 197, 241,
	224, 236, 71, 175, 250, 22, 155, 192, 188, 21,
	186, 31, 238, 209, 277, 187, 237, 130, 148, 143,
	210, 214, 242, 181, 182, 244, 208, 144, 37, 274,
	39, 163, 245, 212, 207, 203, 206, 180, 202, 43,
	216, 215, 217, 240, 199, 149, 189, 18, 248, 158,
	161, 239, 211, 213, 140, 165, 276, 246, 185, 150,
	162, 157, 249, 151, 176, 226, 243, 252, 42, 221,
	179, 142, 173, 169, 227, 200, 164, 190, 191, 205,
	178, 201, 174, 159, 251, 222, 278, 198, 195, 170,
	135, 167, 168, 228, 229, 230, 231, 232, 233, 171,
	20, 247, 193, 223, -31, 5, -29, -206, -29, -29,
	-29, -29, -29, -176, -178, 59, 95, -129, 135, 77,
	254, 131, 132, 139, -132, 62, -131, -117, 135, 231,
	137, 132, 132, 134, 135, 254, 131, 132, -61, -138,
	132, 117, 197, 241, 124, 225, 226, 238, 134, 37,
	239, 165, -147, 132, -119, 224, 228, 229, 230, 233,
	231, 171, 62, 243, 242, 234, -138, 174, -143, -143,
	-143, -143, -143, 227, 227, -143, -2, -98, 17, 16,
	-6, 60, 26, -5, -3, -203, 6, 24, 25, -35,
	44, 45, -30, -41, 105, -42, -138, -67, 79, -72,
	33, 62, -131, 27, -71, -68, -87, -85, -86, 117,
	118, 119, 103, 104, 111, 80, 120, -76, -74, -75,
	-77, 64, 63, 72, 65, 66, 67, 68, 73, 74,
	75, -132, -83, -203, 49, 50, 263, 264, 265, 266,
	271, 267, 82, 38, 253, 261, 260, 259, 257, 258,
	255, 256, 269, 270, 138, 254, 109, 262, -117, -117,
	11, -55, -56, -61, -63, -138, -109, -146, 174, -113,
	243, 242, -133, -111, -132, -130, 241, 197, 240, 129,
	78, 26, 28, 219, 81, 117, 16, 82, 116, 263,
	124, 53, 255, 256, 253, 265, 266, 254, 225, 33,
	10, 29, 153, 25, 107, 126, 85, 86, 156, 27,
	154, 75, 19, 56, 11, 13, 14, 138, 137, 97,
	134, 51, 8, 120, 30, 94, 46, 32, 49, 95,
	17, 257, 258, 35, 271, 160, 109, 54, 40, 79,
	73, 76, 57, 77, 15, 52, 96, 127, 262, 50,
	131, 6, 268, 34, 152, 47, 132, 84, 269, 270,
	136, 166, 74, 5, 139, 36, 9, 55, 58, 259,
	260, 261, 38, 83, 12, 275, -177, 95, -170, 62,
	-61, 134, -61, 262, -125, 138, -125, -125, 132, -61,
	124, 126, 129, 57, -21, -61, -124, 138, 62, -124,
	-124, -124, -61, 121, -61, 62, 34, -144, -203, -133,
	254, 62, 165, 132, 166, 135, -144, -144, -144, -144,
	-144, 169, 170, -144, -122, -121, 236, 237, 227, 235,
	12, 227, 168, -144, -143, -143, -204, 61, -99, 19,
	35, -42, -138, -95, -96, -42, -2, -7, -203, -94,
	-2, -29, 40, -33, 25, 70, 11, -135, 78, 77,
	94, -134, 26, -132, 64, 121, -42, -69, 97, 79,
	95, 111, 113, 112, 114, 96, 81, 100, 99, 110,
	103, 104, 105, 106, 107, 108, 109, 101, 102, 116,
	87, 88, 89, 90, 91, 92, 93, -118, -203, -86,
	-203, 122, 123, -72, -72, -72, -72, -72, -72, -72,
	-72, -203, -2, -81, -42, -203, -203, -203, -203, -203,
	-203, -203, -203, -203, -90, -42, -203, -207, -78, -203,
	-207, -78, -207, -78, -207, -203, -207, -78, -207, -78,
	-207, -207, -78, -203, -203, -203, -203, -203, -203, -62,
	30, -61, -44, -45, -46, -47, -64, -86, -203, 62,
	-61, -61, -55, -205, 60, 11, 58, -205, 60, 121,
	60, -109, 174, -110, -114, 244, 246, 87, -137, -132,
	64, 33, 34, 61, 60, -61, -149, -152, -154, -153,
	-155, -150, -151, 194, 195, 117, 198, 200, 201, 202,
	203, 204, 205, 206, 207, 208, 209, 34, 155, 190,
	191, 192, 193, 210, 211, 212, 213, 214, 215, 216,
	217, 177, 196, 273, 178, 179, 180, 181, 182, 183,
	185, 186, 187, 188, 189, 62, -144, 135, 62, 79,
	62, -61, -61, -144, 167, 167, 132, 132, -61, 60,
	136, -55, 27, 57, -61, 62, 62, -139, -138, -130,
	-144, -144, -144, -144, -144, -61, -144, -144, -144, -144,
	11, -120, 11, 97, -42, 57, 9, 97, 60, 18,
	121, 60, -97, 28, 29, -2, -98, -204, -35, -73,
	-132, 65, 68, -34, 47, -61, -42, -42, -79, 73,
	79, 74, 75, -134, 105, -139, -133, -130, -72, -80,
	-83, -86, 69, 97, 95, 96, 81, -72, -72, -72,
	-72, -72, -72, -72, -72, -72, -72, -72, -72, -72,
	-72, -72, -72, -72, -72, -72, -145, 62, 64, 62,
	-71, -71, -132, -40, 25, -39, -41, -204, 60, -204,
	-2, -39, -39, -42, -42, -87, 64, -39, -87, 64,
	-39, -39, -33, -88, -89, 83, -87, -132, -138, -204,
	-72, -132, -132, -39, -40, -39, -39, -105, 161, -61,
	34, 60, -187, -59, -58, -60, 48, 47, 49, 50,
	54, -142, 26, -44, -203, -203, -141, 161, -140, 26,
	-105, 58, -44, -61, -44, -63, -138, 105, -113, -110,
	60, 245, 247, 248, 57, 76, -42, -161, 116, -179,
	-180, -181, -133, 64, 65, -170, -171, -172, -182, 147,
	-188, 140, 142, 139, -173, 148, 134, 32, 61, -166,
	73, 79, -162, 222, -156, 59, -156, -156, -156, -156,
	-160, 197, -160, -160, -160, 59, 59, -156, -156, -156,
	-164, 59, -164, -164, -165, 59, -165, -136, 58, -61,
	-144, 27, -144, -126, 129, 126, 127, -191, 125, 219,
	197, 71, 33, 15, 263, 161, 278, 62, 162, -132,
	-132, -61, -61, 129, 126, -61, -61, -61, -144, -61,
	-123, 95, 12, -138, -138, -61, 42, -42, -42, -139,
	-96, -204, -99, -116, 19, 11, 38, 38, -39, 73,
	74, 75, 121, -203, -80, -72, -72, -72, -38, 156,
	78, -204, -204, -39, 60, -42, -204, -204, -204, 60,
	58, 26, 11, 11, -204, 11, 11, -204, -204, -39,
	-91, -89, 85, -42, -204, 121, -204, 60, 60, -204,
	-204, -204, -204, -70, 34, 38, -2, -203, -203, -108,
	-112, -87, -45, -57, 46, 51, 53, -46, -45, -46,
	46, 52, 46, 52, 46, -58, -138, -204, -49, -48,
	-50, -132, -65, 55, 137, 56, -203, -140, -66, 12,
	-44, -66, -66, 121, -114, -115, 249, 246, 252, 62,
	64, 60, -181, 87, 59, 62, 32, -173, -173, -174,
	62, -174, 32, -158, 33, 73, -163, 223, 65, -160,
	-160, -161, 34, -161, -161, -161, -169, 64, -169, 65,
	65, 57, -132, -144, -143, -197, 141, 147, 148, 143,
	62, 134, 32, 140, 142, 161, 139, -197, -127, -128,
	136, 26, 134, 32, 161, -196, 58, 167, 167, 136,
	-144, -120, 64, -42, 43, 121, -61, -43, 11, 105,
	-133, -40, -38, 78, -72, -72, -204, -41, -148, 117,
	194, 155, 192, 188, 208, 199, 221, 190, 222, -145,
	-148, -72, -72, -72, -72, 272, -94, 86, -42, 84,
	-133, -72, -72, -107, 57, -108, -82, -84, -83, -203,
	-2, -103, -132, -106, -132, -66, 60, 87, -46, 46,
	46, -54, 57, -52, 57, 58, 46, 46, -204, 60,
	98, 134, 134, 134, -106, -94, -42, -66, 246, 250,
	251, -180, -181, -184, -183, -132, -188, -174, -174, 59,
	-159, 57, -72, 61, -161, -161, 62, 117, 61, 60,
	61, 60, 61, 60, -61, -143, -143, -61, -143, -132,
	-194, 275, -195, 62, -132, -132, -61, -123, -66, -44,
	-204, -72, -204, -156, -156, -156, -165, -156, 182, -156,
	182, -204, -204, 19, 19, 19, 19, -203, -37, 268,
	-42, 60, 60, 31, -107, 60, -204, -204, -204, 60,
	121, -204, 60, -94, -112, -42, -53, -52, -42, -42,
	59, -142, -50, -51, -42, 132, 133, -203, -203, -203,
	-204, -98, 61, 60, -156, -104, -132, -167, 219, 9,
	-160, 64, -160, 65, 65, -144, 30, -193, -192, -133,
	59, -92, 13, -160, 62, -72, -72, -72, -72, -72,
	-204, 64, -72, -72, 32, -84, 38, -2, -203, -132,
	-132, -132, -98, -104, -138, -203, -203, -104, -104, -104,
	-141, -186, -185, 58, 144, 71, -183, 61, 60, -168,
	140, 32, 139, -75, -161, -161, 61, 61, -203, 60,
	87, -104, -93, 14, 16, -204, -204, -204, -204, -36,
	97, 275, -204, -204, 9, -82, -2, 121, 61, -45,
	-87, -204, -204, -204, -65, -185, 62, -175, 87, 64,
	150, -132, -157, 71, 32, 32, -189, -190, 161, -192,
	-181, 61, -100, 166, -42, -81, -204, 273, 54, 276,
	-108, -204, -132, -204, -204, 65, -61, 64, -204, 60,
	-132, -196, -101, -102, 57, 23, 22, 43, 274, 277,
	59, -190, 38, -194, 60, 20, 21, -42, 43, -104,
	163, -102, -42, 275, 61, 164, 276, -199, -200, 57,
	-203, 277, -200, 57, 10, 9, -72, 160, -198, 151,
	146, 149, 34, -198, -204, -204, 145, 33, 73,
}
var yyDef = [...]int{

	23, -2, 2, 4, 5, 6, 7, 8, 9, 10,
	11, 12, 13, 14, 15, 16, 17, 18, 19, 20,
	21, 22, 579, 0, 0, 321, 321, 321, 321, 321,
	321, 0, 657, 640, 0, 0, 0, 0, -2, 308,
	309, 0, 311, 312, 886, 886, 886, 886, 886, 0,
	0, 886, 0, 40, 41, 884, 1, 3, 587, 0,
	28, 30, 0, 390, 391, 666, 667, 767, 768, 769,
	770, 771, 772, 773, 774, 775, 776, 777, 778, 779,
	780, 781, 782, 783, 784, 785, 786, 787, 788, 789,
	790, 791, 792, 793, 794, 795, 796, 797, 798, 799,
	800, 801, 802, 803, 804, 805, 806, 807, 808, 809,
	810, 811, 812, 813, 814, 815, 816, 817, 818, 819,
	820, 821, 822, 823, 824, 825, 826, 827, 828, 829,
	830, 831, 832, 833, 834, 835, 836, 837, 838, 839,
	840, 841, 842, 843, 844, 845, 846, 847, 848, 849,
	850, 851, 852, 853, 854, 855, 856, 857, 858, 859,
	860, 861, 862, 863, 864, 865, 866, 867, 868, 869,
	870, 871, 872, 873, 874, 875, 876, 877, 878, 879,
	880, 881, 882, 883, 0, 325, 328, 323, 0, 640,
	640, 0, 0, 70, 71, 0, 0, 0, 870, 0,
	638, 638, 638, 658, 659, 662, 663, 0, 0, 0,
	641, 0, 636, 0, 636, 636, 636, 0, 258, 404,
	0, 0, 0, 887, 0, 887, 887, 271, 887, 887,
	274, 887, 0, 887, 0, 281, 283, 284, 285, 286,
	0, 290, 887, 305, 306, 295, 307, 310, 313, 314,
	315, 316, 317, 886, 886, 320, 0, 591, 0, 0,
	0, 29, 0, 579, 36, 0, 321, 326, 327, 331,
	329, 330, 322, 0, 339, 343, 0, 413, 0, 418,
	420, -2, -2, 0, 459, 460, 461, 462, 463, 0,
	0, 0, 0, 0, 0, 0, 0, 487, 488, 489,
	490, 564, 565, 566, 567, 568, 569, 570, 571, 422,
	423, 561, 618, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 552, 0, 523, 523, 523, 523, 523, 523,
	523, 523, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 49, 51, 404, 55, 0, 862, 622,
	-2, -2, 0, 0, 664, 665, -2, 778, -2, 670,
	671, 672, 673, 674, 675, 676, 677, 678, 679, 680,
	681, 682, 683, 684, 685, 686, 687, 688, 689, 690,
	691, 692, 693, 694, 695, 696, 697, 698, 699, 700,
	701, 702, 703, 704, 705, 706, 707, 708, 709, 710,
	711, 712, 713, 714, 715, 716, 717, 718, 719, 720,
	721, 722, 723, 724, 725, 726, 727, 728, 729, 730,
	731, 732, 733, 734, 735, 736, 737, 738, 739, 740,
	741, 742, 743, 744, 745, 746, 747, 748, 749, 750,
	751, 752, 753, 754, 755, 756, 757, 758, 759, 760,
	761, 762, 763, 764, 765, 766, 0, 0, 89, 0,
	87, 0, 887, 0, 0, 0, 0, 0, 0, 887,
	0, 0, 0, 0, 249, 0, 0, 0, 0, 0,
	0, 0, 257, 0, 259, 887, 887, 262, 888, 889,
	887, 887, 887, 0, 887, 887, 269, 270, 272, 273,
	275, 887, 887, 277, 0, 298, 296, 297, 292, 293,
	0, 287, 288, 291, 318, 319, 35, 885, 24, 0,
	0, 588, 0, 580, 581, 584, 25, 31, 0, 587,
	0, 328, 0, 333, 332, 324, 0, 340, 0, 0,
	0, 344, 0, 346, 347, 0, 416, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	444, 445, 446, 447, 448, 449, 450, 419, 0, 437,
	0, 0, 0, 479, 480, 481, 482, 483, 484, 485,
	0, 335, 0, 0, 457, 0, 0, 0, 0, 0,
	0, 0, 0, 331, 0, 553, 0, 507, 515, 0,
	508, 516, 509, 517, 510, 0, 511, 518, 512, 519,
	513, 514, 520, 0, 0, 0, 335, 0, 0, 53,
	0, 403, 0, -2, 352, 353, 354, -2, 0, 666,
	385, -2, 0, 0, 0, 47, 48, 0, 0, 0,
	0, 56, 862, 58, 59, 0, 0, 0, 167, 631,
	632, 633, 629, 211, 0, 0, 155, 151, 95, 96,
	97, 144, 99, 144, 144, 144, 144, 164, 164, 164,
	164, 127, 128, 129, 130, 131, 0, 0, 114, 144,
	144, 144, 118, 134, 135, 136, 137, 138, 139, 140,
	141, 100, 101, 102, 103, 104, 105, 106, 107, 108,
	146, 146, 146, 148, 148, 660, 73, 0, 887, 0,
	887, 85, 0, 225, 0, 0, 0, 0, 0, 0,
	0, 252, 637, 0, 887, 255, 256, 405, 668, 669,
	260, 261, 263, 264, 265, 266, 267, 268, 276, 280,
	0, 301, 0, 0, 282, 0, 592, 0, 0, 0,
	0, 0, 583, 585, 586, 0, 591, 37, 331, 0,
	572, 0, 0, 0, 334, 33, 414, 415, 417, 438,
	0, 440, 442, 345, 341, 0, 562, -2, 424, 425,
	453, 454, 455, 0, 0, 0, 0, 451, 429, 430,
	431, 432, 433, 0, 464, 465, 466, 467, 468, 469,
	470, 471, 472, 473, 474, 475, 478, 537, 538, 0,
	476, 477, 486, 0, 0, 336, 337, 456, 0, 617,
	0, 0, 0, 0, 0, 461, 564, 0, 461, 564,
	0, 0, 0, 559, 556, 0, 0, 561, 0, 524,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 402,
	0, 0, 0, 0, 0, 0, 389, 395, 0, 0,
	0, 0, 384, 0, 0, 361, 407, 830, 386, 0,
	411, 0, 411, 50, 411, 52, 0, 406, 623, 57,
	0, 0, 62, 63, 624, 625, 626, 627, 0, 86,
	212, 214, 217, 218, 219, 90, 91, 92, 0, 0,
	199, 0, 0, 193, 193, 0, 191, 192, 88, 158,
	156, 0, 153, 152, 98, 0, 164, 164, 121, 122,
	167, 0, 167, 167, 167, 0, 0, 115, 116, 117,
	109, 0, 110, 111, 112, 0, 113, 0, 0, 887,
	75, 639, 76, 886, 0, 0, 652, 226, 642, 643,
	644, 645, 646, 647, 648, 649, 650, 651, 0, 77,
	228, 230, 229, 0, 0, 0, 250, 887, 254, 298,
	279, 0, 0, 299, 300, 289, 0, 589, 590, 0,
	582, 32, 26, 0, 634, 635, 573, 574, 348, 439,
	441, 443, 0, 335, 426, 451, 434, 0, 427, 0,
	0, 421, 491, 0, 0, 458, -2, 494, 495, 0,
	0, 0, 0, 0, 530, 0, 0, 531, 0, 579,
	0, 557, 0, 0, 506, 0, 525, 0, 0, 526,
	527, 528, 529, 611, 0, 0, 602, 0, 0, 411,
	619, 0, -2, 0, 392, 0, 0, 381, 388, 376,
	396, 0, 398, 0, 400, 401, 355, 357, 0, 362,
	363, 0, 359, 0, 0, 0, 0, 387, 579, 0,
	411, 45, 46, 0, 60, 61, 0, 0, 67, 168,
	169, 0, 215, 0, 0, 0, 186, 193, 193, 189,
	194, 190, 0, 160, 0, 157, 94, 154, 0, 167,
	167, 123, 0, 124, 125, 126, 0, 142, 0, 0,
	0, 0, 661, 74, 220, 886, 233, 234, 235, 236,
	237, 238, 239, 240, 241, 242, 243, 886, 0, 886,
	653, 654, 655, 656, 0, 80, 0, 0, 0, 0,
	253, 301, 302, 303, 593, 0, 27, 411, 0, 342,
	563, 0, 428, 0, 452, 435, 492, 338, 0, 144,
	144, 542, 144, 148, 545, 144, 547, 144, 550, 0,
	0, 0, 0, 0, 0, 0, 554, 505, 560, 0,
	562, 0, 0, 38, 0, 611, 601, 613, 615, 0,
	0, 0, 607, 0, 371, 579, 0, 0, 379, 393,
	394, 374, 0, 375, 0, 0, 397, 399, 383, 0,
	0, 0, 0, 0, 0, 587, 412, 44, 64, 65,
	66, 213, 216, 0, 195, 144, 198, 187, 188, 0,
	162, 0, 159, 145, 119, 120, 165, 166, 164, 0,
	164, 0, 149, 0, 887, 221, 222, 223, 224, 0,
	227, 0, 78, 79, 0, 232, 251, 278, 575, 349,
	493, 436, 496, 539, 164, 543, 544, 546, 548, 549,
	551, 498, 497, 0, 0, 0, 0, 0, 0, 0,
	558, 0, 0, 0, 39, 0, 616, -2, 0, 0,
	0, 54, 0, 587, 620, 621, 373, 380, 382, 377,
	0, 0, 364, 365, 366, 0, 0, 0, 0, 0,
	385, 43, 178, 0, 197, 0, 369, 170, 163, 0,
	167, 143, 167, 0, 0, 72, 0, 81, 82, 0,
	0, 577, 0, 540, 541, 0, 0, 0, 0, 532,
	504, 555, 0, 0, 0, 614, 0, 605, 0, 609,
	608, 372, 42, 0, 358, 0, 0, 0, 0, 0,
	407, 177, 179, 0, 184, 0, 196, 0, 0, 175,
	0, 172, 174, 161, 132, 133, 147, 150, 0, 0,
	0, 0, 594, 0, 0, 499, 501, 500, 502, 0,
	0, 0, 521, 522, 0, 604, 0, 0, 378, 388,
	0, 408, 409, 410, 360, 180, 181, 0, 185, 183,
	0, 370, 93, 0, 171, 173, 0, 245, 0, 83,
	84, 77, 34, 0, 578, 576, 503, 0, 0, 0,
	612, -2, 610, 367, 368, 182, 0, 176, 244, 0,
	0, 80, 595, 596, 0, 0, 0, 533, 0, 536,
	0, 246, 0, 231, 0, 598, 0, 600, 534, 0,
	0, 597, 599, 0, 200, 0, 0, 201, 202, 0,
	0, 535, 203, 0, 0, 0, 0, 0, 204, 206,
	207, 0, 0, 205, 247, 248, 208, 209, 210,
}
var yyTok1 = [...]int{

	1, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 80, 3, 3, 3, 108, 100, 3,
	59, 61, 105, 103, 60, 104, 121, 106, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 279,
	88, 87, 89, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 110, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 99, 3, 111,
}
var yyTok2 = [...]int{

	2, 3, 4, 5, 6, 7, 8, 9, 10, 11,
	12, 13, 14, 15, 16, 17, 18, 19, 20, 21,
	22, 23, 24, 25, 26, 27, 28, 29, 30, 31,
	32, 33, 34, 35, 36, 37, 38, 39, 40, 41,
	42, 43, 44, 45, 46, 47, 48, 49, 50, 51,
	52, 53, 54, 55, 56, 57, 58, 62, 63, 64,
	65, 66, 67, 68, 69, 70, 71, 72, 73, 74,
	75, 76, 77, 78, 79, 81, 82, 83, 84, 85,
	86, 90, 91, 92, 93, 94, 95, 96, 97, 98,
	101, 102, 107, 109, 112, 113, 114, 115, 116, 117,
	118, 119, 120, 122, 123, 124, 125, 126, 127, 128,
	129, 130, 131, 132, 133, 134, 135, 136, 137, 138,
	139, 140, 141, 142, 143, 144, 145, 146, 147, 148,
	149, 150, 151, 152, 153, 154, 155, 156, 157, 158,
	159, 160, 161, 162, 163, 164, 165, 166, 167, 168,
	169, 170, 171, 172, 173, 174, 175, 176, 177, 178,
	179, 180, 181, 182, 183, 184, 185, 186, 187, 188,
	189, 190, 191, 192, 193, 194, 195, 196, 197, 198,
	199, 200, 201, 202, 203, 204, 205, 206, 207, 208,
	209, 210, 211, 212, 213, 214, 215, 216, 217, 218,
	219, 220, 221, 222, 223, 224, 225, 226, 227, 228,
	229, 230, 231, 232, 233, 234, 235, 236, 237, 238,
	239, 240, 241, 242, 243, 244, 245, 246, 247, 248,
	249, 250, 251, 252, 253, 254, 255, 256, 257, 258,
	259, 260, 261, 262, 263, 264, 265, 266, 267, 268,
	269, 270, 271, 272, 273, 274,
}
var yyTok3 = [...]int{
	57600, 275, 57601, 276, 57602, 277, 57603, 278, 0,
}

var yyErrorMessages = [...]struct {
	state int
	token int
	msg   string
}{}

//line yaccpar:1

/*	parser for yacc output	*/

var (
	yyDebug        = 0
	yyErrorVerbose = false
)

type yyLexer interface {
	Lex(lval *yySymType) int
	Error(s string)
}

type yyParser interface {
	Parse(yyLexer) int
	Lookahead() int
}

type yyParserImpl struct {
	lval  yySymType
	stack [yyInitialStackSize]yySymType
	char  int
}

func (p *yyParserImpl) Lookahead() int {
	return p.char
}

func yyNewParser() yyParser {
	return &yyParserImpl{}
}

const yyFlag = -1000

func yyTokname(c int) string {
	if c >= 1 && c-1 < len(yyToknames) {
		if yyToknames[c-1] != "" {
			return yyToknames[c-1]
		}
	}
	return __yyfmt__.Sprintf("tok-%v", c)
}

func yyStatname(s int) string {
	if s >= 0 && s < len(yyStatenames) {
		if yyStatenames[s] != "" {
			return yyStatenames[s]
		}
	}
	return __yyfmt__.Sprintf("state-%v", s)
}

func yyErrorMessage(state, lookAhead int) string {
	const TOKSTART = 4

	if !yyErrorVerbose {
		return "syntax error"
	}

	for _, e := range yyErrorMessages {
		if e.state == state && e.token == lookAhead {
			return "syntax error: " + e.msg
		}
	}

	res := "syntax error: unexpected " + yyTokname(lookAhead)

	// To match Bison, suggest at most four expected tokens.
	expected := make([]int, 0, 4)

	// Look for shiftable tokens.
	base := yyPact[state]
	for tok := TOKSTART; tok-1 < len(yyToknames); tok++ {
		if n := base + tok; n >= 0 && n < yyLast && yyChk[yyAct[n]] == tok {
			if len(expected) == cap(expected) {
				return res
			}
			expected = append(expected, tok)
		}
	}

	if yyDef[state] == -2 {
		i := 0
		for yyExca[i] != -1 || yyExca[i+1] != state {
			i += 2
		}

		// Look for tokens that we accept or reduce.
		for i += 2; yyExca[i] >= 0; i += 2 {
			tok := yyExca[i]
			if tok < TOKSTART || yyExca[i+1] == 0 {
				continue
			}
			if len(expected) == cap(expected) {
				return res
			}
			expected = append(expected, tok)
		}

		// If the default action is to accept or reduce, give up.
		if yyExca[i+1] != 0 {
			return res
		}
	}

	for i, tok := range expected {
		if i == 0 {
			res += ", expecting "
		} else {
			res += " or "
		}
		res += yyTokname(tok)
	}
	return res
}

func yylex1(lex yyLexer, lval *yySymType) (char, token int) {
	token = 0
	char = lex.Lex(lval)
	if char <= 0 {
		token = yyTok1[0]
		goto out
	}
	if char < len(yyTok1) {
		token = yyTok1[char]
		goto out
	}
	if char >= yyPrivate {
		if char < yyPrivate+len(yyTok2) {
			token = yyTok2[char-yyPrivate]
			goto out
		}
	}
	for i := 0; i < len(yyTok3); i += 2 {
		token = yyTok3[i+0]
		if token == char {
			token = yyTok3[i+1]
			goto out
		}
	}

out:
	if token == 0 {
		token = yyTok2[1] /* unknown char */
	}
	if yyDebug >= 3 {
		__yyfmt__.Printf("lex %s(%d)\n", yyTokname(token), uint(char))
	}
	return char, token
}

func yyParse(yylex yyLexer) int {
	return yyNewParser().Parse(yylex)
}

func (yyrcvr *yyParserImpl) Parse(yylex yyLexer) int {
	var yyn int
	var yyVAL yySymType
	var yyDollar []yySymType
	_ = yyDollar // silence set and not used
	yyS := yyrcvr.stack[:]

	Nerrs := 0   /* number of errors */
	Errflag := 0 /* error recovery flag */
	yystate := 0
	yyrcvr.char = -1
	yytoken := -1 // yyrcvr.char translated into internal numbering
	defer func() {
		// Make sure we report no lookahead when not parsing.
		yystate = -1
		yyrcvr.char = -1
		yytoken = -1
	}()
	yyp := -1
	goto yystack

ret0:
	return 0

ret1:
	return 1

yystack:
	/* put a state and value onto the stack */
	if yyDebug >= 4 {
		__yyfmt__.Printf("char %v in %v\n", yyTokname(yytoken), yyStatname(yystate))
	}

	yyp++
	if yyp >= len(yyS) {
		nyys := make([]yySymType, len(yyS)*2)
		copy(nyys, yyS)
		yyS = nyys
	}
	yyS[yyp] = yyVAL
	yyS[yyp].yys = yystate

yynewstate:
	yyn = yyPact[yystate]
	if yyn <= yyFlag {
		goto yydefault /* simple state */
	}
	if yyrcvr.char < 0 {
		yyrcvr.char, yytoken = yylex1(yylex, &yyrcvr.lval)
	}
	yyn += yytoken
	if yyn < 0 || yyn >= yyLast {
		goto yydefault
	}
	yyn = yyAct[yyn]
	if yyChk[yyn] == yytoken { /* valid shift */
		yyrcvr.char = -1
		yytoken = -1
		yyVAL = yyrcvr.lval
		yystate = yyn
		if Errflag > 0 {
			Errflag--
		}
		goto yystack
	}

yydefault:
	/* default state action */
	yyn = yyDef[yystate]
	if yyn == -2 {
		if yyrcvr.char < 0 {
			yyrcvr.char, yytoken = yylex1(yylex, &yyrcvr.lval)
		}

		/* look through exception table */
		xi := 0
		for {
			if yyExca[xi+0] == -1 && yyExca[xi+1] == yystate {
				break
			}
			xi += 2
		}
		for xi += 2; ; xi += 2 {
			yyn = yyExca[xi+0]
			if yyn < 0 || yyn == yytoken {
				break
			}
		}
		yyn = yyExca[xi+1]
		if yyn < 0 {
			goto ret0
		}
	}
	if yyn == 0 {
		/* error ... attempt to resume parsing */
		switch Errflag {
		case 0: /* brand new error */
			yylex.Error(yyErrorMessage(yystate, yytoken))
			Nerrs++
			if yyDebug >= 1 {
				__yyfmt__.Printf("%s", yyStatname(yystate))
				__yyfmt__.Printf(" saw %s\n", yyTokname(yytoken))
			}
			fallthrough

		case 1, 2: /* incompletely recovered error ... try again */
			Errflag = 3

			/* find a state where "error" is a legal shift action */
			for yyp >= 0 {
				yyn = yyPact[yyS[yyp].yys] + yyErrCode
				if yyn >= 0 && yyn < yyLast {
					yystate = yyAct[yyn] /* simulate a shift of "error" */
					if yyChk[yystate] == yyErrCode {
						goto yystack
					}
				}

				/* the current p has no shift on "error", pop stack */
				if yyDebug >= 2 {
					__yyfmt__.Printf("error recovery pops state %d\n", yyS[yyp].yys)
				}
				yyp--
			}
			/* there is no state on the stack with an error shift ... abort */
			goto ret1

		case 3: /* no shift yet; clobber input char */
			if yyDebug >= 2 {
				__yyfmt__.Printf("error recovery discards %s\n", yyTokname(yytoken))
			}
			if yytoken == yyEofCode {
				goto ret1
			}
			yyrcvr.char = -1
			yytoken = -1
			goto yynewstate /* try again in the same state */
		}
	}

	/* reduction by production yyn */
	if yyDebug >= 2 {
		__yyfmt__.Printf("reduce %v in:\n\t%v\n", yyn, yyStatname(yystate))
	}

	yynt := yyn
	yypt := yyp
	_ = yypt // guard against "declared and not used"

	yyp -= yyR2[yyn]
	// yyp is now the index of $0. Perform the default action. Iff the
	// reduced production is ε, $1 is possibly out of range.
	if yyp+1 >= len(yyS) {
		nyys := make([]yySymType, len(yyS)*2)
		copy(nyys, yyS)
		yyS = nyys
	}
	yyVAL = yyS[yyp+1]

	/* consult goto table to find next state */
	yyn = yyR1[yyn]
	yyg := yyPgo[yyn]
	yyj := yyg + yyS[yyp].yys + 1

	if yyj >= yyLast {
		yystate = yyAct[yyg]
	} else {
		yystate = yyAct[yyj]
		if yyChk[yystate] != -yyn {
			yystate = yyAct[yyg]
		}
	}
	// dummy call; replaced with literal code
	switch yynt {

	case 1:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:340
		{
			setParseTree(yylex, yyDollar[1].statement)
		}
	case 2:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:345
		{
		}
	case 3:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:346
		{
		}
	case 4:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:350
		{
			yyVAL.statement = yyDollar[1].selStmt
		}
	case 23:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:372
		{
			setParseTree(yylex, nil)
		}
	case 24:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:378
		{
			sel := yyDollar[1].selStmt.(*Select)
			sel.OrderBy = yyDollar[2].orderBy
			sel.Limit = yyDollar[3].limit
			sel.Lock = yyDollar[4].str
			yyVAL.selStmt = sel
		}
	case 25:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:386
		{
			yyVAL.selStmt = &With{CommonTableExpressions: yyDollar[2].commonTableExpressions, Select: yyDollar[4].selStmt}
		}
	case 26:
		yyDollar = yyS[yypt-6 : yypt+1]
//line sql.y:390
		{
			yyVAL.selStmt = &Union{Type: yyDollar[2].str, Left: yyDollar[1].selStmt, Right: yyDollar[3].selStmt, OrderBy: yyDollar[4].orderBy, Limit: yyDollar[5].limit, Lock: yyDollar[6].str}
		}
	case 27:
		yyDollar = yyS[yypt-7 : yypt+1]
//line sql.y:394
		{
			yyVAL.selStmt = &Select{Comments: Comments(yyDollar[2].bytes2), Cache: yyDollar[3].str, SelectExprs: SelectExprs{Nextval{Expr: yyDollar[5].expr}}, From: TableExprs{&AliasedTableExpr{Expr: yyDollar[7].tableName}}}
		}
	case 28:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:399
		{
			yyVAL.bytes = nil
		}
	case 29:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:403
		{
			yyVAL.bytes = []byte(",")
		}
	case 30:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:410
		{
			yyVAL.commonTableExpressions = []*CommonTableExpression{yyDollar[1].commonTableExpression}
		}
	case 31:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:414
		{
			yyVAL.commonTableExpressions = append(yyDollar[1].commonTableExpressions, yyDollar[3].commonTableExpression)
		}
	case 32:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sql.y:420
		{
			yyVAL.commonTableExpression = &CommonTableExpression{Name: yyDollar[1].tableIdent, Select: yyDollar[4].selStmt}
		}
	case 33:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sql.y:427
		{
			yyVAL.statement = &Stream{Comments: Comments(yyDollar[2].bytes2), SelectExpr: yyDollar[3].selectExpr, Table: yyDollar[5].tableName}
		}
	case 34:
		yyDollar = yyS[yypt-11 : yypt+1]
//line sql.y:434
		{
			yyVAL.selStmt = &Select{Comments: Comments(yyDollar[2].bytes2), Cache: yyDollar[3].str, Distinct: yyDollar[4].str, Hints: yyDollar[5].str, SelectExprs: yyDollar[6].selectExprs, From: yyDollar[7].tableExprs, Where: NewWhere(WhereStr, yyDollar[8].expr), GroupBy: GroupBy(yyDollar[9].exprs), Having: NewWhere(HavingStr, yyDollar[10].expr), Trigger: yyDollar[11].triggers}
		}
	case 35:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:440
		{
			yyVAL.selStmt = &ParenSelect{Select: yyDollar[2].selStmt}
		}
	case 36:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:446
		{
			yyVAL.selStmt = yyDollar[1].selStmt
		}
	case 37:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:450
		{
			yyVAL.selStmt = &ParenSelect{Select: yyDollar[2].selStmt}
		}
	case 38:
		yyDollar = yyS[yypt-7 : yypt+1]
//line sql.y:457
		{
			// insert_data returns a *Insert pre-filled with Columns & Values
			ins := yyDollar[6].ins
			ins.Action = yyDollar[1].str
			ins.Comments = yyDollar[2].bytes2
			ins.Ignore = yyDollar[3].str
			ins.Table = yyDollar[4].tableName
			ins.Partitions = yyDollar[5].partitions
			ins.OnDup = OnDup(yyDollar[7].updateExprs)
			yyVAL.statement = ins
		}
	case 39:
		yyDollar = yyS[yypt-8 : yypt+1]
//line sql.y:469
		{
			cols := make(Columns, 0, len(yyDollar[7].updateExprs))
			vals := make(ValTuple, 0, len(yyDollar[8].updateExprs))
			for _, updateList := range yyDollar[7].updateExprs {
				cols = append(cols, updateList.Name.Name)
				vals = append(vals, updateList.Expr)
			}
			yyVAL.statement = &Insert{Action: yyDollar[1].str, Comments: Comments(yyDollar[2].bytes2), Ignore: yyDollar[3].str, Table: yyDollar[4].tableName, Partitions: yyDollar[5].partitions, Columns: cols, Rows: Values{vals}, OnDup: OnDup(yyDollar[8].updateExprs)}
		}
	case 40:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:481
		{
			yyVAL.str = InsertStr
		}
	case 41:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:485
		{
			yyVAL.str = ReplaceStr
		}
	case 42:
		yyDollar = yyS[yypt-9 : yypt+1]
//line sql.y:491
		{
			yyVAL.statement = &Update{Comments: Comments(yyDollar[2].bytes2), Ignore: yyDollar[3].str, TableExprs: yyDollar[4].tableExprs, Exprs: yyDollar[6].updateExprs, Where: NewWhere(WhereStr, yyDollar[7].expr), OrderBy: yyDollar[8].orderBy, Limit: yyDollar[9].limit}
		}
	case 43:
		yyDollar = yyS[yypt-8 : yypt+1]
//line sql.y:497
		{
			yyVAL.statement = &Delete{Comments: Comments(yyDollar[2].bytes2), TableExprs: TableExprs{&AliasedTableExpr{Expr: yyDollar[4].tableName}}, Partitions: yyDollar[5].partitions, Where: NewWhere(WhereStr, yyDollar[6].expr), OrderBy: yyDollar[7].orderBy, Limit: yyDollar[8].limit}
		}
	case 44:
		yyDollar = yyS[yypt-7 : yypt+1]
//line sql.y:501
		{
			yyVAL.statement = &Delete{Comments: Comments(yyDollar[2].bytes2), Targets: yyDollar[4].tableNames, TableExprs: yyDollar[6].tableExprs, Where: NewWhere(WhereStr, yyDollar[7].expr)}
		}
	case 45:
		yyDollar = yyS[yypt-6 : yypt+1]
//line sql.y:505
		{
			yyVAL.statement = &Delete{Comments: Comments(yyDollar[2].bytes2), Targets: yyDollar[3].tableNames, TableExprs: yyDollar[5].tableExprs, Where: NewWhere(WhereStr, yyDollar[6].expr)}
		}
	case 46:
		yyDollar = yyS[yypt-6 : yypt+1]
//line sql.y:509
		{
			yyVAL.statement = &Delete{Comments: Comments(yyDollar[2].bytes2), Targets: yyDollar[3].tableNames, TableExprs: yyDollar[5].tableExprs, Where: NewWhere(WhereStr, yyDollar[6].expr)}
		}
	case 47:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:514
		{
		}
	case 48:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:515
		{
		}
	case 49:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:519
		{
			yyVAL.tableNames = TableNames{yyDollar[1].tableName}
		}
	case 50:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:523
		{
			yyVAL.tableNames = append(yyVAL.tableNames, yyDollar[3].tableName)
		}
	case 51:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:529
		{
			yyVAL.tableNames = TableNames{yyDollar[1].tableName}
		}
	case 52:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:533
		{
			yyVAL.tableNames = append(yyVAL.tableNames, yyDollar[3].tableName)
		}
	case 53:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:538
		{
			yyVAL.partitions = nil
		}
	case 54:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:542
		{
			yyVAL.partitions = yyDollar[3].partitions
		}
	case 55:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:548
		{
			yyVAL.statement = &Set{Comments: Comments(yyDollar[2].bytes2), Exprs: yyDollar[3].setExprs}
		}
	case 56:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:552
		{
			yyVAL.statement = &Set{Comments: Comments(yyDollar[2].bytes2), Scope: yyDollar[3].str, Exprs: yyDollar[4].setExprs}
		}
	case 57:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sql.y:556
		{
			yyVAL.statement = &Set{Comments: Comments(yyDollar[2].bytes2), Scope: yyDollar[3].str, Exprs: yyDollar[5].setExprs}
		}
	case 58:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:560
		{
			yyVAL.statement = &Set{Comments: Comments(yyDollar[2].bytes2), Exprs: yyDollar[4].setExprs}
		}
	case 59:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:566
		{
			yyVAL.setExprs = SetExprs{yyDollar[1].setExpr}
		}
	case 60:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:570
		{
			yyVAL.setExprs = append(yyVAL.setExprs, yyDollar[3].setExpr)
		}
	case 61:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:576
		{
			yyVAL.setExpr = &SetExpr{Name: NewColIdent(TransactionStr), Expr: NewStrVal([]byte(yyDollar[3].str))}
		}
	case 62:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:580
		{
			yyVAL.setExpr = &SetExpr{Name: NewColIdent(TransactionStr), Expr: NewStrVal([]byte(TxReadWrite))}
		}
	case 63:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:584
		{
			yyVAL.setExpr = &SetExpr{Name: NewColIdent(TransactionStr), Expr: NewStrVal([]byte(TxReadOnly))}
		}
	case 64:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:590
		{
			yyVAL.str = IsolationLevelRepeatableRead
		}
	case 65:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:594
		{
			yyVAL.str = IsolationLevelReadCommitted
		}
	case 66:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:598
		{
			yyVAL.str = IsolationLevelReadUncommitted
		}
	case 67:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:602
		{
			yyVAL.str = IsolationLevelSerializable
		}
	case 68:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:608
		{
			yyVAL.str = SessionStr
		}
	case 69:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:612
		{
			yyVAL.str = GlobalStr
		}
	case 70:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:618
		{
			yyDollar[1].ddl.TableSpec = yyDollar[2].TableSpec
			yyVAL.statement = yyDollar[1].ddl
		}
	case 71:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:623
		{
			// Create table [name] like [name]
			yyDollar[1].ddl.OptLike = yyDollar[2].optLike
			yyVAL.statement = yyDollar[1].ddl
		}
	case 72:
		yyDollar = yyS[yypt-8 : yypt+1]
//line sql.y:629
		{
			// Change this to an alter statement
			yyVAL.statement = &DDL{Action: AlterStr, Table: yyDollar[7].tableName}
		}
	case 73:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:634
		{
			yyVAL.statement = &DDL{Action: CreateStr, Table: yyDollar[3].tableName.ToViewName()}
		}
	case 74:
		yyDollar = yyS[yypt-6 : yypt+1]
//line sql.y:638
		{
			yyVAL.statement = &DDL{Action: CreateStr, Table: yyDollar[5].tableName.ToViewName()}
		}
	case 75:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sql.y:642
		{
			yyVAL.statement = &DBDDL{Action: CreateStr, DBName: string(yyDollar[4].bytes)}
		}
	case 76:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sql.y:646
		{
			yyVAL.statement = &DBDDL{Action: CreateStr, DBName: string(yyDollar[4].bytes)}
		}
	case 77:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:651
		{
			yyVAL.colIdent = NewColIdent("")
		}
	case 78:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:655
		{
			yyVAL.colIdent = yyDollar[2].colIdent
		}
	case 79:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:661
		{
			yyVAL.colIdent = NewColIdent(string(yyDollar[1].bytes))
		}
	case 80:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:666
		{
			var v []VindexParam
			yyVAL.vindexParams = v
		}
	case 81:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:671
		{
			yyVAL.vindexParams = yyDollar[2].vindexParams
		}
	case 82:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:677
		{
			yyVAL.vindexParams = make([]VindexParam, 0, 4)
			yyVAL.vindexParams = append(yyVAL.vindexParams, yyDollar[1].vindexParam)
		}
	case 83:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:682
		{
			yyVAL.vindexParams = append(yyVAL.vindexParams, yyDollar[3].vindexParam)
		}
	case 84:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:688
		{
			yyVAL.vindexParam = VindexParam{Key: yyDollar[1].colIdent, Val: yyDollar[3].str}
		}
	case 85:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:694
		{
			yyVAL.ddl = &DDL{Action: CreateStr, Table: yyDollar[4].tableName}
			setDDL(yylex, yyVAL.ddl)
		}
	case 86:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:701
		{
			yyVAL.TableSpec = yyDollar[2].TableSpec
			yyVAL.TableSpec.Options = yyDollar[4].str
		}
	case 87:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:708
		{
			yyVAL.optLike = &OptLike{LikeTable: yyDollar[2].tableName}
		}
	case 88:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:712
		{
			yyVAL.optLike = &OptLike{LikeTable: yyDollar[3].tableName}
		}
	case 89:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:718
		{
			yyVAL.TableSpec = &TableSpec{}
			yyVAL.TableSpec.AddColumn(yyDollar[1].columnDefinition)
		}
	case 90:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:723
		{
			yyVAL.TableSpec.AddColumn(yyDollar[3].columnDefinition)
		}
	case 91:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:727
		{
			yyVAL.TableSpec.AddIndex(yyDollar[3].indexDefinition)
		}
	case 92:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:731
		{
			yyVAL.TableSpec.AddConstraint(yyDollar[3].constraintDefinition)
		}
	case 93:
		yyDollar = yyS[yypt-8 : yypt+1]
//line sql.y:737
		{
			yyDollar[2].columnType.NotNull = yyDollar[3].boolVal
			yyDollar[2].columnType.Default = yyDollar[4].optVal
			yyDollar[2].columnType.OnUpdate = yyDollar[5].optVal
			yyDollar[2].columnType.Autoincrement = yyDollar[6].boolVal
			yyDollar[2].columnType.KeyOpt = yyDollar[7].colKeyOpt
			yyDollar[2].columnType.Comment = yyDollar[8].sqlVal
			yyVAL.columnDefinition = &ColumnDefinition{Name: NewColIdent(string(yyDollar[1].bytes)), Type: yyDollar[2].columnType}
		}
	case 94:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:748
		{
			yyVAL.columnType = yyDollar[1].columnType
			yyVAL.columnType.Unsigned = yyDollar[2].boolVal
			yyVAL.columnType.Zerofill = yyDollar[3].boolVal
		}
	case 98:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:759
		{
			yyVAL.columnType = yyDollar[1].columnType
			yyVAL.columnType.Length = yyDollar[2].sqlVal
		}
	case 99:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:764
		{
			yyVAL.columnType = yyDollar[1].columnType
		}
	case 100:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:770
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 101:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:774
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 102:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:778
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 103:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:782
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 104:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:786
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 105:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:790
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 106:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:794
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 107:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:798
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 108:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:802
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 109:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:808
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
			yyVAL.columnType.Length = yyDollar[2].LengthScaleOption.Length
			yyVAL.columnType.Scale = yyDollar[2].LengthScaleOption.Scale
		}
	case 110:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:814
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
			yyVAL.columnType.Length = yyDollar[2].LengthScaleOption.Length
			yyVAL.columnType.Scale = yyDollar[2].LengthScaleOption.Scale
		}
	case 111:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:820
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
			yyVAL.columnType.Length = yyDollar[2].LengthScaleOption.Length
			yyVAL.columnType.Scale = yyDollar[2].LengthScaleOption.Scale
		}
	case 112:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:826
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
			yyVAL.columnType.Length = yyDollar[2].LengthScaleOption.Length
			yyVAL.columnType.Scale = yyDollar[2].LengthScaleOption.Scale
		}
	case 113:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:832
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
			yyVAL.columnType.Length = yyDollar[2].LengthScaleOption.Length
			yyVAL.columnType.Scale = yyDollar[2].LengthScaleOption.Scale
		}
	case 114:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:840
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 115:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:844
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].sqlVal}
		}
	case 116:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:848
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].sqlVal}
		}
	case 117:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:852
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].sqlVal}
		}
	case 118:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:856
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 119:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:862
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].sqlVal, Charset: yyDollar[3].str, Collate: yyDollar[4].str}
		}
	case 120:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:866
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].sqlVal, Charset: yyDollar[3].str, Collate: yyDollar[4].str}
		}
	case 121:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:870
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].sqlVal}
		}
	case 122:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:874
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].sqlVal}
		}
	case 123:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:878
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), Charset: yyDollar[2].str, Collate: yyDollar[3].str}
		}
	case 124:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:882
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), Charset: yyDollar[2].str, Collate: yyDollar[3].str}
		}
	case 125:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:886
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), Charset: yyDollar[2].str, Collate: yyDollar[3].str}
		}
	case 126:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:890
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), Charset: yyDollar[2].str, Collate: yyDollar[3].str}
		}
	case 127:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:894
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 128:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:898
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 129:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:902
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 130:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:906
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 131:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:910
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 132:
		yyDollar = yyS[yypt-6 : yypt+1]
//line sql.y:914
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), EnumValues: yyDollar[3].strs, Charset: yyDollar[5].str, Collate: yyDollar[6].str}
		}
	case 133:
		yyDollar = yyS[yypt-6 : yypt+1]
//line sql.y:919
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), EnumValues: yyDollar[3].strs, Charset: yyDollar[5].str, Collate: yyDollar[6].str}
		}
	case 134:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:925
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 135:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:929
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 136:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:933
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 137:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:937
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 138:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:941
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 139:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:945
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 140:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:949
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 141:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:953
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 142:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:959
		{
			yyVAL.strs = make([]string, 0, 4)
			yyVAL.strs = append(yyVAL.strs, "'"+string(yyDollar[1].bytes)+"'")
		}
	case 143:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:964
		{
			yyVAL.strs = append(yyDollar[1].strs, "'"+string(yyDollar[3].bytes)+"'")
		}
	case 144:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:969
		{
			yyVAL.sqlVal = nil
		}
	case 145:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:973
		{
			yyVAL.sqlVal = NewIntVal(yyDollar[2].bytes)
		}
	case 146:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:978
		{
			yyVAL.LengthScaleOption = LengthScaleOption{}
		}
	case 147:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sql.y:982
		{
			yyVAL.LengthScaleOption = LengthScaleOption{
				Length: NewIntVal(yyDollar[2].bytes),
				Scale:  NewIntVal(yyDollar[4].bytes),
			}
		}
	case 148:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:990
		{
			yyVAL.LengthScaleOption = LengthScaleOption{}
		}
	case 149:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:994
		{
			yyVAL.LengthScaleOption = LengthScaleOption{
				Length: NewIntVal(yyDollar[2].bytes),
			}
		}
	case 150:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sql.y:1000
		{
			yyVAL.LengthScaleOption = LengthScaleOption{
				Length: NewIntVal(yyDollar[2].bytes),
				Scale:  NewIntVal(yyDollar[4].bytes),
			}
		}
	case 151:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:1008
		{
			yyVAL.boolVal = BoolVal(false)
		}
	case 152:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1012
		{
			yyVAL.boolVal = BoolVal(true)
		}
	case 153:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:1017
		{
			yyVAL.boolVal = BoolVal(false)
		}
	case 154:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1021
		{
			yyVAL.boolVal = BoolVal(true)
		}
	case 155:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:1027
		{
			yyVAL.boolVal = BoolVal(false)
		}
	case 156:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1031
		{
			yyVAL.boolVal = BoolVal(false)
		}
	case 157:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1035
		{
			yyVAL.boolVal = BoolVal(true)
		}
	case 158:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:1040
		{
			yyVAL.optVal = nil
		}
	case 159:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1044
		{
			yyVAL.optVal = yyDollar[2].expr
		}
	case 160:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:1049
		{
			yyVAL.optVal = nil
		}
	case 161:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1053
		{
			yyVAL.optVal = yyDollar[3].expr
		}
	case 162:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:1058
		{
			yyVAL.boolVal = BoolVal(false)
		}
	case 163:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1062
		{
			yyVAL.boolVal = BoolVal(true)
		}
	case 164:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:1067
		{
			yyVAL.str = ""
		}
	case 165:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1071
		{
			yyVAL.str = string(yyDollar[3].bytes)
		}
	case 166:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1075
		{
			yyVAL.str = string(yyDollar[3].bytes)
		}
	case 167:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:1080
		{
			yyVAL.str = ""
		}
	case 168:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1084
		{
			yyVAL.str = string(yyDollar[2].bytes)
		}
	case 169:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1088
		{
			yyVAL.str = string(yyDollar[2].bytes)
		}
	case 170:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:1093
		{
			yyVAL.colKeyOpt = colKeyNone
		}
	case 171:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1097
		{
			yyVAL.colKeyOpt = colKeyPrimary
		}
	case 172:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1101
		{
			yyVAL.colKeyOpt = colKey
		}
	case 173:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1105
		{
			yyVAL.colKeyOpt = colKeyUniqueKey
		}
	case 174:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1109
		{
			yyVAL.colKeyOpt = colKeyUnique
		}
	case 175:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:1114
		{
			yyVAL.sqlVal = nil
		}
	case 176:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1118
		{
			yyVAL.sqlVal = NewStrVal(yyDollar[2].bytes)
		}
	case 177:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sql.y:1124
		{
			yyVAL.indexDefinition = &IndexDefinition{Info: yyDollar[1].indexInfo, Columns: yyDollar[3].indexColumns, Options: yyDollar[5].indexOptions}
		}
	case 178:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:1128
		{
			yyVAL.indexDefinition = &IndexDefinition{Info: yyDollar[1].indexInfo, Columns: yyDollar[3].indexColumns}
		}
	case 179:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1134
		{
			yyVAL.indexOptions = []*IndexOption{yyDollar[1].indexOption}
		}
	case 180:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1138
		{
			yyVAL.indexOptions = append(yyVAL.indexOptions, yyDollar[2].indexOption)
		}
	case 181:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1144
		{
			yyVAL.indexOption = &IndexOption{Name: string(yyDollar[1].bytes), Using: string(yyDollar[2].bytes)}
		}
	case 182:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1148
		{
			// should not be string
			yyVAL.indexOption = &IndexOption{Name: string(yyDollar[1].bytes), Value: NewIntVal(yyDollar[3].bytes)}
		}
	case 183:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1153
		{
			yyVAL.indexOption = &IndexOption{Name: string(yyDollar[1].bytes), Value: NewStrVal(yyDollar[2].bytes)}
		}
	case 184:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:1159
		{
			yyVAL.str = ""
		}
	case 185:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1163
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 186:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1169
		{
			yyVAL.indexInfo = &IndexInfo{Type: string(yyDollar[1].bytes) + " " + string(yyDollar[2].bytes), Name: NewColIdent("PRIMARY"), Primary: true, Unique: true}
		}
	case 187:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1173
		{
			yyVAL.indexInfo = &IndexInfo{Type: string(yyDollar[1].bytes) + " " + string(yyDollar[2].str), Name: NewColIdent(yyDollar[3].str), Spatial: true, Unique: false}
		}
	case 188:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1177
		{
			yyVAL.indexInfo = &IndexInfo{Type: string(yyDollar[1].bytes) + " " + string(yyDollar[2].str), Name: NewColIdent(yyDollar[3].str), Unique: true}
		}
	case 189:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1181
		{
			yyVAL.indexInfo = &IndexInfo{Type: string(yyDollar[1].bytes), Name: NewColIdent(yyDollar[2].str), Unique: true}
		}
	case 190:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1185
		{
			yyVAL.indexInfo = &IndexInfo{Type: string(yyDollar[1].str), Name: NewColIdent(yyDollar[2].str), Unique: false}
		}
	case 191:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1191
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 192:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1195
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 193:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:1200
		{
			yyVAL.str = ""
		}
	case 194:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1204
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 195:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1210
		{
			yyVAL.indexColumns = []*IndexColumn{yyDollar[1].indexColumn}
		}
	case 196:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1214
		{
			yyVAL.indexColumns = append(yyVAL.indexColumns, yyDollar[3].indexColumn)
		}
	case 197:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1220
		{
			yyVAL.indexColumn = &IndexColumn{Column: yyDollar[1].colIdent, Length: yyDollar[2].sqlVal}
		}
	case 198:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1226
		{
			yyVAL.constraintDefinition = &ConstraintDefinition{Name: string(yyDollar[2].bytes), Details: yyDollar[3].constraintInfo}
		}
	case 199:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1230
		{
			yyVAL.constraintDefinition = &ConstraintDefinition{Details: yyDollar[1].constraintInfo}
		}
	case 200:
		yyDollar = yyS[yypt-10 : yypt+1]
//line sql.y:1237
		{
			yyVAL.constraintInfo = &ForeignKeyDefinition{Source: yyDollar[4].columns, ReferencedTable: yyDollar[7].tableName, ReferencedColumns: yyDollar[9].columns}
		}
	case 201:
		yyDollar = yyS[yypt-11 : yypt+1]
//line sql.y:1241
		{
			yyVAL.constraintInfo = &ForeignKeyDefinition{Source: yyDollar[4].columns, ReferencedTable: yyDollar[7].tableName, ReferencedColumns: yyDollar[9].columns, OnDelete: yyDollar[11].ReferenceAction}
		}
	case 202:
		yyDollar = yyS[yypt-11 : yypt+1]
//line sql.y:1245
		{
			yyVAL.constraintInfo = &ForeignKeyDefinition{Source: yyDollar[4].columns, ReferencedTable: yyDollar[7].tableName, ReferencedColumns: yyDollar[9].columns, OnUpdate: yyDollar[11].ReferenceAction}
		}
	case 203:
		yyDollar = yyS[yypt-12 : yypt+1]
//line sql.y:1249
		{
			yyVAL.constraintInfo = &ForeignKeyDefinition{Source: yyDollar[4].columns, ReferencedTable: yyDollar[7].tableName, ReferencedColumns: yyDollar[9].columns, OnDelete: yyDollar[11].ReferenceAction, OnUpdate: yyDollar[12].ReferenceAction}
		}
	case 204:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1255
		{
			yyVAL.ReferenceAction = yyDollar[3].ReferenceAction
		}
	case 205:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1261
		{
			yyVAL.ReferenceAction = yyDollar[3].ReferenceAction
		}
	case 206:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1267
		{
			yyVAL.ReferenceAction = Restrict
		}
	case 207:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1271
		{
			yyVAL.ReferenceAction = Cascade
		}
	case 208:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1275
		{
			yyVAL.ReferenceAction = NoAction
		}
	case 209:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1279
		{
			yyVAL.ReferenceAction = SetDefault
		}
	case 210:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1283
		{
			yyVAL.ReferenceAction = SetNull
		}
	case 211:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:1288
		{
			yyVAL.str = ""
		}
	case 212:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1292
		{
			yyVAL.str = " " + string(yyDollar[1].str)
		}
	case 213:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1296
		{
			yyVAL.str = string(yyDollar[1].str) + ", " + string(yyDollar[3].str)
		}
	case 214:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1304
		{
			yyVAL.str = yyDollar[1].str
		}
	case 215:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1308
		{
			yyVAL.str = yyDollar[1].str + " " + yyDollar[2].str
		}
	case 216:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1312
		{
			yyVAL.str = yyDollar[1].str + "=" + yyDollar[3].str
		}
	case 217:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1318
		{
			yyVAL.str = yyDollar[1].colIdent.String()
		}
	case 218:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1322
		{
			yyVAL.str = "'" + string(yyDollar[1].bytes) + "'"
		}
	case 219:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1326
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 220:
		yyDollar = yyS[yypt-6 : yypt+1]
//line sql.y:1332
		{
			yyVAL.statement = &DDL{Action: AlterStr, Table: yyDollar[4].tableName}
		}
	case 221:
		yyDollar = yyS[yypt-7 : yypt+1]
//line sql.y:1336
		{
			yyVAL.statement = &DDL{Action: AlterStr, Table: yyDollar[4].tableName}
		}
	case 222:
		yyDollar = yyS[yypt-7 : yypt+1]
//line sql.y:1340
		{
			yyVAL.statement = &DDL{Action: AlterStr, Table: yyDollar[4].tableName}
		}
	case 223:
		yyDollar = yyS[yypt-7 : yypt+1]
//line sql.y:1344
		{
			// Change this to a rename statement
			yyVAL.statement = &DDL{Action: RenameStr, FromTables: TableNames{yyDollar[4].tableName}, ToTables: TableNames{yyDollar[7].tableName}}
		}
	case 224:
		yyDollar = yyS[yypt-7 : yypt+1]
//line sql.y:1349
		{
			// Rename an index can just be an alter
			yyVAL.statement = &DDL{Action: AlterStr, Table: yyDollar[4].tableName}
		}
	case 225:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:1354
		{
			yyVAL.statement = &DDL{Action: AlterStr, Table: yyDollar[3].tableName.ToViewName()}
		}
	case 226:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sql.y:1358
		{
			yyVAL.statement = &DDL{Action: AlterStr, Table: yyDollar[4].tableName, PartitionSpec: yyDollar[5].partSpec}
		}
	case 227:
		yyDollar = yyS[yypt-7 : yypt+1]
//line sql.y:1362
		{
			yyVAL.statement = &DDL{Action: CreateVindexStr, VindexSpec: &VindexSpec{
				Name:   yyDollar[5].colIdent,
				Type:   yyDollar[6].colIdent,
				Params: yyDollar[7].vindexParams,
			}}
		}
	case 228:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sql.y:1370
		{
			yyVAL.statement = &DDL{Action: DropVindexStr, VindexSpec: &VindexSpec{
				Name: yyDollar[5].colIdent,
			}}
		}
	case 229:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sql.y:1376
		{
			yyVAL.statement = &DDL{Action: AddVschemaTableStr, Table: yyDollar[5].tableName}
		}
	case 230:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sql.y:1380
		{
			yyVAL.statement = &DDL{Action: DropVschemaTableStr, Table: yyDollar[5].tableName}
		}
	case 231:
		yyDollar = yyS[yypt-12 : yypt+1]
//line sql.y:1384
		{
			yyVAL.statement = &DDL{
				Action: AddColVindexStr,
				Table:  yyDollar[4].tableName,
				VindexSpec: &VindexSpec{
					Name:   yyDollar[7].colIdent,
					Type:   yyDollar[11].colIdent,
					Params: yyDollar[12].vindexParams,
				},
				VindexCols: yyDollar[9].columns,
			}
		}
	case 232:
		yyDollar = yyS[yypt-7 : yypt+1]
//line sql.y:1397
		{
			yyVAL.statement = &DDL{
				Action: DropColVindexStr,
				Table:  yyDollar[4].tableName,
				VindexSpec: &VindexSpec{
					Name: yyDollar[7].colIdent,
				},
			}
		}
	case 244:
		yyDollar = yyS[yypt-7 : yypt+1]
//line sql.y:1422
		{
			yyVAL.partSpec = &PartitionSpec{Action: ReorganizeStr, Name: yyDollar[3].colIdent, Definitions: yyDollar[6].partDefs}
		}
	case 245:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1428
		{
			yyVAL.partDefs = []*PartitionDefinition{yyDollar[1].partDef}
		}
	case 246:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1432
		{
			yyVAL.partDefs = append(yyDollar[1].partDefs, yyDollar[3].partDef)
		}
	case 247:
		yyDollar = yyS[yypt-8 : yypt+1]
//line sql.y:1438
		{
			yyVAL.partDef = &PartitionDefinition{Name: yyDollar[2].colIdent, Limit: yyDollar[7].expr}
		}
	case 248:
		yyDollar = yyS[yypt-8 : yypt+1]
//line sql.y:1442
		{
			yyVAL.partDef = &PartitionDefinition{Name: yyDollar[2].colIdent, Maxvalue: true}
		}
	case 249:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1448
		{
			yyVAL.statement = yyDollar[3].ddl
		}
	case 250:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1454
		{
			yyVAL.ddl = &DDL{Action: RenameStr, FromTables: TableNames{yyDollar[1].tableName}, ToTables: TableNames{yyDollar[3].tableName}}
		}
	case 251:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sql.y:1458
		{
			yyVAL.ddl = yyDollar[1].ddl
			yyVAL.ddl.FromTables = append(yyVAL.ddl.FromTables, yyDollar[3].tableName)
			yyVAL.ddl.ToTables = append(yyVAL.ddl.ToTables, yyDollar[5].tableName)
		}
	case 252:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:1466
		{
			var exists bool
			if yyDollar[3].byt != 0 {
				exists = true
			}
			yyVAL.statement = &DDL{Action: DropStr, FromTables: yyDollar[4].tableNames, IfExists: exists}
		}
	case 253:
		yyDollar = yyS[yypt-6 : yypt+1]
//line sql.y:1474
		{
			// Change this to an alter statement
			yyVAL.statement = &DDL{Action: AlterStr, Table: yyDollar[5].tableName}
		}
	case 254:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sql.y:1479
		{
			var exists bool
			if yyDollar[3].byt != 0 {
				exists = true
			}
			yyVAL.statement = &DDL{Action: DropStr, FromTables: TableNames{yyDollar[4].tableName.ToViewName()}, IfExists: exists}
		}
	case 255:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:1487
		{
			yyVAL.statement = &DBDDL{Action: DropStr, DBName: string(yyDollar[4].bytes)}
		}
	case 256:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:1491
		{
			yyVAL.statement = &DBDDL{Action: DropStr, DBName: string(yyDollar[4].bytes)}
		}
	case 257:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1497
		{
			yyVAL.statement = &DDL{Action: TruncateStr, Table: yyDollar[3].tableName}
		}
	case 258:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1501
		{
			yyVAL.statement = &DDL{Action: TruncateStr, Table: yyDollar[2].tableName}
		}
	case 259:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1506
		{
			yyVAL.statement = &DDL{Action: AlterStr, Table: yyDollar[3].tableName}
		}
	case 260:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:1512
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes) + " " + string(yyDollar[3].bytes)}
		}
	case 261:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:1517
		{
			yyVAL.statement = &Show{Type: CharsetStr}
		}
	case 262:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1521
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes)}
		}
	case 263:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:1525
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes) + " " + string(yyDollar[3].bytes)}
		}
	case 264:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:1530
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes) + " " + string(yyDollar[3].bytes)}
		}
	case 265:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:1534
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes) + " " + string(yyDollar[3].bytes)}
		}
	case 266:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:1538
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes) + " " + string(yyDollar[3].bytes), Table: yyDollar[4].tableName}
		}
	case 267:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:1542
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes) + " " + string(yyDollar[3].bytes)}
		}
	case 268:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:1546
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes) + " " + string(yyDollar[3].bytes)}
		}
	case 269:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1550
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes)}
		}
	case 270:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1554
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes)}
		}
	case 271:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1558
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes)}
		}
	case 272:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1562
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes)}
		}
	case 273:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1566
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes)}
		}
	case 274:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1570
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes)}
		}
	case 275:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1574
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes)}
		}
	case 276:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:1578
		{
			yyVAL.statement = &Show{Scope: yyDollar[2].str, Type: string(yyDollar[3].bytes)}
		}
	case 277:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1582
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes)}
		}
	case 278:
		yyDollar = yyS[yypt-7 : yypt+1]
//line sql.y:1586
		{
			showTablesOpt := &ShowTablesOpt{Full: yyDollar[2].str, DbName: yyDollar[6].str, Filter: yyDollar[7].showFilter}
			yyVAL.statement = &Show{Type: string(yyDollar[3].str), ShowTablesOpt: showTablesOpt, OnTable: yyDollar[5].tableName}
		}
	case 279:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sql.y:1591
		{
			// this is ugly, but I couldn't find a better way for now
			if yyDollar[3].str == "processlist" {
				yyVAL.statement = &Show{Type: yyDollar[3].str}
			} else {
				showTablesOpt := &ShowTablesOpt{Full: yyDollar[2].str, DbName: yyDollar[4].str, Filter: yyDollar[5].showFilter}
				yyVAL.statement = &Show{Type: yyDollar[3].str, ShowTablesOpt: showTablesOpt}
			}
		}
	case 280:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:1601
		{
			yyVAL.statement = &Show{Scope: yyDollar[2].str, Type: string(yyDollar[3].bytes)}
		}
	case 281:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1605
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes)}
		}
	case 282:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:1609
		{
			// Cannot dereference $4 directly, or else the parser stackcannot be pooled. See yyParsePooled
			showCollationFilterOpt := yyDollar[4].expr
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes), ShowCollationFilterOpt: &showCollationFilterOpt}
		}
	case 283:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1615
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes)}
		}
	case 284:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1619
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes)}
		}
	case 285:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1623
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes)}
		}
	case 286:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1627
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes)}
		}
	case 287:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1631
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes) + " " + string(yyDollar[3].bytes)}
		}
	case 288:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1635
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes) + " " + string(yyDollar[3].bytes)}
		}
	case 289:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sql.y:1639
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes) + " " + string(yyDollar[3].bytes), OnTable: yyDollar[5].tableName}
		}
	case 290:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1643
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes)}
		}
	case 291:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1653
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes)}
		}
	case 292:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1659
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 293:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1663
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 294:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:1669
		{
			yyVAL.str = ""
		}
	case 295:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1673
		{
			yyVAL.str = "full "
		}
	case 296:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1679
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 297:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1683
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 298:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:1689
		{
			yyVAL.str = ""
		}
	case 299:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1693
		{
			yyVAL.str = yyDollar[2].tableIdent.v
		}
	case 300:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1697
		{
			yyVAL.str = yyDollar[2].tableIdent.v
		}
	case 301:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:1703
		{
			yyVAL.showFilter = nil
		}
	case 302:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1707
		{
			yyVAL.showFilter = &ShowFilter{Like: string(yyDollar[2].bytes)}
		}
	case 303:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1711
		{
			yyVAL.showFilter = &ShowFilter{Filter: yyDollar[2].expr}
		}
	case 304:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:1717
		{
			yyVAL.str = ""
		}
	case 305:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1721
		{
			yyVAL.str = SessionStr
		}
	case 306:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1725
		{
			yyVAL.str = GlobalStr
		}
	case 307:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1731
		{
			yyVAL.statement = &Use{DBName: yyDollar[2].tableIdent}
		}
	case 308:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1735
		{
			yyVAL.statement = &Use{DBName: TableIdent{v: ""}}
		}
	case 309:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1741
		{
			yyVAL.statement = &Begin{}
		}
	case 310:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1745
		{
			yyVAL.statement = &Begin{}
		}
	case 311:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1751
		{
			yyVAL.statement = &Commit{}
		}
	case 312:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1757
		{
			yyVAL.statement = &Rollback{}
		}
	case 313:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1763
		{
			yyVAL.statement = &OtherRead{}
		}
	case 314:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1767
		{
			yyVAL.statement = &OtherRead{}
		}
	case 315:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1771
		{
			yyVAL.statement = &OtherRead{}
		}
	case 316:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1775
		{
			yyVAL.statement = &OtherAdmin{}
		}
	case 317:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1779
		{
			yyVAL.statement = &OtherAdmin{}
		}
	case 318:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1783
		{
			yyVAL.statement = &OtherAdmin{}
		}
	case 319:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1787
		{
			yyVAL.statement = &OtherAdmin{}
		}
	case 320:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1793
		{
			yyVAL.statement = &DDL{Action: FlushStr}
		}
	case 321:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:1797
		{
			setAllowComments(yylex, true)
		}
	case 322:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1801
		{
			yyVAL.bytes2 = yyDollar[2].bytes2
			setAllowComments(yylex, false)
		}
	case 323:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:1807
		{
			yyVAL.bytes2 = nil
		}
	case 324:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1811
		{
			yyVAL.bytes2 = append(yyDollar[1].bytes2, yyDollar[2].bytes)
		}
	case 325:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1817
		{
			yyVAL.str = UnionStr
		}
	case 326:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1821
		{
			yyVAL.str = UnionAllStr
		}
	case 327:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1825
		{
			yyVAL.str = UnionDistinctStr
		}
	case 328:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:1830
		{
			yyVAL.str = ""
		}
	case 329:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1834
		{
			yyVAL.str = SQLNoCacheStr
		}
	case 330:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1838
		{
			yyVAL.str = SQLCacheStr
		}
	case 331:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:1843
		{
			yyVAL.str = ""
		}
	case 332:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1847
		{
			yyVAL.str = DistinctStr
		}
	case 333:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:1852
		{
			yyVAL.str = ""
		}
	case 334:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1856
		{
			yyVAL.str = StraightJoinHint
		}
	case 335:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:1861
		{
			yyVAL.selectExprs = nil
		}
	case 336:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1865
		{
			yyVAL.selectExprs = yyDollar[1].selectExprs
		}
	case 337:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1871
		{
			yyVAL.selectExprs = SelectExprs{yyDollar[1].selectExpr}
		}
	case 338:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1875
		{
			yyVAL.selectExprs = append(yyVAL.selectExprs, yyDollar[3].selectExpr)
		}
	case 339:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1881
		{
			yyVAL.selectExpr = &StarExpr{}
		}
	case 340:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1885
		{
			yyVAL.selectExpr = &AliasedExpr{Expr: yyDollar[1].expr, As: yyDollar[2].colIdent}
		}
	case 341:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1889
		{
			yyVAL.selectExpr = &StarExpr{TableName: TableName{Name: yyDollar[1].tableIdent}}
		}
	case 342:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sql.y:1893
		{
			yyVAL.selectExpr = &StarExpr{TableName: TableName{Qualifier: yyDollar[1].tableIdent, Name: yyDollar[3].tableIdent}}
		}
	case 343:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:1898
		{
			yyVAL.colIdent = ColIdent{}
		}
	case 344:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1902
		{
			yyVAL.colIdent = yyDollar[1].colIdent
		}
	case 345:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1906
		{
			yyVAL.colIdent = yyDollar[2].colIdent
		}
	case 347:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1913
		{
			yyVAL.colIdent = NewColIdent(string(yyDollar[1].bytes))
		}
	case 348:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:1918
		{
			yyVAL.tableExprs = TableExprs{&AliasedTableExpr{Expr: TableName{Name: NewTableIdent("dual")}}}
		}
	case 349:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1922
		{
			yyVAL.tableExprs = yyDollar[2].tableExprs
		}
	case 350:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1928
		{
			yyVAL.tableExprs = TableExprs{yyDollar[1].tableExpr}
		}
	case 351:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1932
		{
			yyVAL.tableExprs = append(yyVAL.tableExprs, yyDollar[3].tableExpr)
		}
	case 354:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1942
		{
			yyVAL.tableExpr = yyDollar[1].aliasedTableName
		}
	case 355:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1946
		{
			yyVAL.tableExpr = &AliasedTableExpr{Expr: yyDollar[1].subquery, As: yyDollar[3].tableIdent}
		}
	case 356:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1950
		{
			// missed alias for subquery
			yylex.Error("Every derived table must have its own alias")
			return 1
		}
	case 357:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1956
		{
			yyVAL.tableExpr = &ParenTableExpr{Exprs: yyDollar[2].tableExprs}
		}
	case 358:
		yyDollar = yyS[yypt-6 : yypt+1]
//line sql.y:1960
		{
			yyVAL.tableExpr = &TableValuedFunction{Name: NewColIdent(string(yyDollar[1].bytes)), Args: yyDollar[3].tableValuedFunctionArguments, As: yyDollar[6].tableIdent}
		}
	case 359:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1966
		{
			yyVAL.aliasedTableName = &AliasedTableExpr{Expr: yyDollar[1].tableName, As: yyDollar[2].tableIdent, Hints: yyDollar[3].indexHints}
		}
	case 360:
		yyDollar = yyS[yypt-7 : yypt+1]
//line sql.y:1970
		{
			yyVAL.aliasedTableName = &AliasedTableExpr{Expr: yyDollar[1].tableName, Partitions: yyDollar[4].partitions, As: yyDollar[6].tableIdent, Hints: yyDollar[7].indexHints}
		}
	case 361:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:1975
		{
			yyVAL.tableValuedFunctionArguments = nil
		}
	case 362:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1979
		{
			yyVAL.tableValuedFunctionArguments = yyDollar[1].tableValuedFunctionArguments
		}
	case 363:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1985
		{
			yyVAL.tableValuedFunctionArguments = TableValuedFunctionArguments{yyDollar[1].tableValuedFunctionArgument}
		}
	case 364:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1989
		{
			yyVAL.tableValuedFunctionArguments = append(yyVAL.tableValuedFunctionArguments, yyDollar[3].tableValuedFunctionArgument)
		}
	case 365:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1995
		{
			yyVAL.tableValuedFunctionArgument = &TableValuedFunctionArgument{Name: yyDollar[1].colIdent, Value: yyDollar[3].tableValuedFunctionArgumentValue}
		}
	case 366:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2001
		{
			yyVAL.tableValuedFunctionArgumentValue = &ExprTableValuedFunctionArgumentValue{Expr: yyDollar[1].expr}
		}
	case 367:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:2005
		{
			yyVAL.tableValuedFunctionArgumentValue = &TableDescriptorTableValuedFunctionArgumentValue{Table: yyDollar[3].tableExpr}
		}
	case 368:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:2009
		{
			yyVAL.tableValuedFunctionArgumentValue = &FieldDescriptorTableValuedFunctionArgumentValue{Field: yyDollar[3].colName}
		}
	case 369:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2015
		{
			yyVAL.columns = Columns{yyDollar[1].colIdent}
		}
	case 370:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2019
		{
			yyVAL.columns = append(yyVAL.columns, yyDollar[3].colIdent)
		}
	case 371:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2025
		{
			yyVAL.partitions = Partitions{yyDollar[1].colIdent}
		}
	case 372:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2029
		{
			yyVAL.partitions = append(yyVAL.partitions, yyDollar[3].colIdent)
		}
	case 373:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sql.y:2042
		{
			yyVAL.tableExpr = &JoinTableExpr{LeftExpr: yyDollar[1].tableExpr, ForceLookup: bool(yyDollar[2].boolVal), Join: yyDollar[3].str, RightExpr: yyDollar[4].tableExpr, Condition: yyDollar[5].joinCondition}
		}
	case 374:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:2046
		{
			yyVAL.tableExpr = &JoinTableExpr{LeftExpr: yyDollar[1].tableExpr, Join: yyDollar[2].str, RightExpr: yyDollar[3].tableExpr, Condition: yyDollar[4].joinCondition}
		}
	case 375:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:2050
		{
			yyVAL.tableExpr = &JoinTableExpr{LeftExpr: yyDollar[1].tableExpr, Join: yyDollar[2].str, RightExpr: yyDollar[3].tableExpr, Condition: yyDollar[4].joinCondition}
		}
	case 376:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2054
		{
			yyVAL.tableExpr = &JoinTableExpr{LeftExpr: yyDollar[1].tableExpr, Join: yyDollar[2].str, RightExpr: yyDollar[3].tableExpr}
		}
	case 377:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2060
		{
			yyVAL.joinCondition = JoinCondition{On: yyDollar[2].expr}
		}
	case 378:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:2062
		{
			yyVAL.joinCondition = JoinCondition{Using: yyDollar[3].columns}
		}
	case 379:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:2066
		{
			yyVAL.joinCondition = JoinCondition{}
		}
	case 380:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2068
		{
			yyVAL.joinCondition = yyDollar[1].joinCondition
		}
	case 381:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:2072
		{
			yyVAL.joinCondition = JoinCondition{}
		}
	case 382:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2074
		{
			yyVAL.joinCondition = JoinCondition{On: yyDollar[2].expr}
		}
	case 383:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:2077
		{
			yyVAL.empty = struct{}{}
		}
	case 384:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2079
		{
			yyVAL.empty = struct{}{}
		}
	case 385:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:2082
		{
			yyVAL.tableIdent = NewTableIdent("")
		}
	case 386:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2086
		{
			yyVAL.tableIdent = yyDollar[1].tableIdent
		}
	case 387:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2090
		{
			yyVAL.tableIdent = yyDollar[2].tableIdent
		}
	case 388:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:2095
		{
			yyVAL.boolVal = false
		}
	case 389:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2097
		{
			yyVAL.boolVal = true
		}
	case 391:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2102
		{
			yyVAL.tableIdent = NewTableIdent(string(yyDollar[1].bytes))
		}
	case 392:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2108
		{
			yyVAL.str = JoinStr
		}
	case 393:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2112
		{
			yyVAL.str = JoinStr
		}
	case 394:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2116
		{
			yyVAL.str = JoinStr
		}
	case 395:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2122
		{
			yyVAL.str = StraightJoinStr
		}
	case 396:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2128
		{
			yyVAL.str = LeftJoinStr
		}
	case 397:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2132
		{
			yyVAL.str = LeftJoinStr
		}
	case 398:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2136
		{
			yyVAL.str = RightJoinStr
		}
	case 399:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2140
		{
			yyVAL.str = RightJoinStr
		}
	case 400:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2146
		{
			yyVAL.str = NaturalJoinStr
		}
	case 401:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2150
		{
			if yyDollar[2].str == LeftJoinStr {
				yyVAL.str = NaturalLeftJoinStr
			} else {
				yyVAL.str = NaturalRightJoinStr
			}
		}
	case 402:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2160
		{
			yyVAL.tableName = yyDollar[2].tableName
		}
	case 403:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2164
		{
			yyVAL.tableName = yyDollar[1].tableName
		}
	case 404:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2170
		{
			yyVAL.tableName = TableName{Name: yyDollar[1].tableIdent}
		}
	case 405:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2174
		{
			yyVAL.tableName = TableName{Qualifier: yyDollar[1].tableIdent, Name: yyDollar[3].tableIdent}
		}
	case 406:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2180
		{
			yyVAL.tableName = TableName{Name: yyDollar[1].tableIdent}
		}
	case 407:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:2185
		{
			yyVAL.indexHints = nil
		}
	case 408:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sql.y:2189
		{
			yyVAL.indexHints = &IndexHints{Type: UseStr, Indexes: yyDollar[4].columns}
		}
	case 409:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sql.y:2193
		{
			yyVAL.indexHints = &IndexHints{Type: IgnoreStr, Indexes: yyDollar[4].columns}
		}
	case 410:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sql.y:2197
		{
			yyVAL.indexHints = &IndexHints{Type: ForceStr, Indexes: yyDollar[4].columns}
		}
	case 411:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:2202
		{
			yyVAL.expr = nil
		}
	case 412:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2206
		{
			yyVAL.expr = yyDollar[2].expr
		}
	case 413:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2212
		{
			yyVAL.expr = yyDollar[1].expr
		}
	case 414:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2216
		{
			yyVAL.expr = &AndExpr{Left: yyDollar[1].expr, Right: yyDollar[3].expr}
		}
	case 415:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2220
		{
			yyVAL.expr = &OrExpr{Left: yyDollar[1].expr, Right: yyDollar[3].expr}
		}
	case 416:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2224
		{
			yyVAL.expr = &NotExpr{Expr: yyDollar[2].expr}
		}
	case 417:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2228
		{
			yyVAL.expr = &IsExpr{Operator: yyDollar[3].str, Expr: yyDollar[1].expr}
		}
	case 418:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2232
		{
			yyVAL.expr = yyDollar[1].expr
		}
	case 419:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2236
		{
			yyVAL.expr = &Default{ColName: yyDollar[2].str}
		}
	case 420:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:2242
		{
			yyVAL.str = ""
		}
	case 421:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2246
		{
			yyVAL.str = string(yyDollar[2].bytes)
		}
	case 422:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2252
		{
			yyVAL.boolVal = BoolVal(true)
		}
	case 423:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2256
		{
			yyVAL.boolVal = BoolVal(false)
		}
	case 424:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2262
		{
			yyVAL.expr = &ComparisonExpr{Left: yyDollar[1].expr, Operator: yyDollar[2].str, Right: yyDollar[3].expr}
		}
	case 425:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2266
		{
			yyVAL.expr = &ComparisonExpr{Left: yyDollar[1].expr, Operator: InStr, Right: yyDollar[3].colTuple}
		}
	case 426:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:2270
		{
			yyVAL.expr = &ComparisonExpr{Left: yyDollar[1].expr, Operator: NotInStr, Right: yyDollar[4].colTuple}
		}
	case 427:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:2274
		{
			yyVAL.expr = &ComparisonExpr{Left: yyDollar[1].expr, Operator: LikeStr, Right: yyDollar[3].expr, Escape: yyDollar[4].expr}
		}
	case 428:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sql.y:2278
		{
			yyVAL.expr = &ComparisonExpr{Left: yyDollar[1].expr, Operator: NotLikeStr, Right: yyDollar[4].expr, Escape: yyDollar[5].expr}
		}
	case 429:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2282
		{
			yyVAL.expr = &ComparisonExpr{Left: yyDollar[1].expr, Operator: LikeRegexpStr, Right: yyDollar[3].expr}
		}
	case 430:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2286
		{
			yyVAL.expr = &ComparisonExpr{Left: yyDollar[1].expr, Operator: LikeRegexpCaseInsensitiveStr, Right: yyDollar[3].expr}
		}
	case 431:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2290
		{
			yyVAL.expr = &ComparisonExpr{Left: yyDollar[1].expr, Operator: NotLikeRegexpStr, Right: yyDollar[3].expr}
		}
	case 432:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2294
		{
			yyVAL.expr = &ComparisonExpr{Left: yyDollar[1].expr, Operator: NotLikeRegexpCaseInsensitiveStr, Right: yyDollar[3].expr}
		}
	case 433:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2298
		{
			yyVAL.expr = &ComparisonExpr{Left: yyDollar[1].expr, Operator: RegexpStr, Right: yyDollar[3].expr}
		}
	case 434:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:2302
		{
			yyVAL.expr = &ComparisonExpr{Left: yyDollar[1].expr, Operator: NotRegexpStr, Right: yyDollar[4].expr}
		}
	case 435:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sql.y:2306
		{
			yyVAL.expr = &RangeCond{Left: yyDollar[1].expr, Operator: BetweenStr, From: yyDollar[3].expr, To: yyDollar[5].expr}
		}
	case 436:
		yyDollar = yyS[yypt-6 : yypt+1]
//line sql.y:2310
		{
			yyVAL.expr = &RangeCond{Left: yyDollar[1].expr, Operator: NotBetweenStr, From: yyDollar[4].expr, To: yyDollar[6].expr}
		}
	case 437:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2314
		{
			yyVAL.expr = &ExistsExpr{Subquery: yyDollar[2].subquery}
		}
	case 438:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2320
		{
			yyVAL.str = IsNullStr
		}
	case 439:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2324
		{
			yyVAL.str = IsNotNullStr
		}
	case 440:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2328
		{
			yyVAL.str = IsTrueStr
		}
	case 441:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2332
		{
			yyVAL.str = IsNotTrueStr
		}
	case 442:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2336
		{
			yyVAL.str = IsFalseStr
		}
	case 443:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2340
		{
			yyVAL.str = IsNotFalseStr
		}
	case 444:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2346
		{
			yyVAL.str = EqualStr
		}
	case 445:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2350
		{
			yyVAL.str = LessThanStr
		}
	case 446:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2354
		{
			yyVAL.str = GreaterThanStr
		}
	case 447:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2358
		{
			yyVAL.str = LessEqualStr
		}
	case 448:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2362
		{
			yyVAL.str = GreaterEqualStr
		}
	case 449:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2366
		{
			yyVAL.str = NotEqualStr
		}
	case 450:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2370
		{
			yyVAL.str = NullSafeEqualStr
		}
	case 451:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:2375
		{
			yyVAL.expr = nil
		}
	case 452:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2379
		{
			yyVAL.expr = yyDollar[2].expr
		}
	case 453:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2385
		{
			yyVAL.colTuple = yyDollar[1].valTuple
		}
	case 454:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2389
		{
			yyVAL.colTuple = yyDollar[1].subquery
		}
	case 455:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2393
		{
			yyVAL.colTuple = ListArg(yyDollar[1].bytes)
		}
	case 456:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2399
		{
			yyVAL.subquery = &Subquery{yyDollar[2].selStmt}
		}
	case 457:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2405
		{
			yyVAL.exprs = Exprs{yyDollar[1].expr}
		}
	case 458:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2409
		{
			yyVAL.exprs = append(yyDollar[1].exprs, yyDollar[3].expr)
		}
	case 459:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2415
		{
			yyVAL.expr = yyDollar[1].expr
		}
	case 460:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2419
		{
			yyVAL.expr = yyDollar[1].boolVal
		}
	case 461:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2423
		{
			yyVAL.expr = yyDollar[1].colName
		}
	case 462:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2427
		{
			yyVAL.expr = yyDollar[1].expr
		}
	case 463:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2431
		{
			yyVAL.expr = yyDollar[1].subquery
		}
	case 464:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2435
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].expr, Operator: BitAndStr, Right: yyDollar[3].expr}
		}
	case 465:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2439
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].expr, Operator: BitOrStr, Right: yyDollar[3].expr}
		}
	case 466:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2443
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].expr, Operator: BitXorStr, Right: yyDollar[3].expr}
		}
	case 467:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2447
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].expr, Operator: PlusStr, Right: yyDollar[3].expr}
		}
	case 468:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2451
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].expr, Operator: MinusStr, Right: yyDollar[3].expr}
		}
	case 469:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2455
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].expr, Operator: MultStr, Right: yyDollar[3].expr}
		}
	case 470:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2459
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].expr, Operator: DivStr, Right: yyDollar[3].expr}
		}
	case 471:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2463
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].expr, Operator: IntDivStr, Right: yyDollar[3].expr}
		}
	case 472:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2467
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].expr, Operator: ModStr, Right: yyDollar[3].expr}
		}
	case 473:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2471
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].expr, Operator: ModStr, Right: yyDollar[3].expr}
		}
	case 474:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2475
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].expr, Operator: ShiftLeftStr, Right: yyDollar[3].expr}
		}
	case 475:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2479
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].expr, Operator: ShiftRightStr, Right: yyDollar[3].expr}
		}
	case 476:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2483
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].colName, Operator: JSONExtractOp, Right: yyDollar[3].expr}
		}
	case 477:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2487
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].colName, Operator: JSONUnquoteExtractOp, Right: yyDollar[3].expr}
		}
	case 478:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2491
		{
			yyVAL.expr = &CollateExpr{Expr: yyDollar[1].expr, Charset: yyDollar[3].str}
		}
	case 479:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2495
		{
			yyVAL.expr = &UnaryExpr{Operator: BinaryStr, Expr: yyDollar[2].expr}
		}
	case 480:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2499
		{
			yyVAL.expr = &UnaryExpr{Operator: UBinaryStr, Expr: yyDollar[2].expr}
		}
	case 481:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2503
		{
			yyVAL.expr = &UnaryExpr{Operator: Utf8mb4Str, Expr: yyDollar[2].expr}
		}
	case 482:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2507
		{
			if num, ok := yyDollar[2].expr.(*SQLVal); ok && num.Type == IntVal {
				yyVAL.expr = num
			} else {
				yyVAL.expr = &UnaryExpr{Operator: UPlusStr, Expr: yyDollar[2].expr}
			}
		}
	case 483:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2515
		{
			if num, ok := yyDollar[2].expr.(*SQLVal); ok && num.Type == IntVal {
				// Handle double negative
				if num.Val[0] == '-' {
					num.Val = num.Val[1:]
					yyVAL.expr = num
				} else {
					yyVAL.expr = NewIntVal(append([]byte("-"), num.Val...))
				}
			} else {
				yyVAL.expr = &UnaryExpr{Operator: UMinusStr, Expr: yyDollar[2].expr}
			}
		}
	case 484:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2529
		{
			yyVAL.expr = &UnaryExpr{Operator: TildaStr, Expr: yyDollar[2].expr}
		}
	case 485:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2533
		{
			yyVAL.expr = &UnaryExpr{Operator: BangStr, Expr: yyDollar[2].expr}
		}
	case 486:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2537
		{
			// This rule prevents the usage of INTERVAL
			// as a function. If support is needed for that,
			// we'll need to revisit this. The solution
			// will be non-trivial because of grammar conflicts.
			yyVAL.expr = &IntervalExpr{Expr: yyDollar[2].expr, Unit: yyDollar[3].colIdent.String()}
		}
	case 491:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:2555
		{
			yyVAL.expr = &FuncExpr{Name: yyDollar[1].colIdent, Exprs: yyDollar[3].selectExprs}
		}
	case 492:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sql.y:2559
		{
			yyVAL.expr = &FuncExpr{Name: yyDollar[1].colIdent, Distinct: true, Exprs: yyDollar[4].selectExprs}
		}
	case 493:
		yyDollar = yyS[yypt-6 : yypt+1]
//line sql.y:2563
		{
			yyVAL.expr = &FuncExpr{Qualifier: yyDollar[1].tableIdent, Name: yyDollar[3].colIdent, Exprs: yyDollar[5].selectExprs}
		}
	case 494:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:2573
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("left"), Exprs: yyDollar[3].selectExprs}
		}
	case 495:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:2577
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("right"), Exprs: yyDollar[3].selectExprs}
		}
	case 496:
		yyDollar = yyS[yypt-6 : yypt+1]
//line sql.y:2581
		{
			yyVAL.expr = &ConvertExpr{Expr: yyDollar[3].expr, Type: yyDollar[5].convertType}
		}
	case 497:
		yyDollar = yyS[yypt-6 : yypt+1]
//line sql.y:2585
		{
			yyVAL.expr = &ConvertExpr{Expr: yyDollar[3].expr, Type: yyDollar[5].convertType}
		}
	case 498:
		yyDollar = yyS[yypt-6 : yypt+1]
//line sql.y:2589
		{
			yyVAL.expr = &ConvertUsingExpr{Expr: yyDollar[3].expr, Type: yyDollar[5].str}
		}
	case 499:
		yyDollar = yyS[yypt-8 : yypt+1]
//line sql.y:2593
		{
			yyVAL.expr = &SubstrExpr{Name: yyDollar[3].colName, From: yyDollar[5].expr, To: yyDollar[7].expr}
		}
	case 500:
		yyDollar = yyS[yypt-8 : yypt+1]
//line sql.y:2597
		{
			yyVAL.expr = &SubstrExpr{Name: yyDollar[3].colName, From: yyDollar[5].expr, To: yyDollar[7].expr}
		}
	case 501:
		yyDollar = yyS[yypt-8 : yypt+1]
//line sql.y:2601
		{
			yyVAL.expr = &SubstrExpr{StrVal: NewStrVal(yyDollar[3].bytes), From: yyDollar[5].expr, To: yyDollar[7].expr}
		}
	case 502:
		yyDollar = yyS[yypt-8 : yypt+1]
//line sql.y:2605
		{
			yyVAL.expr = &SubstrExpr{StrVal: NewStrVal(yyDollar[3].bytes), From: yyDollar[5].expr, To: yyDollar[7].expr}
		}
	case 503:
		yyDollar = yyS[yypt-9 : yypt+1]
//line sql.y:2609
		{
			yyVAL.expr = &MatchExpr{Columns: yyDollar[3].selectExprs, Expr: yyDollar[7].expr, Option: yyDollar[8].str}
		}
	case 504:
		yyDollar = yyS[yypt-7 : yypt+1]
//line sql.y:2613
		{
			yyVAL.expr = &GroupConcatExpr{Distinct: yyDollar[3].str, Exprs: yyDollar[4].selectExprs, OrderBy: yyDollar[5].orderBy, Separator: yyDollar[6].str}
		}
	case 505:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sql.y:2617
		{
			yyVAL.expr = &CaseExpr{Expr: yyDollar[2].expr, Whens: yyDollar[3].whens, Else: yyDollar[4].expr}
		}
	case 506:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:2621
		{
			yyVAL.expr = &ValuesFuncExpr{Name: yyDollar[3].colName}
		}
	case 507:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2631
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("current_timestamp")}
		}
	case 508:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2635
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("utc_timestamp")}
		}
	case 509:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2639
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("utc_time")}
		}
	case 510:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2644
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("utc_date")}
		}
	case 511:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2649
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("localtime")}
		}
	case 512:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2654
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("localtimestamp")}
		}
	case 513:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2660
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("current_date")}
		}
	case 514:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2665
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("current_time")}
		}
	case 515:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2670
		{
			yyVAL.expr = &CurTimeFuncExpr{Name: NewColIdent("current_timestamp"), Fsp: yyDollar[2].expr}
		}
	case 516:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2674
		{
			yyVAL.expr = &CurTimeFuncExpr{Name: NewColIdent("utc_timestamp"), Fsp: yyDollar[2].expr}
		}
	case 517:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2678
		{
			yyVAL.expr = &CurTimeFuncExpr{Name: NewColIdent("utc_time"), Fsp: yyDollar[2].expr}
		}
	case 518:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2683
		{
			yyVAL.expr = &CurTimeFuncExpr{Name: NewColIdent("localtime"), Fsp: yyDollar[2].expr}
		}
	case 519:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2688
		{
			yyVAL.expr = &CurTimeFuncExpr{Name: NewColIdent("localtimestamp"), Fsp: yyDollar[2].expr}
		}
	case 520:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2693
		{
			yyVAL.expr = &CurTimeFuncExpr{Name: NewColIdent("current_time"), Fsp: yyDollar[2].expr}
		}
	case 521:
		yyDollar = yyS[yypt-8 : yypt+1]
//line sql.y:2697
		{
			yyVAL.expr = &TimestampFuncExpr{Name: string("timestampadd"), Unit: yyDollar[3].colIdent.String(), Expr1: yyDollar[5].expr, Expr2: yyDollar[7].expr}
		}
	case 522:
		yyDollar = yyS[yypt-8 : yypt+1]
//line sql.y:2701
		{
			yyVAL.expr = &TimestampFuncExpr{Name: string("timestampdiff"), Unit: yyDollar[3].colIdent.String(), Expr1: yyDollar[5].expr, Expr2: yyDollar[7].expr}
		}
	case 525:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2711
		{
			yyVAL.expr = yyDollar[2].expr
		}
	case 526:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:2721
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("if"), Exprs: yyDollar[3].selectExprs}
		}
	case 527:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:2725
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("database"), Exprs: yyDollar[3].selectExprs}
		}
	case 528:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:2729
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("mod"), Exprs: yyDollar[3].selectExprs}
		}
	case 529:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:2733
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("replace"), Exprs: yyDollar[3].selectExprs}
		}
	case 530:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:2737
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("substr"), Exprs: yyDollar[3].selectExprs}
		}
	case 531:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:2741
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("substr"), Exprs: yyDollar[3].selectExprs}
		}
	case 532:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:2747
		{
			yyVAL.str = ""
		}
	case 533:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2751
		{
			yyVAL.str = BooleanModeStr
		}
	case 534:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:2755
		{
			yyVAL.str = NaturalLanguageModeStr
		}
	case 535:
		yyDollar = yyS[yypt-7 : yypt+1]
//line sql.y:2759
		{
			yyVAL.str = NaturalLanguageModeWithQueryExpansionStr
		}
	case 536:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2763
		{
			yyVAL.str = QueryExpansionStr
		}
	case 537:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2769
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 538:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2773
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 539:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2779
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].sqlVal}
		}
	case 540:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2783
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].sqlVal, Charset: yyDollar[3].str, Operator: CharacterSetStr}
		}
	case 541:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2787
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].sqlVal, Charset: string(yyDollar[3].bytes)}
		}
	case 542:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2791
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes)}
		}
	case 543:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2795
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].sqlVal}
		}
	case 544:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2799
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes)}
			yyVAL.convertType.Length = yyDollar[2].LengthScaleOption.Length
			yyVAL.convertType.Scale = yyDollar[2].LengthScaleOption.Scale
		}
	case 545:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2805
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes)}
		}
	case 546:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2809
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].sqlVal}
		}
	case 547:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2813
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes)}
		}
	case 548:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2817
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes)}
		}
	case 549:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2821
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].sqlVal}
		}
	case 550:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2825
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes)}
		}
	case 551:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2829
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes)}
		}
	case 552:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:2834
		{
			yyVAL.expr = nil
		}
	case 553:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2838
		{
			yyVAL.expr = yyDollar[1].expr
		}
	case 554:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:2843
		{
			yyVAL.str = string("")
		}
	case 555:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2847
		{
			yyVAL.str = " separator '" + string(yyDollar[2].bytes) + "'"
		}
	case 556:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2853
		{
			yyVAL.whens = []*When{yyDollar[1].when}
		}
	case 557:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2857
		{
			yyVAL.whens = append(yyDollar[1].whens, yyDollar[2].when)
		}
	case 558:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:2863
		{
			yyVAL.when = &When{Cond: yyDollar[2].expr, Val: yyDollar[4].expr}
		}
	case 559:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:2868
		{
			yyVAL.expr = nil
		}
	case 560:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2872
		{
			yyVAL.expr = yyDollar[2].expr
		}
	case 561:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2878
		{
			yyVAL.colName = &ColName{Name: yyDollar[1].colIdent}
		}
	case 562:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2882
		{
			yyVAL.colName = &ColName{Qualifier: TableName{Name: yyDollar[1].tableIdent}, Name: yyDollar[3].colIdent}
		}
	case 563:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sql.y:2886
		{
			yyVAL.colName = &ColName{Qualifier: TableName{Qualifier: yyDollar[1].tableIdent, Name: yyDollar[3].tableIdent}, Name: yyDollar[5].colIdent}
		}
	case 564:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2892
		{
			yyVAL.expr = NewStrVal(yyDollar[1].bytes)
		}
	case 565:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2896
		{
			yyVAL.expr = NewHexVal(yyDollar[1].bytes)
		}
	case 566:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2900
		{
			yyVAL.expr = NewBitVal(yyDollar[1].bytes)
		}
	case 567:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2904
		{
			yyVAL.expr = NewIntVal(yyDollar[1].bytes)
		}
	case 568:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2908
		{
			yyVAL.expr = NewFloatVal(yyDollar[1].bytes)
		}
	case 569:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2912
		{
			yyVAL.expr = NewHexNum(yyDollar[1].bytes)
		}
	case 570:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2916
		{
			yyVAL.expr = NewValArg(yyDollar[1].bytes)
		}
	case 571:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2920
		{
			yyVAL.expr = &NullVal{}
		}
	case 572:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2926
		{
			// TODO(sougou): Deprecate this construct.
			if yyDollar[1].colIdent.Lowered() != "value" {
				yylex.Error("expecting value after next")
				return 1
			}
			yyVAL.expr = NewIntVal([]byte("1"))
		}
	case 573:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2935
		{
			yyVAL.expr = NewIntVal(yyDollar[1].bytes)
		}
	case 574:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2939
		{
			yyVAL.expr = NewValArg(yyDollar[1].bytes)
		}
	case 575:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:2944
		{
			yyVAL.exprs = nil
		}
	case 576:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2948
		{
			yyVAL.exprs = yyDollar[3].exprs
		}
	case 577:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:2953
		{
			yyVAL.expr = nil
		}
	case 578:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2957
		{
			yyVAL.expr = yyDollar[2].expr
		}
	case 579:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:2962
		{
			yyVAL.orderBy = nil
		}
	case 580:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2966
		{
			yyVAL.orderBy = yyDollar[3].orderBy
		}
	case 581:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2972
		{
			yyVAL.orderBy = OrderBy{yyDollar[1].order}
		}
	case 582:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2976
		{
			yyVAL.orderBy = append(yyDollar[1].orderBy, yyDollar[3].order)
		}
	case 583:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2982
		{
			yyVAL.order = &Order{Expr: yyDollar[1].expr, Direction: yyDollar[2].str}
		}
	case 584:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:2987
		{
			yyVAL.str = AscScr
		}
	case 585:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2991
		{
			yyVAL.str = AscScr
		}
	case 586:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2995
		{
			yyVAL.str = DescScr
		}
	case 587:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:3000
		{
			yyVAL.limit = nil
		}
	case 588:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:3004
		{
			yyVAL.limit = &Limit{Rowcount: yyDollar[2].expr}
		}
	case 589:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:3008
		{
			yyVAL.limit = &Limit{Offset: yyDollar[2].expr, Rowcount: yyDollar[4].expr}
		}
	case 590:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:3012
		{
			yyVAL.limit = &Limit{Offset: yyDollar[4].expr, Rowcount: yyDollar[2].expr}
		}
	case 591:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:3017
		{
			yyVAL.str = ""
		}
	case 592:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:3021
		{
			yyVAL.str = ForUpdateStr
		}
	case 593:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:3025
		{
			yyVAL.str = ShareModeStr
		}
	case 594:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:3030
		{
			yyVAL.triggers = nil
		}
	case 595:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:3034
		{
			yyVAL.triggers = yyDollar[2].triggers
		}
	case 596:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3040
		{
			yyVAL.triggers = []Trigger{yyDollar[1].trigger}
		}
	case 597:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:3044
		{
			yyVAL.triggers = append(yyDollar[1].triggers, yyDollar[3].trigger)
		}
	case 598:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:3050
		{
			yyVAL.trigger = &WatermarkTrigger{}
		}
	case 599:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:3054
		{
			yyVAL.trigger = &DelayTrigger{Delay: yyDollar[3].expr}
		}
	case 600:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:3058
		{
			yyVAL.trigger = &CountingTrigger{Count: yyDollar[2].expr}
		}
	case 601:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:3071
		{
			yyVAL.ins = &Insert{Rows: yyDollar[2].values}
		}
	case 602:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3075
		{
			yyVAL.ins = &Insert{Rows: yyDollar[1].selStmt}
		}
	case 603:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:3079
		{
			// Drop the redundant parenthesis.
			yyVAL.ins = &Insert{Rows: yyDollar[2].selStmt}
		}
	case 604:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sql.y:3084
		{
			yyVAL.ins = &Insert{Columns: yyDollar[2].columns, Rows: yyDollar[5].values}
		}
	case 605:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:3088
		{
			yyVAL.ins = &Insert{Columns: yyDollar[2].columns, Rows: yyDollar[4].selStmt}
		}
	case 606:
		yyDollar = yyS[yypt-6 : yypt+1]
//line sql.y:3092
		{
			// Drop the redundant parenthesis.
			yyVAL.ins = &Insert{Columns: yyDollar[2].columns, Rows: yyDollar[5].selStmt}
		}
	case 607:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3099
		{
			yyVAL.columns = Columns{yyDollar[1].colIdent}
		}
	case 608:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:3103
		{
			yyVAL.columns = Columns{yyDollar[3].colIdent}
		}
	case 609:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:3107
		{
			yyVAL.columns = append(yyVAL.columns, yyDollar[3].colIdent)
		}
	case 610:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sql.y:3111
		{
			yyVAL.columns = append(yyVAL.columns, yyDollar[5].colIdent)
		}
	case 611:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:3116
		{
			yyVAL.updateExprs = nil
		}
	case 612:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sql.y:3120
		{
			yyVAL.updateExprs = yyDollar[5].updateExprs
		}
	case 613:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3126
		{
			yyVAL.values = Values{yyDollar[1].valTuple}
		}
	case 614:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:3130
		{
			yyVAL.values = append(yyDollar[1].values, yyDollar[3].valTuple)
		}
	case 615:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3136
		{
			yyVAL.valTuple = yyDollar[1].valTuple
		}
	case 616:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:3140
		{
			yyVAL.valTuple = ValTuple{}
		}
	case 617:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:3146
		{
			yyVAL.valTuple = ValTuple(yyDollar[2].exprs)
		}
	case 618:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3152
		{
			if len(yyDollar[1].valTuple) == 1 {
				yyVAL.expr = &ParenExpr{yyDollar[1].valTuple[0]}
			} else {
				yyVAL.expr = yyDollar[1].valTuple
			}
		}
	case 619:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3162
		{
			yyVAL.updateExprs = UpdateExprs{yyDollar[1].updateExpr}
		}
	case 620:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:3166
		{
			yyVAL.updateExprs = append(yyDollar[1].updateExprs, yyDollar[3].updateExpr)
		}
	case 621:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:3172
		{
			yyVAL.updateExpr = &UpdateExpr{Name: yyDollar[1].colName, Expr: yyDollar[3].expr}
		}
	case 622:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3178
		{
			yyVAL.setExprs = SetExprs{yyDollar[1].setExpr}
		}
	case 623:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:3182
		{
			yyVAL.setExprs = append(yyDollar[1].setExprs, yyDollar[3].setExpr)
		}
	case 624:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:3188
		{
			yyVAL.setExpr = &SetExpr{Name: yyDollar[1].colIdent, Expr: NewStrVal([]byte("on"))}
		}
	case 625:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:3192
		{
			yyVAL.setExpr = &SetExpr{Name: yyDollar[1].colIdent, Expr: NewStrVal([]byte("off"))}
		}
	case 626:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:3196
		{
			yyVAL.setExpr = &SetExpr{Name: yyDollar[1].colIdent, Expr: yyDollar[3].expr}
		}
	case 627:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:3200
		{
			yyVAL.setExpr = &SetExpr{Name: NewColIdent(string(yyDollar[1].bytes)), Expr: yyDollar[2].expr}
		}
	case 629:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:3207
		{
			yyVAL.bytes = []byte("charset")
		}
	case 631:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3214
		{
			yyVAL.expr = NewStrVal([]byte(yyDollar[1].colIdent.String()))
		}
	case 632:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3218
		{
			yyVAL.expr = NewStrVal(yyDollar[1].bytes)
		}
	case 633:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3222
		{
			yyVAL.expr = &Default{}
		}
	case 636:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:3231
		{
			yyVAL.byt = 0
		}
	case 637:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:3233
		{
			yyVAL.byt = 1
		}
	case 638:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:3236
		{
			yyVAL.empty = struct{}{}
		}
	case 639:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:3238
		{
			yyVAL.empty = struct{}{}
		}
	case 640:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:3241
		{
			yyVAL.str = ""
		}
	case 641:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3243
		{
			yyVAL.str = IgnoreStr
		}
	case 642:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3247
		{
			yyVAL.empty = struct{}{}
		}
	case 643:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3249
		{
			yyVAL.empty = struct{}{}
		}
	case 644:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3251
		{
			yyVAL.empty = struct{}{}
		}
	case 645:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3253
		{
			yyVAL.empty = struct{}{}
		}
	case 646:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3255
		{
			yyVAL.empty = struct{}{}
		}
	case 647:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3257
		{
			yyVAL.empty = struct{}{}
		}
	case 648:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3259
		{
			yyVAL.empty = struct{}{}
		}
	case 649:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3261
		{
			yyVAL.empty = struct{}{}
		}
	case 650:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3263
		{
			yyVAL.empty = struct{}{}
		}
	case 651:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3265
		{
			yyVAL.empty = struct{}{}
		}
	case 652:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:3268
		{
			yyVAL.empty = struct{}{}
		}
	case 653:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3270
		{
			yyVAL.empty = struct{}{}
		}
	case 654:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3272
		{
			yyVAL.empty = struct{}{}
		}
	case 655:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3276
		{
			yyVAL.empty = struct{}{}
		}
	case 656:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3278
		{
			yyVAL.empty = struct{}{}
		}
	case 657:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:3281
		{
			yyVAL.empty = struct{}{}
		}
	case 658:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3283
		{
			yyVAL.empty = struct{}{}
		}
	case 659:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3285
		{
			yyVAL.empty = struct{}{}
		}
	case 660:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:3288
		{
			yyVAL.colIdent = ColIdent{}
		}
	case 661:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:3290
		{
			yyVAL.colIdent = yyDollar[2].colIdent
		}
	case 662:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3294
		{
			yyVAL.colIdent = NewColIdent(string(yyDollar[1].bytes))
		}
	case 663:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3298
		{
			yyVAL.colIdent = NewColIdent(string(yyDollar[1].bytes))
		}
	case 665:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3305
		{
			yyVAL.colIdent = NewColIdent(string(yyDollar[1].bytes))
		}
	case 666:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3311
		{
			yyVAL.tableIdent = NewTableIdent(string(yyDollar[1].bytes))
		}
	case 667:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3315
		{
			yyVAL.tableIdent = NewTableIdent(string(yyDollar[1].bytes))
		}
	case 669:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3322
		{
			yyVAL.tableIdent = NewTableIdent(string(yyDollar[1].bytes))
		}
	case 884:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3562
		{
			if incNesting(yylex) {
				yylex.Error("max nesting level reached")
				return 1
			}
		}
	case 885:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3571
		{
			decNesting(yylex)
		}
	case 886:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:3576
		{
			skipToEnd(yylex)
		}
	case 887:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:3581
		{
			skipToEnd(yylex)
		}
	case 888:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3585
		{
			skipToEnd(yylex)
		}
	case 889:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3589
		{
			skipToEnd(yylex)
		}
	}
	goto yystack /* stack new state and value */
}
