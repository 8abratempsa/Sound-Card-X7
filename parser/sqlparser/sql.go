// Code generated by goyacc -v test.out -o sql.go sql.y. DO NOT EDIT.

//line sql.y:24
package sqlparser

import __yyfmt__ "fmt"

//line sql.y:24

func setParseTree(yylex interface{}, stmt Statement) {
	yylex.(*Tokenizer).ParseTree = stmt
}

func setAllowComments(yylex interface{}, allow bool) {
	yylex.(*Tokenizer).AllowComments = allow
}

func setDDL(yylex interface{}, ddl *DDL) {
	yylex.(*Tokenizer).partialDDL = ddl
}

func incNesting(yylex interface{}) bool {
	yylex.(*Tokenizer).nesting++
	if yylex.(*Tokenizer).nesting == 200 {
		return true
	}
	return false
}

func decNesting(yylex interface{}) {
	yylex.(*Tokenizer).nesting--
}

// skipToEnd forces the lexer to end prematurely. Not all SQL statements
// are supported by the Parser, thus calling skipToEnd will make the lexer
// return EOF early.
func skipToEnd(yylex interface{}) {
	yylex.(*Tokenizer).SkipToEnd = true
}

//line sql.y:59
type yySymType struct {
	yys                              int
	tableValuedFunctionArguments     TableValuedFunctionArguments
	tableValuedFunctionArgument      *TableValuedFunctionArgument
	tableValuedFunctionArgumentValue TableValuedFunctionArgumentValue
	commonTableExpression            *CommonTableExpression
	commonTableExpressions           CommonTableExpressions
	with                             *With
	empty                            struct{}
	statement                        Statement
	selStmt                          SelectStatement
	ddl                              *DDL
	ins                              *Insert
	byt                              byte
	bytes                            []byte
	bytes2                           [][]byte
	str                              string
	strs                             []string
	selectExprs                      SelectExprs
	selectExpr                       SelectExpr
	columns                          Columns
	partitions                       Partitions
	colName                          *ColName
	tableExprs                       TableExprs
	tableExpr                        TableExpr
	joinCondition                    JoinCondition
	tableName                        TableName
	tableNames                       TableNames
	indexHints                       *IndexHints
	expr                             Expr
	exprs                            Exprs
	boolVal                          BoolVal
	sqlVal                           *SQLVal
	colTuple                         ColTuple
	values                           Values
	valTuple                         ValTuple
	subquery                         *Subquery
	whens                            []*When
	when                             *When
	orderBy                          OrderBy
	order                            *Order
	limit                            *Limit
	triggers                         []Trigger
	trigger                          Trigger
	updateExprs                      UpdateExprs
	setExprs                         SetExprs
	updateExpr                       *UpdateExpr
	setExpr                          *SetExpr
	colIdent                         ColIdent
	tableIdent                       TableIdent
	convertType                      *ConvertType
	aliasedTableName                 *AliasedTableExpr
	TableSpec                        *TableSpec
	columnType                       ColumnType
	colKeyOpt                        ColumnKeyOption
	optVal                           Expr
	LengthScaleOption                LengthScaleOption
	columnDefinition                 *ColumnDefinition
	indexDefinition                  *IndexDefinition
	indexInfo                        *IndexInfo
	indexOption                      *IndexOption
	indexOptions                     []*IndexOption
	indexColumn                      *IndexColumn
	indexColumns                     []*IndexColumn
	constraintDefinition             *ConstraintDefinition
	constraintInfo                   ConstraintInfo
	ReferenceAction                  ReferenceAction
	partDefs                         []*PartitionDefinition
	partDef                          *PartitionDefinition
	partSpec                         *PartitionSpec
	vindexParam                      VindexParam
	vindexParams                     []VindexParam
	showFilter                       *ShowFilter
	optLike                          *OptLike
}

const LEX_ERROR = 57346
const UNION = 57347
const SELECT = 57348
const STREAM = 57349
const INSERT = 57350
const UPDATE = 57351
const DELETE = 57352
const FROM = 57353
const WHERE = 57354
const GROUP = 57355
const HAVING = 57356
const ORDER = 57357
const BY = 57358
const LIMIT = 57359
const OFFSET = 57360
const FOR = 57361
const WATERMARK = 57362
const DELAY = 57363
const COUNTING = 57364
const AFTER = 57365
const ALL = 57366
const DISTINCT = 57367
const AS = 57368
const EXISTS = 57369
const ASC = 57370
const DESC = 57371
const INTO = 57372
const DUPLICATE = 57373
const KEY = 57374
const DEFAULT = 57375
const SET = 57376
const LOCK = 57377
const UNLOCK = 57378
const KEYS = 57379
const VALUES = 57380
const LAST_INSERT_ID = 57381
const NEXT = 57382
const VALUE = 57383
const SHARE = 57384
const MODE = 57385
const SQL_NO_CACHE = 57386
const SQL_CACHE = 57387
const JOIN = 57388
const STRAIGHT_JOIN = 57389
const LOOKUP = 57390
const LEFT = 57391
const RIGHT = 57392
const INNER = 57393
const OUTER = 57394
const CROSS = 57395
const NATURAL = 57396
const USE = 57397
const FORCE = 57398
const ON = 57399
const USING = 57400
const ID = 57401
const HEX = 57402
const STRING = 57403
const INTEGRAL = 57404
const FLOAT = 57405
const HEXNUM = 57406
const VALUE_ARG = 57407
const LIST_ARG = 57408
const COMMENT = 57409
const COMMENT_KEYWORD = 57410
const BIT_LITERAL = 57411
const NULL = 57412
const TRUE = 57413
const FALSE = 57414
const OFF = 57415
const OR = 57416
const AND = 57417
const NOT = 57418
const BETWEEN = 57419
const CASE = 57420
const WHEN = 57421
const THEN = 57422
const ELSE = 57423
const END = 57424
const LE = 57425
const GE = 57426
const NE = 57427
const NULL_SAFE_EQUAL = 57428
const IS = 57429
const LIKE = 57430
const REGEXP = 57431
const IN = 57432
const RIGHTARROW = 57433
const SHIFT_LEFT = 57434
const SHIFT_RIGHT = 57435
const DIV = 57436
const MOD = 57437
const NOT_LIKE_REGEXP = 57438
const LIKE_REGEXP_CASE_INSENSITIVE = 57439
const NOT_LIKE_REGEXP_CASE_INSENSITIVE = 57440
const UNARY = 57441
const COLLATE = 57442
const BINARY = 57443
const UNDERSCORE_BINARY = 57444
const UNDERSCORE_UTF8MB4 = 57445
const INTERVAL = 57446
const JSON_EXTRACT_OP = 57447
const JSON_UNQUOTE_EXTRACT_OP = 57448
const CREATE = 57449
const ALTER = 57450
const DROP = 57451
const RENAME = 57452
const ANALYZE = 57453
const ADD = 57454
const FLUSH = 57455
const SCHEMA = 57456
const TABLE = 57457
const DESCRIPTOR = 57458
const INDEX = 57459
const VIEW = 57460
const TO = 57461
const IGNORE = 57462
const IF = 57463
const UNIQUE = 57464
const PRIMARY = 57465
const COLUMN = 57466
const SPATIAL = 57467
const FULLTEXT = 57468
const KEY_BLOCK_SIZE = 57469
const ACTION = 57470
const CASCADE = 57471
const CONSTRAINT = 57472
const FOREIGN = 57473
const NO = 57474
const REFERENCES = 57475
const RESTRICT = 57476
const SHOW = 57477
const DESCRIBE = 57478
const EXPLAIN = 57479
const DATE = 57480
const ESCAPE = 57481
const REPAIR = 57482
const OPTIMIZE = 57483
const TRUNCATE = 57484
const MAXVALUE = 57485
const PARTITION = 57486
const REORGANIZE = 57487
const LESS = 57488
const THAN = 57489
const PROCEDURE = 57490
const TRIGGER = 57491
const VINDEX = 57492
const VINDEXES = 57493
const STATUS = 57494
const VARIABLES = 57495
const WARNINGS = 57496
const BEGIN = 57497
const START = 57498
const TRANSACTION = 57499
const COMMIT = 57500
const ROLLBACK = 57501
const BIT = 57502
const TINYINT = 57503
const SMALLINT = 57504
const MEDIUMINT = 57505
const INT = 57506
const INTEGER = 57507
const BIGINT = 57508
const INTNUM = 57509
const REAL = 57510
const DOUBLE = 57511
const FLOAT_TYPE = 57512
const DECIMAL = 57513
const NUMERIC = 57514
const TIME = 57515
const TIMESTAMP = 57516
const DATETIME = 57517
const YEAR = 57518
const CHAR = 57519
const VARCHAR = 57520
const BOOL = 57521
const CHARACTER = 57522
const VARBINARY = 57523
const NCHAR = 57524
const TEXT = 57525
const TINYTEXT = 57526
const MEDIUMTEXT = 57527
const LONGTEXT = 57528
const BLOB = 57529
const TINYBLOB = 57530
const MEDIUMBLOB = 57531
const LONGBLOB = 57532
const JSON = 57533
const ENUM = 57534
const GEOMETRY = 57535
const POINT = 57536
const LINESTRING = 57537
const POLYGON = 57538
const GEOMETRYCOLLECTION = 57539
const MULTIPOINT = 57540
const MULTILINESTRING = 57541
const MULTIPOLYGON = 57542
const NULLX = 57543
const AUTO_INCREMENT = 57544
const APPROXNUM = 57545
const SIGNED = 57546
const UNSIGNED = 57547
const ZEROFILL = 57548
const COLLATION = 57549
const DATABASES = 57550
const SCHEMAS = 57551
const TABLES = 57552
const VITESS_KEYSPACES = 57553
const VITESS_SHARDS = 57554
const VITESS_TABLETS = 57555
const VSCHEMA = 57556
const VSCHEMA_TABLES = 57557
const VITESS_TARGET = 57558
const FULL = 57559
const PROCESSLIST = 57560
const COLUMNS = 57561
const FIELDS = 57562
const ENGINES = 57563
const PLUGINS = 57564
const NAMES = 57565
const CHARSET = 57566
const GLOBAL = 57567
const SESSION = 57568
const ISOLATION = 57569
const LEVEL = 57570
const READ = 57571
const WRITE = 57572
const ONLY = 57573
const REPEATABLE = 57574
const COMMITTED = 57575
const UNCOMMITTED = 57576
const SERIALIZABLE = 57577
const CURRENT_TIMESTAMP = 57578
const DATABASE = 57579
const CURRENT_DATE = 57580
const CURRENT_TIME = 57581
const LOCALTIME = 57582
const LOCALTIMESTAMP = 57583
const UTC_DATE = 57584
const UTC_TIME = 57585
const UTC_TIMESTAMP = 57586
const REPLACE = 57587
const CONVERT = 57588
const CAST = 57589
const SUBSTR = 57590
const SUBSTRING = 57591
const GROUP_CONCAT = 57592
const SEPARATOR = 57593
const TIMESTAMPADD = 57594
const TIMESTAMPDIFF = 57595
const MATCH = 57596
const AGAINST = 57597
const BOOLEAN = 57598
const LANGUAGE = 57599
const WITH = 57600
const QUERY = 57601
const EXPANSION = 57602
const UNUSED = 57603

var yyToknames = [...]string{
	"$end",
	"error",
	"$unk",
	"LEX_ERROR",
	"UNION",
	"SELECT",
	"STREAM",
	"INSERT",
	"UPDATE",
	"DELETE",
	"FROM",
	"WHERE",
	"GROUP",
	"HAVING",
	"ORDER",
	"BY",
	"LIMIT",
	"OFFSET",
	"FOR",
	"WATERMARK",
	"DELAY",
	"COUNTING",
	"AFTER",
	"ALL",
	"DISTINCT",
	"AS",
	"EXISTS",
	"ASC",
	"DESC",
	"INTO",
	"DUPLICATE",
	"KEY",
	"DEFAULT",
	"SET",
	"LOCK",
	"UNLOCK",
	"KEYS",
	"VALUES",
	"LAST_INSERT_ID",
	"NEXT",
	"VALUE",
	"SHARE",
	"MODE",
	"SQL_NO_CACHE",
	"SQL_CACHE",
	"JOIN",
	"STRAIGHT_JOIN",
	"LOOKUP",
	"LEFT",
	"RIGHT",
	"INNER",
	"OUTER",
	"CROSS",
	"NATURAL",
	"USE",
	"FORCE",
	"ON",
	"USING",
	"'('",
	"','",
	"')'",
	"ID",
	"HEX",
	"STRING",
	"INTEGRAL",
	"FLOAT",
	"HEXNUM",
	"VALUE_ARG",
	"LIST_ARG",
	"COMMENT",
	"COMMENT_KEYWORD",
	"BIT_LITERAL",
	"NULL",
	"TRUE",
	"FALSE",
	"OFF",
	"OR",
	"AND",
	"NOT",
	"'!'",
	"BETWEEN",
	"CASE",
	"WHEN",
	"THEN",
	"ELSE",
	"END",
	"'='",
	"'<'",
	"'>'",
	"LE",
	"GE",
	"NE",
	"NULL_SAFE_EQUAL",
	"IS",
	"LIKE",
	"REGEXP",
	"IN",
	"RIGHTARROW",
	"'|'",
	"'&'",
	"SHIFT_LEFT",
	"SHIFT_RIGHT",
	"'+'",
	"'-'",
	"'*'",
	"'/'",
	"DIV",
	"'%'",
	"MOD",
	"'^'",
	"'~'",
	"NOT_LIKE_REGEXP",
	"LIKE_REGEXP_CASE_INSENSITIVE",
	"NOT_LIKE_REGEXP_CASE_INSENSITIVE",
	"UNARY",
	"COLLATE",
	"BINARY",
	"UNDERSCORE_BINARY",
	"UNDERSCORE_UTF8MB4",
	"INTERVAL",
	"'.'",
	"JSON_EXTRACT_OP",
	"JSON_UNQUOTE_EXTRACT_OP",
	"CREATE",
	"ALTER",
	"DROP",
	"RENAME",
	"ANALYZE",
	"ADD",
	"FLUSH",
	"SCHEMA",
	"TABLE",
	"DESCRIPTOR",
	"INDEX",
	"VIEW",
	"TO",
	"IGNORE",
	"IF",
	"UNIQUE",
	"PRIMARY",
	"COLUMN",
	"SPATIAL",
	"FULLTEXT",
	"KEY_BLOCK_SIZE",
	"ACTION",
	"CASCADE",
	"CONSTRAINT",
	"FOREIGN",
	"NO",
	"REFERENCES",
	"RESTRICT",
	"SHOW",
	"DESCRIBE",
	"EXPLAIN",
	"DATE",
	"ESCAPE",
	"REPAIR",
	"OPTIMIZE",
	"TRUNCATE",
	"MAXVALUE",
	"PARTITION",
	"REORGANIZE",
	"LESS",
	"THAN",
	"PROCEDURE",
	"TRIGGER",
	"VINDEX",
	"VINDEXES",
	"STATUS",
	"VARIABLES",
	"WARNINGS",
	"BEGIN",
	"START",
	"TRANSACTION",
	"COMMIT",
	"ROLLBACK",
	"BIT",
	"TINYINT",
	"SMALLINT",
	"MEDIUMINT",
	"INT",
	"INTEGER",
	"BIGINT",
	"INTNUM",
	"REAL",
	"DOUBLE",
	"FLOAT_TYPE",
	"DECIMAL",
	"NUMERIC",
	"TIME",
	"TIMESTAMP",
	"DATETIME",
	"YEAR",
	"CHAR",
	"VARCHAR",
	"BOOL",
	"CHARACTER",
	"VARBINARY",
	"NCHAR",
	"TEXT",
	"TINYTEXT",
	"MEDIUMTEXT",
	"LONGTEXT",
	"BLOB",
	"TINYBLOB",
	"MEDIUMBLOB",
	"LONGBLOB",
	"JSON",
	"ENUM",
	"GEOMETRY",
	"POINT",
	"LINESTRING",
	"POLYGON",
	"GEOMETRYCOLLECTION",
	"MULTIPOINT",
	"MULTILINESTRING",
	"MULTIPOLYGON",
	"NULLX",
	"AUTO_INCREMENT",
	"APPROXNUM",
	"SIGNED",
	"UNSIGNED",
	"ZEROFILL",
	"COLLATION",
	"DATABASES",
	"SCHEMAS",
	"TABLES",
	"VITESS_KEYSPACES",
	"VITESS_SHARDS",
	"VITESS_TABLETS",
	"VSCHEMA",
	"VSCHEMA_TABLES",
	"VITESS_TARGET",
	"FULL",
	"PROCESSLIST",
	"COLUMNS",
	"FIELDS",
	"ENGINES",
	"PLUGINS",
	"NAMES",
	"CHARSET",
	"GLOBAL",
	"SESSION",
	"ISOLATION",
	"LEVEL",
	"READ",
	"WRITE",
	"ONLY",
	"REPEATABLE",
	"COMMITTED",
	"UNCOMMITTED",
	"SERIALIZABLE",
	"CURRENT_TIMESTAMP",
	"DATABASE",
	"CURRENT_DATE",
	"CURRENT_TIME",
	"LOCALTIME",
	"LOCALTIMESTAMP",
	"UTC_DATE",
	"UTC_TIME",
	"UTC_TIMESTAMP",
	"REPLACE",
	"CONVERT",
	"CAST",
	"SUBSTR",
	"SUBSTRING",
	"GROUP_CONCAT",
	"SEPARATOR",
	"TIMESTAMPADD",
	"TIMESTAMPDIFF",
	"MATCH",
	"AGAINST",
	"BOOLEAN",
	"LANGUAGE",
	"WITH",
	"QUERY",
	"EXPANSION",
	"UNUSED",
	"';'",
}
var yyStatenames = [...]string{}

const yyEofCode = 1
const yyErrCode = 2
const yyInitialStackSize = 16

//line yacctab:1
var yyExca = [...]int{
	-1, 1,
	1, -1,
	-2, 0,
	-1, 38,
	169, 304,
	170, 304,
	-2, 294,
	-1, 281,
	121, 667,
	-2, 663,
	-1, 282,
	121, 668,
	-2, 664,
	-1, 350,
	87, 847,
	-2, 68,
	-1, 351,
	87, 803,
	-2, 69,
	-1, 356,
	87, 780,
	-2, 629,
	-1, 358,
	87, 824,
	-2, 631,
	-1, 633,
	46, 388,
	51, 388,
	53, 388,
	-2, 350,
	-1, 637,
	1, 356,
	7, 356,
	12, 356,
	13, 356,
	14, 356,
	15, 356,
	17, 356,
	19, 356,
	34, 356,
	35, 356,
	46, 356,
	47, 356,
	48, 356,
	49, 356,
	50, 356,
	51, 356,
	53, 356,
	54, 356,
	57, 356,
	58, 356,
	60, 356,
	61, 356,
	166, 356,
	279, 356,
	-2, 383,
	-1, 641,
	58, 49,
	60, 49,
	-2, 53,
	-1, 787,
	121, 670,
	-2, 666,
	-1, 1017,
	5, 35,
	-2, 457,
	-1, 1053,
	46, 388,
	51, 388,
	53, 388,
	-2, 351,
	-1, 1298,
	5, 35,
	-2, 604,
	-1, 1442,
	5, 35,
	-2, 607,
}

const yyPrivate = 57344

const yyLast = 13742

var yyAct = [...]int{

	282, 1489, 1479, 1261, 1454, 1146, 1428, 286, 593, 1073,
	1050, 1373, 312, 902, 1197, 1326, 299, 62, 1235, 1339,
	1198, 1051, 877, 633, 66, 257, 1071, 1214, 872, 58,
	1194, 248, 931, 206, 945, 901, 1204, 66, 981, 634,
	66, 874, 355, 737, 1169, 1009, 826, 911, 1079, 816,
	915, 751, 1117, 898, 654, 844, 864, 789, 524, 823,
	518, 941, 1100, 592, 3, 349, 344, 458, 857, 269,
	653, 284, 541, 341, 346, 643, 57, 249, 250, 251,
	252, 1126, 1482, 255, 533, 1460, 25, 1477, 1440, 1474,
	964, 640, 1262, 1459, 1439, 1186, 1290, 463, 1229, 608,
	1230, 1231, 892, 491, 61, 893, 894, 607, 963, 925,
	25, 655, 512, 656, 279, 324, 256, 330, 331, 328,
	329, 327, 326, 325, 254, 253, 216, 212, 218, 213,
	214, 332, 333, 25, 1108, 924, 1329, 968, 1045, 55,
	464, 476, 1046, 1345, 932, 1401, 962, 558, 557, 567,
	568, 560, 561, 562, 563, 564, 565, 566, 559, 208,
	186, 210, 22, 55, 569, 1357, 1088, 1281, 1279, 1087,
	508, 511, 1089, 493, 247, 1170, 495, 1149, 509, 506,
	507, 501, 502, 1148, 726, 724, 55, 188, 189, 190,
	191, 192, 66, 206, 1434, 1476, 1471, 66, 1429, 66,
	959, 956, 957, 1145, 955, 858, 492, 494, 916, 66,
	207, 1421, 66, 1172, 1497, 1493, 687, 477, 66, 725,
	1374, 66, 1074, 1076, 206, 465, 206, 206, 1382, 206,
	206, 489, 206, 1376, 206, 273, 966, 969, 210, 1150,
	717, 1142, 730, 206, 918, 1224, 1174, 1144, 1178, 215,
	1173, 1223, 1171, 1222, 461, 209, 727, 1176, 468, 473,
	220, 211, 66, 1408, 975, 1301, 1175, 974, 581, 582,
	1156, 1084, 961, 1036, 1101, 1003, 206, 760, 932, 1177,
	1179, 649, 545, 343, 483, 514, 515, 899, 460, 1247,
	462, 569, 888, 529, 960, 490, 559, 1221, 757, 675,
	469, 918, 569, 475, 1075, 1026, 1375, 540, 1023, 482,
	1419, 1391, 484, 1438, 562, 563, 564, 565, 566, 559,
	1208, 657, 1188, 1402, 526, 569, 470, 1491, 471, 530,
	1492, 472, 1490, 539, 538, 1383, 1381, 688, 965, 66,
	66, 66, 466, 467, 1248, 845, 917, 264, 206, 1143,
	540, 1141, 719, 967, 206, 23, 479, 480, 481, 701,
	704, 705, 706, 707, 708, 709, 527, 710, 711, 712,
	713, 714, 689, 690, 691, 692, 673, 674, 702, 23,
	676, 632, 677, 678, 679, 680, 681, 682, 683, 684,
	685, 686, 693, 694, 695, 696, 697, 698, 699, 700,
	338, 339, 23, 917, 583, 584, 585, 586, 587, 588,
	589, 590, 1133, 752, 642, 921, 581, 582, 647, 581,
	582, 922, 651, 459, 352, 611, 613, 531, 617, 619,
	631, 622, 641, 610, 612, 614, 616, 618, 620, 621,
	195, 983, 1131, 558, 557, 567, 568, 560, 561, 562,
	563, 564, 565, 566, 559, 703, 457, 796, 66, 1106,
	569, 1424, 1021, 206, 1020, 55, 535, 918, 66, 66,
	206, 794, 795, 793, 66, 792, 196, 66, 1498, 1446,
	66, 539, 538, 1022, 66, 538, 206, 206, 759, 1335,
	1334, 206, 206, 206, 66, 206, 206, 459, 540, 753,
	1010, 540, 206, 206, 560, 561, 562, 563, 564, 565,
	566, 559, 1121, 845, 1132, 1033, 1120, 569, 1499, 1137,
	1134, 1127, 1135, 1130, 982, 1109, 739, 1128, 1129, 1448,
	758, 763, 764, 206, 539, 538, 275, 66, 1420, 539,
	538, 1136, 817, 206, 818, 1352, 1190, 539, 538, 665,
	731, 540, 779, 781, 782, 766, 540, 1332, 780, 721,
	722, 790, 1153, 1118, 540, 728, 1379, 1475, 343, 917,
	1090, 734, 1091, 1417, 914, 912, 1264, 913, 1101, 352,
	539, 538, 910, 916, 1096, 745, 1450, 517, 787, 785,
	819, 206, 765, 1000, 1001, 1002, 736, 540, 1379, 1432,
	517, 768, 1379, 517, 1379, 1409, 1379, 1378, 835, 838,
	1324, 1323, 849, 735, 846, 783, 720, 1287, 1303, 517,
	1300, 517, 1254, 1253, 206, 206, 1250, 1251, 775, 1250,
	1249, 66, 1388, 302, 301, 304, 305, 306, 307, 66,
	718, 66, 303, 308, 66, 66, 1015, 517, 66, 66,
	66, 206, 715, 820, 821, 861, 517, 1387, 879, 830,
	828, 517, 788, 485, 206, 797, 798, 799, 800, 801,
	802, 803, 804, 805, 806, 807, 808, 809, 810, 811,
	812, 813, 814, 815, 478, 883, 854, 1244, 842, 885,
	664, 663, 739, 313, 52, 645, 645, 558, 557, 567,
	568, 560, 561, 562, 563, 564, 565, 566, 559, 919,
	881, 933, 934, 935, 569, 886, 889, 1195, 66, 206,
	1207, 206, 859, 890, 850, 206, 206, 66, 66, 1159,
	66, 66, 906, 1080, 66, 206, 884, 59, 882, 1080,
	644, 1465, 646, 646, 648, 644, 52, 1207, 828, 947,
	860, 66, 1296, 66, 66, 1390, 66, 567, 568, 560,
	561, 562, 563, 564, 565, 566, 559, 288, 861, 1252,
	867, 1220, 569, 943, 944, 1092, 861, 786, 1015, 891,
	1039, 861, 1015, 927, 928, 929, 930, 1207, 1038, 55,
	517, 1015, 644, 650, 761, 521, 525, 729, 261, 938,
	939, 940, 266, 787, 990, 1461, 790, 1341, 926, 950,
	868, 866, 869, 870, 1311, 546, 946, 871, 972, 973,
	991, 976, 977, 825, 517, 978, 1240, 993, 558, 557,
	567, 568, 560, 561, 562, 563, 564, 565, 566, 559,
	1457, 1456, 980, 1215, 1216, 569, 1095, 986, 942, 867,
	594, 1005, 937, 936, 1484, 55, 1147, 949, 1480, 605,
	1242, 1213, 66, 1195, 66, 66, 66, 1122, 1052, 516,
	755, 733, 774, 66, 1063, 1455, 66, 206, 265, 1055,
	1064, 66, 352, 66, 1056, 1053, 1057, 1061, 1059, 868,
	866, 869, 870, 1062, 1218, 903, 871, 1065, 1078, 1032,
	869, 870, 206, 1058, 1217, 1060, 1211, 1210, 1469, 1006,
	1007, 1008, 270, 271, 1458, 1093, 1155, 488, 987, 488,
	488, 1047, 488, 488, 1081, 488, 534, 488, 1066, 1463,
	998, 997, 1082, 519, 1083, 1105, 488, 1113, 662, 830,
	486, 532, 1426, 1425, 1355, 1103, 1085, 1097, 1294, 520,
	206, 206, 1337, 952, 52, 732, 528, 873, 262, 52,
	1110, 1111, 267, 268, 1098, 1099, 534, 1467, 1466, 258,
	1395, 259, 996, 59, 578, 1080, 1394, 580, 1102, 206,
	995, 1343, 510, 1486, 1485, 1112, 1125, 1114, 1115, 1116,
	1119, 1027, 786, 1024, 750, 66, 536, 1486, 1405, 1330,
	756, 185, 187, 56, 206, 591, 1, 595, 596, 597,
	598, 599, 600, 601, 602, 603, 1478, 606, 609, 609,
	609, 615, 609, 609, 615, 609, 623, 624, 625, 626,
	627, 628, 1152, 638, 1263, 311, 1338, 958, 1138, 1427,
	862, 867, 1372, 1234, 909, 900, 194, 754, 456, 206,
	206, 579, 1163, 1052, 193, 66, 1196, 1418, 908, 1199,
	1187, 907, 1168, 1380, 1162, 1328, 920, 1181, 204, 1107,
	923, 1180, 1241, 1104, 1423, 776, 777, 670, 206, 787,
	990, 868, 866, 869, 870, 668, 1157, 669, 871, 667,
	672, 1215, 1216, 206, 1209, 206, 206, 671, 666, 1206,
	232, 347, 658, 948, 537, 197, 1140, 637, 1233, 1226,
	1139, 954, 1201, 504, 1225, 505, 234, 577, 994, 1086,
	353, 1202, 1453, 66, 1433, 1165, 1166, 762, 1232, 523,
	1228, 1393, 594, 903, 1342, 833, 834, 1031, 1182, 1183,
	66, 1184, 1185, 767, 1237, 604, 206, 843, 287, 206,
	206, 66, 778, 1192, 1193, 300, 488, 206, 1256, 297,
	66, 1238, 1239, 488, 1245, 1246, 298, 769, 1044, 547,
	1257, 285, 1259, 277, 636, 629, 865, 863, 1054, 488,
	488, 342, 1212, 1307, 488, 488, 488, 1314, 488, 488,
	1069, 1268, 1070, 635, 897, 488, 488, 1158, 1289, 1400,
	773, 1270, 27, 184, 272, 827, 829, 1269, 19, 1277,
	18, 17, 20, 16, 1255, 1052, 15, 14, 474, 31,
	1243, 206, 52, 21, 13, 12, 11, 1295, 354, 1305,
	10, 1258, 9, 206, 8, 1161, 1304, 1308, 7, 6,
	5, 206, 1267, 4, 60, 260, 1093, 1313, 1312, 263,
	24, 2, 1322, 0, 0, 0, 206, 0, 0, 354,
	0, 354, 354, 206, 354, 354, 0, 354, 1191, 354,
	0, 0, 0, 0, 52, 0, 0, 0, 354, 1272,
	1274, 1275, 1331, 1276, 1333, 0, 1278, 0, 1280, 595,
	0, 0, 0, 0, 0, 988, 989, 0, 525, 0,
	0, 206, 206, 0, 206, 0, 0, 0, 1344, 1199,
	0, 543, 206, 66, 0, 0, 791, 1356, 0, 206,
	206, 206, 66, 0, 903, 206, 903, 1364, 0, 0,
	1363, 0, 875, 876, 1368, 1369, 1370, 638, 0, 879,
	0, 638, 206, 1377, 1371, 0, 1325, 1384, 0, 0,
	0, 0, 0, 0, 0, 0, 487, 1392, 0, 0,
	0, 0, 0, 1358, 0, 1016, 0, 66, 0, 0,
	1199, 0, 1406, 0, 0, 1411, 0, 0, 992, 0,
	206, 1415, 1034, 354, 1416, 1385, 0, 1386, 1161, 659,
	1410, 206, 206, 0, 0, 0, 0, 0, 0, 1346,
	1347, 1348, 1349, 1350, 1436, 1431, 637, 1353, 1354, 206,
	1430, 637, 488, 1052, 488, 637, 1441, 0, 0, 0,
	831, 832, 66, 1407, 837, 840, 841, 0, 488, 0,
	206, 0, 1012, 0, 0, 0, 1013, 0, 1452, 0,
	0, 0, 0, 1017, 1018, 1019, 0, 0, 0, 853,
	1025, 855, 856, 1028, 1029, 0, 1464, 1462, 0, 1035,
	0, 0, 206, 1037, 903, 0, 1040, 1041, 1042, 1043,
	1472, 0, 0, 0, 0, 0, 0, 1470, 0, 0,
	1004, 1483, 0, 0, 0, 0, 0, 1068, 1494, 0,
	0, 0, 0, 0, 1340, 0, 0, 0, 354, 0,
	1293, 0, 0, 0, 0, 354, 0, 0, 0, 0,
	0, 0, 0, 1447, 0, 0, 0, 0, 0, 0,
	1154, 354, 354, 0, 0, 0, 354, 354, 354, 0,
	354, 354, 0, 0, 0, 0, 0, 354, 354, 558,
	557, 567, 568, 560, 561, 562, 563, 564, 565, 566,
	559, 1048, 1049, 0, 0, 638, 569, 638, 638, 638,
	0, 791, 1292, 0, 0, 0, 0, 0, 770, 875,
	1189, 0, 1077, 0, 0, 0, 638, 0, 543, 0,
	0, 354, 496, 497, 0, 498, 499, 0, 500, 0,
	503, 0, 0, 0, 0, 0, 1487, 999, 0, 513,
	0, 558, 557, 567, 568, 560, 561, 562, 563, 564,
	565, 566, 559, 0, 0, 0, 0, 1227, 569, 0,
	0, 0, 1340, 903, 0, 0, 822, 1167, 0, 637,
	0, 637, 637, 637, 0, 0, 0, 0, 0, 0,
	0, 0, 847, 637, 488, 0, 0, 0, 1014, 0,
	637, 0, 0, 0, 0, 0, 0, 0, 0, 851,
	852, 0, 0, 0, 0, 0, 1030, 0, 0, 0,
	0, 0, 488, 0, 0, 0, 0, 522, 0, 0,
	0, 0, 1219, 0, 0, 0, 354, 558, 557, 567,
	568, 560, 561, 562, 563, 564, 565, 566, 559, 354,
	0, 63, 0, 0, 569, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 219, 0, 0, 246, 0, 1286,
	0, 0, 0, 0, 0, 0, 0, 1291, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 594, 0, 0,
	1200, 0, 52, 0, 0, 1306, 0, 0, 638, 0,
	1309, 0, 1310, 0, 354, 0, 354, 0, 1315, 0,
	970, 971, 0, 0, 0, 0, 0, 0, 0, 0,
	354, 0, 0, 0, 0, 1271, 0, 0, 0, 0,
	0, 0, 1273, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 1282, 1283, 0, 354, 0, 0, 558,
	557, 567, 568, 560, 561, 562, 563, 564, 565, 566,
	559, 0, 0, 1297, 1298, 1299, 569, 1302, 0, 716,
	0, 0, 637, 0, 0, 0, 723, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 1321, 0,
	0, 0, 740, 741, 0, 0, 0, 742, 743, 744,
	0, 746, 747, 638, 0, 0, 0, 0, 748, 749,
	0, 0, 0, 0, 0, 0, 276, 0, 0, 345,
	0, 0, 0, 0, 219, 0, 219, 0, 0, 0,
	1288, 0, 0, 0, 0, 0, 219, 0, 0, 219,
	0, 0, 0, 0, 0, 219, 847, 0, 219, 0,
	0, 0, 1351, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 1072, 0, 0, 0, 1318, 1319, 1320, 0,
	0, 0, 0, 0, 0, 0, 0, 637, 0, 0,
	0, 1435, 594, 0, 0, 0, 0, 354, 0, 63,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 488,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 1396,
	1397, 1398, 1399, 0, 0, 0, 1403, 1404, 557, 567,
	568, 560, 561, 562, 563, 564, 565, 566, 559, 0,
	0, 1412, 1413, 1414, 569, 1123, 354, 0, 0, 0,
	1200, 0, 0, 1359, 1468, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 1473, 0, 0, 0, 0, 0,
	1366, 1367, 0, 1437, 354, 0, 219, 219, 219, 0,
	1442, 0, 0, 1444, 1445, 0, 0, 0, 0, 0,
	0, 1389, 0, 0, 0, 0, 0, 0, 0, 354,
	1449, 0, 0, 0, 0, 229, 0, 0, 0, 0,
	0, 1200, 0, 52, 0, 0, 0, 0, 0, 0,
	638, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	242, 0, 354, 0, 0, 951, 0, 953, 0, 0,
	0, 847, 0, 0, 1203, 1205, 0, 0, 0, 0,
	0, 979, 0, 0, 0, 0, 0, 0, 0, 0,
	1495, 1496, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 1205, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 221, 0, 0, 354, 0,
	354, 1236, 224, 0, 637, 219, 0, 0, 0, 0,
	233, 0, 228, 0, 0, 219, 219, 0, 0, 0,
	0, 219, 0, 0, 219, 0, 0, 219, 0, 0,
	0, 738, 0, 0, 0, 0, 0, 0, 0, 0,
	1481, 219, 1164, 231, 0, 0, 0, 0, 0, 241,
	0, 1260, 0, 0, 1265, 1266, 0, 0, 0, 0,
	0, 0, 354, 558, 557, 567, 568, 560, 561, 562,
	563, 564, 565, 566, 559, 222, 0, 0, 0, 0,
	569, 0, 0, 0, 219, 0, 0, 0, 0, 0,
	0, 0, 0, 738, 0, 0, 0, 0, 0, 0,
	0, 0, 235, 225, 226, 0, 236, 237, 238, 240,
	0, 239, 245, 847, 0, 0, 227, 230, 0, 223,
	244, 243, 0, 0, 0, 0, 1072, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 354, 276,
	0, 0, 0, 0, 276, 276, 1327, 0, 276, 276,
	276, 0, 0, 0, 848, 0, 0, 0, 0, 0,
	0, 354, 0, 0, 0, 0, 0, 0, 354, 0,
	0, 0, 0, 276, 276, 276, 276, 1124, 219, 0,
	0, 0, 0, 0, 0, 0, 219, 0, 63, 0,
	0, 219, 219, 0, 0, 219, 887, 738, 0, 0,
	0, 0, 0, 0, 0, 1151, 1360, 1361, 0, 1362,
	25, 26, 53, 28, 29, 0, 0, 1327, 0, 0,
	0, 0, 0, 0, 1327, 1327, 1327, 0, 0, 0,
	1236, 0, 0, 44, 0, 0, 0, 0, 30, 49,
	50, 0, 0, 0, 0, 0, 0, 1327, 0, 0,
	0, 0, 0, 0, 0, 0, 1285, 0, 0, 39,
	0, 0, 0, 55, 0, 219, 0, 0, 0, 0,
	0, 0, 0, 847, 219, 219, 0, 219, 219, 0,
	0, 219, 0, 0, 0, 1422, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 354, 354, 219, 0,
	984, 985, 0, 219, 0, 0, 0, 0, 738, 0,
	0, 847, 0, 1284, 1443, 0, 0, 0, 0, 0,
	0, 276, 0, 0, 0, 0, 0, 0, 32, 33,
	35, 34, 37, 0, 51, 1451, 558, 557, 567, 568,
	560, 561, 562, 563, 564, 565, 566, 559, 0, 0,
	0, 0, 0, 569, 0, 0, 38, 45, 46, 0,
	0, 47, 48, 36, 0, 0, 0, 1327, 0, 0,
	0, 0, 276, 0, 0, 0, 40, 41, 0, 42,
	43, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	276, 0, 0, 558, 557, 567, 568, 560, 561, 562,
	563, 564, 565, 566, 559, 0, 0, 0, 848, 219,
	569, 219, 219, 219, 0, 0, 0, 0, 0, 0,
	1067, 0, 0, 219, 549, 0, 556, 0, 63, 0,
	219, 0, 570, 571, 572, 573, 574, 575, 576, 0,
	550, 555, 548, 0, 558, 557, 567, 568, 560, 561,
	562, 563, 564, 565, 566, 559, 551, 553, 552, 554,
	0, 569, 1011, 0, 0, 0, 54, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 23,
	0, 0, 1336, 558, 557, 567, 568, 560, 561, 562,
	563, 564, 565, 566, 559, 0, 0, 0, 0, 0,
	569, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 219, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 276, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 276, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 738, 0, 0, 0, 0, 0,
	0, 0, 0, 848, 0, 0, 0, 0, 0, 0,
	0, 0, 219, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 127, 0, 180, 89, 85, 67, 0,
	0, 0, 0, 0, 0, 0, 91, 0, 0, 0,
	219, 0, 108, 0, 110, 0, 0, 148, 119, 0,
	0, 0, 0, 0, 0, 0, 0, 219, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 205, 219, 0,
	0, 0, 0, 0, 0, 0, 82, 219, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 558, 557, 567, 568, 560, 561,
	562, 563, 564, 565, 566, 559, 0, 0, 0, 0,
	0, 569, 0, 0, 0, 848, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 97, 0, 0, 0, 0,
	170, 0, 0, 0, 0, 134, 0, 151, 99, 107,
	69, 76, 0, 98, 125, 139, 143, 0, 0, 0,
	86, 0, 141, 129, 163, 0, 130, 140, 111, 156,
	135, 0, 171, 172, 153, 169, 179, 70, 152, 162,
	83, 144, 72, 160, 150, 117, 103, 104, 71, 0,
	138, 90, 95, 88, 126, 157, 158, 87, 182, 77,
	168, 74, 78, 167, 124, 155, 161, 118, 115, 73,
	159, 116, 114, 106, 93, 100, 132, 113, 133, 101,
	121, 120, 122, 0, 0, 0, 149, 165, 183, 80,
	1365, 145, 154, 173, 174, 175, 176, 177, 178, 63,
	0, 81, 96, 92, 131, 123, 79, 102, 146, 105,
	112, 137, 181, 128, 142, 84, 164, 147, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 68, 75, 109,
	0, 136, 94, 166, 219, 848, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 848, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 443, 431, 219,
	402, 446, 380, 394, 454, 395, 396, 424, 366, 410,
	127, 392, 180, 89, 85, 67, 0, 383, 361, 389,
	362, 381, 404, 91, 407, 379, 433, 413, 445, 108,
	452, 110, 418, 0, 148, 119, 0, 0, 406, 435,
	0, 408, 429, 401, 425, 371, 417, 447, 393, 422,
	448, 0, 0, 0, 205, 0, 904, 905, 0, 0,
	0, 0, 0, 82, 0, 420, 442, 391, 421, 423,
	360, 419, 0, 364, 367, 453, 437, 386, 387, 1094,
	0, 0, 0, 0, 0, 0, 405, 409, 426, 399,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 384,
	0, 416, 0, 0, 0, 0, 0, 0, 368, 365,
	0, 0, 403, 0, 0, 0, 370, 0, 385, 427,
	0, 359, 97, 430, 436, 0, 400, 170, 440, 398,
	397, 444, 134, 0, 151, 99, 107, 69, 76, 0,
	98, 125, 139, 143, 434, 382, 390, 86, 388, 141,
	129, 163, 415, 130, 140, 111, 156, 135, 441, 171,
	172, 153, 169, 179, 70, 152, 162, 83, 144, 72,
	160, 150, 117, 103, 104, 71, 0, 138, 90, 95,
	88, 126, 157, 158, 87, 182, 77, 168, 74, 78,
	167, 124, 155, 161, 118, 115, 73, 159, 116, 114,
	106, 93, 100, 132, 113, 133, 101, 121, 120, 122,
	0, 363, 0, 149, 165, 183, 80, 378, 145, 154,
	173, 174, 175, 176, 177, 178, 0, 0, 81, 96,
	92, 131, 123, 79, 102, 146, 105, 112, 137, 181,
	128, 142, 84, 164, 147, 374, 377, 372, 373, 411,
	412, 449, 450, 451, 428, 369, 0, 375, 376, 0,
	432, 438, 439, 414, 68, 75, 109, 455, 136, 94,
	166, 443, 431, 0, 402, 446, 380, 394, 454, 395,
	396, 424, 366, 410, 127, 392, 180, 89, 85, 67,
	0, 383, 361, 389, 362, 381, 404, 91, 407, 379,
	433, 413, 445, 108, 452, 110, 418, 0, 148, 119,
	0, 0, 406, 435, 0, 408, 429, 401, 425, 371,
	417, 447, 393, 422, 448, 0, 0, 0, 205, 0,
	904, 905, 0, 0, 0, 0, 0, 82, 0, 420,
	442, 391, 421, 423, 360, 419, 0, 364, 367, 453,
	437, 386, 387, 0, 0, 0, 0, 0, 0, 0,
	405, 409, 426, 399, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 384, 0, 416, 0, 0, 0, 0,
	0, 0, 368, 365, 0, 0, 403, 0, 0, 0,
	370, 0, 385, 427, 0, 359, 97, 430, 436, 0,
	400, 170, 440, 398, 397, 444, 134, 0, 151, 99,
	107, 69, 76, 0, 98, 125, 139, 143, 434, 382,
	390, 86, 388, 141, 129, 163, 415, 130, 140, 111,
	156, 135, 441, 171, 172, 153, 169, 179, 70, 152,
	162, 83, 144, 72, 160, 150, 117, 103, 104, 71,
	0, 138, 90, 95, 88, 126, 157, 158, 87, 182,
	77, 168, 74, 78, 167, 124, 155, 161, 118, 115,
	73, 159, 116, 114, 106, 93, 100, 132, 113, 133,
	101, 121, 120, 122, 0, 363, 0, 149, 165, 183,
	80, 378, 145, 154, 173, 174, 175, 176, 177, 178,
	0, 0, 81, 96, 92, 131, 123, 79, 102, 146,
	105, 112, 137, 181, 128, 142, 84, 164, 147, 374,
	377, 372, 373, 411, 412, 449, 450, 451, 428, 369,
	0, 375, 376, 0, 432, 438, 439, 414, 68, 75,
	109, 455, 136, 94, 166, 443, 431, 0, 402, 446,
	380, 394, 454, 395, 396, 424, 366, 410, 127, 392,
	180, 89, 85, 67, 0, 383, 361, 389, 362, 381,
	404, 91, 407, 379, 433, 413, 445, 108, 452, 110,
	418, 0, 148, 119, 0, 0, 406, 435, 0, 408,
	429, 401, 425, 371, 417, 447, 393, 422, 448, 55,
	0, 0, 205, 0, 0, 0, 0, 0, 0, 0,
	0, 82, 0, 420, 442, 391, 421, 423, 360, 419,
	0, 364, 367, 453, 437, 386, 387, 0, 0, 0,
	0, 0, 0, 0, 405, 409, 426, 399, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 384, 0, 416,
	0, 0, 0, 0, 0, 0, 368, 365, 0, 0,
	403, 0, 0, 0, 370, 0, 385, 427, 0, 359,
	97, 430, 436, 0, 400, 170, 440, 398, 397, 444,
	134, 0, 151, 99, 107, 69, 76, 0, 98, 125,
	139, 143, 434, 382, 390, 86, 388, 141, 129, 163,
	415, 130, 140, 111, 156, 135, 441, 171, 172, 153,
	169, 179, 70, 152, 162, 83, 144, 72, 160, 150,
	117, 103, 104, 71, 0, 138, 90, 95, 88, 126,
	157, 158, 87, 182, 77, 168, 74, 78, 167, 124,
	155, 161, 118, 115, 73, 159, 116, 114, 106, 93,
	100, 132, 113, 133, 101, 121, 120, 122, 0, 363,
	0, 149, 165, 183, 80, 378, 145, 154, 173, 174,
	175, 176, 177, 178, 0, 0, 81, 96, 92, 131,
	123, 79, 102, 146, 105, 112, 137, 181, 128, 142,
	84, 164, 147, 374, 377, 372, 373, 411, 412, 449,
	450, 451, 428, 369, 0, 375, 376, 0, 432, 438,
	439, 414, 68, 75, 109, 455, 136, 94, 166, 443,
	431, 0, 402, 446, 380, 394, 454, 395, 396, 424,
	366, 410, 127, 392, 180, 89, 85, 67, 0, 383,
	361, 389, 362, 381, 404, 91, 407, 379, 433, 413,
	445, 108, 452, 110, 418, 0, 148, 119, 0, 0,
	406, 435, 0, 408, 429, 401, 425, 371, 417, 447,
	393, 422, 448, 0, 0, 0, 205, 0, 0, 0,
	0, 0, 0, 0, 0, 82, 0, 420, 442, 391,
	421, 423, 360, 419, 0, 364, 367, 453, 437, 386,
	387, 0, 0, 0, 0, 0, 0, 0, 405, 409,
	426, 399, 0, 0, 0, 0, 0, 0, 0, 1160,
	0, 384, 0, 416, 0, 0, 0, 0, 0, 0,
	368, 365, 0, 0, 403, 0, 0, 0, 370, 0,
	385, 427, 0, 359, 97, 430, 436, 0, 400, 170,
	440, 398, 397, 444, 134, 0, 151, 99, 107, 69,
	76, 0, 98, 125, 139, 143, 434, 382, 390, 86,
	388, 141, 129, 163, 415, 130, 140, 111, 156, 135,
	441, 171, 172, 153, 169, 179, 70, 152, 162, 83,
	144, 72, 160, 150, 117, 103, 104, 71, 0, 138,
	90, 95, 88, 126, 157, 158, 87, 182, 77, 168,
	74, 78, 167, 124, 155, 161, 118, 115, 73, 159,
	116, 114, 106, 93, 100, 132, 113, 133, 101, 121,
	120, 122, 0, 363, 0, 149, 165, 183, 80, 378,
	145, 154, 173, 174, 175, 176, 177, 178, 0, 0,
	81, 96, 92, 131, 123, 79, 102, 146, 105, 112,
	137, 181, 128, 142, 84, 164, 147, 374, 377, 372,
	373, 411, 412, 449, 450, 451, 428, 369, 0, 375,
	376, 0, 432, 438, 439, 414, 68, 75, 109, 455,
	136, 94, 166, 443, 431, 0, 402, 446, 380, 394,
	454, 395, 396, 424, 366, 410, 127, 392, 180, 89,
	85, 67, 0, 383, 361, 389, 362, 381, 404, 91,
	407, 379, 433, 413, 445, 108, 452, 110, 418, 0,
	148, 119, 0, 0, 406, 435, 0, 408, 429, 401,
	425, 371, 417, 447, 393, 422, 448, 0, 0, 0,
	65, 0, 0, 0, 0, 0, 0, 0, 0, 82,
	0, 420, 442, 391, 421, 423, 360, 419, 0, 364,
	367, 453, 437, 386, 387, 0, 0, 0, 0, 0,
	0, 0, 405, 409, 426, 399, 0, 0, 0, 0,
	0, 0, 0, 888, 0, 384, 0, 416, 0, 0,
	0, 0, 0, 0, 368, 365, 0, 0, 403, 0,
	0, 0, 370, 0, 385, 427, 0, 359, 97, 430,
	436, 0, 400, 170, 440, 398, 397, 444, 134, 0,
	151, 99, 107, 69, 76, 0, 98, 125, 139, 143,
	434, 382, 390, 86, 388, 141, 129, 163, 415, 130,
	140, 111, 156, 135, 441, 171, 172, 153, 169, 179,
	70, 152, 162, 83, 144, 72, 160, 150, 117, 103,
	104, 71, 0, 138, 90, 95, 88, 126, 157, 158,
	87, 182, 77, 168, 74, 78, 167, 124, 155, 161,
	118, 115, 73, 159, 116, 114, 106, 93, 100, 132,
	113, 133, 101, 121, 120, 122, 0, 363, 0, 149,
	165, 183, 80, 378, 145, 154, 173, 174, 175, 176,
	177, 178, 0, 0, 81, 96, 92, 131, 123, 79,
	102, 146, 105, 112, 137, 181, 128, 142, 84, 164,
	147, 374, 377, 372, 373, 411, 412, 449, 450, 451,
	428, 369, 0, 375, 376, 0, 432, 438, 439, 414,
	68, 75, 109, 455, 136, 94, 166, 443, 431, 0,
	402, 446, 380, 394, 454, 395, 396, 424, 366, 410,
	127, 392, 180, 89, 85, 67, 0, 383, 361, 389,
	362, 381, 404, 91, 407, 379, 433, 413, 445, 108,
	452, 110, 418, 0, 148, 119, 0, 0, 406, 435,
	0, 408, 429, 401, 425, 371, 417, 447, 393, 422,
	448, 0, 0, 0, 281, 0, 0, 0, 0, 0,
	0, 0, 0, 82, 0, 420, 442, 391, 421, 423,
	360, 419, 0, 364, 367, 453, 437, 386, 387, 0,
	0, 0, 0, 0, 0, 0, 405, 409, 426, 399,
	0, 0, 0, 0, 0, 0, 0, 784, 0, 384,
	0, 416, 0, 0, 0, 0, 0, 0, 368, 365,
	0, 0, 403, 0, 0, 0, 370, 0, 385, 427,
	0, 359, 97, 430, 436, 0, 400, 170, 440, 398,
	397, 444, 134, 0, 151, 99, 107, 69, 76, 0,
	98, 125, 139, 143, 434, 382, 390, 86, 388, 141,
	129, 163, 415, 130, 140, 111, 156, 135, 441, 171,
	172, 153, 169, 179, 70, 152, 162, 83, 144, 72,
	160, 150, 117, 103, 104, 71, 0, 138, 90, 95,
	88, 126, 157, 158, 87, 182, 77, 168, 74, 78,
	167, 124, 155, 161, 118, 115, 73, 159, 116, 114,
	106, 93, 100, 132, 113, 133, 101, 121, 120, 122,
	0, 363, 0, 149, 165, 183, 80, 378, 145, 154,
	173, 174, 175, 176, 177, 178, 0, 0, 81, 96,
	92, 131, 123, 79, 102, 146, 105, 112, 137, 181,
	128, 142, 84, 164, 147, 374, 377, 372, 373, 411,
	412, 449, 450, 451, 428, 369, 0, 375, 376, 0,
	432, 438, 439, 414, 68, 75, 109, 455, 136, 94,
	166, 443, 431, 0, 402, 446, 380, 394, 454, 395,
	396, 424, 366, 410, 127, 392, 180, 89, 85, 67,
	0, 383, 361, 389, 362, 381, 404, 91, 407, 379,
	433, 413, 445, 108, 452, 110, 418, 0, 148, 119,
	0, 0, 406, 435, 0, 408, 429, 401, 425, 371,
	417, 447, 393, 422, 448, 0, 0, 0, 205, 0,
	0, 0, 0, 0, 0, 0, 0, 82, 0, 420,
	442, 391, 421, 423, 360, 419, 0, 364, 367, 453,
	437, 386, 387, 0, 0, 0, 0, 0, 0, 0,
	405, 409, 426, 399, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 384, 0, 416, 0, 0, 0, 0,
	0, 0, 368, 365, 0, 0, 403, 0, 0, 0,
	370, 0, 385, 427, 0, 359, 97, 430, 436, 0,
	400, 170, 440, 398, 397, 444, 134, 0, 151, 99,
	107, 69, 76, 0, 98, 125, 139, 143, 434, 382,
	390, 86, 388, 141, 129, 163, 415, 130, 140, 111,
	156, 135, 441, 171, 172, 153, 169, 179, 70, 152,
	162, 83, 144, 72, 160, 150, 117, 103, 104, 71,
	0, 138, 90, 95, 88, 126, 157, 158, 87, 182,
	77, 168, 74, 78, 167, 124, 155, 161, 118, 115,
	73, 159, 116, 114, 106, 93, 100, 132, 113, 133,
	101, 121, 120, 122, 0, 363, 0, 149, 165, 183,
	80, 378, 145, 154, 173, 174, 175, 176, 177, 178,
	0, 0, 81, 96, 92, 131, 123, 79, 102, 146,
	105, 112, 137, 181, 128, 142, 84, 164, 147, 374,
	377, 372, 373, 411, 412, 449, 450, 451, 428, 369,
	0, 375, 376, 0, 432, 438, 439, 414, 68, 75,
	109, 455, 136, 94, 166, 443, 431, 0, 402, 446,
	380, 394, 454, 395, 396, 424, 366, 410, 127, 392,
	180, 89, 85, 67, 0, 383, 361, 389, 362, 381,
	404, 91, 407, 379, 433, 413, 445, 108, 452, 110,
	418, 0, 148, 119, 0, 0, 406, 435, 0, 408,
	429, 401, 425, 371, 417, 447, 393, 422, 448, 0,
	0, 0, 281, 0, 0, 0, 0, 0, 0, 0,
	0, 82, 0, 420, 442, 391, 421, 423, 360, 419,
	0, 364, 367, 453, 437, 386, 387, 0, 0, 0,
	0, 0, 0, 0, 405, 409, 426, 399, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 384, 0, 416,
	0, 0, 0, 0, 0, 0, 368, 365, 0, 0,
	403, 0, 0, 0, 370, 0, 385, 427, 0, 359,
	97, 430, 436, 0, 400, 170, 440, 398, 397, 444,
	134, 0, 151, 99, 107, 69, 76, 0, 98, 125,
	139, 143, 434, 382, 390, 86, 388, 141, 129, 163,
	415, 130, 140, 111, 156, 135, 441, 171, 172, 153,
	169, 179, 70, 152, 162, 83, 144, 72, 160, 150,
	117, 103, 104, 71, 0, 138, 90, 95, 88, 126,
	157, 158, 87, 182, 77, 168, 74, 78, 167, 124,
	155, 161, 118, 115, 73, 159, 116, 114, 106, 93,
	100, 132, 113, 133, 101, 121, 120, 122, 0, 363,
	0, 149, 165, 183, 80, 378, 145, 154, 173, 174,
	175, 176, 177, 178, 0, 0, 81, 96, 92, 131,
	123, 79, 102, 146, 105, 112, 137, 181, 128, 142,
	84, 164, 147, 374, 377, 372, 373, 411, 412, 449,
	450, 451, 428, 369, 0, 375, 376, 0, 432, 438,
	439, 414, 68, 75, 109, 455, 136, 94, 166, 443,
	431, 0, 402, 446, 380, 394, 454, 395, 396, 424,
	366, 410, 127, 392, 180, 89, 85, 67, 0, 383,
	361, 389, 362, 381, 404, 91, 407, 379, 433, 413,
	445, 108, 452, 110, 418, 0, 148, 119, 0, 0,
	406, 435, 0, 408, 429, 401, 425, 371, 417, 447,
	393, 422, 448, 0, 0, 0, 205, 0, 0, 0,
	0, 0, 0, 0, 0, 82, 0, 420, 442, 391,
	421, 423, 360, 419, 0, 364, 367, 453, 437, 386,
	387, 0, 0, 0, 0, 0, 0, 0, 405, 409,
	426, 399, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 384, 0, 416, 0, 0, 0, 0, 0, 0,
	368, 365, 0, 0, 403, 0, 0, 0, 370, 0,
	385, 427, 0, 359, 97, 430, 436, 0, 400, 170,
	440, 398, 397, 444, 134, 0, 151, 99, 107, 69,
	76, 0, 98, 125, 139, 143, 434, 382, 390, 86,
	388, 141, 129, 163, 415, 130, 140, 111, 156, 135,
	441, 171, 172, 153, 169, 179, 70, 152, 162, 83,
	144, 72, 160, 150, 117, 103, 104, 71, 0, 138,
	90, 95, 88, 126, 157, 158, 87, 182, 77, 168,
	74, 357, 167, 124, 155, 161, 118, 115, 73, 159,
	116, 114, 106, 93, 100, 132, 113, 133, 101, 121,
	120, 122, 0, 363, 0, 149, 165, 183, 80, 378,
	145, 154, 173, 174, 175, 176, 177, 178, 0, 0,
	81, 96, 92, 131, 358, 356, 102, 146, 105, 112,
	137, 181, 128, 142, 84, 164, 147, 374, 377, 372,
	373, 411, 412, 449, 450, 451, 428, 369, 0, 375,
	376, 0, 432, 438, 439, 414, 68, 75, 109, 455,
	136, 94, 166, 443, 431, 0, 402, 446, 380, 394,
	454, 395, 396, 424, 366, 410, 127, 392, 180, 89,
	85, 67, 0, 383, 361, 389, 362, 381, 404, 91,
	407, 379, 433, 413, 445, 108, 452, 110, 418, 0,
	148, 119, 0, 0, 406, 435, 0, 408, 429, 401,
	425, 371, 417, 447, 393, 422, 448, 0, 0, 0,
	65, 0, 0, 0, 0, 0, 0, 0, 0, 82,
	0, 420, 442, 391, 421, 423, 360, 419, 0, 364,
	367, 453, 437, 386, 387, 0, 0, 0, 0, 0,
	0, 0, 405, 409, 426, 399, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 384, 0, 416, 0, 0,
	0, 0, 0, 0, 368, 365, 0, 0, 403, 0,
	0, 0, 370, 0, 385, 427, 0, 359, 97, 430,
	436, 0, 400, 170, 440, 398, 397, 444, 134, 0,
	151, 99, 107, 69, 76, 0, 98, 125, 139, 143,
	434, 382, 390, 86, 388, 141, 129, 163, 415, 130,
	140, 111, 156, 135, 441, 171, 172, 153, 169, 179,
	70, 152, 162, 83, 144, 72, 160, 150, 117, 103,
	104, 71, 0, 138, 90, 95, 88, 126, 157, 158,
	87, 182, 77, 168, 74, 78, 167, 124, 155, 161,
	118, 115, 73, 159, 116, 114, 106, 93, 100, 132,
	113, 133, 101, 121, 120, 122, 0, 363, 0, 149,
	165, 183, 80, 378, 145, 154, 173, 174, 175, 176,
	177, 178, 0, 0, 81, 96, 92, 131, 123, 79,
	102, 146, 105, 112, 137, 181, 128, 142, 84, 164,
	147, 374, 377, 372, 373, 411, 412, 449, 450, 451,
	428, 369, 0, 375, 376, 0, 432, 438, 439, 414,
	68, 75, 109, 455, 136, 94, 166, 443, 431, 0,
	402, 446, 380, 394, 454, 395, 396, 424, 366, 410,
	127, 392, 180, 89, 85, 67, 0, 383, 361, 389,
	362, 381, 404, 91, 407, 379, 433, 413, 445, 108,
	452, 110, 418, 0, 148, 119, 0, 0, 406, 435,
	0, 408, 429, 401, 425, 371, 417, 447, 393, 422,
	448, 0, 0, 0, 205, 0, 0, 0, 0, 0,
	0, 0, 0, 82, 0, 420, 442, 391, 421, 423,
	360, 419, 0, 364, 367, 453, 437, 386, 387, 0,
	0, 0, 0, 0, 0, 0, 405, 409, 426, 399,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 384,
	0, 416, 0, 0, 0, 0, 0, 0, 368, 365,
	0, 0, 403, 0, 0, 0, 370, 0, 385, 427,
	0, 359, 97, 430, 436, 0, 400, 170, 440, 398,
	397, 444, 134, 0, 151, 99, 107, 69, 76, 0,
	98, 125, 139, 143, 434, 382, 390, 86, 388, 141,
	129, 163, 415, 130, 140, 111, 156, 135, 441, 171,
	172, 153, 169, 179, 70, 152, 652, 83, 144, 72,
	160, 150, 117, 103, 104, 71, 0, 138, 90, 95,
	88, 126, 157, 158, 87, 182, 77, 168, 74, 357,
	167, 124, 155, 161, 118, 115, 73, 159, 116, 114,
	106, 93, 100, 132, 113, 133, 101, 121, 120, 122,
	0, 363, 0, 149, 165, 183, 80, 378, 145, 154,
	173, 174, 175, 176, 177, 178, 0, 0, 81, 96,
	92, 131, 358, 356, 102, 146, 105, 112, 137, 181,
	128, 142, 84, 164, 147, 374, 377, 372, 373, 411,
	412, 449, 450, 451, 428, 369, 0, 375, 376, 0,
	432, 438, 439, 414, 68, 75, 109, 455, 136, 94,
	166, 443, 431, 0, 402, 446, 380, 394, 454, 395,
	396, 424, 366, 410, 127, 392, 180, 89, 85, 67,
	0, 383, 361, 389, 362, 381, 404, 91, 407, 379,
	433, 413, 445, 108, 452, 110, 418, 0, 148, 119,
	0, 0, 406, 435, 0, 408, 429, 401, 425, 371,
	417, 447, 393, 422, 448, 0, 0, 0, 205, 0,
	0, 0, 0, 0, 0, 0, 0, 82, 0, 420,
	442, 391, 421, 423, 360, 419, 0, 364, 367, 453,
	437, 386, 387, 0, 0, 0, 0, 0, 0, 0,
	405, 409, 426, 399, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 384, 0, 416, 0, 0, 0, 0,
	0, 0, 368, 365, 0, 0, 403, 0, 0, 0,
	370, 0, 385, 427, 0, 359, 97, 430, 436, 0,
	400, 170, 440, 398, 397, 444, 134, 0, 151, 99,
	107, 69, 76, 0, 98, 125, 139, 143, 434, 382,
	390, 86, 388, 141, 129, 163, 415, 130, 140, 111,
	156, 135, 441, 171, 172, 153, 169, 179, 70, 152,
	348, 83, 144, 72, 160, 150, 117, 103, 104, 71,
	0, 138, 90, 95, 88, 126, 157, 158, 87, 182,
	77, 168, 74, 357, 167, 124, 155, 161, 118, 115,
	73, 159, 116, 114, 106, 93, 100, 132, 113, 133,
	101, 121, 120, 122, 0, 363, 0, 149, 165, 183,
	80, 378, 145, 154, 173, 174, 175, 176, 177, 178,
	0, 0, 81, 96, 92, 131, 358, 356, 351, 350,
	105, 112, 137, 181, 128, 142, 84, 164, 147, 374,
	377, 372, 373, 411, 412, 449, 450, 451, 428, 369,
	0, 375, 376, 0, 432, 438, 439, 414, 68, 75,
	109, 455, 136, 94, 166, 127, 0, 180, 89, 85,
	67, 0, 0, 0, 283, 0, 0, 0, 91, 0,
	280, 0, 0, 0, 108, 323, 110, 0, 0, 148,
	119, 0, 0, 0, 0, 0, 314, 315, 0, 0,
	0, 0, 0, 0, 0, 0, 55, 0, 0, 281,
	302, 301, 304, 305, 306, 307, 0, 0, 82, 303,
	308, 309, 310, 0, 0, 0, 278, 295, 0, 322,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	292, 293, 0, 0, 0, 0, 336, 0, 294, 0,
	0, 0, 0, 0, 289, 290, 291, 296, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 97, 0, 1316,
	1317, 0, 170, 0, 0, 334, 0, 134, 0, 151,
	99, 107, 69, 76, 0, 98, 125, 139, 143, 0,
	0, 0, 86, 0, 141, 129, 163, 0, 130, 140,
	111, 156, 135, 0, 171, 172, 153, 169, 179, 70,
	152, 162, 83, 144, 72, 160, 150, 117, 103, 104,
	71, 0, 138, 90, 95, 88, 126, 157, 158, 87,
	182, 77, 168, 74, 78, 167, 124, 155, 161, 118,
	115, 73, 159, 116, 114, 106, 93, 100, 132, 113,
	133, 101, 121, 120, 122, 0, 0, 0, 149, 165,
	183, 80, 0, 145, 154, 173, 174, 175, 176, 177,
	178, 0, 0, 81, 96, 92, 131, 123, 79, 102,
	146, 105, 112, 137, 181, 128, 142, 84, 164, 147,
	324, 335, 330, 331, 328, 329, 327, 326, 325, 337,
	316, 317, 318, 319, 321, 0, 332, 333, 320, 68,
	75, 109, 0, 136, 94, 166, 127, 0, 180, 89,
	85, 67, 0, 0, 0, 283, 0, 0, 0, 91,
	0, 280, 0, 0, 0, 108, 323, 110, 0, 0,
	148, 119, 0, 0, 0, 0, 0, 314, 315, 0,
	0, 0, 0, 0, 0, 895, 0, 55, 0, 0,
	281, 302, 301, 304, 305, 306, 307, 0, 0, 82,
	303, 308, 309, 310, 896, 0, 0, 278, 295, 0,
	322, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 292, 293, 0, 0, 0, 0, 336, 0, 294,
	0, 0, 0, 0, 0, 289, 290, 291, 296, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 97, 0,
	0, 0, 0, 170, 0, 0, 334, 0, 134, 0,
	151, 99, 107, 69, 76, 0, 98, 125, 139, 143,
	0, 0, 0, 86, 0, 141, 129, 163, 0, 130,
	140, 111, 156, 135, 0, 171, 172, 153, 169, 179,
	70, 152, 162, 83, 144, 72, 160, 150, 117, 103,
	104, 71, 0, 138, 90, 95, 88, 126, 157, 158,
	87, 182, 77, 168, 74, 78, 167, 124, 155, 161,
	118, 115, 73, 159, 116, 114, 106, 93, 100, 132,
	113, 133, 101, 121, 120, 122, 0, 0, 0, 149,
	165, 183, 80, 0, 145, 154, 173, 174, 175, 176,
	177, 178, 0, 0, 81, 96, 92, 131, 123, 79,
	102, 146, 105, 112, 137, 181, 128, 142, 84, 164,
	147, 324, 335, 330, 331, 328, 329, 327, 326, 325,
	337, 316, 317, 318, 319, 321, 25, 332, 333, 320,
	68, 75, 109, 0, 136, 94, 166, 0, 127, 0,
	180, 89, 85, 67, 0, 0, 0, 283, 0, 0,
	0, 91, 0, 280, 0, 0, 0, 108, 323, 110,
	0, 0, 148, 119, 0, 0, 0, 0, 0, 314,
	315, 0, 0, 0, 0, 0, 0, 0, 0, 55,
	0, 0, 281, 302, 301, 304, 305, 306, 307, 0,
	0, 82, 303, 308, 309, 310, 0, 0, 0, 278,
	295, 0, 322, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 292, 293, 0, 0, 0, 0, 336,
	0, 294, 0, 0, 0, 0, 0, 289, 290, 291,
	296, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	97, 0, 0, 0, 0, 170, 0, 0, 334, 0,
	134, 0, 151, 99, 107, 69, 76, 0, 98, 125,
	139, 143, 0, 0, 0, 86, 0, 141, 129, 163,
	0, 130, 140, 111, 156, 135, 0, 171, 172, 153,
	169, 179, 70, 152, 162, 83, 144, 72, 160, 150,
	117, 103, 104, 71, 0, 138, 90, 95, 88, 126,
	157, 158, 87, 182, 77, 168, 74, 78, 167, 124,
	155, 161, 118, 115, 73, 159, 116, 114, 106, 93,
	100, 132, 113, 133, 101, 121, 120, 122, 0, 0,
	0, 149, 165, 183, 80, 0, 145, 154, 173, 174,
	175, 176, 177, 178, 0, 0, 81, 96, 92, 131,
	123, 79, 102, 146, 105, 112, 137, 181, 128, 142,
	84, 164, 147, 324, 335, 330, 331, 328, 329, 327,
	326, 325, 337, 316, 317, 318, 319, 321, 0, 332,
	333, 320, 68, 75, 109, 23, 136, 94, 166, 127,
	0, 180, 89, 85, 67, 0, 824, 0, 283, 0,
	0, 0, 91, 0, 280, 0, 0, 0, 108, 323,
	110, 0, 0, 148, 119, 0, 0, 0, 0, 0,
	314, 315, 0, 0, 0, 0, 0, 0, 0, 0,
	55, 0, 0, 281, 302, 301, 304, 305, 306, 307,
	0, 0, 82, 303, 308, 309, 310, 0, 0, 0,
	278, 295, 0, 322, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 292, 293, 274, 0, 0, 0,
	336, 0, 294, 0, 0, 0, 0, 0, 289, 290,
	291, 296, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 97, 0, 0, 0, 0, 170, 0, 0, 334,
	0, 134, 0, 151, 99, 107, 69, 76, 0, 98,
	125, 139, 143, 0, 0, 0, 86, 0, 141, 129,
	163, 0, 130, 140, 111, 156, 135, 0, 171, 172,
	153, 169, 179, 70, 152, 162, 83, 144, 72, 160,
	150, 117, 103, 104, 71, 0, 138, 90, 95, 88,
	126, 157, 158, 87, 182, 77, 168, 74, 78, 167,
	124, 155, 161, 118, 115, 73, 159, 116, 114, 106,
	93, 100, 132, 113, 133, 101, 121, 120, 122, 0,
	0, 0, 149, 165, 183, 80, 0, 145, 154, 173,
	174, 175, 176, 177, 178, 0, 0, 81, 96, 92,
	131, 123, 79, 102, 146, 105, 112, 137, 181, 128,
	142, 84, 164, 147, 324, 335, 330, 331, 328, 329,
	327, 326, 325, 337, 316, 317, 318, 319, 321, 0,
	332, 333, 320, 68, 75, 109, 0, 136, 94, 166,
	127, 0, 180, 89, 85, 67, 0, 0, 0, 283,
	0, 0, 0, 91, 0, 280, 0, 0, 0, 108,
	323, 110, 0, 0, 148, 119, 0, 0, 0, 0,
	0, 314, 315, 0, 0, 0, 0, 0, 0, 0,
	0, 55, 0, 517, 281, 302, 301, 304, 305, 306,
	307, 0, 0, 82, 303, 308, 309, 310, 0, 0,
	0, 278, 295, 0, 322, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 292, 293, 0, 0, 0,
	0, 336, 0, 294, 0, 0, 0, 0, 0, 289,
	290, 291, 296, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 97, 0, 0, 0, 0, 170, 0, 0,
	334, 0, 134, 0, 151, 99, 107, 69, 76, 0,
	98, 125, 139, 143, 0, 0, 0, 86, 0, 141,
	129, 163, 0, 130, 140, 111, 156, 135, 0, 171,
	172, 153, 169, 179, 70, 152, 162, 83, 144, 72,
	160, 150, 117, 103, 104, 71, 0, 138, 90, 95,
	88, 126, 157, 158, 87, 182, 77, 168, 74, 78,
	167, 124, 155, 161, 118, 115, 73, 159, 116, 114,
	106, 93, 100, 132, 113, 133, 101, 121, 120, 122,
	0, 0, 0, 149, 165, 183, 80, 0, 145, 154,
	173, 174, 175, 176, 177, 178, 0, 0, 81, 96,
	92, 131, 123, 79, 102, 146, 105, 112, 137, 181,
	128, 142, 84, 164, 147, 324, 335, 330, 331, 328,
	329, 327, 326, 325, 337, 316, 317, 318, 319, 321,
	0, 332, 333, 320, 68, 75, 109, 0, 136, 94,
	166, 127, 0, 180, 89, 85, 67, 0, 0, 0,
	283, 0, 0, 0, 91, 0, 280, 0, 0, 0,
	108, 323, 110, 0, 0, 148, 119, 0, 0, 0,
	0, 0, 314, 315, 0, 0, 0, 0, 0, 0,
	0, 0, 55, 0, 0, 281, 302, 301, 304, 305,
	306, 307, 0, 0, 82, 303, 308, 309, 310, 0,
	0, 0, 278, 295, 0, 322, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 292, 293, 274, 0,
	0, 0, 336, 0, 294, 0, 0, 0, 0, 0,
	289, 290, 291, 296, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 97, 0, 0, 0, 0, 170, 0,
	0, 334, 0, 134, 0, 151, 99, 107, 69, 76,
	0, 98, 125, 139, 143, 0, 0, 0, 86, 0,
	141, 129, 163, 0, 130, 140, 111, 156, 135, 0,
	171, 172, 153, 169, 179, 70, 152, 162, 83, 144,
	72, 160, 150, 117, 103, 104, 71, 0, 138, 90,
	95, 88, 126, 157, 158, 87, 182, 77, 168, 74,
	78, 167, 124, 155, 161, 118, 115, 73, 159, 116,
	114, 106, 93, 100, 132, 113, 133, 101, 121, 120,
	122, 0, 0, 0, 149, 165, 183, 80, 0, 145,
	154, 173, 174, 175, 176, 177, 178, 0, 0, 81,
	96, 92, 131, 123, 79, 102, 146, 105, 112, 137,
	181, 128, 142, 84, 164, 147, 324, 335, 330, 331,
	328, 329, 327, 326, 325, 337, 316, 317, 318, 319,
	321, 0, 332, 333, 320, 68, 75, 109, 0, 136,
	94, 166, 127, 0, 180, 89, 85, 67, 0, 0,
	0, 283, 0, 0, 0, 91, 0, 280, 0, 0,
	0, 108, 323, 110, 0, 0, 148, 119, 0, 0,
	0, 0, 0, 314, 315, 0, 0, 0, 0, 0,
	0, 0, 0, 55, 0, 0, 281, 302, 839, 304,
	305, 306, 307, 0, 0, 82, 303, 308, 309, 310,
	0, 0, 0, 278, 295, 0, 322, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 292, 293, 274,
	0, 0, 0, 336, 0, 294, 0, 0, 0, 0,
	0, 289, 290, 291, 296, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 97, 0, 0, 0, 0, 170,
	0, 0, 334, 0, 134, 0, 151, 99, 107, 69,
	76, 0, 98, 125, 139, 143, 0, 0, 0, 86,
	0, 141, 129, 163, 0, 130, 140, 111, 156, 135,
	0, 171, 172, 153, 169, 179, 70, 152, 162, 83,
	144, 72, 160, 150, 117, 103, 104, 71, 0, 138,
	90, 95, 88, 126, 157, 158, 87, 182, 77, 168,
	74, 78, 167, 124, 155, 161, 118, 115, 73, 159,
	116, 114, 106, 93, 100, 132, 113, 133, 101, 121,
	120, 122, 0, 0, 0, 149, 165, 183, 80, 0,
	145, 154, 173, 174, 175, 176, 177, 178, 0, 0,
	81, 96, 92, 131, 123, 79, 102, 146, 105, 112,
	137, 181, 128, 142, 84, 164, 147, 324, 335, 330,
	331, 328, 329, 327, 326, 325, 337, 316, 317, 318,
	319, 321, 0, 332, 333, 320, 68, 75, 109, 0,
	136, 94, 166, 127, 0, 180, 89, 85, 67, 0,
	0, 0, 283, 0, 0, 0, 91, 0, 280, 0,
	0, 0, 108, 323, 110, 0, 0, 148, 119, 0,
	0, 0, 0, 0, 314, 315, 0, 0, 0, 0,
	0, 0, 0, 0, 55, 0, 0, 281, 302, 836,
	304, 305, 306, 307, 0, 0, 82, 303, 308, 309,
	310, 0, 0, 0, 278, 295, 0, 322, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 292, 293,
	274, 0, 0, 0, 336, 0, 294, 0, 0, 0,
	0, 0, 289, 290, 291, 296, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 97, 0, 0, 0, 0,
	170, 0, 0, 334, 0, 134, 0, 151, 99, 107,
	69, 76, 0, 98, 125, 139, 143, 0, 0, 0,
	86, 0, 141, 129, 163, 0, 130, 140, 111, 156,
	135, 0, 171, 172, 153, 169, 179, 70, 152, 162,
	83, 144, 72, 160, 150, 117, 103, 104, 71, 0,
	138, 90, 95, 88, 126, 157, 158, 87, 182, 77,
	168, 74, 78, 167, 124, 155, 161, 118, 115, 73,
	159, 116, 114, 106, 93, 100, 132, 113, 133, 101,
	121, 120, 122, 0, 0, 0, 149, 165, 183, 80,
	0, 145, 154, 173, 174, 175, 176, 177, 178, 0,
	0, 81, 96, 92, 131, 123, 79, 102, 146, 105,
	112, 137, 181, 128, 142, 84, 164, 147, 324, 335,
	330, 331, 328, 329, 327, 326, 325, 337, 316, 317,
	318, 319, 321, 0, 332, 333, 320, 68, 75, 109,
	0, 136, 94, 166, 127, 0, 180, 89, 85, 67,
	0, 0, 0, 283, 0, 0, 0, 91, 0, 280,
	0, 0, 0, 108, 323, 110, 0, 0, 148, 119,
	0, 0, 0, 0, 0, 314, 315, 0, 0, 0,
	0, 0, 0, 0, 0, 55, 0, 0, 281, 302,
	301, 304, 305, 306, 307, 0, 0, 82, 303, 308,
	309, 310, 0, 0, 0, 278, 295, 0, 322, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 292,
	293, 0, 0, 0, 0, 336, 0, 294, 0, 0,
	0, 0, 0, 289, 290, 291, 296, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 97, 0, 0, 0,
	0, 170, 0, 0, 334, 0, 134, 0, 151, 99,
	107, 69, 76, 0, 98, 125, 139, 143, 0, 0,
	0, 86, 0, 141, 129, 163, 0, 130, 140, 111,
	156, 135, 0, 171, 172, 153, 169, 179, 70, 152,
	162, 83, 144, 72, 160, 150, 117, 103, 104, 71,
	0, 138, 90, 95, 88, 126, 157, 158, 87, 182,
	77, 168, 74, 78, 167, 124, 155, 161, 118, 115,
	73, 159, 116, 114, 106, 93, 100, 132, 113, 133,
	101, 121, 120, 122, 0, 0, 0, 149, 165, 183,
	80, 0, 145, 154, 173, 174, 175, 176, 177, 178,
	0, 0, 81, 96, 92, 131, 123, 79, 102, 146,
	105, 112, 137, 181, 128, 142, 84, 164, 147, 324,
	335, 330, 331, 328, 329, 327, 326, 325, 337, 316,
	317, 318, 319, 321, 0, 332, 333, 320, 68, 75,
	109, 0, 136, 94, 166, 127, 0, 180, 89, 85,
	67, 0, 0, 0, 0, 0, 0, 0, 91, 0,
	0, 0, 0, 0, 108, 323, 110, 0, 0, 148,
	119, 0, 0, 0, 0, 0, 314, 315, 0, 0,
	0, 0, 0, 0, 0, 0, 55, 0, 0, 281,
	302, 301, 304, 305, 306, 307, 0, 0, 82, 303,
	308, 309, 310, 0, 0, 0, 0, 295, 0, 322,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	292, 293, 0, 0, 0, 0, 336, 0, 294, 0,
	0, 0, 0, 0, 289, 290, 291, 296, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 97, 0, 0,
	0, 0, 170, 0, 0, 334, 0, 134, 0, 151,
	99, 107, 69, 76, 0, 98, 125, 139, 143, 0,
	0, 0, 86, 0, 141, 129, 163, 1488, 130, 140,
	111, 156, 135, 0, 171, 172, 153, 169, 179, 70,
	152, 162, 83, 144, 72, 160, 150, 117, 103, 104,
	71, 0, 138, 90, 95, 88, 126, 157, 158, 87,
	182, 77, 168, 74, 78, 167, 124, 155, 161, 118,
	115, 73, 159, 116, 114, 106, 93, 100, 132, 113,
	133, 101, 121, 120, 122, 0, 0, 0, 149, 165,
	183, 80, 0, 145, 154, 173, 174, 175, 176, 177,
	178, 0, 0, 81, 96, 92, 131, 123, 79, 102,
	146, 105, 112, 137, 181, 128, 142, 84, 164, 147,
	324, 335, 330, 331, 328, 329, 327, 326, 325, 337,
	316, 317, 318, 319, 321, 0, 332, 333, 320, 68,
	75, 109, 0, 136, 94, 166, 127, 0, 180, 89,
	85, 67, 0, 0, 0, 0, 0, 0, 0, 91,
	0, 0, 0, 0, 0, 108, 323, 110, 0, 0,
	148, 119, 0, 0, 0, 0, 0, 314, 315, 0,
	0, 0, 0, 0, 0, 0, 0, 55, 0, 517,
	281, 302, 301, 304, 305, 306, 307, 0, 0, 82,
	303, 308, 309, 310, 0, 0, 0, 0, 295, 0,
	322, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 292, 293, 0, 0, 0, 0, 336, 0, 294,
	0, 0, 0, 0, 0, 289, 290, 291, 296, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 97, 0,
	0, 0, 0, 170, 0, 0, 334, 0, 134, 0,
	151, 99, 107, 69, 76, 0, 98, 125, 139, 143,
	0, 0, 0, 86, 0, 141, 129, 163, 0, 130,
	140, 111, 156, 135, 0, 171, 172, 153, 169, 179,
	70, 152, 162, 83, 144, 72, 160, 150, 117, 103,
	104, 71, 0, 138, 90, 95, 88, 126, 157, 158,
	87, 182, 77, 168, 74, 78, 167, 124, 155, 161,
	118, 115, 73, 159, 116, 114, 106, 93, 100, 132,
	113, 133, 101, 121, 120, 122, 0, 0, 0, 149,
	165, 183, 80, 0, 145, 154, 173, 174, 175, 176,
	177, 178, 0, 0, 81, 96, 92, 131, 123, 79,
	102, 146, 105, 112, 137, 181, 128, 142, 84, 164,
	147, 324, 335, 330, 331, 328, 329, 327, 326, 325,
	337, 316, 317, 318, 319, 321, 0, 332, 333, 320,
	68, 75, 109, 0, 136, 94, 166, 127, 0, 180,
	89, 85, 67, 0, 0, 0, 0, 0, 0, 0,
	91, 0, 0, 0, 0, 0, 108, 323, 110, 0,
	0, 148, 119, 0, 0, 0, 0, 0, 314, 315,
	0, 0, 0, 0, 0, 0, 0, 0, 55, 0,
	0, 281, 302, 301, 304, 305, 306, 307, 0, 0,
	82, 303, 308, 309, 310, 0, 0, 0, 0, 295,
	0, 322, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 292, 293, 0, 0, 0, 0, 336, 0,
	294, 0, 0, 0, 0, 0, 289, 290, 291, 296,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 97,
	0, 0, 0, 0, 170, 0, 0, 334, 0, 134,
	0, 151, 99, 107, 69, 76, 0, 98, 125, 139,
	143, 0, 0, 0, 86, 0, 141, 129, 163, 0,
	130, 140, 111, 156, 135, 0, 171, 172, 153, 169,
	179, 70, 152, 162, 83, 144, 72, 160, 150, 117,
	103, 104, 71, 0, 138, 90, 95, 88, 126, 157,
	158, 87, 182, 77, 168, 74, 78, 167, 124, 155,
	161, 118, 115, 73, 159, 116, 114, 106, 93, 100,
	132, 113, 133, 101, 121, 120, 122, 0, 0, 0,
	149, 165, 183, 80, 0, 145, 154, 173, 174, 175,
	176, 177, 178, 0, 0, 81, 96, 92, 131, 123,
	79, 102, 146, 105, 112, 137, 181, 128, 142, 84,
	164, 147, 324, 335, 330, 331, 328, 329, 327, 326,
	325, 337, 316, 317, 318, 319, 321, 0, 332, 333,
	320, 68, 75, 109, 0, 136, 94, 166, 127, 0,
	180, 89, 85, 67, 0, 0, 542, 0, 0, 0,
	0, 91, 0, 0, 0, 0, 0, 108, 0, 110,
	0, 0, 148, 119, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 205, 0, 544, 0, 0, 0, 0, 0,
	0, 82, 0, 0, 0, 0, 0, 539, 538, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 540, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	97, 0, 0, 0, 0, 170, 0, 0, 0, 0,
	134, 0, 151, 99, 107, 69, 76, 0, 98, 125,
	139, 143, 0, 0, 0, 86, 0, 141, 129, 163,
	0, 130, 140, 111, 156, 135, 0, 171, 172, 153,
	169, 179, 70, 152, 162, 83, 144, 72, 160, 150,
	117, 103, 104, 71, 0, 138, 90, 95, 88, 126,
	157, 158, 87, 182, 77, 168, 74, 78, 167, 124,
	155, 161, 118, 115, 73, 159, 116, 114, 106, 93,
	100, 132, 113, 133, 101, 121, 120, 122, 0, 0,
	0, 149, 165, 183, 80, 0, 145, 154, 173, 174,
	175, 176, 177, 178, 0, 0, 81, 96, 92, 131,
	123, 79, 102, 146, 105, 112, 137, 181, 128, 142,
	84, 164, 147, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 127, 0, 180, 89, 85, 67, 0, 0,
	0, 0, 68, 75, 109, 91, 136, 94, 166, 0,
	0, 108, 0, 110, 0, 0, 148, 119, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 205, 0, 0, 0,
	0, 0, 0, 0, 0, 82, 0, 0, 0, 0,
	0, 199, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 97, 201, 202, 0, 0, 198,
	0, 0, 0, 203, 134, 0, 151, 99, 107, 69,
	76, 0, 98, 125, 139, 143, 0, 0, 0, 86,
	0, 141, 129, 163, 0, 130, 140, 111, 156, 135,
	0, 171, 172, 153, 169, 179, 70, 152, 162, 83,
	144, 72, 160, 150, 117, 103, 104, 71, 0, 138,
	90, 95, 88, 126, 157, 158, 87, 182, 77, 168,
	74, 78, 167, 124, 155, 161, 118, 115, 73, 159,
	116, 114, 106, 93, 100, 132, 113, 133, 101, 121,
	120, 122, 0, 0, 0, 149, 165, 183, 80, 0,
	145, 154, 173, 174, 175, 176, 177, 178, 0, 0,
	81, 96, 92, 131, 123, 79, 102, 146, 105, 112,
	137, 181, 128, 142, 84, 164, 147, 0, 200, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 25, 0, 0, 0, 0, 68, 75, 109, 0,
	136, 94, 166, 127, 0, 180, 89, 85, 67, 0,
	0, 0, 0, 0, 0, 0, 91, 0, 0, 0,
	0, 0, 108, 0, 110, 0, 0, 148, 119, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 55, 0, 0, 205, 0, 0,
	0, 0, 0, 0, 0, 0, 82, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 97, 0, 0, 0, 0,
	170, 0, 0, 0, 0, 134, 0, 151, 99, 107,
	69, 76, 0, 98, 125, 139, 143, 0, 0, 0,
	86, 0, 141, 129, 163, 0, 130, 140, 111, 156,
	135, 0, 171, 172, 153, 169, 179, 70, 152, 162,
	83, 144, 72, 160, 150, 117, 103, 104, 71, 0,
	138, 90, 95, 88, 126, 157, 158, 87, 182, 77,
	168, 74, 78, 167, 124, 155, 161, 118, 115, 73,
	159, 116, 114, 106, 93, 100, 132, 113, 133, 101,
	121, 120, 122, 0, 0, 0, 149, 165, 183, 80,
	0, 145, 154, 173, 174, 175, 176, 177, 178, 0,
	0, 81, 96, 92, 131, 123, 79, 102, 146, 105,
	112, 137, 181, 128, 142, 84, 164, 147, 0, 25,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 127, 0, 180, 89, 85, 67, 68, 75, 109,
	23, 136, 94, 166, 91, 0, 0, 0, 0, 0,
	108, 0, 110, 0, 0, 148, 119, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 55, 0, 0, 639, 0, 0, 0, 0,
	0, 0, 0, 0, 82, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 97, 0, 0, 0, 0, 170, 0,
	0, 0, 0, 134, 0, 151, 99, 107, 69, 76,
	0, 98, 125, 139, 143, 0, 0, 0, 86, 0,
	141, 129, 163, 0, 130, 140, 111, 156, 135, 0,
	171, 172, 153, 169, 179, 70, 152, 162, 83, 144,
	72, 160, 150, 117, 103, 104, 71, 0, 138, 90,
	95, 88, 126, 157, 158, 87, 182, 77, 168, 74,
	78, 167, 124, 155, 161, 118, 115, 73, 159, 116,
	114, 106, 93, 100, 132, 113, 133, 101, 121, 120,
	122, 0, 0, 0, 149, 165, 183, 80, 0, 145,
	154, 173, 174, 175, 176, 177, 178, 0, 0, 81,
	96, 92, 131, 123, 79, 102, 146, 105, 112, 137,
	181, 128, 142, 84, 164, 147, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 68, 75, 109, 23, 136,
	94, 166, 127, 0, 180, 89, 85, 67, 0, 0,
	880, 0, 0, 0, 0, 91, 0, 0, 0, 0,
	0, 108, 0, 110, 0, 0, 148, 119, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 65, 0, 64, 0,
	0, 0, 0, 0, 0, 82, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 97, 0, 0, 0, 0, 170,
	0, 0, 0, 0, 134, 0, 151, 99, 107, 69,
	76, 0, 98, 125, 139, 143, 0, 0, 0, 86,
	0, 141, 129, 163, 0, 130, 140, 111, 156, 135,
	0, 171, 172, 153, 169, 179, 70, 152, 162, 83,
	144, 72, 160, 150, 117, 103, 104, 71, 0, 138,
	90, 95, 88, 126, 157, 158, 87, 182, 77, 168,
	74, 78, 167, 124, 155, 161, 118, 115, 73, 159,
	116, 114, 106, 93, 100, 132, 113, 133, 101, 121,
	120, 122, 0, 0, 0, 149, 165, 183, 80, 0,
	145, 154, 173, 174, 175, 176, 177, 178, 0, 0,
	81, 96, 92, 131, 123, 79, 102, 146, 105, 112,
	137, 181, 128, 142, 84, 164, 147, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 127, 0, 180, 89,
	85, 67, 0, 0, 880, 0, 68, 75, 109, 91,
	136, 94, 166, 0, 0, 108, 0, 110, 0, 0,
	148, 119, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	65, 0, 64, 0, 0, 0, 0, 0, 0, 82,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 97, 0,
	0, 0, 0, 170, 0, 0, 0, 0, 134, 0,
	151, 99, 107, 69, 76, 0, 98, 125, 139, 143,
	0, 0, 0, 86, 0, 141, 129, 163, 0, 878,
	140, 111, 156, 135, 0, 171, 172, 153, 169, 179,
	70, 152, 162, 83, 144, 72, 160, 150, 117, 103,
	104, 71, 0, 138, 90, 95, 88, 126, 157, 158,
	87, 182, 77, 168, 74, 78, 167, 124, 155, 161,
	118, 115, 73, 159, 116, 114, 106, 93, 100, 132,
	113, 133, 101, 121, 120, 122, 0, 0, 0, 149,
	165, 183, 80, 0, 145, 154, 173, 174, 175, 176,
	177, 178, 0, 0, 81, 96, 92, 131, 123, 79,
	102, 146, 105, 112, 137, 181, 128, 142, 84, 164,
	147, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	127, 0, 180, 89, 85, 67, 0, 0, 0, 0,
	68, 75, 109, 91, 136, 94, 166, 0, 0, 108,
	0, 110, 0, 0, 148, 119, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 205, 0, 0, 771, 0, 0,
	772, 0, 0, 82, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 97, 0, 0, 0, 0, 170, 0, 0,
	0, 0, 134, 0, 151, 99, 107, 69, 76, 0,
	98, 125, 139, 143, 0, 0, 0, 86, 0, 141,
	129, 163, 0, 130, 140, 111, 156, 135, 0, 171,
	172, 153, 169, 179, 70, 152, 162, 83, 144, 72,
	160, 150, 117, 103, 104, 71, 0, 138, 90, 95,
	88, 126, 157, 158, 87, 182, 77, 168, 74, 78,
	167, 124, 155, 161, 118, 115, 73, 159, 116, 114,
	106, 93, 100, 132, 113, 133, 101, 121, 120, 122,
	0, 0, 0, 149, 165, 183, 80, 0, 145, 154,
	173, 174, 175, 176, 177, 178, 0, 0, 81, 96,
	92, 131, 123, 79, 102, 146, 105, 112, 137, 181,
	128, 142, 84, 164, 147, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 127, 0,
	180, 89, 85, 67, 68, 75, 109, 0, 136, 94,
	166, 91, 0, 661, 0, 0, 0, 108, 0, 110,
	0, 0, 148, 119, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 205, 0, 660, 0, 0, 0, 0, 0,
	0, 82, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	97, 0, 0, 0, 0, 170, 0, 0, 0, 0,
	134, 0, 151, 99, 107, 69, 76, 0, 98, 125,
	139, 143, 0, 0, 0, 86, 0, 141, 129, 163,
	0, 130, 140, 111, 156, 135, 0, 171, 172, 153,
	169, 179, 70, 152, 162, 83, 144, 72, 160, 150,
	117, 103, 104, 71, 0, 138, 90, 95, 88, 126,
	157, 158, 87, 182, 77, 168, 74, 78, 167, 124,
	155, 161, 118, 115, 73, 159, 116, 114, 106, 93,
	100, 132, 113, 133, 101, 121, 120, 122, 0, 0,
	0, 149, 165, 183, 80, 0, 145, 154, 173, 174,
	175, 176, 177, 178, 0, 0, 81, 96, 92, 131,
	123, 79, 102, 146, 105, 112, 137, 181, 128, 142,
	84, 164, 147, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 127, 0, 180, 89, 85, 67, 0, 0,
	0, 0, 68, 75, 109, 91, 136, 94, 166, 0,
	0, 108, 0, 110, 0, 0, 148, 119, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 55, 0, 0, 639, 0, 0, 0,
	0, 0, 0, 0, 0, 82, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 97, 0, 0, 0, 0, 170,
	0, 0, 0, 0, 134, 0, 151, 99, 107, 69,
	76, 0, 98, 125, 139, 143, 0, 0, 0, 86,
	0, 141, 129, 163, 0, 130, 140, 111, 156, 135,
	0, 171, 172, 153, 169, 179, 70, 152, 162, 83,
	144, 72, 160, 150, 117, 103, 104, 71, 0, 138,
	90, 95, 88, 126, 157, 158, 87, 182, 77, 168,
	74, 78, 167, 124, 155, 161, 118, 115, 73, 159,
	116, 114, 106, 93, 100, 132, 113, 133, 101, 121,
	120, 122, 0, 0, 0, 149, 165, 183, 80, 0,
	145, 154, 173, 174, 175, 176, 177, 178, 0, 0,
	81, 96, 92, 131, 123, 79, 102, 146, 105, 112,
	137, 181, 128, 142, 84, 164, 147, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 127, 0, 180, 89,
	85, 67, 0, 0, 0, 0, 68, 75, 109, 91,
	136, 94, 166, 0, 0, 108, 0, 110, 0, 0,
	148, 119, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	65, 0, 64, 0, 0, 0, 0, 0, 0, 82,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 97, 0,
	0, 0, 0, 170, 0, 0, 0, 0, 134, 0,
	151, 99, 107, 69, 76, 0, 98, 125, 139, 143,
	0, 0, 0, 86, 0, 141, 129, 163, 0, 130,
	140, 111, 156, 135, 0, 171, 172, 153, 169, 179,
	70, 152, 162, 83, 144, 72, 160, 150, 117, 103,
	104, 71, 0, 138, 90, 95, 88, 126, 157, 158,
	87, 182, 77, 168, 74, 78, 167, 124, 155, 161,
	118, 115, 73, 159, 116, 114, 106, 93, 100, 132,
	113, 133, 101, 121, 120, 122, 0, 0, 0, 149,
	165, 183, 80, 0, 145, 154, 173, 174, 175, 176,
	177, 178, 0, 0, 81, 96, 92, 131, 123, 79,
	102, 146, 105, 112, 137, 181, 128, 142, 84, 164,
	147, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	127, 0, 180, 89, 85, 67, 0, 0, 0, 0,
	68, 75, 109, 91, 136, 94, 166, 0, 0, 108,
	0, 110, 0, 0, 148, 119, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 205, 0, 544, 0, 0, 0,
	0, 0, 0, 82, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 97, 0, 0, 0, 0, 170, 0, 0,
	0, 0, 134, 0, 151, 99, 107, 69, 76, 0,
	98, 125, 139, 143, 0, 0, 0, 86, 0, 141,
	129, 163, 0, 130, 140, 111, 156, 135, 0, 171,
	172, 153, 169, 179, 70, 152, 162, 83, 144, 72,
	160, 150, 117, 103, 104, 71, 0, 138, 90, 95,
	88, 126, 157, 158, 87, 182, 77, 168, 74, 78,
	167, 124, 155, 161, 118, 115, 73, 159, 116, 114,
	106, 93, 100, 132, 113, 133, 101, 121, 120, 122,
	0, 0, 0, 149, 165, 183, 80, 0, 145, 154,
	173, 174, 175, 176, 177, 178, 0, 0, 81, 96,
	92, 131, 123, 79, 102, 146, 105, 112, 137, 181,
	128, 142, 84, 164, 147, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 68, 75, 109, 0, 136, 94,
	166, 127, 0, 180, 89, 85, 67, 0, 0, 0,
	0, 0, 0, 630, 91, 0, 0, 0, 0, 0,
	108, 0, 110, 0, 0, 148, 119, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 65, 0, 0, 0, 0,
	0, 0, 0, 0, 82, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 97, 0, 0, 0, 0, 170, 0,
	0, 0, 0, 134, 0, 151, 99, 107, 69, 76,
	0, 98, 125, 139, 143, 0, 0, 0, 86, 0,
	141, 129, 163, 0, 130, 140, 111, 156, 135, 0,
	171, 172, 153, 169, 179, 70, 152, 162, 83, 144,
	72, 160, 150, 117, 103, 104, 71, 0, 138, 90,
	95, 88, 126, 157, 158, 87, 182, 77, 168, 74,
	78, 167, 124, 155, 161, 118, 115, 73, 159, 116,
	114, 106, 93, 100, 132, 113, 133, 101, 121, 120,
	122, 0, 0, 0, 149, 165, 183, 80, 0, 145,
	154, 173, 174, 175, 176, 177, 178, 0, 0, 81,
	96, 92, 131, 123, 79, 102, 146, 105, 112, 137,
	181, 128, 142, 84, 164, 147, 0, 0, 340, 0,
	0, 0, 0, 0, 0, 127, 0, 180, 89, 85,
	67, 0, 0, 0, 0, 68, 75, 109, 91, 136,
	94, 166, 0, 0, 108, 0, 110, 0, 0, 148,
	119, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 65,
	0, 0, 0, 0, 0, 0, 0, 0, 82, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 97, 0, 0,
	0, 0, 170, 0, 0, 0, 0, 134, 0, 151,
	99, 107, 69, 76, 0, 98, 125, 139, 143, 0,
	0, 0, 86, 0, 141, 129, 163, 0, 130, 140,
	111, 156, 135, 0, 171, 172, 153, 169, 179, 70,
	152, 162, 83, 144, 72, 160, 150, 117, 103, 104,
	71, 0, 138, 90, 95, 88, 126, 157, 158, 87,
	182, 77, 168, 74, 78, 167, 124, 155, 161, 118,
	115, 73, 159, 116, 114, 106, 93, 100, 132, 113,
	133, 101, 121, 120, 122, 0, 0, 0, 149, 165,
	183, 80, 0, 145, 154, 173, 174, 175, 176, 177,
	178, 0, 0, 81, 96, 92, 131, 123, 79, 102,
	146, 105, 112, 137, 181, 128, 142, 84, 164, 147,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 127,
	0, 180, 89, 85, 67, 0, 0, 0, 0, 68,
	75, 109, 91, 136, 94, 166, 0, 0, 108, 0,
	110, 0, 0, 148, 119, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 65, 0, 0, 0, 0, 0, 0,
	0, 0, 82, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 97, 0, 217, 0, 0, 170, 0, 0, 0,
	0, 134, 0, 151, 99, 107, 69, 76, 0, 98,
	125, 139, 143, 0, 0, 0, 86, 0, 141, 129,
	163, 0, 130, 140, 111, 156, 135, 0, 171, 172,
	153, 169, 179, 70, 152, 162, 83, 144, 72, 160,
	150, 117, 103, 104, 71, 0, 138, 90, 95, 88,
	126, 157, 158, 87, 182, 77, 168, 74, 78, 167,
	124, 155, 161, 118, 115, 73, 159, 116, 114, 106,
	93, 100, 132, 113, 133, 101, 121, 120, 122, 0,
	0, 0, 149, 165, 183, 80, 0, 145, 154, 173,
	174, 175, 176, 177, 178, 0, 0, 81, 96, 92,
	131, 123, 79, 102, 146, 105, 112, 137, 181, 128,
	142, 84, 164, 147, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 127, 0, 180, 89, 85, 67, 0,
	0, 0, 0, 68, 75, 109, 91, 136, 94, 166,
	0, 0, 108, 0, 110, 0, 0, 148, 119, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 205, 0, 0,
	0, 0, 0, 0, 0, 0, 82, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 97, 0, 0, 0, 0,
	170, 0, 0, 0, 0, 134, 0, 151, 99, 107,
	69, 76, 0, 98, 125, 139, 143, 0, 0, 0,
	86, 0, 141, 129, 163, 0, 130, 140, 111, 156,
	135, 0, 171, 172, 153, 169, 179, 70, 152, 162,
	83, 144, 72, 160, 150, 117, 103, 104, 71, 0,
	138, 90, 95, 88, 126, 157, 158, 87, 182, 77,
	168, 74, 78, 167, 124, 155, 161, 118, 115, 73,
	159, 116, 114, 106, 93, 100, 132, 113, 133, 101,
	121, 120, 122, 0, 0, 0, 149, 165, 183, 80,
	0, 145, 154, 173, 174, 175, 176, 177, 178, 0,
	0, 81, 96, 92, 131, 123, 79, 102, 146, 105,
	112, 137, 181, 128, 142, 84, 164, 147, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 127, 0, 180,
	89, 85, 67, 0, 0, 0, 0, 68, 75, 109,
	91, 136, 94, 166, 0, 0, 108, 0, 110, 0,
	0, 148, 119, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 65, 0, 0, 0, 0, 0, 0, 0, 0,
	82, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 97,
	0, 0, 0, 0, 170, 0, 0, 0, 0, 134,
	0, 151, 99, 107, 69, 76, 0, 98, 125, 139,
	143, 0, 0, 0, 86, 0, 141, 129, 163, 0,
	130, 140, 111, 156, 135, 0, 171, 172, 153, 169,
	179, 70, 152, 162, 83, 144, 72, 160, 150, 117,
	103, 104, 71, 0, 138, 90, 95, 88, 126, 157,
	158, 87, 182, 77, 168, 74, 78, 167, 124, 155,
	161, 118, 115, 73, 159, 116, 114, 106, 93, 100,
	132, 113, 133, 101, 121, 120, 122, 0, 0, 0,
	149, 165, 183, 80, 0, 145, 154, 173, 174, 175,
	176, 177, 178, 0, 0, 81, 96, 92, 131, 123,
	79, 102, 146, 105, 112, 137, 181, 128, 142, 84,
	164, 147, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 127, 0, 180, 89, 85, 67, 0, 0, 0,
	0, 68, 75, 109, 91, 136, 94, 166, 0, 0,
	108, 0, 110, 0, 0, 148, 119, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 281, 0, 0, 0, 0,
	0, 0, 0, 0, 82, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 97, 0, 0, 0, 0, 170, 0,
	0, 0, 0, 134, 0, 151, 99, 107, 69, 76,
	0, 98, 125, 139, 143, 0, 0, 0, 86, 0,
	141, 129, 163, 0, 130, 140, 111, 156, 135, 0,
	171, 172, 153, 169, 179, 70, 152, 162, 83, 144,
	72, 160, 150, 117, 103, 104, 71, 0, 138, 90,
	95, 88, 126, 157, 158, 87, 182, 77, 168, 74,
	78, 167, 124, 155, 161, 118, 115, 73, 159, 116,
	114, 106, 93, 100, 132, 113, 133, 101, 121, 120,
	122, 0, 0, 0, 149, 165, 183, 80, 0, 145,
	154, 173, 174, 175, 176, 177, 178, 0, 0, 81,
	96, 92, 131, 123, 79, 102, 146, 105, 112, 137,
	181, 128, 142, 84, 164, 147, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 68, 75, 109, 0, 136,
	94, 166,
}
var yyPact = [...]int{

	2334, -1000, -203, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, 958, 11738, 996, -1000, -1000, -1000, -1000, -1000,
	-1000, 381, 9744, 24, 129, -5, 12731, 128, 2008, 13219,
	-1000, 0, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -102,
	-103, -1000, 80, -1000, -1000, -1000, -1000, -1000, 952, 955,
	738, -1000, 932, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, 796, 938, 868, -1000, 7673, 101,
	101, 12487, 6106, -1000, -1000, 361, 13219, 120, 13219, -165,
	87, 87, 87, -1000, -1000, -1000, -1000, 126, 13219, 202,
	-1000, 13219, 79, 622, 79, 79, 79, 13219, -1000, 163,
	13219, 601, 906, 3640, 41, 3640, 3640, -1000, 3640, 3640,
	-1000, 3640, 12, 3640, -57, 970, -1000, -1000, -1000, -1000,
	-56, -1000, 3640, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, 539, 914, 8456, 8456,
	80, 11738, 730, 958, -1000, 80, -1000, -1000, -1000, 901,
	-1000, -1000, 396, 985, -1000, 9500, 161, -1000, 8456, 2475,
	730, -1000, -1000, 730, -1000, -1000, 146, -1000, -1000, 9239,
	9239, 9239, 9239, 9239, 9239, 9239, 9239, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, 730, -1000, 6890, 730, 730, 730, 730, 730, 730,
	730, 730, 8456, 730, 730, 730, 730, 730, 730, 730,
	730, 730, 730, 730, 730, 730, 730, 730, 12243, 11494,
	13219, 685, 684, -1000, -1000, 160, 733, 5832, -133, -1000,
	-1000, -1000, 234, 11250, -1000, -1000, -1000, 904, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, 630, 13219, -1000, 182,
	-1000, 590, 3640, 105, 578, 273, 554, 13219, 13219, 3640,
	18, 52, 124, 13219, 737, 106, 13219, 928, 814, 13219,
	551, 534, -1000, 5558, -1000, 3640, 3640, -1000, -1000, -1000,
	3640, 3640, 3640, 13219, 3640, 3640, -1000, -1000, -1000, -1000,
	-1000, 3640, 3640, -1000, 983, 402, -1000, -1000, -1000, -1000,
	8456, -1000, 813, -1000, -1000, -1000, -1000, -1000, -1000, 991,
	201, 470, 156, 734, -1000, 503, -1000, -1000, 80, 952,
	539, 868, 11002, 825, -1000, -1000, 13219, -1000, 8456, 8456,
	479, -1000, 11982, -1000, -1000, 4462, 213, 9239, 406, 376,
	9239, 9239, 9239, 9239, 9239, 9239, 9239, 9239, 9239, 9239,
	9239, 9239, 9239, 9239, 9239, 9239, 9239, 9239, 9239, 480,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, 528, -1000,
	80, 570, 570, 175, 175, 175, 175, 175, 175, 175,
	2765, 7151, 539, 600, 256, 6890, 7673, 7673, 8456, 8456,
	8195, 7934, 7673, 941, 262, 256, 13463, -1000, -1000, 8978,
	-1000, -1000, -1000, -1000, -1000, 539, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, 12975, 12975, 7673, 7673, 7673, 7673, 44,
	13219, -1000, 716, 842, -1000, -1000, -1000, 931, 10253, 730,
	10758, 44, 680, 11494, 13219, -1000, -1000, 11494, 13219, 4188,
	5284, 733, -133, 719, -1000, -143, -142, 6628, 171, -1000,
	-1000, -1000, -1000, 3366, 435, 648, 342, -87, -1000, -1000,
	-1000, 749, -1000, 749, 749, 749, 749, -53, -53, -53,
	-53, -1000, -1000, -1000, -1000, -1000, 794, 793, -1000, 749,
	749, 749, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	789, 789, 789, 757, 757, 799, -1000, 13219, 3640, 926,
	3640, -1000, 75, -1000, 12975, 12975, 13219, 13219, 138, 13219,
	13219, 732, -1000, 13219, 3640, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	13219, 429, 13219, 13219, 256, 13219, -1000, 876, 8456, 8456,
	5010, 8456, -1000, -1000, -1000, 539, 914, -1000, 941, 961,
	-1000, 893, 892, 7673, -1000, -1000, 213, 407, -1000, -1000,
	520, -1000, -1000, -1000, -1000, 154, 730, -1000, 1588, -1000,
	-1000, -1000, -1000, 406, 9239, 9239, 9239, 344, 1588, 1588,
	1588, 1588, 1588, 2514, 656, 1868, 175, 209, 209, 186,
	186, 186, 186, 186, 401, 401, -1000, -1000, -1000, 539,
	-1000, -1000, -1000, 539, 7673, 731, -1000, -1000, 8456, -1000,
	539, 586, 586, 404, 457, 297, 982, 586, 294, 980,
	586, 586, 7673, 430, -1000, 8456, 539, -1000, 152, -1000,
	729, 728, 720, 586, 539, 586, 586, 104, 730, -1000,
	13463, 11494, 833, 11494, 11494, 11494, -1000, -1000, -1000, 841,
	828, 851, 13219, -1000, 595, 10253, 12975, 167, 730, -1000,
	11738, 963, 11494, 721, -1000, 721, -1000, 150, -1000, -1000,
	719, -133, -80, -1000, -1000, -1000, -1000, 256, -1000, 508,
	715, 3092, -1000, -1000, -1000, -1000, -1000, -1000, -1000, 787,
	522, -1000, 915, 269, 212, 516, 913, -1000, -1000, -1000,
	902, -1000, 386, -89, -1000, -1000, 460, -53, -53, -1000,
	-1000, 171, 903, 171, 171, 171, 499, 499, -1000, -1000,
	-1000, -1000, 451, -1000, -1000, -1000, 447, -1000, 810, 12975,
	3640, -1000, -1000, -1000, -1000, 380, 380, 215, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, 42,
	798, -1000, -1000, -1000, 16, 10, 103, -1000, 3640, -1000,
	402, -1000, 498, 8456, -1000, -1000, -1000, 873, 256, 256,
	149, -1000, -1000, -1000, 13219, -1000, -1000, -1000, -1000, 718,
	-1000, -1000, -1000, 3914, 7673, -1000, 344, 1588, 2094, -1000,
	9239, 9239, -1000, -1000, 586, 7673, 256, -1000, -1000, -1000,
	58, 480, 58, 9239, 9239, -1000, 9239, 9239, -1000, -177,
	722, 236, -1000, 8456, 462, -1000, 5010, -1000, 9239, 9239,
	-1000, -1000, -1000, -1000, 806, 13463, 730, -1000, 10005, 12975,
	727, -1000, 233, 842, 11494, -1000, 861, 860, 804, 1034,
	-1000, -1000, 858, -1000, 848, -1000, -1000, -1000, -1000, 539,
	711, -1000, 199, -1000, 119, 117, 111, 12975, -1000, 958,
	8456, 721, -1000, -1000, 187, -1000, -1000, -148, -150, -1000,
	-1000, -1000, 3366, -1000, 3366, 12975, 60, -1000, 516, 516,
	-1000, -1000, -1000, 767, 803, 9239, -1000, -1000, -1000, 626,
	171, 171, -1000, 227, -1000, -1000, -1000, 569, -1000, 566,
	709, 562, 13219, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, 13219,
	-1000, -1000, -1000, -1000, -1000, 12975, -183, 514, 12975, 12975,
	13219, -1000, 429, -1000, 256, -1000, 4736, -1000, 963, 11494,
	-1000, -1000, 539, -1000, 9239, 1588, 1588, -1000, -1000, 539,
	749, 749, -1000, 749, 757, -1000, 749, -14, 749, -15,
	539, 539, 2424, 2367, 1700, 598, 730, -172, -1000, 256,
	8456, -1000, 1502, 1440, -1000, 917, 660, 692, -1000, -1000,
	7412, 539, 560, 144, 558, -1000, 958, 13463, 8456, 786,
	-1000, -1000, -1000, 8456, -1000, 8456, 755, -1000, -1000, 931,
	12975, 6367, 730, 730, 730, 558, 952, 256, -1000, -1000,
	-1000, -1000, 3092, -1000, 550, -1000, 749, -1000, -1000, -1000,
	12975, -83, 990, 1588, -1000, -1000, -1000, -1000, -1000, -53,
	493, -53, 425, -1000, 424, 3640, -1000, -1000, -1000, -1000,
	922, -1000, 4736, -1000, -1000, 748, -1000, -1000, -1000, 968,
	708, -1000, 1588, -1000, -1000, 81, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, 9239, 9239, 9239, 9239, 9239, 539,
	481, 256, 9239, 9239, 912, -1000, 730, -1000, -1000, 127,
	12975, 12975, -1000, 12975, 952, -1000, 256, -1000, -1000, 256,
	256, 12975, 13219, -1000, -1000, 256, 730, 730, 12975, 12975,
	12975, 10514, -1000, 162, 12975, -1000, 546, -1000, 196, -1000,
	-138, 171, -1000, 171, 596, 571, -1000, 730, 695, -1000,
	224, 12975, 962, 954, -1000, -1000, 729, 729, 729, 729,
	48, -1000, -1000, 729, 729, 989, -1000, 730, -1000, 80,
	142, -1000, -1000, -1000, 544, -1000, 11494, 13463, 542, 542,
	542, 167, 162, -1000, 511, 223, 474, -1000, 61, 12975,
	390, 911, -1000, 910, -1000, -1000, -1000, -1000, -1000, 37,
	4736, 3366, 538, 28, 8456, 8456, -1000, -1000, -1000, -1000,
	539, 40, -188, -1000, -1000, 13463, 692, 539, 12975, -1000,
	763, 539, -1000, -1000, -1000, -1000, -1000, -1000, 414, -1000,
	-1000, 13219, -1000, -1000, 465, -1000, -1000, 526, -1000, 12975,
	-1000, -1000, 798, -1000, 818, 256, 688, -1000, 871, -181,
	-192, 687, -1000, -1000, -1000, -1000, -1000, 746, -1000, -1000,
	37, 891, -183, 681, -1000, 948, 946, 8456, -1000, 865,
	-1000, 12975, -1000, 33, -1000, 818, -1000, 8456, 256, -186,
	506, 31, -1000, 256, -189, 801, 730, -195, 797, -1000,
	974, 8717, -1000, -1000, 988, 181, 181, 729, 539, -1000,
	-1000, -1000, 69, 445, -1000, -1000, -1000, -1000, -1000, -1000,
}
var yyPgo = [...]int{

	0, 1251, 63, 162, 1250, 1249, 1245, 104, 1244, 1243,
	1240, 1239, 1238, 1234, 1232, 1230, 1226, 1225, 1224, 1223,
	1219, 1218, 1217, 1216, 1213, 1212, 1211, 1210, 1208, 160,
	1204, 1203, 1202, 84, 1200, 69, 1199, 1198, 45, 823,
	59, 46, 536, 1197, 41, 23, 39, 1193, 1192, 1190,
	26, 1187, 27, 1183, 1182, 73, 1181, 1178, 56, 1177,
	1176, 91, 1175, 66, 1174, 9, 48, 1173, 1171, 1169,
	1168, 71, 114, 1167, 1166, 16, 1159, 1155, 99, 1152,
	57, 8, 14, 12, 20, 1148, 767, 7, 1147, 55,
	1145, 1137, 1134, 1131, 29, 1129, 58, 1127, 25, 60,
	1124, 1122, 4, 1121, 15, 68, 36, 30, 10, 74,
	70, 1120, 21, 65, 54, 1119, 1118, 210, 1117, 1116,
	51, 1115, 1113, 38, 141, 140, 1111, 1110, 1106, 1105,
	42, 0, 1035, 231, 72, 1104, 1103, 1102, 1677, 43,
	17, 22, 28, 31, 1356, 49, 1101, 1100, 44, 1098,
	1097, 1090, 1089, 1087, 1085, 1077, 109, 1074, 1073, 1072,
	32, 53, 1070, 1069, 61, 34, 1066, 1065, 1063, 52,
	67, 1061, 1058, 50, 62, 1057, 1054, 1048, 1046, 1045,
	35, 13, 1044, 18, 1043, 11, 1042, 1040, 47, 1039,
	6, 1037, 19, 1036, 3, 1034, 5, 81, 1, 1016,
	2, 1006, 1003, 693, 612, 75, 1002, 107,
}
var yyR1 = [...]int{

	0, 201, 202, 202, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 2, 2, 2, 2, 6, 6,
	8, 8, 7, 9, 3, 4, 5, 5, 10, 10,
	32, 32, 11, 12, 12, 12, 12, 205, 205, 55,
	55, 56, 56, 105, 105, 13, 13, 13, 13, 110,
	110, 114, 114, 114, 115, 115, 115, 115, 146, 146,
	14, 14, 14, 14, 14, 14, 14, 196, 196, 195,
	194, 194, 193, 193, 192, 20, 176, 178, 178, 177,
	177, 177, 177, 170, 149, 149, 149, 149, 152, 152,
	150, 150, 150, 150, 150, 150, 150, 150, 150, 151,
	151, 151, 151, 151, 153, 153, 153, 153, 153, 154,
	154, 154, 154, 154, 154, 154, 154, 154, 154, 154,
	154, 154, 154, 154, 155, 155, 155, 155, 155, 155,
	155, 155, 169, 169, 156, 156, 164, 164, 165, 165,
	165, 162, 162, 163, 163, 166, 166, 166, 158, 158,
	159, 159, 167, 167, 160, 160, 160, 161, 161, 161,
	168, 168, 168, 168, 168, 157, 157, 171, 171, 186,
	186, 185, 185, 185, 175, 175, 182, 182, 182, 182,
	182, 173, 173, 174, 174, 184, 184, 183, 172, 172,
	188, 188, 188, 188, 199, 200, 198, 198, 198, 198,
	198, 179, 179, 179, 180, 180, 180, 181, 181, 181,
	15, 15, 15, 15, 15, 15, 15, 15, 15, 15,
	15, 15, 15, 197, 197, 197, 197, 197, 197, 197,
	197, 197, 197, 197, 191, 189, 189, 190, 190, 16,
	21, 21, 17, 17, 17, 17, 17, 18, 18, 22,
	23, 23, 23, 23, 23, 23, 23, 23, 23, 23,
	23, 23, 23, 23, 23, 23, 23, 23, 23, 23,
	23, 23, 23, 23, 23, 23, 23, 23, 23, 23,
	23, 23, 121, 121, 119, 119, 122, 122, 120, 120,
	120, 123, 123, 123, 147, 147, 147, 24, 24, 26,
	26, 27, 28, 25, 25, 25, 25, 25, 25, 25,
	19, 206, 29, 30, 30, 31, 31, 31, 35, 35,
	35, 33, 33, 34, 34, 40, 40, 39, 39, 41,
	41, 41, 41, 135, 135, 135, 134, 134, 43, 43,
	44, 44, 45, 45, 46, 46, 46, 46, 46, 64,
	64, 49, 49, 48, 48, 50, 51, 51, 51, 104,
	104, 106, 106, 47, 47, 47, 47, 52, 52, 53,
	53, 54, 54, 142, 142, 141, 141, 141, 187, 187,
	187, 140, 140, 57, 57, 57, 59, 58, 58, 58,
	58, 60, 60, 62, 62, 61, 61, 63, 65, 65,
	65, 65, 66, 66, 42, 42, 42, 42, 42, 42,
	42, 118, 118, 68, 68, 67, 67, 67, 67, 67,
	67, 67, 67, 67, 67, 67, 67, 67, 67, 79,
	79, 79, 79, 79, 79, 69, 69, 69, 69, 69,
	69, 69, 38, 38, 80, 80, 80, 86, 81, 81,
	72, 72, 72, 72, 72, 72, 72, 72, 72, 72,
	72, 72, 72, 72, 72, 72, 72, 72, 72, 72,
	72, 72, 72, 72, 72, 72, 72, 72, 72, 72,
	72, 72, 76, 76, 76, 74, 74, 74, 74, 74,
	74, 74, 74, 74, 74, 74, 74, 74, 75, 75,
	75, 75, 75, 75, 75, 75, 75, 75, 75, 75,
	75, 75, 75, 75, 207, 207, 78, 77, 77, 77,
	77, 77, 77, 36, 36, 36, 36, 36, 145, 145,
	148, 148, 148, 148, 148, 148, 148, 148, 148, 148,
	148, 148, 148, 90, 90, 37, 37, 88, 88, 89,
	91, 91, 87, 87, 87, 71, 71, 71, 71, 71,
	71, 71, 71, 73, 73, 73, 92, 92, 93, 93,
	94, 94, 95, 95, 96, 97, 97, 97, 98, 98,
	98, 98, 99, 99, 99, 100, 100, 101, 101, 102,
	102, 102, 70, 70, 70, 70, 70, 70, 103, 103,
	103, 103, 107, 107, 82, 82, 84, 84, 83, 85,
	108, 108, 112, 109, 109, 113, 113, 113, 113, 111,
	111, 111, 137, 137, 137, 116, 116, 124, 124, 125,
	125, 117, 117, 126, 126, 126, 126, 126, 126, 126,
	126, 126, 126, 127, 127, 127, 128, 128, 129, 129,
	129, 136, 136, 132, 132, 133, 133, 138, 138, 139,
	139, 130, 130, 130, 130, 130, 130, 130, 130, 130,
	130, 130, 130, 130, 130, 130, 130, 130, 130, 130,
	130, 130, 130, 130, 130, 130, 130, 130, 130, 130,
	130, 130, 130, 130, 130, 130, 130, 130, 130, 130,
	130, 130, 130, 130, 130, 130, 130, 130, 130, 130,
	130, 130, 130, 130, 130, 130, 130, 130, 130, 130,
	130, 130, 130, 130, 130, 130, 130, 130, 130, 130,
	130, 130, 130, 130, 130, 130, 130, 130, 130, 130,
	130, 130, 130, 130, 130, 130, 130, 130, 130, 130,
	130, 130, 130, 130, 130, 130, 130, 130, 131, 131,
	131, 131, 131, 131, 131, 131, 131, 131, 131, 131,
	131, 131, 131, 131, 131, 131, 131, 131, 131, 131,
	131, 131, 131, 131, 131, 131, 131, 131, 131, 131,
	131, 131, 131, 131, 131, 131, 131, 131, 131, 131,
	131, 131, 131, 131, 131, 131, 131, 131, 131, 131,
	131, 131, 131, 131, 131, 131, 131, 131, 131, 131,
	131, 131, 131, 131, 131, 131, 131, 131, 131, 131,
	131, 131, 131, 131, 131, 131, 131, 131, 131, 131,
	131, 131, 131, 131, 131, 131, 131, 131, 131, 131,
	131, 131, 131, 131, 131, 131, 131, 131, 131, 131,
	131, 131, 131, 131, 131, 131, 131, 131, 131, 131,
	131, 131, 131, 131, 131, 203, 204, 143, 144, 144,
	144,
}
var yyR2 = [...]int{

	0, 2, 0, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 0, 4, 4, 6, 7, 0, 1,
	1, 3, 5, 5, 11, 3, 1, 3, 7, 8,
	1, 1, 9, 8, 7, 6, 6, 1, 1, 1,
	3, 1, 3, 0, 4, 3, 4, 5, 4, 1,
	3, 3, 2, 2, 2, 2, 2, 1, 1, 1,
	2, 2, 8, 4, 6, 5, 5, 0, 2, 1,
	0, 2, 1, 3, 3, 4, 4, 2, 4, 1,
	3, 3, 3, 8, 3, 1, 1, 1, 2, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 2,
	2, 2, 2, 2, 1, 2, 2, 2, 1, 4,
	4, 2, 2, 3, 3, 3, 3, 1, 1, 1,
	1, 1, 6, 6, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 3, 0, 3, 0, 5, 0, 3,
	5, 0, 1, 0, 1, 0, 1, 2, 0, 2,
	0, 3, 0, 1, 0, 3, 3, 0, 2, 2,
	0, 2, 1, 2, 1, 0, 2, 5, 4, 1,
	2, 2, 3, 2, 0, 1, 2, 3, 3, 2,
	2, 1, 1, 0, 1, 1, 3, 2, 3, 1,
	10, 11, 11, 12, 3, 3, 1, 1, 2, 2,
	2, 0, 1, 3, 1, 2, 3, 1, 1, 1,
	6, 7, 7, 7, 7, 4, 5, 7, 5, 5,
	5, 12, 7, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 7, 1, 3, 8, 8, 3,
	3, 5, 4, 6, 5, 4, 4, 3, 2, 3,
	4, 4, 3, 4, 4, 4, 4, 4, 4, 3,
	3, 2, 3, 3, 2, 3, 4, 3, 7, 5,
	4, 2, 4, 2, 2, 2, 2, 3, 3, 5,
	2, 3, 1, 1, 0, 1, 1, 1, 0, 2,
	2, 0, 2, 2, 0, 1, 1, 2, 1, 1,
	2, 1, 1, 2, 2, 2, 2, 2, 3, 3,
	2, 0, 2, 0, 2, 1, 2, 2, 0, 1,
	1, 0, 1, 0, 1, 0, 1, 1, 3, 1,
	2, 3, 5, 0, 1, 2, 1, 1, 0, 2,
	1, 3, 1, 1, 1, 3, 1, 3, 6, 3,
	7, 0, 1, 1, 3, 3, 1, 4, 4, 1,
	3, 1, 3, 5, 4, 4, 3, 2, 4, 0,
	1, 0, 2, 0, 1, 0, 1, 2, 0, 1,
	1, 1, 1, 1, 2, 2, 1, 2, 3, 2,
	3, 2, 2, 2, 1, 1, 3, 3, 0, 5,
	5, 5, 0, 2, 1, 3, 3, 2, 3, 1,
	2, 0, 3, 1, 1, 3, 3, 4, 4, 5,
	3, 3, 3, 3, 3, 4, 5, 6, 2, 1,
	2, 1, 2, 1, 2, 1, 1, 1, 1, 1,
	1, 1, 0, 2, 1, 1, 1, 3, 1, 3,
	1, 1, 1, 1, 1, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	2, 2, 2, 2, 2, 2, 2, 3, 1, 1,
	1, 1, 4, 5, 6, 4, 4, 6, 6, 6,
	8, 8, 8, 8, 9, 7, 5, 4, 2, 2,
	2, 2, 2, 2, 2, 2, 2, 2, 2, 2,
	2, 2, 8, 8, 0, 2, 3, 4, 4, 4,
	4, 4, 4, 0, 3, 4, 7, 3, 1, 1,
	2, 3, 3, 1, 2, 2, 1, 2, 1, 2,
	2, 1, 2, 0, 1, 0, 2, 1, 2, 4,
	0, 2, 1, 3, 5, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 2, 2, 0, 3, 0, 2,
	0, 3, 1, 3, 2, 0, 1, 1, 0, 2,
	4, 4, 0, 2, 4, 0, 2, 1, 3, 2,
	3, 2, 2, 1, 3, 5, 4, 6, 1, 3,
	3, 5, 0, 5, 1, 3, 1, 2, 3, 1,
	1, 3, 3, 1, 3, 3, 3, 3, 3, 1,
	2, 1, 1, 1, 1, 1, 1, 0, 2, 0,
	3, 0, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 0, 1, 1, 1, 1, 0, 1,
	1, 0, 2, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 0, 0, 1,
	1,
}
var yyChk = [...]int{

	-1000, -201, -1, -2, -9, -10, -11, -12, -13, -14,
	-15, -16, -17, -18, -22, -23, -24, -26, -27, -28,
	-25, -19, -3, 275, -4, 6, 7, -32, 9, 10,
	34, -20, 124, 125, 127, 126, 159, 128, 152, 55,
	172, 173, 175, 176, 29, 153, 154, 157, 158, 35,
	36, 130, -203, 8, 262, 59, -202, 279, -94, 15,
	-8, -7, -140, -138, 64, 62, -131, 23, 272, 145,
	172, 183, 177, 204, 196, 273, 146, 194, 197, 241,
	224, 236, 71, 175, 250, 22, 155, 192, 188, 21,
	186, 31, 238, 209, 277, 187, 237, 130, 148, 143,
	210, 214, 242, 181, 182, 244, 208, 144, 37, 274,
	39, 163, 245, 212, 207, 203, 206, 180, 202, 43,
	216, 215, 217, 240, 199, 149, 189, 18, 248, 158,
	161, 239, 211, 213, 140, 165, 276, 246, 185, 150,
	162, 157, 249, 151, 176, 226, 243, 252, 42, 221,
	179, 142, 173, 169, 227, 200, 164, 190, 191, 205,
	178, 201, 174, 159, 251, 222, 278, 198, 195, 170,
	135, 167, 168, 228, 229, 230, 231, 232, 233, 171,
	20, 247, 193, 223, -31, 5, -29, -206, -29, -29,
	-29, -29, -29, -176, -178, 59, 95, -129, 135, 77,
	254, 131, 132, 139, -132, 62, -131, -117, 135, 231,
	137, 132, 132, 134, 135, 254, 131, 132, -61, -138,
	132, 117, 197, 241, 124, 225, 226, 238, 134, 37,
	239, 165, -147, 132, -119, 224, 228, 229, 230, 233,
	231, 171, 62, 243, 242, 234, -138, 174, -143, -143,
	-143, -143, -143, 227, 227, -143, -2, -98, 17, 16,
	-6, 60, 26, -5, -3, -203, 6, 24, 25, -35,
	44, 45, -30, -41, 105, -42, -138, -67, 79, -72,
	33, 62, -131, 27, -71, -68, -87, -85, -86, 117,
	118, 119, 103, 104, 111, 80, 120, -76, -74, -75,
	-77, 64, 63, 72, 65, 66, 67, 68, 73, 74,
	75, -132, -83, -203, 49, 50, 263, 264, 265, 266,
	271, 267, 82, 38, 253, 261, 260, 259, 257, 258,
	255, 256, 269, 270, 138, 254, 109, 262, -117, -117,
	11, -55, -56, -61, -63, -138, -109, -146, 174, -113,
	243, 242, -133, -111, -132, -130, 241, 197, 240, 129,
	78, 26, 28, 219, 81, 117, 16, 82, 116, 263,
	124, 53, 255, 256, 253, 265, 266, 254, 225, 33,
	10, 29, 153, 25, 107, 126, 85, 86, 156, 27,
	154, 75, 19, 56, 11, 13, 14, 138, 137, 97,
	134, 51, 8, 120, 30, 94, 46, 32, 49, 95,
	17, 257, 258, 35, 271, 160, 109, 54, 40, 79,
	73, 76, 57, 77, 15, 52, 96, 127, 262, 50,
	131, 6, 268, 34, 152, 47, 132, 84, 269, 270,
	136, 166, 74, 5, 139, 36, 9, 55, 58, 259,
	260, 261, 38, 83, 12, 275, -177, 95, -170, 62,
	-61, 134, -61, 262, -125, 138, -125, -125, 132, -61,
	124, 126, 129, 57, -21, -61, -124, 138, 62, -124,
	-124, -124, -61, 121, -61, 62, 34, -144, -203, -133,
	254, 62, 165, 132, 166, 135, -144, -144, -144, -144,
	-144, 169, 170, -144, -122, -121, 236, 237, 227, 235,
	12, 227, 168, -144, -143, -143, -204, 61, -99, 19,
	35, -42, -138, -95, -96, -42, -2, -7, -203, -94,
	-2, -29, 40, -33, 25, 70, 11, -135, 78, 77,
	94, -134, 26, -132, 64, 121, -42, -69, 97, 79,
	95, 111, 113, 112, 114, 96, 81, 100, 99, 110,
	103, 104, 105, 106, 107, 108, 109, 101, 102, 116,
	87, 88, 89, 90, 91, 92, 93, -118, -203, -86,
	-203, 122, 123, -72, -72, -72, -72, -72, -72, -72,
	-72, -203, -2, -81, -42, -203, -203, -203, -203, -203,
	-203, -203, -203, -203, -90, -42, -203, -207, -78, -203,
	-207, -78, -207, -78, -207, -203, -207, -78, -207, -78,
	-207, -207, -78, -203, -203, -203, -203, -203, -203, -62,
	30, -61, -44, -45, -46, -47, -64, -86, -203, 62,
	-61, -61, -55, -205, 60, 11, 58, -205, 60, 121,
	60, -109, 174, -110, -114, 244, 246, 87, -137, -132,
	64, 33, 34, 61, 60, -61, -149, -152, -154, -153,
	-155, -150, -151, 194, 195, 117, 198, 200, 201, 202,
	203, 204, 205, 206, 207, 208, 209, 34, 155, 190,
	191, 192, 193, 210, 211, 212, 213, 214, 215, 216,
	217, 177, 196, 273, 178, 179, 180, 181, 182, 183,
	185, 186, 187, 188, 189, 62, -144, 135, 62, 79,
	62, -61, -61, -144, 167, 167, 132, 132, -61, 60,
	136, -55, 27, 57, -61, 62, 62, -139, -138, -130,
	-144, -144, -144, -144, -144, -61, -144, -144, -144, -144,
	11, -120, 11, 97, -42, 57, 9, 97, 60, 18,
	121, 60, -97, 28, 29, -2, -98, -204, -35, -73,
	-132, 65, 68, -34, 47, -61, -42, -42, -79, 73,
	79, 74, 75, -134, 105, -139, -133, -130, -72, -80,
	-83, -86, 69, 97, 95, 96, 81, -72, -72, -72,
	-72, -72, -72, -72, -72, -72, -72, -72, -72, -72,
	-72, -72, -72, -72, -72, -72, -145, 62, 64, 62,
	-71, -71, -132, -40, 25, -39, -41, -204, 60, -204,
	-2, -39, -39, -42, -42, -87, 64, -39, -87, 64,
	-39, -39, -33, -88, -89, 83, -87, -132, -138, -204,
	-72, -132, -132, -39, -40, -39, -39, -105, 161, -61,
	34, 60, -187, -59, -58, -60, 48, 7, 47, 49,
	50, 54, -142, 26, -44, -203, -203, -141, 161, -140,
	26, -105, 58, -44, -61, -44, -63, -138, 105, -113,
	-110, 60, 245, 247, 248, 57, 76, -42, -161, 116,
	-179, -180, -181, -133, 64, 65, -170, -171, -172, -182,
	147, -188, 140, 142, 139, -173, 148, 134, 32, 61,
	-166, 73, 79, -162, 222, -156, 59, -156, -156, -156,
	-156, -160, 197, -160, -160, -160, 59, 59, -156, -156,
	-156, -164, 59, -164, -164, -165, 59, -165, -136, 58,
	-61, -144, 27, -144, -126, 129, 126, 127, -191, 125,
	219, 197, 71, 33, 15, 263, 161, 278, 62, 162,
	-132, -132, -61, -61, 129, 126, -61, -61, -61, -144,
	-61, -123, 95, 12, -138, -138, -61, 42, -42, -42,
	-139, -96, -204, -99, -116, 19, 11, 38, 38, -39,
	73, 74, 75, 121, -203, -80, -72, -72, -72, -38,
	156, 78, -204, -204, -39, 60, -42, -204, -204, -204,
	60, 58, 26, 11, 11, -204, 11, 11, -204, -204,
	-39, -91, -89, 85, -42, -204, 121, -204, 60, 60,
	-204, -204, -204, -204, -70, 34, 38, -2, -203, -203,
	-108, -112, -87, -45, -57, 46, 51, 53, -46, -45,
	-46, 46, 52, 46, 52, 46, -58, -138, -204, -49,
	-48, -50, -132, -65, 55, 137, 56, -203, -140, -66,
	12, -44, -66, -66, 121, -114, -115, 249, 246, 252,
	62, 64, 60, -181, 87, 59, 62, 32, -173, -173,
	-174, 62, -174, 32, -158, 33, 73, -163, 223, 65,
	-160, -160, -161, 34, -161, -161, -161, -169, 64, -169,
	65, 65, 57, -132, -144, -143, -197, 141, 147, 148,
	143, 62, 134, 32, 140, 142, 161, 139, -197, -127,
	-128, 136, 26, 134, 32, 161, -196, 58, 167, 167,
	136, -144, -120, 64, -42, 43, 121, -61, -43, 11,
	105, -133, -40, -38, 78, -72, -72, -204, -41, -148,
	117, 194, 155, 192, 188, 208, 199, 221, 190, 222,
	-145, -148, -72, -72, -72, -72, 272, -94, 86, -42,
	84, -133, -72, -72, -107, 57, -108, -82, -84, -83,
	-203, -2, -103, -132, -106, -132, -66, 60, 87, -46,
	46, 46, -54, 57, -52, 57, 58, 46, 46, -204,
	60, 98, 134, 134, 134, -106, -94, -42, -66, 246,
	250, 251, -180, -181, -184, -183, -132, -188, -174, -174,
	59, -159, 57, -72, 61, -161, -161, 62, 117, 61,
	60, 61, 60, 61, 60, -61, -143, -143, -61, -143,
	-132, -194, 275, -195, 62, -132, -132, -61, -123, -66,
	-44, -204, -72, -204, -156, -156, -156, -165, -156, 182,
	-156, 182, -204, -204, 19, 19, 19, 19, -203, -37,
	268, -42, 60, 60, 31, -107, 60, -204, -204, -204,
	60, 121, -204, 60, -94, -112, -42, -53, -52, -42,
	-42, 59, -142, -50, -51, -42, 132, 133, -203, -203,
	-203, -204, -98, 61, 60, -156, -104, -132, -167, 219,
	9, -160, 64, -160, 65, 65, -144, 30, -193, -192,
	-133, 59, -92, 13, -160, 62, -72, -72, -72, -72,
	-72, -204, 64, -72, -72, 32, -84, 38, -2, -203,
	-132, -132, -132, -98, -104, -138, -203, -203, -104, -104,
	-104, -141, -186, -185, 58, 144, 71, -183, 61, 60,
	-168, 140, 32, 139, -75, -161, -161, 61, 61, -203,
	60, 87, -104, -93, 14, 16, -204, -204, -204, -204,
	-36, 97, 275, -204, -204, 9, -82, -2, 121, 61,
	-45, -87, -204, -204, -204, -65, -185, 62, -175, 87,
	64, 150, -132, -157, 71, 32, 32, -189, -190, 161,
	-192, -181, 61, -100, 166, -42, -81, -204, 273, 54,
	276, -108, -204, -132, -204, -204, 65, -61, 64, -204,
	60, -132, -196, -101, -102, 57, 23, 22, 43, 274,
	277, 59, -190, 38, -194, 60, 20, 21, -42, 43,
	-104, 163, -102, -42, 275, 61, 164, 276, -199, -200,
	57, -203, 277, -200, 57, 10, 9, -72, 160, -198,
	151, 146, 149, 34, -198, -204, -204, 145, 33, 73,
}
var yyDef = [...]int{

	23, -2, 2, 4, 5, 6, 7, 8, 9, 10,
	11, 12, 13, 14, 15, 16, 17, 18, 19, 20,
	21, 22, 580, 0, 0, 321, 321, 321, 321, 321,
	321, 0, 658, 641, 0, 0, 0, 0, -2, 308,
	309, 0, 311, 312, 887, 887, 887, 887, 887, 0,
	0, 887, 0, 40, 41, 885, 1, 3, 588, 0,
	28, 30, 0, 391, 392, 667, 668, 768, 769, 770,
	771, 772, 773, 774, 775, 776, 777, 778, 779, 780,
	781, 782, 783, 784, 785, 786, 787, 788, 789, 790,
	791, 792, 793, 794, 795, 796, 797, 798, 799, 800,
	801, 802, 803, 804, 805, 806, 807, 808, 809, 810,
	811, 812, 813, 814, 815, 816, 817, 818, 819, 820,
	821, 822, 823, 824, 825, 826, 827, 828, 829, 830,
	831, 832, 833, 834, 835, 836, 837, 838, 839, 840,
	841, 842, 843, 844, 845, 846, 847, 848, 849, 850,
	851, 852, 853, 854, 855, 856, 857, 858, 859, 860,
	861, 862, 863, 864, 865, 866, 867, 868, 869, 870,
	871, 872, 873, 874, 875, 876, 877, 878, 879, 880,
	881, 882, 883, 884, 0, 325, 328, 323, 0, 641,
	641, 0, 0, 70, 71, 0, 0, 0, 871, 0,
	639, 639, 639, 659, 660, 663, 664, 0, 0, 0,
	642, 0, 637, 0, 637, 637, 637, 0, 258, 405,
	0, 0, 0, 888, 0, 888, 888, 271, 888, 888,
	274, 888, 0, 888, 0, 281, 283, 284, 285, 286,
	0, 290, 888, 305, 306, 295, 307, 310, 313, 314,
	315, 316, 317, 887, 887, 320, 0, 592, 0, 0,
	0, 29, 0, 580, 36, 0, 321, 326, 327, 331,
	329, 330, 322, 0, 339, 343, 0, 414, 0, 419,
	421, -2, -2, 0, 460, 461, 462, 463, 464, 0,
	0, 0, 0, 0, 0, 0, 0, 488, 489, 490,
	491, 565, 566, 567, 568, 569, 570, 571, 572, 423,
	424, 562, 619, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 553, 0, 524, 524, 524, 524, 524, 524,
	524, 524, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 49, 51, 405, 55, 0, 863, 623,
	-2, -2, 0, 0, 665, 666, -2, 779, -2, 671,
	672, 673, 674, 675, 676, 677, 678, 679, 680, 681,
	682, 683, 684, 685, 686, 687, 688, 689, 690, 691,
	692, 693, 694, 695, 696, 697, 698, 699, 700, 701,
	702, 703, 704, 705, 706, 707, 708, 709, 710, 711,
	712, 713, 714, 715, 716, 717, 718, 719, 720, 721,
	722, 723, 724, 725, 726, 727, 728, 729, 730, 731,
	732, 733, 734, 735, 736, 737, 738, 739, 740, 741,
	742, 743, 744, 745, 746, 747, 748, 749, 750, 751,
	752, 753, 754, 755, 756, 757, 758, 759, 760, 761,
	762, 763, 764, 765, 766, 767, 0, 0, 89, 0,
	87, 0, 888, 0, 0, 0, 0, 0, 0, 888,
	0, 0, 0, 0, 249, 0, 0, 0, 0, 0,
	0, 0, 257, 0, 259, 888, 888, 262, 889, 890,
	888, 888, 888, 0, 888, 888, 269, 270, 272, 273,
	275, 888, 888, 277, 0, 298, 296, 297, 292, 293,
	0, 287, 288, 291, 318, 319, 35, 886, 24, 0,
	0, 589, 0, 581, 582, 585, 25, 31, 0, 588,
	0, 328, 0, 333, 332, 324, 0, 340, 0, 0,
	0, 344, 0, 346, 347, 0, 417, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	445, 446, 447, 448, 449, 450, 451, 420, 0, 438,
	0, 0, 0, 480, 481, 482, 483, 484, 485, 486,
	0, 335, 0, 0, 458, 0, 0, 0, 0, 0,
	0, 0, 0, 331, 0, 554, 0, 508, 516, 0,
	509, 517, 510, 518, 511, 0, 512, 519, 513, 520,
	514, 515, 521, 0, 0, 0, 335, 0, 0, 53,
	0, 404, 0, -2, 352, 353, 354, -2, 0, 667,
	385, -2, 0, 0, 0, 47, 48, 0, 0, 0,
	0, 56, 863, 58, 59, 0, 0, 0, 167, 632,
	633, 634, 630, 211, 0, 0, 155, 151, 95, 96,
	97, 144, 99, 144, 144, 144, 144, 164, 164, 164,
	164, 127, 128, 129, 130, 131, 0, 0, 114, 144,
	144, 144, 118, 134, 135, 136, 137, 138, 139, 140,
	141, 100, 101, 102, 103, 104, 105, 106, 107, 108,
	146, 146, 146, 148, 148, 661, 73, 0, 888, 0,
	888, 85, 0, 225, 0, 0, 0, 0, 0, 0,
	0, 252, 638, 0, 888, 255, 256, 406, 669, 670,
	260, 261, 263, 264, 265, 266, 267, 268, 276, 280,
	0, 301, 0, 0, 282, 0, 593, 0, 0, 0,
	0, 0, 584, 586, 587, 0, 592, 37, 331, 0,
	573, 0, 0, 0, 334, 33, 415, 416, 418, 439,
	0, 441, 443, 345, 341, 0, 563, -2, 425, 426,
	454, 455, 456, 0, 0, 0, 0, 452, 430, 431,
	432, 433, 434, 0, 465, 466, 467, 468, 469, 470,
	471, 472, 473, 474, 475, 476, 479, 538, 539, 0,
	477, 478, 487, 0, 0, 336, 337, 457, 0, 618,
	0, 0, 0, 0, 0, 462, 565, 0, 462, 565,
	0, 0, 0, 560, 557, 0, 0, 562, 0, 525,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 403,
	0, 0, 0, 0, 0, 0, 389, 390, 396, 0,
	0, 0, 0, 384, 0, 0, 361, 408, 831, 386,
	0, 412, 0, 412, 50, 412, 52, 0, 407, 624,
	57, 0, 0, 62, 63, 625, 626, 627, 628, 0,
	86, 212, 214, 217, 218, 219, 90, 91, 92, 0,
	0, 199, 0, 0, 193, 193, 0, 191, 192, 88,
	158, 156, 0, 153, 152, 98, 0, 164, 164, 121,
	122, 167, 0, 167, 167, 167, 0, 0, 115, 116,
	117, 109, 0, 110, 111, 112, 0, 113, 0, 0,
	888, 75, 640, 76, 887, 0, 0, 653, 226, 643,
	644, 645, 646, 647, 648, 649, 650, 651, 652, 0,
	77, 228, 230, 229, 0, 0, 0, 250, 888, 254,
	298, 279, 0, 0, 299, 300, 289, 0, 590, 591,
	0, 583, 32, 26, 0, 635, 636, 574, 575, 348,
	440, 442, 444, 0, 335, 427, 452, 435, 0, 428,
	0, 0, 422, 492, 0, 0, 459, -2, 495, 496,
	0, 0, 0, 0, 0, 531, 0, 0, 532, 0,
	580, 0, 558, 0, 0, 507, 0, 526, 0, 0,
	527, 528, 529, 530, 612, 0, 0, 603, 0, 0,
	412, 620, 0, -2, 0, 393, 0, 0, 381, 388,
	376, 397, 0, 399, 0, 401, 402, 355, 357, 0,
	362, 363, 0, 359, 0, 0, 0, 0, 387, 580,
	0, 412, 45, 46, 0, 60, 61, 0, 0, 67,
	168, 169, 0, 215, 0, 0, 0, 186, 193, 193,
	189, 194, 190, 0, 160, 0, 157, 94, 154, 0,
	167, 167, 123, 0, 124, 125, 126, 0, 142, 0,
	0, 0, 0, 662, 74, 220, 887, 233, 234, 235,
	236, 237, 238, 239, 240, 241, 242, 243, 887, 0,
	887, 654, 655, 656, 657, 0, 80, 0, 0, 0,
	0, 253, 301, 302, 303, 594, 0, 27, 412, 0,
	342, 564, 0, 429, 0, 453, 436, 493, 338, 0,
	144, 144, 543, 144, 148, 546, 144, 548, 144, 551,
	0, 0, 0, 0, 0, 0, 0, 555, 506, 561,
	0, 563, 0, 0, 38, 0, 612, 602, 614, 616,
	0, 0, 0, 608, 0, 371, 580, 0, 0, 379,
	394, 395, 374, 0, 375, 0, 0, 398, 400, 383,
	0, 0, 0, 0, 0, 0, 588, 413, 44, 64,
	65, 66, 213, 216, 0, 195, 144, 198, 187, 188,
	0, 162, 0, 159, 145, 119, 120, 165, 166, 164,
	0, 164, 0, 149, 0, 888, 221, 222, 223, 224,
	0, 227, 0, 78, 79, 0, 232, 251, 278, 576,
	349, 494, 437, 497, 540, 164, 544, 545, 547, 549,
	550, 552, 499, 498, 0, 0, 0, 0, 0, 0,
	0, 559, 0, 0, 0, 39, 0, 617, -2, 0,
	0, 0, 54, 0, 588, 621, 622, 373, 380, 382,
	377, 0, 0, 364, 365, 366, 0, 0, 0, 0,
	0, 385, 43, 178, 0, 197, 0, 369, 170, 163,
	0, 167, 143, 167, 0, 0, 72, 0, 81, 82,
	0, 0, 578, 0, 541, 542, 0, 0, 0, 0,
	533, 505, 556, 0, 0, 0, 615, 0, 606, 0,
	610, 609, 372, 42, 0, 358, 0, 0, 0, 0,
	0, 408, 177, 179, 0, 184, 0, 196, 0, 0,
	175, 0, 172, 174, 161, 132, 133, 147, 150, 0,
	0, 0, 0, 595, 0, 0, 500, 502, 501, 503,
	0, 0, 0, 522, 523, 0, 605, 0, 0, 378,
	388, 0, 409, 410, 411, 360, 180, 181, 0, 185,
	183, 0, 370, 93, 0, 171, 173, 0, 245, 0,
	83, 84, 77, 34, 0, 579, 577, 504, 0, 0,
	0, 613, -2, 611, 367, 368, 182, 0, 176, 244,
	0, 0, 80, 596, 597, 0, 0, 0, 534, 0,
	537, 0, 246, 0, 231, 0, 599, 0, 601, 535,
	0, 0, 598, 600, 0, 200, 0, 0, 201, 202,
	0, 0, 536, 203, 0, 0, 0, 0, 0, 204,
	206, 207, 0, 0, 205, 247, 248, 208, 209, 210,
}
var yyTok1 = [...]int{

	1, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 80, 3, 3, 3, 108, 100, 3,
	59, 61, 105, 103, 60, 104, 121, 106, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 279,
	88, 87, 89, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 110, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 99, 3, 111,
}
var yyTok2 = [...]int{

	2, 3, 4, 5, 6, 7, 8, 9, 10, 11,
	12, 13, 14, 15, 16, 17, 18, 19, 20, 21,
	22, 23, 24, 25, 26, 27, 28, 29, 30, 31,
	32, 33, 34, 35, 36, 37, 38, 39, 40, 41,
	42, 43, 44, 45, 46, 47, 48, 49, 50, 51,
	52, 53, 54, 55, 56, 57, 58, 62, 63, 64,
	65, 66, 67, 68, 69, 70, 71, 72, 73, 74,
	75, 76, 77, 78, 79, 81, 82, 83, 84, 85,
	86, 90, 91, 92, 93, 94, 95, 96, 97, 98,
	101, 102, 107, 109, 112, 113, 114, 115, 116, 117,
	118, 119, 120, 122, 123, 124, 125, 126, 127, 128,
	129, 130, 131, 132, 133, 134, 135, 136, 137, 138,
	139, 140, 141, 142, 143, 144, 145, 146, 147, 148,
	149, 150, 151, 152, 153, 154, 155, 156, 157, 158,
	159, 160, 161, 162, 163, 164, 165, 166, 167, 168,
	169, 170, 171, 172, 173, 174, 175, 176, 177, 178,
	179, 180, 181, 182, 183, 184, 185, 186, 187, 188,
	189, 190, 191, 192, 193, 194, 195, 196, 197, 198,
	199, 200, 201, 202, 203, 204, 205, 206, 207, 208,
	209, 210, 211, 212, 213, 214, 215, 216, 217, 218,
	219, 220, 221, 222, 223, 224, 225, 226, 227, 228,
	229, 230, 231, 232, 233, 234, 235, 236, 237, 238,
	239, 240, 241, 242, 243, 244, 245, 246, 247, 248,
	249, 250, 251, 252, 253, 254, 255, 256, 257, 258,
	259, 260, 261, 262, 263, 264, 265, 266, 267, 268,
	269, 270, 271, 272, 273, 274,
}
var yyTok3 = [...]int{
	57600, 275, 57601, 276, 57602, 277, 57603, 278, 0,
}

var yyErrorMessages = [...]struct {
	state int
	token int
	msg   string
}{}

//line yaccpar:1

/*	parser for yacc output	*/

var (
	yyDebug        = 0
	yyErrorVerbose = false
)

type yyLexer interface {
	Lex(lval *yySymType) int
	Error(s string)
}

type yyParser interface {
	Parse(yyLexer) int
	Lookahead() int
}

type yyParserImpl struct {
	lval  yySymType
	stack [yyInitialStackSize]yySymType
	char  int
}

func (p *yyParserImpl) Lookahead() int {
	return p.char
}

func yyNewParser() yyParser {
	return &yyParserImpl{}
}

const yyFlag = -1000

func yyTokname(c int) string {
	if c >= 1 && c-1 < len(yyToknames) {
		if yyToknames[c-1] != "" {
			return yyToknames[c-1]
		}
	}
	return __yyfmt__.Sprintf("tok-%v", c)
}

func yyStatname(s int) string {
	if s >= 0 && s < len(yyStatenames) {
		if yyStatenames[s] != "" {
			return yyStatenames[s]
		}
	}
	return __yyfmt__.Sprintf("state-%v", s)
}

func yyErrorMessage(state, lookAhead int) string {
	const TOKSTART = 4

	if !yyErrorVerbose {
		return "syntax error"
	}

	for _, e := range yyErrorMessages {
		if e.state == state && e.token == lookAhead {
			return "syntax error: " + e.msg
		}
	}

	res := "syntax error: unexpected " + yyTokname(lookAhead)

	// To match Bison, suggest at most four expected tokens.
	expected := make([]int, 0, 4)

	// Look for shiftable tokens.
	base := yyPact[state]
	for tok := TOKSTART; tok-1 < len(yyToknames); tok++ {
		if n := base + tok; n >= 0 && n < yyLast && yyChk[yyAct[n]] == tok {
			if len(expected) == cap(expected) {
				return res
			}
			expected = append(expected, tok)
		}
	}

	if yyDef[state] == -2 {
		i := 0
		for yyExca[i] != -1 || yyExca[i+1] != state {
			i += 2
		}

		// Look for tokens that we accept or reduce.
		for i += 2; yyExca[i] >= 0; i += 2 {
			tok := yyExca[i]
			if tok < TOKSTART || yyExca[i+1] == 0 {
				continue
			}
			if len(expected) == cap(expected) {
				return res
			}
			expected = append(expected, tok)
		}

		// If the default action is to accept or reduce, give up.
		if yyExca[i+1] != 0 {
			return res
		}
	}

	for i, tok := range expected {
		if i == 0 {
			res += ", expecting "
		} else {
			res += " or "
		}
		res += yyTokname(tok)
	}
	return res
}

func yylex1(lex yyLexer, lval *yySymType) (char, token int) {
	token = 0
	char = lex.Lex(lval)
	if char <= 0 {
		token = yyTok1[0]
		goto out
	}
	if char < len(yyTok1) {
		token = yyTok1[char]
		goto out
	}
	if char >= yyPrivate {
		if char < yyPrivate+len(yyTok2) {
			token = yyTok2[char-yyPrivate]
			goto out
		}
	}
	for i := 0; i < len(yyTok3); i += 2 {
		token = yyTok3[i+0]
		if token == char {
			token = yyTok3[i+1]
			goto out
		}
	}

out:
	if token == 0 {
		token = yyTok2[1] /* unknown char */
	}
	if yyDebug >= 3 {
		__yyfmt__.Printf("lex %s(%d)\n", yyTokname(token), uint(char))
	}
	return char, token
}

func yyParse(yylex yyLexer) int {
	return yyNewParser().Parse(yylex)
}

func (yyrcvr *yyParserImpl) Parse(yylex yyLexer) int {
	var yyn int
	var yyVAL yySymType
	var yyDollar []yySymType
	_ = yyDollar // silence set and not used
	yyS := yyrcvr.stack[:]

	Nerrs := 0   /* number of errors */
	Errflag := 0 /* error recovery flag */
	yystate := 0
	yyrcvr.char = -1
	yytoken := -1 // yyrcvr.char translated into internal numbering
	defer func() {
		// Make sure we report no lookahead when not parsing.
		yystate = -1
		yyrcvr.char = -1
		yytoken = -1
	}()
	yyp := -1
	goto yystack

ret0:
	return 0

ret1:
	return 1

yystack:
	/* put a state and value onto the stack */
	if yyDebug >= 4 {
		__yyfmt__.Printf("char %v in %v\n", yyTokname(yytoken), yyStatname(yystate))
	}

	yyp++
	if yyp >= len(yyS) {
		nyys := make([]yySymType, len(yyS)*2)
		copy(nyys, yyS)
		yyS = nyys
	}
	yyS[yyp] = yyVAL
	yyS[yyp].yys = yystate

yynewstate:
	yyn = yyPact[yystate]
	if yyn <= yyFlag {
		goto yydefault /* simple state */
	}
	if yyrcvr.char < 0 {
		yyrcvr.char, yytoken = yylex1(yylex, &yyrcvr.lval)
	}
	yyn += yytoken
	if yyn < 0 || yyn >= yyLast {
		goto yydefault
	}
	yyn = yyAct[yyn]
	if yyChk[yyn] == yytoken { /* valid shift */
		yyrcvr.char = -1
		yytoken = -1
		yyVAL = yyrcvr.lval
		yystate = yyn
		if Errflag > 0 {
			Errflag--
		}
		goto yystack
	}

yydefault:
	/* default state action */
	yyn = yyDef[yystate]
	if yyn == -2 {
		if yyrcvr.char < 0 {
			yyrcvr.char, yytoken = yylex1(yylex, &yyrcvr.lval)
		}

		/* look through exception table */
		xi := 0
		for {
			if yyExca[xi+0] == -1 && yyExca[xi+1] == yystate {
				break
			}
			xi += 2
		}
		for xi += 2; ; xi += 2 {
			yyn = yyExca[xi+0]
			if yyn < 0 || yyn == yytoken {
				break
			}
		}
		yyn = yyExca[xi+1]
		if yyn < 0 {
			goto ret0
		}
	}
	if yyn == 0 {
		/* error ... attempt to resume parsing */
		switch Errflag {
		case 0: /* brand new error */
			yylex.Error(yyErrorMessage(yystate, yytoken))
			Nerrs++
			if yyDebug >= 1 {
				__yyfmt__.Printf("%s", yyStatname(yystate))
				__yyfmt__.Printf(" saw %s\n", yyTokname(yytoken))
			}
			fallthrough

		case 1, 2: /* incompletely recovered error ... try again */
			Errflag = 3

			/* find a state where "error" is a legal shift action */
			for yyp >= 0 {
				yyn = yyPact[yyS[yyp].yys] + yyErrCode
				if yyn >= 0 && yyn < yyLast {
					yystate = yyAct[yyn] /* simulate a shift of "error" */
					if yyChk[yystate] == yyErrCode {
						goto yystack
					}
				}

				/* the current p has no shift on "error", pop stack */
				if yyDebug >= 2 {
					__yyfmt__.Printf("error recovery pops state %d\n", yyS[yyp].yys)
				}
				yyp--
			}
			/* there is no state on the stack with an error shift ... abort */
			goto ret1

		case 3: /* no shift yet; clobber input char */
			if yyDebug >= 2 {
				__yyfmt__.Printf("error recovery discards %s\n", yyTokname(yytoken))
			}
			if yytoken == yyEofCode {
				goto ret1
			}
			yyrcvr.char = -1
			yytoken = -1
			goto yynewstate /* try again in the same state */
		}
	}

	/* reduction by production yyn */
	if yyDebug >= 2 {
		__yyfmt__.Printf("reduce %v in:\n\t%v\n", yyn, yyStatname(yystate))
	}

	yynt := yyn
	yypt := yyp
	_ = yypt // guard against "declared and not used"

	yyp -= yyR2[yyn]
	// yyp is now the index of $0. Perform the default action. Iff the
	// reduced production is ε, $1 is possibly out of range.
	if yyp+1 >= len(yyS) {
		nyys := make([]yySymType, len(yyS)*2)
		copy(nyys, yyS)
		yyS = nyys
	}
	yyVAL = yyS[yyp+1]

	/* consult goto table to find next state */
	yyn = yyR1[yyn]
	yyg := yyPgo[yyn]
	yyj := yyg + yyS[yyp].yys + 1

	if yyj >= yyLast {
		yystate = yyAct[yyg]
	} else {
		yystate = yyAct[yyj]
		if yyChk[yystate] != -yyn {
			yystate = yyAct[yyg]
		}
	}
	// dummy call; replaced with literal code
	switch yynt {

	case 1:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:340
		{
			setParseTree(yylex, yyDollar[1].statement)
		}
	case 2:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:345
		{
		}
	case 3:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:346
		{
		}
	case 4:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:350
		{
			yyVAL.statement = yyDollar[1].selStmt
		}
	case 23:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:372
		{
			setParseTree(yylex, nil)
		}
	case 24:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:378
		{
			sel := yyDollar[1].selStmt.(*Select)
			sel.OrderBy = yyDollar[2].orderBy
			sel.Limit = yyDollar[3].limit
			sel.Lock = yyDollar[4].str
			yyVAL.selStmt = sel
		}
	case 25:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:386
		{
			yyVAL.selStmt = &With{CommonTableExpressions: yyDollar[2].commonTableExpressions, Select: yyDollar[4].selStmt}
		}
	case 26:
		yyDollar = yyS[yypt-6 : yypt+1]
//line sql.y:390
		{
			yyVAL.selStmt = &Union{Type: yyDollar[2].str, Left: yyDollar[1].selStmt, Right: yyDollar[3].selStmt, OrderBy: yyDollar[4].orderBy, Limit: yyDollar[5].limit, Lock: yyDollar[6].str}
		}
	case 27:
		yyDollar = yyS[yypt-7 : yypt+1]
//line sql.y:394
		{
			yyVAL.selStmt = &Select{Comments: Comments(yyDollar[2].bytes2), Cache: yyDollar[3].str, SelectExprs: SelectExprs{Nextval{Expr: yyDollar[5].expr}}, From: TableExprs{&AliasedTableExpr{Expr: yyDollar[7].tableName}}}
		}
	case 28:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:399
		{
			yyVAL.bytes = nil
		}
	case 29:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:403
		{
			yyVAL.bytes = []byte(",")
		}
	case 30:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:410
		{
			yyVAL.commonTableExpressions = []*CommonTableExpression{yyDollar[1].commonTableExpression}
		}
	case 31:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:414
		{
			yyVAL.commonTableExpressions = append(yyDollar[1].commonTableExpressions, yyDollar[3].commonTableExpression)
		}
	case 32:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sql.y:420
		{
			yyVAL.commonTableExpression = &CommonTableExpression{Name: yyDollar[1].tableIdent, Select: yyDollar[4].selStmt}
		}
	case 33:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sql.y:427
		{
			yyVAL.statement = &Stream{Comments: Comments(yyDollar[2].bytes2), SelectExpr: yyDollar[3].selectExpr, Table: yyDollar[5].tableName}
		}
	case 34:
		yyDollar = yyS[yypt-11 : yypt+1]
//line sql.y:434
		{
			yyVAL.selStmt = &Select{Comments: Comments(yyDollar[2].bytes2), Cache: yyDollar[3].str, Distinct: yyDollar[4].str, Hints: yyDollar[5].str, SelectExprs: yyDollar[6].selectExprs, From: yyDollar[7].tableExprs, Where: NewWhere(WhereStr, yyDollar[8].expr), GroupBy: GroupBy(yyDollar[9].exprs), Having: NewWhere(HavingStr, yyDollar[10].expr), Trigger: yyDollar[11].triggers}
		}
	case 35:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:440
		{
			yyVAL.selStmt = &ParenSelect{Select: yyDollar[2].selStmt}
		}
	case 36:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:446
		{
			yyVAL.selStmt = yyDollar[1].selStmt
		}
	case 37:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:450
		{
			yyVAL.selStmt = &ParenSelect{Select: yyDollar[2].selStmt}
		}
	case 38:
		yyDollar = yyS[yypt-7 : yypt+1]
//line sql.y:457
		{
			// insert_data returns a *Insert pre-filled with Columns & Values
			ins := yyDollar[6].ins
			ins.Action = yyDollar[1].str
			ins.Comments = yyDollar[2].bytes2
			ins.Ignore = yyDollar[3].str
			ins.Table = yyDollar[4].tableName
			ins.Partitions = yyDollar[5].partitions
			ins.OnDup = OnDup(yyDollar[7].updateExprs)
			yyVAL.statement = ins
		}
	case 39:
		yyDollar = yyS[yypt-8 : yypt+1]
//line sql.y:469
		{
			cols := make(Columns, 0, len(yyDollar[7].updateExprs))
			vals := make(ValTuple, 0, len(yyDollar[8].updateExprs))
			for _, updateList := range yyDollar[7].updateExprs {
				cols = append(cols, updateList.Name.Name)
				vals = append(vals, updateList.Expr)
			}
			yyVAL.statement = &Insert{Action: yyDollar[1].str, Comments: Comments(yyDollar[2].bytes2), Ignore: yyDollar[3].str, Table: yyDollar[4].tableName, Partitions: yyDollar[5].partitions, Columns: cols, Rows: Values{vals}, OnDup: OnDup(yyDollar[8].updateExprs)}
		}
	case 40:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:481
		{
			yyVAL.str = InsertStr
		}
	case 41:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:485
		{
			yyVAL.str = ReplaceStr
		}
	case 42:
		yyDollar = yyS[yypt-9 : yypt+1]
//line sql.y:491
		{
			yyVAL.statement = &Update{Comments: Comments(yyDollar[2].bytes2), Ignore: yyDollar[3].str, TableExprs: yyDollar[4].tableExprs, Exprs: yyDollar[6].updateExprs, Where: NewWhere(WhereStr, yyDollar[7].expr), OrderBy: yyDollar[8].orderBy, Limit: yyDollar[9].limit}
		}
	case 43:
		yyDollar = yyS[yypt-8 : yypt+1]
//line sql.y:497
		{
			yyVAL.statement = &Delete{Comments: Comments(yyDollar[2].bytes2), TableExprs: TableExprs{&AliasedTableExpr{Expr: yyDollar[4].tableName}}, Partitions: yyDollar[5].partitions, Where: NewWhere(WhereStr, yyDollar[6].expr), OrderBy: yyDollar[7].orderBy, Limit: yyDollar[8].limit}
		}
	case 44:
		yyDollar = yyS[yypt-7 : yypt+1]
//line sql.y:501
		{
			yyVAL.statement = &Delete{Comments: Comments(yyDollar[2].bytes2), Targets: yyDollar[4].tableNames, TableExprs: yyDollar[6].tableExprs, Where: NewWhere(WhereStr, yyDollar[7].expr)}
		}
	case 45:
		yyDollar = yyS[yypt-6 : yypt+1]
//line sql.y:505
		{
			yyVAL.statement = &Delete{Comments: Comments(yyDollar[2].bytes2), Targets: yyDollar[3].tableNames, TableExprs: yyDollar[5].tableExprs, Where: NewWhere(WhereStr, yyDollar[6].expr)}
		}
	case 46:
		yyDollar = yyS[yypt-6 : yypt+1]
//line sql.y:509
		{
			yyVAL.statement = &Delete{Comments: Comments(yyDollar[2].bytes2), Targets: yyDollar[3].tableNames, TableExprs: yyDollar[5].tableExprs, Where: NewWhere(WhereStr, yyDollar[6].expr)}
		}
	case 47:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:514
		{
		}
	case 48:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:515
		{
		}
	case 49:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:519
		{
			yyVAL.tableNames = TableNames{yyDollar[1].tableName}
		}
	case 50:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:523
		{
			yyVAL.tableNames = append(yyVAL.tableNames, yyDollar[3].tableName)
		}
	case 51:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:529
		{
			yyVAL.tableNames = TableNames{yyDollar[1].tableName}
		}
	case 52:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:533
		{
			yyVAL.tableNames = append(yyVAL.tableNames, yyDollar[3].tableName)
		}
	case 53:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:538
		{
			yyVAL.partitions = nil
		}
	case 54:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:542
		{
			yyVAL.partitions = yyDollar[3].partitions
		}
	case 55:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:548
		{
			yyVAL.statement = &Set{Comments: Comments(yyDollar[2].bytes2), Exprs: yyDollar[3].setExprs}
		}
	case 56:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:552
		{
			yyVAL.statement = &Set{Comments: Comments(yyDollar[2].bytes2), Scope: yyDollar[3].str, Exprs: yyDollar[4].setExprs}
		}
	case 57:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sql.y:556
		{
			yyVAL.statement = &Set{Comments: Comments(yyDollar[2].bytes2), Scope: yyDollar[3].str, Exprs: yyDollar[5].setExprs}
		}
	case 58:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:560
		{
			yyVAL.statement = &Set{Comments: Comments(yyDollar[2].bytes2), Exprs: yyDollar[4].setExprs}
		}
	case 59:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:566
		{
			yyVAL.setExprs = SetExprs{yyDollar[1].setExpr}
		}
	case 60:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:570
		{
			yyVAL.setExprs = append(yyVAL.setExprs, yyDollar[3].setExpr)
		}
	case 61:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:576
		{
			yyVAL.setExpr = &SetExpr{Name: NewColIdent(TransactionStr), Expr: NewStrVal([]byte(yyDollar[3].str))}
		}
	case 62:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:580
		{
			yyVAL.setExpr = &SetExpr{Name: NewColIdent(TransactionStr), Expr: NewStrVal([]byte(TxReadWrite))}
		}
	case 63:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:584
		{
			yyVAL.setExpr = &SetExpr{Name: NewColIdent(TransactionStr), Expr: NewStrVal([]byte(TxReadOnly))}
		}
	case 64:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:590
		{
			yyVAL.str = IsolationLevelRepeatableRead
		}
	case 65:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:594
		{
			yyVAL.str = IsolationLevelReadCommitted
		}
	case 66:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:598
		{
			yyVAL.str = IsolationLevelReadUncommitted
		}
	case 67:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:602
		{
			yyVAL.str = IsolationLevelSerializable
		}
	case 68:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:608
		{
			yyVAL.str = SessionStr
		}
	case 69:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:612
		{
			yyVAL.str = GlobalStr
		}
	case 70:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:618
		{
			yyDollar[1].ddl.TableSpec = yyDollar[2].TableSpec
			yyVAL.statement = yyDollar[1].ddl
		}
	case 71:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:623
		{
			// Create table [name] like [name]
			yyDollar[1].ddl.OptLike = yyDollar[2].optLike
			yyVAL.statement = yyDollar[1].ddl
		}
	case 72:
		yyDollar = yyS[yypt-8 : yypt+1]
//line sql.y:629
		{
			// Change this to an alter statement
			yyVAL.statement = &DDL{Action: AlterStr, Table: yyDollar[7].tableName}
		}
	case 73:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:634
		{
			yyVAL.statement = &DDL{Action: CreateStr, Table: yyDollar[3].tableName.ToViewName()}
		}
	case 74:
		yyDollar = yyS[yypt-6 : yypt+1]
//line sql.y:638
		{
			yyVAL.statement = &DDL{Action: CreateStr, Table: yyDollar[5].tableName.ToViewName()}
		}
	case 75:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sql.y:642
		{
			yyVAL.statement = &DBDDL{Action: CreateStr, DBName: string(yyDollar[4].bytes)}
		}
	case 76:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sql.y:646
		{
			yyVAL.statement = &DBDDL{Action: CreateStr, DBName: string(yyDollar[4].bytes)}
		}
	case 77:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:651
		{
			yyVAL.colIdent = NewColIdent("")
		}
	case 78:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:655
		{
			yyVAL.colIdent = yyDollar[2].colIdent
		}
	case 79:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:661
		{
			yyVAL.colIdent = NewColIdent(string(yyDollar[1].bytes))
		}
	case 80:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:666
		{
			var v []VindexParam
			yyVAL.vindexParams = v
		}
	case 81:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:671
		{
			yyVAL.vindexParams = yyDollar[2].vindexParams
		}
	case 82:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:677
		{
			yyVAL.vindexParams = make([]VindexParam, 0, 4)
			yyVAL.vindexParams = append(yyVAL.vindexParams, yyDollar[1].vindexParam)
		}
	case 83:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:682
		{
			yyVAL.vindexParams = append(yyVAL.vindexParams, yyDollar[3].vindexParam)
		}
	case 84:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:688
		{
			yyVAL.vindexParam = VindexParam{Key: yyDollar[1].colIdent, Val: yyDollar[3].str}
		}
	case 85:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:694
		{
			yyVAL.ddl = &DDL{Action: CreateStr, Table: yyDollar[4].tableName}
			setDDL(yylex, yyVAL.ddl)
		}
	case 86:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:701
		{
			yyVAL.TableSpec = yyDollar[2].TableSpec
			yyVAL.TableSpec.Options = yyDollar[4].str
		}
	case 87:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:708
		{
			yyVAL.optLike = &OptLike{LikeTable: yyDollar[2].tableName}
		}
	case 88:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:712
		{
			yyVAL.optLike = &OptLike{LikeTable: yyDollar[3].tableName}
		}
	case 89:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:718
		{
			yyVAL.TableSpec = &TableSpec{}
			yyVAL.TableSpec.AddColumn(yyDollar[1].columnDefinition)
		}
	case 90:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:723
		{
			yyVAL.TableSpec.AddColumn(yyDollar[3].columnDefinition)
		}
	case 91:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:727
		{
			yyVAL.TableSpec.AddIndex(yyDollar[3].indexDefinition)
		}
	case 92:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:731
		{
			yyVAL.TableSpec.AddConstraint(yyDollar[3].constraintDefinition)
		}
	case 93:
		yyDollar = yyS[yypt-8 : yypt+1]
//line sql.y:737
		{
			yyDollar[2].columnType.NotNull = yyDollar[3].boolVal
			yyDollar[2].columnType.Default = yyDollar[4].optVal
			yyDollar[2].columnType.OnUpdate = yyDollar[5].optVal
			yyDollar[2].columnType.Autoincrement = yyDollar[6].boolVal
			yyDollar[2].columnType.KeyOpt = yyDollar[7].colKeyOpt
			yyDollar[2].columnType.Comment = yyDollar[8].sqlVal
			yyVAL.columnDefinition = &ColumnDefinition{Name: NewColIdent(string(yyDollar[1].bytes)), Type: yyDollar[2].columnType}
		}
	case 94:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:748
		{
			yyVAL.columnType = yyDollar[1].columnType
			yyVAL.columnType.Unsigned = yyDollar[2].boolVal
			yyVAL.columnType.Zerofill = yyDollar[3].boolVal
		}
	case 98:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:759
		{
			yyVAL.columnType = yyDollar[1].columnType
			yyVAL.columnType.Length = yyDollar[2].sqlVal
		}
	case 99:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:764
		{
			yyVAL.columnType = yyDollar[1].columnType
		}
	case 100:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:770
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 101:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:774
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 102:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:778
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 103:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:782
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 104:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:786
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 105:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:790
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 106:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:794
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 107:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:798
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 108:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:802
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 109:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:808
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
			yyVAL.columnType.Length = yyDollar[2].LengthScaleOption.Length
			yyVAL.columnType.Scale = yyDollar[2].LengthScaleOption.Scale
		}
	case 110:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:814
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
			yyVAL.columnType.Length = yyDollar[2].LengthScaleOption.Length
			yyVAL.columnType.Scale = yyDollar[2].LengthScaleOption.Scale
		}
	case 111:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:820
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
			yyVAL.columnType.Length = yyDollar[2].LengthScaleOption.Length
			yyVAL.columnType.Scale = yyDollar[2].LengthScaleOption.Scale
		}
	case 112:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:826
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
			yyVAL.columnType.Length = yyDollar[2].LengthScaleOption.Length
			yyVAL.columnType.Scale = yyDollar[2].LengthScaleOption.Scale
		}
	case 113:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:832
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
			yyVAL.columnType.Length = yyDollar[2].LengthScaleOption.Length
			yyVAL.columnType.Scale = yyDollar[2].LengthScaleOption.Scale
		}
	case 114:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:840
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 115:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:844
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].sqlVal}
		}
	case 116:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:848
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].sqlVal}
		}
	case 117:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:852
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].sqlVal}
		}
	case 118:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:856
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 119:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:862
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].sqlVal, Charset: yyDollar[3].str, Collate: yyDollar[4].str}
		}
	case 120:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:866
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].sqlVal, Charset: yyDollar[3].str, Collate: yyDollar[4].str}
		}
	case 121:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:870
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].sqlVal}
		}
	case 122:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:874
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].sqlVal}
		}
	case 123:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:878
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), Charset: yyDollar[2].str, Collate: yyDollar[3].str}
		}
	case 124:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:882
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), Charset: yyDollar[2].str, Collate: yyDollar[3].str}
		}
	case 125:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:886
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), Charset: yyDollar[2].str, Collate: yyDollar[3].str}
		}
	case 126:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:890
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), Charset: yyDollar[2].str, Collate: yyDollar[3].str}
		}
	case 127:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:894
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 128:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:898
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 129:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:902
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 130:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:906
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 131:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:910
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 132:
		yyDollar = yyS[yypt-6 : yypt+1]
//line sql.y:914
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), EnumValues: yyDollar[3].strs, Charset: yyDollar[5].str, Collate: yyDollar[6].str}
		}
	case 133:
		yyDollar = yyS[yypt-6 : yypt+1]
//line sql.y:919
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), EnumValues: yyDollar[3].strs, Charset: yyDollar[5].str, Collate: yyDollar[6].str}
		}
	case 134:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:925
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 135:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:929
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 136:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:933
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 137:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:937
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 138:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:941
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 139:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:945
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 140:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:949
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 141:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:953
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 142:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:959
		{
			yyVAL.strs = make([]string, 0, 4)
			yyVAL.strs = append(yyVAL.strs, "'"+string(yyDollar[1].bytes)+"'")
		}
	case 143:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:964
		{
			yyVAL.strs = append(yyDollar[1].strs, "'"+string(yyDollar[3].bytes)+"'")
		}
	case 144:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:969
		{
			yyVAL.sqlVal = nil
		}
	case 145:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:973
		{
			yyVAL.sqlVal = NewIntVal(yyDollar[2].bytes)
		}
	case 146:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:978
		{
			yyVAL.LengthScaleOption = LengthScaleOption{}
		}
	case 147:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sql.y:982
		{
			yyVAL.LengthScaleOption = LengthScaleOption{
				Length: NewIntVal(yyDollar[2].bytes),
				Scale:  NewIntVal(yyDollar[4].bytes),
			}
		}
	case 148:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:990
		{
			yyVAL.LengthScaleOption = LengthScaleOption{}
		}
	case 149:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:994
		{
			yyVAL.LengthScaleOption = LengthScaleOption{
				Length: NewIntVal(yyDollar[2].bytes),
			}
		}
	case 150:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sql.y:1000
		{
			yyVAL.LengthScaleOption = LengthScaleOption{
				Length: NewIntVal(yyDollar[2].bytes),
				Scale:  NewIntVal(yyDollar[4].bytes),
			}
		}
	case 151:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:1008
		{
			yyVAL.boolVal = BoolVal(false)
		}
	case 152:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1012
		{
			yyVAL.boolVal = BoolVal(true)
		}
	case 153:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:1017
		{
			yyVAL.boolVal = BoolVal(false)
		}
	case 154:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1021
		{
			yyVAL.boolVal = BoolVal(true)
		}
	case 155:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:1027
		{
			yyVAL.boolVal = BoolVal(false)
		}
	case 156:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1031
		{
			yyVAL.boolVal = BoolVal(false)
		}
	case 157:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1035
		{
			yyVAL.boolVal = BoolVal(true)
		}
	case 158:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:1040
		{
			yyVAL.optVal = nil
		}
	case 159:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1044
		{
			yyVAL.optVal = yyDollar[2].expr
		}
	case 160:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:1049
		{
			yyVAL.optVal = nil
		}
	case 161:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1053
		{
			yyVAL.optVal = yyDollar[3].expr
		}
	case 162:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:1058
		{
			yyVAL.boolVal = BoolVal(false)
		}
	case 163:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1062
		{
			yyVAL.boolVal = BoolVal(true)
		}
	case 164:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:1067
		{
			yyVAL.str = ""
		}
	case 165:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1071
		{
			yyVAL.str = string(yyDollar[3].bytes)
		}
	case 166:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1075
		{
			yyVAL.str = string(yyDollar[3].bytes)
		}
	case 167:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:1080
		{
			yyVAL.str = ""
		}
	case 168:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1084
		{
			yyVAL.str = string(yyDollar[2].bytes)
		}
	case 169:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1088
		{
			yyVAL.str = string(yyDollar[2].bytes)
		}
	case 170:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:1093
		{
			yyVAL.colKeyOpt = colKeyNone
		}
	case 171:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1097
		{
			yyVAL.colKeyOpt = colKeyPrimary
		}
	case 172:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1101
		{
			yyVAL.colKeyOpt = colKey
		}
	case 173:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1105
		{
			yyVAL.colKeyOpt = colKeyUniqueKey
		}
	case 174:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1109
		{
			yyVAL.colKeyOpt = colKeyUnique
		}
	case 175:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:1114
		{
			yyVAL.sqlVal = nil
		}
	case 176:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1118
		{
			yyVAL.sqlVal = NewStrVal(yyDollar[2].bytes)
		}
	case 177:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sql.y:1124
		{
			yyVAL.indexDefinition = &IndexDefinition{Info: yyDollar[1].indexInfo, Columns: yyDollar[3].indexColumns, Options: yyDollar[5].indexOptions}
		}
	case 178:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:1128
		{
			yyVAL.indexDefinition = &IndexDefinition{Info: yyDollar[1].indexInfo, Columns: yyDollar[3].indexColumns}
		}
	case 179:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1134
		{
			yyVAL.indexOptions = []*IndexOption{yyDollar[1].indexOption}
		}
	case 180:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1138
		{
			yyVAL.indexOptions = append(yyVAL.indexOptions, yyDollar[2].indexOption)
		}
	case 181:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1144
		{
			yyVAL.indexOption = &IndexOption{Name: string(yyDollar[1].bytes), Using: string(yyDollar[2].bytes)}
		}
	case 182:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1148
		{
			// should not be string
			yyVAL.indexOption = &IndexOption{Name: string(yyDollar[1].bytes), Value: NewIntVal(yyDollar[3].bytes)}
		}
	case 183:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1153
		{
			yyVAL.indexOption = &IndexOption{Name: string(yyDollar[1].bytes), Value: NewStrVal(yyDollar[2].bytes)}
		}
	case 184:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:1159
		{
			yyVAL.str = ""
		}
	case 185:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1163
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 186:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1169
		{
			yyVAL.indexInfo = &IndexInfo{Type: string(yyDollar[1].bytes) + " " + string(yyDollar[2].bytes), Name: NewColIdent("PRIMARY"), Primary: true, Unique: true}
		}
	case 187:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1173
		{
			yyVAL.indexInfo = &IndexInfo{Type: string(yyDollar[1].bytes) + " " + string(yyDollar[2].str), Name: NewColIdent(yyDollar[3].str), Spatial: true, Unique: false}
		}
	case 188:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1177
		{
			yyVAL.indexInfo = &IndexInfo{Type: string(yyDollar[1].bytes) + " " + string(yyDollar[2].str), Name: NewColIdent(yyDollar[3].str), Unique: true}
		}
	case 189:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1181
		{
			yyVAL.indexInfo = &IndexInfo{Type: string(yyDollar[1].bytes), Name: NewColIdent(yyDollar[2].str), Unique: true}
		}
	case 190:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1185
		{
			yyVAL.indexInfo = &IndexInfo{Type: string(yyDollar[1].str), Name: NewColIdent(yyDollar[2].str), Unique: false}
		}
	case 191:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1191
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 192:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1195
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 193:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:1200
		{
			yyVAL.str = ""
		}
	case 194:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1204
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 195:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1210
		{
			yyVAL.indexColumns = []*IndexColumn{yyDollar[1].indexColumn}
		}
	case 196:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1214
		{
			yyVAL.indexColumns = append(yyVAL.indexColumns, yyDollar[3].indexColumn)
		}
	case 197:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1220
		{
			yyVAL.indexColumn = &IndexColumn{Column: yyDollar[1].colIdent, Length: yyDollar[2].sqlVal}
		}
	case 198:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1226
		{
			yyVAL.constraintDefinition = &ConstraintDefinition{Name: string(yyDollar[2].bytes), Details: yyDollar[3].constraintInfo}
		}
	case 199:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1230
		{
			yyVAL.constraintDefinition = &ConstraintDefinition{Details: yyDollar[1].constraintInfo}
		}
	case 200:
		yyDollar = yyS[yypt-10 : yypt+1]
//line sql.y:1237
		{
			yyVAL.constraintInfo = &ForeignKeyDefinition{Source: yyDollar[4].columns, ReferencedTable: yyDollar[7].tableName, ReferencedColumns: yyDollar[9].columns}
		}
	case 201:
		yyDollar = yyS[yypt-11 : yypt+1]
//line sql.y:1241
		{
			yyVAL.constraintInfo = &ForeignKeyDefinition{Source: yyDollar[4].columns, ReferencedTable: yyDollar[7].tableName, ReferencedColumns: yyDollar[9].columns, OnDelete: yyDollar[11].ReferenceAction}
		}
	case 202:
		yyDollar = yyS[yypt-11 : yypt+1]
//line sql.y:1245
		{
			yyVAL.constraintInfo = &ForeignKeyDefinition{Source: yyDollar[4].columns, ReferencedTable: yyDollar[7].tableName, ReferencedColumns: yyDollar[9].columns, OnUpdate: yyDollar[11].ReferenceAction}
		}
	case 203:
		yyDollar = yyS[yypt-12 : yypt+1]
//line sql.y:1249
		{
			yyVAL.constraintInfo = &ForeignKeyDefinition{Source: yyDollar[4].columns, ReferencedTable: yyDollar[7].tableName, ReferencedColumns: yyDollar[9].columns, OnDelete: yyDollar[11].ReferenceAction, OnUpdate: yyDollar[12].ReferenceAction}
		}
	case 204:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1255
		{
			yyVAL.ReferenceAction = yyDollar[3].ReferenceAction
		}
	case 205:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1261
		{
			yyVAL.ReferenceAction = yyDollar[3].ReferenceAction
		}
	case 206:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1267
		{
			yyVAL.ReferenceAction = Restrict
		}
	case 207:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1271
		{
			yyVAL.ReferenceAction = Cascade
		}
	case 208:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1275
		{
			yyVAL.ReferenceAction = NoAction
		}
	case 209:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1279
		{
			yyVAL.ReferenceAction = SetDefault
		}
	case 210:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1283
		{
			yyVAL.ReferenceAction = SetNull
		}
	case 211:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:1288
		{
			yyVAL.str = ""
		}
	case 212:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1292
		{
			yyVAL.str = " " + string(yyDollar[1].str)
		}
	case 213:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1296
		{
			yyVAL.str = string(yyDollar[1].str) + ", " + string(yyDollar[3].str)
		}
	case 214:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1304
		{
			yyVAL.str = yyDollar[1].str
		}
	case 215:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1308
		{
			yyVAL.str = yyDollar[1].str + " " + yyDollar[2].str
		}
	case 216:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1312
		{
			yyVAL.str = yyDollar[1].str + "=" + yyDollar[3].str
		}
	case 217:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1318
		{
			yyVAL.str = yyDollar[1].colIdent.String()
		}
	case 218:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1322
		{
			yyVAL.str = "'" + string(yyDollar[1].bytes) + "'"
		}
	case 219:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1326
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 220:
		yyDollar = yyS[yypt-6 : yypt+1]
//line sql.y:1332
		{
			yyVAL.statement = &DDL{Action: AlterStr, Table: yyDollar[4].tableName}
		}
	case 221:
		yyDollar = yyS[yypt-7 : yypt+1]
//line sql.y:1336
		{
			yyVAL.statement = &DDL{Action: AlterStr, Table: yyDollar[4].tableName}
		}
	case 222:
		yyDollar = yyS[yypt-7 : yypt+1]
//line sql.y:1340
		{
			yyVAL.statement = &DDL{Action: AlterStr, Table: yyDollar[4].tableName}
		}
	case 223:
		yyDollar = yyS[yypt-7 : yypt+1]
//line sql.y:1344
		{
			// Change this to a rename statement
			yyVAL.statement = &DDL{Action: RenameStr, FromTables: TableNames{yyDollar[4].tableName}, ToTables: TableNames{yyDollar[7].tableName}}
		}
	case 224:
		yyDollar = yyS[yypt-7 : yypt+1]
//line sql.y:1349
		{
			// Rename an index can just be an alter
			yyVAL.statement = &DDL{Action: AlterStr, Table: yyDollar[4].tableName}
		}
	case 225:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:1354
		{
			yyVAL.statement = &DDL{Action: AlterStr, Table: yyDollar[3].tableName.ToViewName()}
		}
	case 226:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sql.y:1358
		{
			yyVAL.statement = &DDL{Action: AlterStr, Table: yyDollar[4].tableName, PartitionSpec: yyDollar[5].partSpec}
		}
	case 227:
		yyDollar = yyS[yypt-7 : yypt+1]
//line sql.y:1362
		{
			yyVAL.statement = &DDL{Action: CreateVindexStr, VindexSpec: &VindexSpec{
				Name:   yyDollar[5].colIdent,
				Type:   yyDollar[6].colIdent,
				Params: yyDollar[7].vindexParams,
			}}
		}
	case 228:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sql.y:1370
		{
			yyVAL.statement = &DDL{Action: DropVindexStr, VindexSpec: &VindexSpec{
				Name: yyDollar[5].colIdent,
			}}
		}
	case 229:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sql.y:1376
		{
			yyVAL.statement = &DDL{Action: AddVschemaTableStr, Table: yyDollar[5].tableName}
		}
	case 230:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sql.y:1380
		{
			yyVAL.statement = &DDL{Action: DropVschemaTableStr, Table: yyDollar[5].tableName}
		}
	case 231:
		yyDollar = yyS[yypt-12 : yypt+1]
//line sql.y:1384
		{
			yyVAL.statement = &DDL{
				Action: AddColVindexStr,
				Table:  yyDollar[4].tableName,
				VindexSpec: &VindexSpec{
					Name:   yyDollar[7].colIdent,
					Type:   yyDollar[11].colIdent,
					Params: yyDollar[12].vindexParams,
				},
				VindexCols: yyDollar[9].columns,
			}
		}
	case 232:
		yyDollar = yyS[yypt-7 : yypt+1]
//line sql.y:1397
		{
			yyVAL.statement = &DDL{
				Action: DropColVindexStr,
				Table:  yyDollar[4].tableName,
				VindexSpec: &VindexSpec{
					Name: yyDollar[7].colIdent,
				},
			}
		}
	case 244:
		yyDollar = yyS[yypt-7 : yypt+1]
//line sql.y:1422
		{
			yyVAL.partSpec = &PartitionSpec{Action: ReorganizeStr, Name: yyDollar[3].colIdent, Definitions: yyDollar[6].partDefs}
		}
	case 245:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1428
		{
			yyVAL.partDefs = []*PartitionDefinition{yyDollar[1].partDef}
		}
	case 246:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1432
		{
			yyVAL.partDefs = append(yyDollar[1].partDefs, yyDollar[3].partDef)
		}
	case 247:
		yyDollar = yyS[yypt-8 : yypt+1]
//line sql.y:1438
		{
			yyVAL.partDef = &PartitionDefinition{Name: yyDollar[2].colIdent, Limit: yyDollar[7].expr}
		}
	case 248:
		yyDollar = yyS[yypt-8 : yypt+1]
//line sql.y:1442
		{
			yyVAL.partDef = &PartitionDefinition{Name: yyDollar[2].colIdent, Maxvalue: true}
		}
	case 249:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1448
		{
			yyVAL.statement = yyDollar[3].ddl
		}
	case 250:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1454
		{
			yyVAL.ddl = &DDL{Action: RenameStr, FromTables: TableNames{yyDollar[1].tableName}, ToTables: TableNames{yyDollar[3].tableName}}
		}
	case 251:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sql.y:1458
		{
			yyVAL.ddl = yyDollar[1].ddl
			yyVAL.ddl.FromTables = append(yyVAL.ddl.FromTables, yyDollar[3].tableName)
			yyVAL.ddl.ToTables = append(yyVAL.ddl.ToTables, yyDollar[5].tableName)
		}
	case 252:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:1466
		{
			var exists bool
			if yyDollar[3].byt != 0 {
				exists = true
			}
			yyVAL.statement = &DDL{Action: DropStr, FromTables: yyDollar[4].tableNames, IfExists: exists}
		}
	case 253:
		yyDollar = yyS[yypt-6 : yypt+1]
//line sql.y:1474
		{
			// Change this to an alter statement
			yyVAL.statement = &DDL{Action: AlterStr, Table: yyDollar[5].tableName}
		}
	case 254:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sql.y:1479
		{
			var exists bool
			if yyDollar[3].byt != 0 {
				exists = true
			}
			yyVAL.statement = &DDL{Action: DropStr, FromTables: TableNames{yyDollar[4].tableName.ToViewName()}, IfExists: exists}
		}
	case 255:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:1487
		{
			yyVAL.statement = &DBDDL{Action: DropStr, DBName: string(yyDollar[4].bytes)}
		}
	case 256:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:1491
		{
			yyVAL.statement = &DBDDL{Action: DropStr, DBName: string(yyDollar[4].bytes)}
		}
	case 257:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1497
		{
			yyVAL.statement = &DDL{Action: TruncateStr, Table: yyDollar[3].tableName}
		}
	case 258:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1501
		{
			yyVAL.statement = &DDL{Action: TruncateStr, Table: yyDollar[2].tableName}
		}
	case 259:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1506
		{
			yyVAL.statement = &DDL{Action: AlterStr, Table: yyDollar[3].tableName}
		}
	case 260:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:1512
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes) + " " + string(yyDollar[3].bytes)}
		}
	case 261:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:1517
		{
			yyVAL.statement = &Show{Type: CharsetStr}
		}
	case 262:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1521
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes)}
		}
	case 263:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:1525
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes) + " " + string(yyDollar[3].bytes)}
		}
	case 264:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:1530
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes) + " " + string(yyDollar[3].bytes)}
		}
	case 265:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:1534
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes) + " " + string(yyDollar[3].bytes)}
		}
	case 266:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:1538
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes) + " " + string(yyDollar[3].bytes), Table: yyDollar[4].tableName}
		}
	case 267:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:1542
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes) + " " + string(yyDollar[3].bytes)}
		}
	case 268:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:1546
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes) + " " + string(yyDollar[3].bytes)}
		}
	case 269:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1550
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes)}
		}
	case 270:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1554
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes)}
		}
	case 271:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1558
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes)}
		}
	case 272:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1562
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes)}
		}
	case 273:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1566
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes)}
		}
	case 274:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1570
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes)}
		}
	case 275:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1574
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes)}
		}
	case 276:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:1578
		{
			yyVAL.statement = &Show{Scope: yyDollar[2].str, Type: string(yyDollar[3].bytes)}
		}
	case 277:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1582
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes)}
		}
	case 278:
		yyDollar = yyS[yypt-7 : yypt+1]
//line sql.y:1586
		{
			showTablesOpt := &ShowTablesOpt{Full: yyDollar[2].str, DbName: yyDollar[6].str, Filter: yyDollar[7].showFilter}
			yyVAL.statement = &Show{Type: string(yyDollar[3].str), ShowTablesOpt: showTablesOpt, OnTable: yyDollar[5].tableName}
		}
	case 279:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sql.y:1591
		{
			// this is ugly, but I couldn't find a better way for now
			if yyDollar[3].str == "processlist" {
				yyVAL.statement = &Show{Type: yyDollar[3].str}
			} else {
				showTablesOpt := &ShowTablesOpt{Full: yyDollar[2].str, DbName: yyDollar[4].str, Filter: yyDollar[5].showFilter}
				yyVAL.statement = &Show{Type: yyDollar[3].str, ShowTablesOpt: showTablesOpt}
			}
		}
	case 280:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:1601
		{
			yyVAL.statement = &Show{Scope: yyDollar[2].str, Type: string(yyDollar[3].bytes)}
		}
	case 281:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1605
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes)}
		}
	case 282:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:1609
		{
			// Cannot dereference $4 directly, or else the parser stackcannot be pooled. See yyParsePooled
			showCollationFilterOpt := yyDollar[4].expr
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes), ShowCollationFilterOpt: &showCollationFilterOpt}
		}
	case 283:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1615
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes)}
		}
	case 284:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1619
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes)}
		}
	case 285:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1623
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes)}
		}
	case 286:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1627
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes)}
		}
	case 287:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1631
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes) + " " + string(yyDollar[3].bytes)}
		}
	case 288:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1635
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes) + " " + string(yyDollar[3].bytes)}
		}
	case 289:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sql.y:1639
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes) + " " + string(yyDollar[3].bytes), OnTable: yyDollar[5].tableName}
		}
	case 290:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1643
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes)}
		}
	case 291:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1653
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes)}
		}
	case 292:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1659
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 293:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1663
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 294:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:1669
		{
			yyVAL.str = ""
		}
	case 295:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1673
		{
			yyVAL.str = "full "
		}
	case 296:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1679
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 297:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1683
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 298:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:1689
		{
			yyVAL.str = ""
		}
	case 299:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1693
		{
			yyVAL.str = yyDollar[2].tableIdent.v
		}
	case 300:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1697
		{
			yyVAL.str = yyDollar[2].tableIdent.v
		}
	case 301:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:1703
		{
			yyVAL.showFilter = nil
		}
	case 302:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1707
		{
			yyVAL.showFilter = &ShowFilter{Like: string(yyDollar[2].bytes)}
		}
	case 303:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1711
		{
			yyVAL.showFilter = &ShowFilter{Filter: yyDollar[2].expr}
		}
	case 304:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:1717
		{
			yyVAL.str = ""
		}
	case 305:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1721
		{
			yyVAL.str = SessionStr
		}
	case 306:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1725
		{
			yyVAL.str = GlobalStr
		}
	case 307:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1731
		{
			yyVAL.statement = &Use{DBName: yyDollar[2].tableIdent}
		}
	case 308:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1735
		{
			yyVAL.statement = &Use{DBName: TableIdent{v: ""}}
		}
	case 309:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1741
		{
			yyVAL.statement = &Begin{}
		}
	case 310:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1745
		{
			yyVAL.statement = &Begin{}
		}
	case 311:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1751
		{
			yyVAL.statement = &Commit{}
		}
	case 312:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1757
		{
			yyVAL.statement = &Rollback{}
		}
	case 313:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1763
		{
			yyVAL.statement = &OtherRead{}
		}
	case 314:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1767
		{
			yyVAL.statement = &OtherRead{}
		}
	case 315:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1771
		{
			yyVAL.statement = &OtherRead{}
		}
	case 316:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1775
		{
			yyVAL.statement = &OtherAdmin{}
		}
	case 317:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1779
		{
			yyVAL.statement = &OtherAdmin{}
		}
	case 318:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1783
		{
			yyVAL.statement = &OtherAdmin{}
		}
	case 319:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1787
		{
			yyVAL.statement = &OtherAdmin{}
		}
	case 320:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1793
		{
			yyVAL.statement = &DDL{Action: FlushStr}
		}
	case 321:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:1797
		{
			setAllowComments(yylex, true)
		}
	case 322:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1801
		{
			yyVAL.bytes2 = yyDollar[2].bytes2
			setAllowComments(yylex, false)
		}
	case 323:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:1807
		{
			yyVAL.bytes2 = nil
		}
	case 324:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1811
		{
			yyVAL.bytes2 = append(yyDollar[1].bytes2, yyDollar[2].bytes)
		}
	case 325:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1817
		{
			yyVAL.str = UnionStr
		}
	case 326:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1821
		{
			yyVAL.str = UnionAllStr
		}
	case 327:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1825
		{
			yyVAL.str = UnionDistinctStr
		}
	case 328:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:1830
		{
			yyVAL.str = ""
		}
	case 329:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1834
		{
			yyVAL.str = SQLNoCacheStr
		}
	case 330:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1838
		{
			yyVAL.str = SQLCacheStr
		}
	case 331:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:1843
		{
			yyVAL.str = ""
		}
	case 332:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1847
		{
			yyVAL.str = DistinctStr
		}
	case 333:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:1852
		{
			yyVAL.str = ""
		}
	case 334:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1856
		{
			yyVAL.str = StraightJoinHint
		}
	case 335:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:1861
		{
			yyVAL.selectExprs = nil
		}
	case 336:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1865
		{
			yyVAL.selectExprs = yyDollar[1].selectExprs
		}
	case 337:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1871
		{
			yyVAL.selectExprs = SelectExprs{yyDollar[1].selectExpr}
		}
	case 338:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1875
		{
			yyVAL.selectExprs = append(yyVAL.selectExprs, yyDollar[3].selectExpr)
		}
	case 339:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1881
		{
			yyVAL.selectExpr = &StarExpr{}
		}
	case 340:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1885
		{
			yyVAL.selectExpr = &AliasedExpr{Expr: yyDollar[1].expr, As: yyDollar[2].colIdent}
		}
	case 341:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1889
		{
			yyVAL.selectExpr = &StarExpr{TableName: TableName{Name: yyDollar[1].tableIdent}}
		}
	case 342:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sql.y:1893
		{
			yyVAL.selectExpr = &StarExpr{TableName: TableName{Qualifier: yyDollar[1].tableIdent, Name: yyDollar[3].tableIdent}}
		}
	case 343:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:1898
		{
			yyVAL.colIdent = ColIdent{}
		}
	case 344:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1902
		{
			yyVAL.colIdent = yyDollar[1].colIdent
		}
	case 345:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1906
		{
			yyVAL.colIdent = yyDollar[2].colIdent
		}
	case 347:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1913
		{
			yyVAL.colIdent = NewColIdent(string(yyDollar[1].bytes))
		}
	case 348:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:1918
		{
			yyVAL.tableExprs = TableExprs{&AliasedTableExpr{Expr: TableName{Name: NewTableIdent("dual")}}}
		}
	case 349:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1922
		{
			yyVAL.tableExprs = yyDollar[2].tableExprs
		}
	case 350:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1928
		{
			yyVAL.tableExprs = TableExprs{yyDollar[1].tableExpr}
		}
	case 351:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1932
		{
			yyVAL.tableExprs = append(yyVAL.tableExprs, yyDollar[3].tableExpr)
		}
	case 354:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1942
		{
			yyVAL.tableExpr = yyDollar[1].aliasedTableName
		}
	case 355:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1946
		{
			yyVAL.tableExpr = &AliasedTableExpr{Expr: yyDollar[1].subquery, As: yyDollar[3].tableIdent}
		}
	case 356:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1950
		{
			// missed alias for subquery
			yylex.Error("Every derived table must have its own alias")
			return 1
		}
	case 357:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1956
		{
			yyVAL.tableExpr = &ParenTableExpr{Exprs: yyDollar[2].tableExprs}
		}
	case 358:
		yyDollar = yyS[yypt-6 : yypt+1]
//line sql.y:1960
		{
			yyVAL.tableExpr = &TableValuedFunction{Name: NewColIdent(string(yyDollar[1].bytes)), Args: yyDollar[3].tableValuedFunctionArguments, As: yyDollar[6].tableIdent}
		}
	case 359:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1966
		{
			yyVAL.aliasedTableName = &AliasedTableExpr{Expr: yyDollar[1].tableName, As: yyDollar[2].tableIdent, Hints: yyDollar[3].indexHints}
		}
	case 360:
		yyDollar = yyS[yypt-7 : yypt+1]
//line sql.y:1970
		{
			yyVAL.aliasedTableName = &AliasedTableExpr{Expr: yyDollar[1].tableName, Partitions: yyDollar[4].partitions, As: yyDollar[6].tableIdent, Hints: yyDollar[7].indexHints}
		}
	case 361:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:1975
		{
			yyVAL.tableValuedFunctionArguments = nil
		}
	case 362:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1979
		{
			yyVAL.tableValuedFunctionArguments = yyDollar[1].tableValuedFunctionArguments
		}
	case 363:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1985
		{
			yyVAL.tableValuedFunctionArguments = TableValuedFunctionArguments{yyDollar[1].tableValuedFunctionArgument}
		}
	case 364:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1989
		{
			yyVAL.tableValuedFunctionArguments = append(yyVAL.tableValuedFunctionArguments, yyDollar[3].tableValuedFunctionArgument)
		}
	case 365:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1995
		{
			yyVAL.tableValuedFunctionArgument = &TableValuedFunctionArgument{Name: yyDollar[1].colIdent, Value: yyDollar[3].tableValuedFunctionArgumentValue}
		}
	case 366:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2001
		{
			yyVAL.tableValuedFunctionArgumentValue = &ExprTableValuedFunctionArgumentValue{Expr: yyDollar[1].expr}
		}
	case 367:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:2005
		{
			yyVAL.tableValuedFunctionArgumentValue = &TableDescriptorTableValuedFunctionArgumentValue{Table: yyDollar[3].tableExpr}
		}
	case 368:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:2009
		{
			yyVAL.tableValuedFunctionArgumentValue = &FieldDescriptorTableValuedFunctionArgumentValue{Field: yyDollar[3].colName}
		}
	case 369:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2015
		{
			yyVAL.columns = Columns{yyDollar[1].colIdent}
		}
	case 370:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2019
		{
			yyVAL.columns = append(yyVAL.columns, yyDollar[3].colIdent)
		}
	case 371:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2025
		{
			yyVAL.partitions = Partitions{yyDollar[1].colIdent}
		}
	case 372:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2029
		{
			yyVAL.partitions = append(yyVAL.partitions, yyDollar[3].colIdent)
		}
	case 373:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sql.y:2042
		{
			yyVAL.tableExpr = &JoinTableExpr{LeftExpr: yyDollar[1].tableExpr, Strategy: yyDollar[2].str, Join: yyDollar[3].str, RightExpr: yyDollar[4].tableExpr, Condition: yyDollar[5].joinCondition}
		}
	case 374:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:2046
		{
			yyVAL.tableExpr = &JoinTableExpr{LeftExpr: yyDollar[1].tableExpr, Join: yyDollar[2].str, RightExpr: yyDollar[3].tableExpr, Condition: yyDollar[4].joinCondition}
		}
	case 375:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:2050
		{
			yyVAL.tableExpr = &JoinTableExpr{LeftExpr: yyDollar[1].tableExpr, Join: yyDollar[2].str, RightExpr: yyDollar[3].tableExpr, Condition: yyDollar[4].joinCondition}
		}
	case 376:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2054
		{
			yyVAL.tableExpr = &JoinTableExpr{LeftExpr: yyDollar[1].tableExpr, Join: yyDollar[2].str, RightExpr: yyDollar[3].tableExpr}
		}
	case 377:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2060
		{
			yyVAL.joinCondition = JoinCondition{On: yyDollar[2].expr}
		}
	case 378:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:2062
		{
			yyVAL.joinCondition = JoinCondition{Using: yyDollar[3].columns}
		}
	case 379:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:2066
		{
			yyVAL.joinCondition = JoinCondition{}
		}
	case 380:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2068
		{
			yyVAL.joinCondition = yyDollar[1].joinCondition
		}
	case 381:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:2072
		{
			yyVAL.joinCondition = JoinCondition{}
		}
	case 382:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2074
		{
			yyVAL.joinCondition = JoinCondition{On: yyDollar[2].expr}
		}
	case 383:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:2077
		{
			yyVAL.empty = struct{}{}
		}
	case 384:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2079
		{
			yyVAL.empty = struct{}{}
		}
	case 385:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:2082
		{
			yyVAL.tableIdent = NewTableIdent("")
		}
	case 386:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2086
		{
			yyVAL.tableIdent = yyDollar[1].tableIdent
		}
	case 387:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2090
		{
			yyVAL.tableIdent = yyDollar[2].tableIdent
		}
	case 388:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:2095
		{
			yyVAL.str = UndefinedJoinStrategy
		}
	case 389:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2097
		{
			yyVAL.str = LookupJoinStrategy
		}
	case 390:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2099
		{
			yyVAL.str = StreamJoinStrategy
		}
	case 392:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2104
		{
			yyVAL.tableIdent = NewTableIdent(string(yyDollar[1].bytes))
		}
	case 393:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2110
		{
			yyVAL.str = JoinStr
		}
	case 394:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2114
		{
			yyVAL.str = JoinStr
		}
	case 395:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2118
		{
			yyVAL.str = JoinStr
		}
	case 396:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2124
		{
			yyVAL.str = StraightJoinStr
		}
	case 397:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2130
		{
			yyVAL.str = LeftJoinStr
		}
	case 398:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2134
		{
			yyVAL.str = LeftJoinStr
		}
	case 399:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2138
		{
			yyVAL.str = RightJoinStr
		}
	case 400:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2142
		{
			yyVAL.str = RightJoinStr
		}
	case 401:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2148
		{
			yyVAL.str = NaturalJoinStr
		}
	case 402:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2152
		{
			if yyDollar[2].str == LeftJoinStr {
				yyVAL.str = NaturalLeftJoinStr
			} else {
				yyVAL.str = NaturalRightJoinStr
			}
		}
	case 403:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2162
		{
			yyVAL.tableName = yyDollar[2].tableName
		}
	case 404:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2166
		{
			yyVAL.tableName = yyDollar[1].tableName
		}
	case 405:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2172
		{
			yyVAL.tableName = TableName{Name: yyDollar[1].tableIdent}
		}
	case 406:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2176
		{
			yyVAL.tableName = TableName{Qualifier: yyDollar[1].tableIdent, Name: yyDollar[3].tableIdent}
		}
	case 407:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2182
		{
			yyVAL.tableName = TableName{Name: yyDollar[1].tableIdent}
		}
	case 408:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:2187
		{
			yyVAL.indexHints = nil
		}
	case 409:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sql.y:2191
		{
			yyVAL.indexHints = &IndexHints{Type: UseStr, Indexes: yyDollar[4].columns}
		}
	case 410:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sql.y:2195
		{
			yyVAL.indexHints = &IndexHints{Type: IgnoreStr, Indexes: yyDollar[4].columns}
		}
	case 411:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sql.y:2199
		{
			yyVAL.indexHints = &IndexHints{Type: ForceStr, Indexes: yyDollar[4].columns}
		}
	case 412:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:2204
		{
			yyVAL.expr = nil
		}
	case 413:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2208
		{
			yyVAL.expr = yyDollar[2].expr
		}
	case 414:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2214
		{
			yyVAL.expr = yyDollar[1].expr
		}
	case 415:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2218
		{
			yyVAL.expr = &AndExpr{Left: yyDollar[1].expr, Right: yyDollar[3].expr}
		}
	case 416:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2222
		{
			yyVAL.expr = &OrExpr{Left: yyDollar[1].expr, Right: yyDollar[3].expr}
		}
	case 417:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2226
		{
			yyVAL.expr = &NotExpr{Expr: yyDollar[2].expr}
		}
	case 418:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2230
		{
			yyVAL.expr = &IsExpr{Operator: yyDollar[3].str, Expr: yyDollar[1].expr}
		}
	case 419:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2234
		{
			yyVAL.expr = yyDollar[1].expr
		}
	case 420:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2238
		{
			yyVAL.expr = &Default{ColName: yyDollar[2].str}
		}
	case 421:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:2244
		{
			yyVAL.str = ""
		}
	case 422:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2248
		{
			yyVAL.str = string(yyDollar[2].bytes)
		}
	case 423:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2254
		{
			yyVAL.boolVal = BoolVal(true)
		}
	case 424:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2258
		{
			yyVAL.boolVal = BoolVal(false)
		}
	case 425:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2264
		{
			yyVAL.expr = &ComparisonExpr{Left: yyDollar[1].expr, Operator: yyDollar[2].str, Right: yyDollar[3].expr}
		}
	case 426:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2268
		{
			yyVAL.expr = &ComparisonExpr{Left: yyDollar[1].expr, Operator: InStr, Right: yyDollar[3].colTuple}
		}
	case 427:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:2272
		{
			yyVAL.expr = &ComparisonExpr{Left: yyDollar[1].expr, Operator: NotInStr, Right: yyDollar[4].colTuple}
		}
	case 428:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:2276
		{
			yyVAL.expr = &ComparisonExpr{Left: yyDollar[1].expr, Operator: LikeStr, Right: yyDollar[3].expr, Escape: yyDollar[4].expr}
		}
	case 429:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sql.y:2280
		{
			yyVAL.expr = &ComparisonExpr{Left: yyDollar[1].expr, Operator: NotLikeStr, Right: yyDollar[4].expr, Escape: yyDollar[5].expr}
		}
	case 430:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2284
		{
			yyVAL.expr = &ComparisonExpr{Left: yyDollar[1].expr, Operator: LikeRegexpStr, Right: yyDollar[3].expr}
		}
	case 431:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2288
		{
			yyVAL.expr = &ComparisonExpr{Left: yyDollar[1].expr, Operator: LikeRegexpCaseInsensitiveStr, Right: yyDollar[3].expr}
		}
	case 432:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2292
		{
			yyVAL.expr = &ComparisonExpr{Left: yyDollar[1].expr, Operator: NotLikeRegexpStr, Right: yyDollar[3].expr}
		}
	case 433:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2296
		{
			yyVAL.expr = &ComparisonExpr{Left: yyDollar[1].expr, Operator: NotLikeRegexpCaseInsensitiveStr, Right: yyDollar[3].expr}
		}
	case 434:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2300
		{
			yyVAL.expr = &ComparisonExpr{Left: yyDollar[1].expr, Operator: RegexpStr, Right: yyDollar[3].expr}
		}
	case 435:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:2304
		{
			yyVAL.expr = &ComparisonExpr{Left: yyDollar[1].expr, Operator: NotRegexpStr, Right: yyDollar[4].expr}
		}
	case 436:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sql.y:2308
		{
			yyVAL.expr = &RangeCond{Left: yyDollar[1].expr, Operator: BetweenStr, From: yyDollar[3].expr, To: yyDollar[5].expr}
		}
	case 437:
		yyDollar = yyS[yypt-6 : yypt+1]
//line sql.y:2312
		{
			yyVAL.expr = &RangeCond{Left: yyDollar[1].expr, Operator: NotBetweenStr, From: yyDollar[4].expr, To: yyDollar[6].expr}
		}
	case 438:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2316
		{
			yyVAL.expr = &ExistsExpr{Subquery: yyDollar[2].subquery}
		}
	case 439:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2322
		{
			yyVAL.str = IsNullStr
		}
	case 440:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2326
		{
			yyVAL.str = IsNotNullStr
		}
	case 441:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2330
		{
			yyVAL.str = IsTrueStr
		}
	case 442:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2334
		{
			yyVAL.str = IsNotTrueStr
		}
	case 443:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2338
		{
			yyVAL.str = IsFalseStr
		}
	case 444:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2342
		{
			yyVAL.str = IsNotFalseStr
		}
	case 445:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2348
		{
			yyVAL.str = EqualStr
		}
	case 446:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2352
		{
			yyVAL.str = LessThanStr
		}
	case 447:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2356
		{
			yyVAL.str = GreaterThanStr
		}
	case 448:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2360
		{
			yyVAL.str = LessEqualStr
		}
	case 449:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2364
		{
			yyVAL.str = GreaterEqualStr
		}
	case 450:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2368
		{
			yyVAL.str = NotEqualStr
		}
	case 451:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2372
		{
			yyVAL.str = NullSafeEqualStr
		}
	case 452:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:2377
		{
			yyVAL.expr = nil
		}
	case 453:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2381
		{
			yyVAL.expr = yyDollar[2].expr
		}
	case 454:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2387
		{
			yyVAL.colTuple = yyDollar[1].valTuple
		}
	case 455:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2391
		{
			yyVAL.colTuple = yyDollar[1].subquery
		}
	case 456:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2395
		{
			yyVAL.colTuple = ListArg(yyDollar[1].bytes)
		}
	case 457:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2401
		{
			yyVAL.subquery = &Subquery{yyDollar[2].selStmt}
		}
	case 458:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2407
		{
			yyVAL.exprs = Exprs{yyDollar[1].expr}
		}
	case 459:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2411
		{
			yyVAL.exprs = append(yyDollar[1].exprs, yyDollar[3].expr)
		}
	case 460:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2417
		{
			yyVAL.expr = yyDollar[1].expr
		}
	case 461:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2421
		{
			yyVAL.expr = yyDollar[1].boolVal
		}
	case 462:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2425
		{
			yyVAL.expr = yyDollar[1].colName
		}
	case 463:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2429
		{
			yyVAL.expr = yyDollar[1].expr
		}
	case 464:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2433
		{
			yyVAL.expr = yyDollar[1].subquery
		}
	case 465:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2437
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].expr, Operator: BitAndStr, Right: yyDollar[3].expr}
		}
	case 466:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2441
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].expr, Operator: BitOrStr, Right: yyDollar[3].expr}
		}
	case 467:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2445
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].expr, Operator: BitXorStr, Right: yyDollar[3].expr}
		}
	case 468:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2449
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].expr, Operator: PlusStr, Right: yyDollar[3].expr}
		}
	case 469:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2453
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].expr, Operator: MinusStr, Right: yyDollar[3].expr}
		}
	case 470:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2457
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].expr, Operator: MultStr, Right: yyDollar[3].expr}
		}
	case 471:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2461
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].expr, Operator: DivStr, Right: yyDollar[3].expr}
		}
	case 472:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2465
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].expr, Operator: IntDivStr, Right: yyDollar[3].expr}
		}
	case 473:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2469
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].expr, Operator: ModStr, Right: yyDollar[3].expr}
		}
	case 474:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2473
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].expr, Operator: ModStr, Right: yyDollar[3].expr}
		}
	case 475:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2477
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].expr, Operator: ShiftLeftStr, Right: yyDollar[3].expr}
		}
	case 476:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2481
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].expr, Operator: ShiftRightStr, Right: yyDollar[3].expr}
		}
	case 477:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2485
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].colName, Operator: JSONExtractOp, Right: yyDollar[3].expr}
		}
	case 478:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2489
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].colName, Operator: JSONUnquoteExtractOp, Right: yyDollar[3].expr}
		}
	case 479:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2493
		{
			yyVAL.expr = &CollateExpr{Expr: yyDollar[1].expr, Charset: yyDollar[3].str}
		}
	case 480:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2497
		{
			yyVAL.expr = &UnaryExpr{Operator: BinaryStr, Expr: yyDollar[2].expr}
		}
	case 481:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2501
		{
			yyVAL.expr = &UnaryExpr{Operator: UBinaryStr, Expr: yyDollar[2].expr}
		}
	case 482:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2505
		{
			yyVAL.expr = &UnaryExpr{Operator: Utf8mb4Str, Expr: yyDollar[2].expr}
		}
	case 483:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2509
		{
			if num, ok := yyDollar[2].expr.(*SQLVal); ok && num.Type == IntVal {
				yyVAL.expr = num
			} else {
				yyVAL.expr = &UnaryExpr{Operator: UPlusStr, Expr: yyDollar[2].expr}
			}
		}
	case 484:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2517
		{
			if num, ok := yyDollar[2].expr.(*SQLVal); ok && num.Type == IntVal {
				// Handle double negative
				if num.Val[0] == '-' {
					num.Val = num.Val[1:]
					yyVAL.expr = num
				} else {
					yyVAL.expr = NewIntVal(append([]byte("-"), num.Val...))
				}
			} else {
				yyVAL.expr = &UnaryExpr{Operator: UMinusStr, Expr: yyDollar[2].expr}
			}
		}
	case 485:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2531
		{
			yyVAL.expr = &UnaryExpr{Operator: TildaStr, Expr: yyDollar[2].expr}
		}
	case 486:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2535
		{
			yyVAL.expr = &UnaryExpr{Operator: BangStr, Expr: yyDollar[2].expr}
		}
	case 487:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2539
		{
			// This rule prevents the usage of INTERVAL
			// as a function. If support is needed for that,
			// we'll need to revisit this. The solution
			// will be non-trivial because of grammar conflicts.
			yyVAL.expr = &IntervalExpr{Expr: yyDollar[2].expr, Unit: yyDollar[3].colIdent.String()}
		}
	case 492:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:2557
		{
			yyVAL.expr = &FuncExpr{Name: yyDollar[1].colIdent, Exprs: yyDollar[3].selectExprs}
		}
	case 493:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sql.y:2561
		{
			yyVAL.expr = &FuncExpr{Name: yyDollar[1].colIdent, Distinct: true, Exprs: yyDollar[4].selectExprs}
		}
	case 494:
		yyDollar = yyS[yypt-6 : yypt+1]
//line sql.y:2565
		{
			yyVAL.expr = &FuncExpr{Qualifier: yyDollar[1].tableIdent, Name: yyDollar[3].colIdent, Exprs: yyDollar[5].selectExprs}
		}
	case 495:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:2575
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("left"), Exprs: yyDollar[3].selectExprs}
		}
	case 496:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:2579
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("right"), Exprs: yyDollar[3].selectExprs}
		}
	case 497:
		yyDollar = yyS[yypt-6 : yypt+1]
//line sql.y:2583
		{
			yyVAL.expr = &ConvertExpr{Expr: yyDollar[3].expr, Type: yyDollar[5].convertType}
		}
	case 498:
		yyDollar = yyS[yypt-6 : yypt+1]
//line sql.y:2587
		{
			yyVAL.expr = &ConvertExpr{Expr: yyDollar[3].expr, Type: yyDollar[5].convertType}
		}
	case 499:
		yyDollar = yyS[yypt-6 : yypt+1]
//line sql.y:2591
		{
			yyVAL.expr = &ConvertUsingExpr{Expr: yyDollar[3].expr, Type: yyDollar[5].str}
		}
	case 500:
		yyDollar = yyS[yypt-8 : yypt+1]
//line sql.y:2595
		{
			yyVAL.expr = &SubstrExpr{Name: yyDollar[3].colName, From: yyDollar[5].expr, To: yyDollar[7].expr}
		}
	case 501:
		yyDollar = yyS[yypt-8 : yypt+1]
//line sql.y:2599
		{
			yyVAL.expr = &SubstrExpr{Name: yyDollar[3].colName, From: yyDollar[5].expr, To: yyDollar[7].expr}
		}
	case 502:
		yyDollar = yyS[yypt-8 : yypt+1]
//line sql.y:2603
		{
			yyVAL.expr = &SubstrExpr{StrVal: NewStrVal(yyDollar[3].bytes), From: yyDollar[5].expr, To: yyDollar[7].expr}
		}
	case 503:
		yyDollar = yyS[yypt-8 : yypt+1]
//line sql.y:2607
		{
			yyVAL.expr = &SubstrExpr{StrVal: NewStrVal(yyDollar[3].bytes), From: yyDollar[5].expr, To: yyDollar[7].expr}
		}
	case 504:
		yyDollar = yyS[yypt-9 : yypt+1]
//line sql.y:2611
		{
			yyVAL.expr = &MatchExpr{Columns: yyDollar[3].selectExprs, Expr: yyDollar[7].expr, Option: yyDollar[8].str}
		}
	case 505:
		yyDollar = yyS[yypt-7 : yypt+1]
//line sql.y:2615
		{
			yyVAL.expr = &GroupConcatExpr{Distinct: yyDollar[3].str, Exprs: yyDollar[4].selectExprs, OrderBy: yyDollar[5].orderBy, Separator: yyDollar[6].str}
		}
	case 506:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sql.y:2619
		{
			yyVAL.expr = &CaseExpr{Expr: yyDollar[2].expr, Whens: yyDollar[3].whens, Else: yyDollar[4].expr}
		}
	case 507:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:2623
		{
			yyVAL.expr = &ValuesFuncExpr{Name: yyDollar[3].colName}
		}
	case 508:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2633
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("current_timestamp")}
		}
	case 509:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2637
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("utc_timestamp")}
		}
	case 510:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2641
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("utc_time")}
		}
	case 511:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2646
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("utc_date")}
		}
	case 512:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2651
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("localtime")}
		}
	case 513:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2656
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("localtimestamp")}
		}
	case 514:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2662
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("current_date")}
		}
	case 515:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2667
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("current_time")}
		}
	case 516:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2672
		{
			yyVAL.expr = &CurTimeFuncExpr{Name: NewColIdent("current_timestamp"), Fsp: yyDollar[2].expr}
		}
	case 517:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2676
		{
			yyVAL.expr = &CurTimeFuncExpr{Name: NewColIdent("utc_timestamp"), Fsp: yyDollar[2].expr}
		}
	case 518:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2680
		{
			yyVAL.expr = &CurTimeFuncExpr{Name: NewColIdent("utc_time"), Fsp: yyDollar[2].expr}
		}
	case 519:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2685
		{
			yyVAL.expr = &CurTimeFuncExpr{Name: NewColIdent("localtime"), Fsp: yyDollar[2].expr}
		}
	case 520:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2690
		{
			yyVAL.expr = &CurTimeFuncExpr{Name: NewColIdent("localtimestamp"), Fsp: yyDollar[2].expr}
		}
	case 521:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2695
		{
			yyVAL.expr = &CurTimeFuncExpr{Name: NewColIdent("current_time"), Fsp: yyDollar[2].expr}
		}
	case 522:
		yyDollar = yyS[yypt-8 : yypt+1]
//line sql.y:2699
		{
			yyVAL.expr = &TimestampFuncExpr{Name: string("timestampadd"), Unit: yyDollar[3].colIdent.String(), Expr1: yyDollar[5].expr, Expr2: yyDollar[7].expr}
		}
	case 523:
		yyDollar = yyS[yypt-8 : yypt+1]
//line sql.y:2703
		{
			yyVAL.expr = &TimestampFuncExpr{Name: string("timestampdiff"), Unit: yyDollar[3].colIdent.String(), Expr1: yyDollar[5].expr, Expr2: yyDollar[7].expr}
		}
	case 526:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2713
		{
			yyVAL.expr = yyDollar[2].expr
		}
	case 527:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:2723
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("if"), Exprs: yyDollar[3].selectExprs}
		}
	case 528:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:2727
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("database"), Exprs: yyDollar[3].selectExprs}
		}
	case 529:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:2731
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("mod"), Exprs: yyDollar[3].selectExprs}
		}
	case 530:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:2735
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("replace"), Exprs: yyDollar[3].selectExprs}
		}
	case 531:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:2739
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("substr"), Exprs: yyDollar[3].selectExprs}
		}
	case 532:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:2743
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("substr"), Exprs: yyDollar[3].selectExprs}
		}
	case 533:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:2749
		{
			yyVAL.str = ""
		}
	case 534:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2753
		{
			yyVAL.str = BooleanModeStr
		}
	case 535:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:2757
		{
			yyVAL.str = NaturalLanguageModeStr
		}
	case 536:
		yyDollar = yyS[yypt-7 : yypt+1]
//line sql.y:2761
		{
			yyVAL.str = NaturalLanguageModeWithQueryExpansionStr
		}
	case 537:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2765
		{
			yyVAL.str = QueryExpansionStr
		}
	case 538:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2771
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 539:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2775
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 540:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2781
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].sqlVal}
		}
	case 541:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2785
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].sqlVal, Charset: yyDollar[3].str, Operator: CharacterSetStr}
		}
	case 542:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2789
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].sqlVal, Charset: string(yyDollar[3].bytes)}
		}
	case 543:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2793
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes)}
		}
	case 544:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2797
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].sqlVal}
		}
	case 545:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2801
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes)}
			yyVAL.convertType.Length = yyDollar[2].LengthScaleOption.Length
			yyVAL.convertType.Scale = yyDollar[2].LengthScaleOption.Scale
		}
	case 546:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2807
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes)}
		}
	case 547:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2811
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].sqlVal}
		}
	case 548:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2815
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes)}
		}
	case 549:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2819
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes)}
		}
	case 550:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2823
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].sqlVal}
		}
	case 551:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2827
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes)}
		}
	case 552:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2831
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes)}
		}
	case 553:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:2836
		{
			yyVAL.expr = nil
		}
	case 554:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2840
		{
			yyVAL.expr = yyDollar[1].expr
		}
	case 555:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:2845
		{
			yyVAL.str = string("")
		}
	case 556:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2849
		{
			yyVAL.str = " separator '" + string(yyDollar[2].bytes) + "'"
		}
	case 557:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2855
		{
			yyVAL.whens = []*When{yyDollar[1].when}
		}
	case 558:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2859
		{
			yyVAL.whens = append(yyDollar[1].whens, yyDollar[2].when)
		}
	case 559:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:2865
		{
			yyVAL.when = &When{Cond: yyDollar[2].expr, Val: yyDollar[4].expr}
		}
	case 560:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:2870
		{
			yyVAL.expr = nil
		}
	case 561:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2874
		{
			yyVAL.expr = yyDollar[2].expr
		}
	case 562:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2880
		{
			yyVAL.colName = &ColName{Name: yyDollar[1].colIdent}
		}
	case 563:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2884
		{
			yyVAL.colName = &ColName{Qualifier: TableName{Name: yyDollar[1].tableIdent}, Name: yyDollar[3].colIdent}
		}
	case 564:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sql.y:2888
		{
			yyVAL.colName = &ColName{Qualifier: TableName{Qualifier: yyDollar[1].tableIdent, Name: yyDollar[3].tableIdent}, Name: yyDollar[5].colIdent}
		}
	case 565:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2894
		{
			yyVAL.expr = NewStrVal(yyDollar[1].bytes)
		}
	case 566:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2898
		{
			yyVAL.expr = NewHexVal(yyDollar[1].bytes)
		}
	case 567:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2902
		{
			yyVAL.expr = NewBitVal(yyDollar[1].bytes)
		}
	case 568:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2906
		{
			yyVAL.expr = NewIntVal(yyDollar[1].bytes)
		}
	case 569:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2910
		{
			yyVAL.expr = NewFloatVal(yyDollar[1].bytes)
		}
	case 570:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2914
		{
			yyVAL.expr = NewHexNum(yyDollar[1].bytes)
		}
	case 571:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2918
		{
			yyVAL.expr = NewValArg(yyDollar[1].bytes)
		}
	case 572:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2922
		{
			yyVAL.expr = &NullVal{}
		}
	case 573:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2928
		{
			// TODO(sougou): Deprecate this construct.
			if yyDollar[1].colIdent.Lowered() != "value" {
				yylex.Error("expecting value after next")
				return 1
			}
			yyVAL.expr = NewIntVal([]byte("1"))
		}
	case 574:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2937
		{
			yyVAL.expr = NewIntVal(yyDollar[1].bytes)
		}
	case 575:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2941
		{
			yyVAL.expr = NewValArg(yyDollar[1].bytes)
		}
	case 576:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:2946
		{
			yyVAL.exprs = nil
		}
	case 577:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2950
		{
			yyVAL.exprs = yyDollar[3].exprs
		}
	case 578:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:2955
		{
			yyVAL.expr = nil
		}
	case 579:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2959
		{
			yyVAL.expr = yyDollar[2].expr
		}
	case 580:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:2964
		{
			yyVAL.orderBy = nil
		}
	case 581:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2968
		{
			yyVAL.orderBy = yyDollar[3].orderBy
		}
	case 582:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2974
		{
			yyVAL.orderBy = OrderBy{yyDollar[1].order}
		}
	case 583:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2978
		{
			yyVAL.orderBy = append(yyDollar[1].orderBy, yyDollar[3].order)
		}
	case 584:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2984
		{
			yyVAL.order = &Order{Expr: yyDollar[1].expr, Direction: yyDollar[2].str}
		}
	case 585:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:2989
		{
			yyVAL.str = AscScr
		}
	case 586:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2993
		{
			yyVAL.str = AscScr
		}
	case 587:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2997
		{
			yyVAL.str = DescScr
		}
	case 588:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:3002
		{
			yyVAL.limit = nil
		}
	case 589:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:3006
		{
			yyVAL.limit = &Limit{Rowcount: yyDollar[2].expr}
		}
	case 590:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:3010
		{
			yyVAL.limit = &Limit{Offset: yyDollar[2].expr, Rowcount: yyDollar[4].expr}
		}
	case 591:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:3014
		{
			yyVAL.limit = &Limit{Offset: yyDollar[4].expr, Rowcount: yyDollar[2].expr}
		}
	case 592:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:3019
		{
			yyVAL.str = ""
		}
	case 593:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:3023
		{
			yyVAL.str = ForUpdateStr
		}
	case 594:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:3027
		{
			yyVAL.str = ShareModeStr
		}
	case 595:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:3032
		{
			yyVAL.triggers = nil
		}
	case 596:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:3036
		{
			yyVAL.triggers = yyDollar[2].triggers
		}
	case 597:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3042
		{
			yyVAL.triggers = []Trigger{yyDollar[1].trigger}
		}
	case 598:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:3046
		{
			yyVAL.triggers = append(yyDollar[1].triggers, yyDollar[3].trigger)
		}
	case 599:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:3052
		{
			yyVAL.trigger = &WatermarkTrigger{}
		}
	case 600:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:3056
		{
			yyVAL.trigger = &DelayTrigger{Delay: yyDollar[3].expr}
		}
	case 601:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:3060
		{
			yyVAL.trigger = &CountingTrigger{Count: yyDollar[2].expr}
		}
	case 602:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:3073
		{
			yyVAL.ins = &Insert{Rows: yyDollar[2].values}
		}
	case 603:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3077
		{
			yyVAL.ins = &Insert{Rows: yyDollar[1].selStmt}
		}
	case 604:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:3081
		{
			// Drop the redundant parenthesis.
			yyVAL.ins = &Insert{Rows: yyDollar[2].selStmt}
		}
	case 605:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sql.y:3086
		{
			yyVAL.ins = &Insert{Columns: yyDollar[2].columns, Rows: yyDollar[5].values}
		}
	case 606:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:3090
		{
			yyVAL.ins = &Insert{Columns: yyDollar[2].columns, Rows: yyDollar[4].selStmt}
		}
	case 607:
		yyDollar = yyS[yypt-6 : yypt+1]
//line sql.y:3094
		{
			// Drop the redundant parenthesis.
			yyVAL.ins = &Insert{Columns: yyDollar[2].columns, Rows: yyDollar[5].selStmt}
		}
	case 608:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3101
		{
			yyVAL.columns = Columns{yyDollar[1].colIdent}
		}
	case 609:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:3105
		{
			yyVAL.columns = Columns{yyDollar[3].colIdent}
		}
	case 610:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:3109
		{
			yyVAL.columns = append(yyVAL.columns, yyDollar[3].colIdent)
		}
	case 611:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sql.y:3113
		{
			yyVAL.columns = append(yyVAL.columns, yyDollar[5].colIdent)
		}
	case 612:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:3118
		{
			yyVAL.updateExprs = nil
		}
	case 613:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sql.y:3122
		{
			yyVAL.updateExprs = yyDollar[5].updateExprs
		}
	case 614:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3128
		{
			yyVAL.values = Values{yyDollar[1].valTuple}
		}
	case 615:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:3132
		{
			yyVAL.values = append(yyDollar[1].values, yyDollar[3].valTuple)
		}
	case 616:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3138
		{
			yyVAL.valTuple = yyDollar[1].valTuple
		}
	case 617:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:3142
		{
			yyVAL.valTuple = ValTuple{}
		}
	case 618:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:3148
		{
			yyVAL.valTuple = ValTuple(yyDollar[2].exprs)
		}
	case 619:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3154
		{
			if len(yyDollar[1].valTuple) == 1 {
				yyVAL.expr = &ParenExpr{yyDollar[1].valTuple[0]}
			} else {
				yyVAL.expr = yyDollar[1].valTuple
			}
		}
	case 620:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3164
		{
			yyVAL.updateExprs = UpdateExprs{yyDollar[1].updateExpr}
		}
	case 621:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:3168
		{
			yyVAL.updateExprs = append(yyDollar[1].updateExprs, yyDollar[3].updateExpr)
		}
	case 622:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:3174
		{
			yyVAL.updateExpr = &UpdateExpr{Name: yyDollar[1].colName, Expr: yyDollar[3].expr}
		}
	case 623:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3180
		{
			yyVAL.setExprs = SetExprs{yyDollar[1].setExpr}
		}
	case 624:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:3184
		{
			yyVAL.setExprs = append(yyDollar[1].setExprs, yyDollar[3].setExpr)
		}
	case 625:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:3190
		{
			yyVAL.setExpr = &SetExpr{Name: yyDollar[1].colIdent, Expr: NewStrVal([]byte("on"))}
		}
	case 626:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:3194
		{
			yyVAL.setExpr = &SetExpr{Name: yyDollar[1].colIdent, Expr: NewStrVal([]byte("off"))}
		}
	case 627:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:3198
		{
			yyVAL.setExpr = &SetExpr{Name: yyDollar[1].colIdent, Expr: yyDollar[3].expr}
		}
	case 628:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:3202
		{
			yyVAL.setExpr = &SetExpr{Name: NewColIdent(string(yyDollar[1].bytes)), Expr: yyDollar[2].expr}
		}
	case 630:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:3209
		{
			yyVAL.bytes = []byte("charset")
		}
	case 632:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3216
		{
			yyVAL.expr = NewStrVal([]byte(yyDollar[1].colIdent.String()))
		}
	case 633:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3220
		{
			yyVAL.expr = NewStrVal(yyDollar[1].bytes)
		}
	case 634:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3224
		{
			yyVAL.expr = &Default{}
		}
	case 637:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:3233
		{
			yyVAL.byt = 0
		}
	case 638:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:3235
		{
			yyVAL.byt = 1
		}
	case 639:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:3238
		{
			yyVAL.empty = struct{}{}
		}
	case 640:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:3240
		{
			yyVAL.empty = struct{}{}
		}
	case 641:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:3243
		{
			yyVAL.str = ""
		}
	case 642:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3245
		{
			yyVAL.str = IgnoreStr
		}
	case 643:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3249
		{
			yyVAL.empty = struct{}{}
		}
	case 644:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3251
		{
			yyVAL.empty = struct{}{}
		}
	case 645:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3253
		{
			yyVAL.empty = struct{}{}
		}
	case 646:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3255
		{
			yyVAL.empty = struct{}{}
		}
	case 647:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3257
		{
			yyVAL.empty = struct{}{}
		}
	case 648:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3259
		{
			yyVAL.empty = struct{}{}
		}
	case 649:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3261
		{
			yyVAL.empty = struct{}{}
		}
	case 650:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3263
		{
			yyVAL.empty = struct{}{}
		}
	case 651:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3265
		{
			yyVAL.empty = struct{}{}
		}
	case 652:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3267
		{
			yyVAL.empty = struct{}{}
		}
	case 653:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:3270
		{
			yyVAL.empty = struct{}{}
		}
	case 654:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3272
		{
			yyVAL.empty = struct{}{}
		}
	case 655:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3274
		{
			yyVAL.empty = struct{}{}
		}
	case 656:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3278
		{
			yyVAL.empty = struct{}{}
		}
	case 657:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3280
		{
			yyVAL.empty = struct{}{}
		}
	case 658:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:3283
		{
			yyVAL.empty = struct{}{}
		}
	case 659:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3285
		{
			yyVAL.empty = struct{}{}
		}
	case 660:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3287
		{
			yyVAL.empty = struct{}{}
		}
	case 661:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:3290
		{
			yyVAL.colIdent = ColIdent{}
		}
	case 662:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:3292
		{
			yyVAL.colIdent = yyDollar[2].colIdent
		}
	case 663:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3296
		{
			yyVAL.colIdent = NewColIdent(string(yyDollar[1].bytes))
		}
	case 664:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3300
		{
			yyVAL.colIdent = NewColIdent(string(yyDollar[1].bytes))
		}
	case 666:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3307
		{
			yyVAL.colIdent = NewColIdent(string(yyDollar[1].bytes))
		}
	case 667:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3313
		{
			yyVAL.tableIdent = NewTableIdent(string(yyDollar[1].bytes))
		}
	case 668:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3317
		{
			yyVAL.tableIdent = NewTableIdent(string(yyDollar[1].bytes))
		}
	case 670:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3324
		{
			yyVAL.tableIdent = NewTableIdent(string(yyDollar[1].bytes))
		}
	case 885:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3564
		{
			if incNesting(yylex) {
				yylex.Error("max nesting level reached")
				return 1
			}
		}
	case 886:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3573
		{
			decNesting(yylex)
		}
	case 887:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:3578
		{
			skipToEnd(yylex)
		}
	case 888:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:3583
		{
			skipToEnd(yylex)
		}
	case 889:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3587
		{
			skipToEnd(yylex)
		}
	case 890:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3591
		{
			skipToEnd(yylex)
		}
	}
	goto yystack /* stack new state and value */
}
