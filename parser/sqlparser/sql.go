// Code generated by goyacc -v sql.out -o sql.go sql.y. DO NOT EDIT.

//line sql.y:24
package sqlparser

import __yyfmt__ "fmt"

//line sql.y:24

func setParseTree(yylex interface{}, stmt Statement) {
	yylex.(*Tokenizer).ParseTree = stmt
}

func setAllowComments(yylex interface{}, allow bool) {
	yylex.(*Tokenizer).AllowComments = allow
}

func setDDL(yylex interface{}, ddl *DDL) {
	yylex.(*Tokenizer).partialDDL = ddl
}

func incNesting(yylex interface{}) bool {
	yylex.(*Tokenizer).nesting++
	if yylex.(*Tokenizer).nesting == 200 {
		return true
	}
	return false
}

func decNesting(yylex interface{}) {
	yylex.(*Tokenizer).nesting--
}

// skipToEnd forces the lexer to end prematurely. Not all SQL statements
// are supported by the Parser, thus calling skipToEnd will make the lexer
// return EOF early.
func skipToEnd(yylex interface{}) {
	yylex.(*Tokenizer).SkipToEnd = true
}

//line sql.y:59
type yySymType struct {
	yys                              int
	tableValuedFunctionArguments     TableValuedFunctionArguments
	tableValuedFunctionArgument      *TableValuedFunctionArgument
	tableValuedFunctionArgumentValue TableValuedFunctionArgumentValue
	commonTableExpression            *CommonTableExpression
	commonTableExpressions           CommonTableExpressions
	with                             *With
	empty                            struct{}
	statement                        Statement
	selStmt                          SelectStatement
	ddl                              *DDL
	ins                              *Insert
	byt                              byte
	bytes                            []byte
	bytes2                           [][]byte
	str                              string
	strs                             []string
	selectExprs                      SelectExprs
	selectExpr                       SelectExpr
	columns                          Columns
	partitions                       Partitions
	colName                          *ColName
	tableExprs                       TableExprs
	tableExpr                        TableExpr
	joinCondition                    JoinCondition
	tableName                        TableName
	tableNames                       TableNames
	indexHints                       *IndexHints
	expr                             Expr
	exprs                            Exprs
	boolVal                          BoolVal
	sqlVal                           *SQLVal
	colTuple                         ColTuple
	values                           Values
	valTuple                         ValTuple
	subquery                         *Subquery
	whens                            []*When
	when                             *When
	orderBy                          OrderBy
	order                            *Order
	limit                            *Limit
	triggers                         []Trigger
	trigger                          Trigger
	updateExprs                      UpdateExprs
	setExprs                         SetExprs
	updateExpr                       *UpdateExpr
	setExpr                          *SetExpr
	colIdent                         ColIdent
	tableIdent                       TableIdent
	convertType                      ConvertType
	convertTypeObjectFields          []*ConvertTypeObjectField
	convertTypeObjectField           *ConvertTypeObjectField
	aliasedTableName                 *AliasedTableExpr
	TableSpec                        *TableSpec
	columnType                       ColumnType
	colKeyOpt                        ColumnKeyOption
	optVal                           Expr
	LengthScaleOption                LengthScaleOption
	columnDefinition                 *ColumnDefinition
	indexDefinition                  *IndexDefinition
	indexInfo                        *IndexInfo
	indexOption                      *IndexOption
	indexOptions                     []*IndexOption
	indexColumn                      *IndexColumn
	indexColumns                     []*IndexColumn
	constraintDefinition             *ConstraintDefinition
	constraintInfo                   ConstraintInfo
	ReferenceAction                  ReferenceAction
	partDefs                         []*PartitionDefinition
	partDef                          *PartitionDefinition
	partSpec                         *PartitionSpec
	vindexParam                      VindexParam
	vindexParams                     []VindexParam
	showFilter                       *ShowFilter
	optLike                          *OptLike
}

const LEX_ERROR = 57346
const UNION = 57347
const SELECT = 57348
const STREAM = 57349
const INSERT = 57350
const UPDATE = 57351
const DELETE = 57352
const FROM = 57353
const WHERE = 57354
const GROUP = 57355
const HAVING = 57356
const ORDER = 57357
const BY = 57358
const LIMIT = 57359
const OFFSET = 57360
const FOR = 57361
const WATERMARK = 57362
const DELAY = 57363
const COUNTING = 57364
const AFTER = 57365
const ALL = 57366
const DISTINCT = 57367
const AS = 57368
const EXISTS = 57369
const ASC = 57370
const DESC = 57371
const INTO = 57372
const DUPLICATE = 57373
const KEY = 57374
const DEFAULT = 57375
const SET = 57376
const LOCK = 57377
const UNLOCK = 57378
const KEYS = 57379
const VALUES = 57380
const LAST_INSERT_ID = 57381
const NEXT = 57382
const VALUE = 57383
const SHARE = 57384
const MODE = 57385
const SQL_NO_CACHE = 57386
const SQL_CACHE = 57387
const JOIN = 57388
const STRAIGHT_JOIN = 57389
const LOOKUP = 57390
const LEFT = 57391
const RIGHT = 57392
const INNER = 57393
const OUTER = 57394
const CROSS = 57395
const NATURAL = 57396
const USE = 57397
const FORCE = 57398
const ON = 57399
const USING = 57400
const ID = 57401
const HEX = 57402
const STRING = 57403
const INTEGRAL = 57404
const FLOAT = 57405
const HEXNUM = 57406
const VALUE_ARG = 57407
const LIST_ARG = 57408
const COMMENT = 57409
const COMMENT_KEYWORD = 57410
const BIT_LITERAL = 57411
const NULL = 57412
const TRUE = 57413
const FALSE = 57414
const OFF = 57415
const OR = 57416
const AND = 57417
const NOT = 57418
const BETWEEN = 57419
const CASE = 57420
const WHEN = 57421
const THEN = 57422
const ELSE = 57423
const END = 57424
const OF = 57425
const LE = 57426
const GE = 57427
const NE = 57428
const NULL_SAFE_EQUAL = 57429
const IS = 57430
const LIKE = 57431
const REGEXP = 57432
const IN = 57433
const RIGHTARROW = 57434
const SHIFT_LEFT = 57435
const SHIFT_RIGHT = 57436
const DIV = 57437
const MOD = 57438
const NOT_LIKE_REGEXP = 57439
const LIKE_REGEXP_CASE_INSENSITIVE = 57440
const NOT_LIKE_REGEXP_CASE_INSENSITIVE = 57441
const UNARY = 57442
const COLLATE = 57443
const BINARY = 57444
const UNDERSCORE_BINARY = 57445
const UNDERSCORE_UTF8MB4 = 57446
const INTERVAL = 57447
const JSON_EXTRACT_OP = 57448
const JSON_UNQUOTE_EXTRACT_OP = 57449
const CREATE = 57450
const ALTER = 57451
const DROP = 57452
const RENAME = 57453
const ANALYZE = 57454
const ADD = 57455
const FLUSH = 57456
const SCHEMA = 57457
const TABLE = 57458
const DESCRIPTOR = 57459
const INDEX = 57460
const VIEW = 57461
const TO = 57462
const IGNORE = 57463
const IF = 57464
const UNIQUE = 57465
const PRIMARY = 57466
const COLUMN = 57467
const SPATIAL = 57468
const FULLTEXT = 57469
const KEY_BLOCK_SIZE = 57470
const ACTION = 57471
const CASCADE = 57472
const CONSTRAINT = 57473
const FOREIGN = 57474
const NO = 57475
const REFERENCES = 57476
const RESTRICT = 57477
const SHOW = 57478
const DESCRIBE = 57479
const EXPLAIN = 57480
const DATE = 57481
const ESCAPE = 57482
const REPAIR = 57483
const OPTIMIZE = 57484
const TRUNCATE = 57485
const MAXVALUE = 57486
const PARTITION = 57487
const REORGANIZE = 57488
const LESS = 57489
const THAN = 57490
const PROCEDURE = 57491
const TRIGGER = 57492
const VINDEX = 57493
const VINDEXES = 57494
const STATUS = 57495
const VARIABLES = 57496
const WARNINGS = 57497
const BEGIN = 57498
const START = 57499
const TRANSACTION = 57500
const COMMIT = 57501
const ROLLBACK = 57502
const BIT = 57503
const TINYINT = 57504
const SMALLINT = 57505
const MEDIUMINT = 57506
const INT = 57507
const INTEGER = 57508
const BIGINT = 57509
const INTNUM = 57510
const REAL = 57511
const DOUBLE = 57512
const FLOAT_TYPE = 57513
const DECIMAL = 57514
const NUMERIC = 57515
const TIME = 57516
const TIMESTAMP = 57517
const DATETIME = 57518
const YEAR = 57519
const CHAR = 57520
const VARCHAR = 57521
const BOOL = 57522
const CHARACTER = 57523
const VARBINARY = 57524
const NCHAR = 57525
const TEXT = 57526
const TINYTEXT = 57527
const MEDIUMTEXT = 57528
const LONGTEXT = 57529
const BLOB = 57530
const TINYBLOB = 57531
const MEDIUMBLOB = 57532
const LONGBLOB = 57533
const JSON = 57534
const ENUM = 57535
const GEOMETRY = 57536
const POINT = 57537
const LINESTRING = 57538
const POLYGON = 57539
const GEOMETRYCOLLECTION = 57540
const MULTIPOINT = 57541
const MULTILINESTRING = 57542
const MULTIPOLYGON = 57543
const NULLX = 57544
const AUTO_INCREMENT = 57545
const APPROXNUM = 57546
const SIGNED = 57547
const UNSIGNED = 57548
const ZEROFILL = 57549
const COLLATION = 57550
const DATABASES = 57551
const SCHEMAS = 57552
const TABLES = 57553
const VITESS_KEYSPACES = 57554
const VITESS_SHARDS = 57555
const VITESS_TABLETS = 57556
const VSCHEMA = 57557
const VSCHEMA_TABLES = 57558
const VITESS_TARGET = 57559
const FULL = 57560
const PROCESSLIST = 57561
const COLUMNS = 57562
const FIELDS = 57563
const ENGINES = 57564
const PLUGINS = 57565
const NAMES = 57566
const CHARSET = 57567
const GLOBAL = 57568
const SESSION = 57569
const ISOLATION = 57570
const LEVEL = 57571
const READ = 57572
const WRITE = 57573
const ONLY = 57574
const REPEATABLE = 57575
const COMMITTED = 57576
const UNCOMMITTED = 57577
const SERIALIZABLE = 57578
const CURRENT_TIMESTAMP = 57579
const DATABASE = 57580
const CURRENT_DATE = 57581
const CURRENT_TIME = 57582
const LOCALTIME = 57583
const LOCALTIMESTAMP = 57584
const UTC_DATE = 57585
const UTC_TIME = 57586
const UTC_TIMESTAMP = 57587
const REPLACE = 57588
const CONVERT = 57589
const CAST = 57590
const SUBSTR = 57591
const SUBSTRING = 57592
const GROUP_CONCAT = 57593
const SEPARATOR = 57594
const TIMESTAMPADD = 57595
const TIMESTAMPDIFF = 57596
const MATCH = 57597
const AGAINST = 57598
const BOOLEAN = 57599
const LANGUAGE = 57600
const WITH = 57601
const QUERY = 57602
const EXPANSION = 57603
const UNUSED = 57604

var yyToknames = [...]string{
	"$end",
	"error",
	"$unk",
	"LEX_ERROR",
	"UNION",
	"SELECT",
	"STREAM",
	"INSERT",
	"UPDATE",
	"DELETE",
	"FROM",
	"WHERE",
	"GROUP",
	"HAVING",
	"ORDER",
	"BY",
	"LIMIT",
	"OFFSET",
	"FOR",
	"WATERMARK",
	"DELAY",
	"COUNTING",
	"AFTER",
	"ALL",
	"DISTINCT",
	"AS",
	"EXISTS",
	"ASC",
	"DESC",
	"INTO",
	"DUPLICATE",
	"KEY",
	"DEFAULT",
	"SET",
	"LOCK",
	"UNLOCK",
	"KEYS",
	"VALUES",
	"LAST_INSERT_ID",
	"NEXT",
	"VALUE",
	"SHARE",
	"MODE",
	"SQL_NO_CACHE",
	"SQL_CACHE",
	"JOIN",
	"STRAIGHT_JOIN",
	"LOOKUP",
	"LEFT",
	"RIGHT",
	"INNER",
	"OUTER",
	"CROSS",
	"NATURAL",
	"USE",
	"FORCE",
	"ON",
	"USING",
	"'('",
	"','",
	"')'",
	"ID",
	"HEX",
	"STRING",
	"INTEGRAL",
	"FLOAT",
	"HEXNUM",
	"VALUE_ARG",
	"LIST_ARG",
	"COMMENT",
	"COMMENT_KEYWORD",
	"BIT_LITERAL",
	"NULL",
	"TRUE",
	"FALSE",
	"OFF",
	"OR",
	"AND",
	"NOT",
	"'!'",
	"BETWEEN",
	"CASE",
	"WHEN",
	"THEN",
	"ELSE",
	"END",
	"OF",
	"'='",
	"'<'",
	"'>'",
	"LE",
	"GE",
	"NE",
	"NULL_SAFE_EQUAL",
	"IS",
	"LIKE",
	"REGEXP",
	"IN",
	"RIGHTARROW",
	"'|'",
	"'&'",
	"SHIFT_LEFT",
	"SHIFT_RIGHT",
	"'+'",
	"'-'",
	"'*'",
	"'/'",
	"DIV",
	"'%'",
	"MOD",
	"'^'",
	"'~'",
	"NOT_LIKE_REGEXP",
	"LIKE_REGEXP_CASE_INSENSITIVE",
	"NOT_LIKE_REGEXP_CASE_INSENSITIVE",
	"UNARY",
	"COLLATE",
	"BINARY",
	"UNDERSCORE_BINARY",
	"UNDERSCORE_UTF8MB4",
	"INTERVAL",
	"'.'",
	"JSON_EXTRACT_OP",
	"JSON_UNQUOTE_EXTRACT_OP",
	"CREATE",
	"ALTER",
	"DROP",
	"RENAME",
	"ANALYZE",
	"ADD",
	"FLUSH",
	"SCHEMA",
	"TABLE",
	"DESCRIPTOR",
	"INDEX",
	"VIEW",
	"TO",
	"IGNORE",
	"IF",
	"UNIQUE",
	"PRIMARY",
	"COLUMN",
	"SPATIAL",
	"FULLTEXT",
	"KEY_BLOCK_SIZE",
	"ACTION",
	"CASCADE",
	"CONSTRAINT",
	"FOREIGN",
	"NO",
	"REFERENCES",
	"RESTRICT",
	"SHOW",
	"DESCRIBE",
	"EXPLAIN",
	"DATE",
	"ESCAPE",
	"REPAIR",
	"OPTIMIZE",
	"TRUNCATE",
	"MAXVALUE",
	"PARTITION",
	"REORGANIZE",
	"LESS",
	"THAN",
	"PROCEDURE",
	"TRIGGER",
	"VINDEX",
	"VINDEXES",
	"STATUS",
	"VARIABLES",
	"WARNINGS",
	"BEGIN",
	"START",
	"TRANSACTION",
	"COMMIT",
	"ROLLBACK",
	"BIT",
	"TINYINT",
	"SMALLINT",
	"MEDIUMINT",
	"INT",
	"INTEGER",
	"BIGINT",
	"INTNUM",
	"REAL",
	"DOUBLE",
	"FLOAT_TYPE",
	"DECIMAL",
	"NUMERIC",
	"TIME",
	"TIMESTAMP",
	"DATETIME",
	"YEAR",
	"CHAR",
	"VARCHAR",
	"BOOL",
	"CHARACTER",
	"VARBINARY",
	"NCHAR",
	"TEXT",
	"TINYTEXT",
	"MEDIUMTEXT",
	"LONGTEXT",
	"BLOB",
	"TINYBLOB",
	"MEDIUMBLOB",
	"LONGBLOB",
	"JSON",
	"ENUM",
	"GEOMETRY",
	"POINT",
	"LINESTRING",
	"POLYGON",
	"GEOMETRYCOLLECTION",
	"MULTIPOINT",
	"MULTILINESTRING",
	"MULTIPOLYGON",
	"NULLX",
	"AUTO_INCREMENT",
	"APPROXNUM",
	"SIGNED",
	"UNSIGNED",
	"ZEROFILL",
	"COLLATION",
	"DATABASES",
	"SCHEMAS",
	"TABLES",
	"VITESS_KEYSPACES",
	"VITESS_SHARDS",
	"VITESS_TABLETS",
	"VSCHEMA",
	"VSCHEMA_TABLES",
	"VITESS_TARGET",
	"FULL",
	"PROCESSLIST",
	"COLUMNS",
	"FIELDS",
	"ENGINES",
	"PLUGINS",
	"NAMES",
	"CHARSET",
	"GLOBAL",
	"SESSION",
	"ISOLATION",
	"LEVEL",
	"READ",
	"WRITE",
	"ONLY",
	"REPEATABLE",
	"COMMITTED",
	"UNCOMMITTED",
	"SERIALIZABLE",
	"CURRENT_TIMESTAMP",
	"DATABASE",
	"CURRENT_DATE",
	"CURRENT_TIME",
	"LOCALTIME",
	"LOCALTIMESTAMP",
	"UTC_DATE",
	"UTC_TIME",
	"UTC_TIMESTAMP",
	"REPLACE",
	"CONVERT",
	"CAST",
	"SUBSTR",
	"SUBSTRING",
	"GROUP_CONCAT",
	"SEPARATOR",
	"TIMESTAMPADD",
	"TIMESTAMPDIFF",
	"MATCH",
	"AGAINST",
	"BOOLEAN",
	"LANGUAGE",
	"WITH",
	"QUERY",
	"EXPANSION",
	"UNUSED",
	"';'",
	"'['",
	"']'",
	"'{'",
	"'}'",
	"':'",
}

var yyStatenames = [...]string{}

const yyEofCode = 1
const yyErrCode = 2
const yyInitialStackSize = 16

//line yacctab:1
var yyExca = [...]int{
	-1, 1,
	1, -1,
	-2, 0,
	-1, 38,
	170, 303,
	171, 303,
	-2, 293,
	-1, 282,
	122, 666,
	-2, 662,
	-1, 283,
	122, 667,
	-2, 663,
	-1, 351,
	88, 847,
	-2, 68,
	-1, 352,
	88, 802,
	-2, 69,
	-1, 357,
	88, 778,
	-2, 628,
	-1, 359,
	88, 823,
	-2, 630,
	-1, 634,
	46, 387,
	51, 387,
	53, 387,
	-2, 349,
	-1, 638,
	1, 355,
	7, 355,
	12, 355,
	13, 355,
	14, 355,
	15, 355,
	17, 355,
	19, 355,
	34, 355,
	35, 355,
	46, 355,
	47, 355,
	48, 355,
	49, 355,
	50, 355,
	51, 355,
	53, 355,
	54, 355,
	57, 355,
	58, 355,
	60, 355,
	61, 355,
	167, 355,
	280, 355,
	-2, 382,
	-1, 642,
	58, 49,
	60, 49,
	-2, 53,
	-1, 787,
	122, 669,
	-2, 665,
	-1, 1030,
	5, 35,
	-2, 456,
	-1, 1066,
	46, 387,
	51, 387,
	53, 387,
	-2, 350,
	-1, 1301,
	5, 35,
	-2, 603,
	-1, 1443,
	5, 35,
	-2, 606,
}

const yyPrivate = 57344

const yyLast = 14482

var yyAct = [...]int{
	283, 1493, 1483, 1455, 1269, 1429, 1159, 1063, 1342, 594,
	1374, 1329, 1086, 1205, 908, 300, 1243, 62, 883, 258,
	1206, 1084, 1222, 634, 66, 878, 1202, 1021, 287, 1064,
	904, 987, 1113, 208, 1212, 249, 917, 66, 832, 313,
	66, 58, 907, 937, 635, 816, 1015, 1092, 751, 1139,
	488, 738, 850, 1130, 921, 655, 870, 789, 523, 289,
	880, 517, 820, 951, 947, 350, 345, 931, 458, 863,
	829, 285, 532, 270, 540, 641, 342, 347, 644, 356,
	608, 250, 251, 252, 253, 654, 1184, 256, 1183, 1181,
	1180, 57, 1486, 1461, 25, 570, 1481, 609, 570, 593,
	3, 1441, 1477, 570, 1270, 548, 1460, 555, 1194, 1293,
	463, 1440, 220, 1237, 571, 572, 573, 574, 575, 576,
	577, 25, 549, 554, 547, 570, 557, 556, 566, 567,
	559, 560, 561, 562, 563, 564, 565, 558, 550, 552,
	551, 553, 61, 568, 570, 558, 568, 55, 656, 1058,
	657, 568, 257, 1059, 1402, 898, 557, 556, 566, 567,
	559, 560, 561, 562, 563, 564, 565, 558, 25, 1238,
	1239, 255, 831, 568, 55, 557, 556, 566, 567, 559,
	560, 561, 562, 563, 564, 565, 558, 1101, 511, 210,
	1100, 212, 568, 1102, 66, 208, 899, 900, 507, 66,
	1358, 66, 254, 1121, 930, 1332, 508, 505, 506, 516,
	188, 66, 938, 248, 66, 218, 214, 570, 215, 216,
	66, 55, 476, 66, 1479, 208, 1162, 208, 208, 274,
	208, 208, 22, 208, 1161, 208, 727, 190, 191, 192,
	193, 194, 464, 1435, 208, 353, 725, 510, 557, 556,
	566, 567, 559, 560, 561, 562, 563, 564, 565, 558,
	209, 500, 501, 66, 1473, 568, 1430, 1158, 864, 344,
	1497, 726, 1422, 922, 460, 1501, 462, 208, 1296, 477,
	1375, 1383, 1087, 1089, 465, 211, 469, 570, 490, 475,
	513, 514, 212, 1377, 486, 482, 1163, 325, 484, 331,
	332, 329, 330, 328, 327, 326, 528, 569, 731, 718,
	569, 924, 1232, 333, 334, 569, 1231, 924, 557, 556,
	566, 567, 559, 560, 561, 562, 563, 564, 565, 558,
	1295, 1439, 1403, 1230, 461, 568, 728, 569, 217, 570,
	66, 66, 66, 468, 580, 1155, 222, 1114, 213, 208,
	1409, 1157, 1039, 314, 52, 208, 569, 1018, 905, 492,
	981, 525, 494, 980, 23, 1088, 529, 1376, 582, 583,
	557, 556, 566, 567, 559, 560, 561, 562, 563, 564,
	565, 558, 1304, 1495, 1036, 1169, 1496, 568, 1494, 1384,
	1382, 23, 491, 493, 570, 1097, 1049, 1009, 760, 353,
	638, 633, 650, 473, 544, 526, 52, 611, 613, 615,
	617, 619, 621, 622, 923, 632, 483, 642, 643, 265,
	923, 894, 648, 1255, 612, 614, 652, 618, 620, 569,
	623, 561, 562, 563, 564, 565, 558, 855, 23, 479,
	480, 481, 568, 1229, 796, 757, 466, 467, 752, 538,
	537, 459, 339, 340, 1156, 537, 1154, 989, 66, 794,
	795, 793, 539, 208, 582, 583, 197, 539, 66, 66,
	208, 470, 539, 471, 66, 1420, 472, 66, 530, 1256,
	66, 489, 924, 1392, 66, 457, 208, 1216, 658, 1475,
	208, 208, 208, 66, 208, 208, 582, 583, 1196, 569,
	1467, 208, 208, 198, 851, 759, 1046, 851, 720, 763,
	764, 1119, 459, 538, 537, 1449, 55, 779, 781, 782,
	1198, 495, 496, 780, 497, 498, 792, 499, 927, 502,
	1502, 539, 208, 666, 928, 753, 66, 1034, 512, 1033,
	266, 988, 208, 722, 723, 1425, 534, 758, 766, 729,
	1035, 569, 344, 732, 1447, 735, 538, 537, 538, 537,
	1338, 1337, 1421, 740, 538, 537, 1468, 817, 745, 818,
	1503, 822, 1134, 1133, 539, 1122, 539, 1103, 487, 1104,
	487, 487, 539, 487, 487, 923, 487, 790, 487, 1353,
	920, 918, 208, 919, 1335, 786, 785, 487, 916, 922,
	1166, 538, 537, 1131, 768, 1418, 569, 791, 1006, 1007,
	1008, 775, 1380, 1478, 516, 52, 783, 527, 1272, 539,
	52, 1451, 516, 1389, 787, 208, 208, 765, 1380, 1433,
	841, 844, 66, 1380, 516, 579, 852, 1114, 581, 1109,
	66, 825, 66, 1380, 1410, 66, 66, 1380, 1379, 66,
	66, 66, 208, 737, 826, 827, 1327, 1326, 1388, 885,
	1306, 516, 1303, 516, 1252, 208, 592, 736, 596, 597,
	598, 599, 600, 601, 602, 603, 604, 848, 607, 610,
	610, 610, 616, 610, 610, 616, 610, 624, 625, 626,
	627, 628, 629, 721, 639, 515, 836, 719, 860, 638,
	1262, 1261, 353, 716, 638, 889, 485, 865, 638, 891,
	1258, 1259, 887, 1258, 1257, 909, 892, 895, 646, 66,
	208, 890, 208, 939, 940, 941, 208, 208, 66, 66,
	740, 66, 66, 478, 912, 66, 208, 1028, 516, 896,
	867, 516, 933, 934, 935, 936, 834, 516, 665, 664,
	1093, 66, 1203, 66, 66, 1215, 66, 717, 944, 945,
	946, 1093, 925, 59, 724, 647, 646, 649, 1172, 1466,
	837, 838, 1215, 834, 843, 846, 847, 949, 950, 953,
	741, 888, 1299, 645, 742, 743, 744, 1391, 746, 747,
	867, 1260, 866, 1228, 956, 748, 749, 1182, 867, 859,
	1105, 861, 862, 978, 979, 897, 982, 983, 1028, 1215,
	984, 786, 996, 647, 1052, 645, 487, 1028, 867, 1051,
	997, 570, 1028, 487, 822, 1024, 986, 645, 999, 651,
	761, 992, 730, 790, 262, 55, 1462, 267, 1344, 487,
	787, 1458, 1457, 487, 487, 487, 932, 487, 487, 1314,
	1248, 1011, 1108, 791, 487, 487, 559, 560, 561, 562,
	563, 564, 565, 558, 1223, 1224, 1488, 952, 66, 568,
	66, 66, 66, 948, 943, 942, 1456, 774, 1160, 66,
	955, 52, 66, 208, 1484, 1250, 1019, 66, 312, 66,
	55, 1066, 1221, 1203, 1072, 1065, 303, 302, 305, 306,
	307, 308, 1045, 1135, 1091, 304, 309, 755, 208, 734,
	1068, 1226, 1076, 1225, 1071, 1069, 1073, 1070, 1077, 873,
	1074, 206, 1106, 1219, 1218, 1471, 1075, 638, 1459, 638,
	638, 638, 271, 272, 1079, 52, 1168, 1095, 993, 1096,
	1078, 638, 1464, 875, 876, 1004, 1005, 1003, 638, 1094,
	596, 1126, 663, 1098, 1115, 1118, 208, 208, 909, 874,
	872, 875, 876, 1060, 533, 1427, 877, 767, 1125, 1426,
	1127, 1128, 1129, 516, 1111, 1112, 518, 1123, 1124, 531,
	1356, 836, 1116, 1110, 1297, 208, 1340, 958, 733, 879,
	268, 269, 519, 881, 882, 263, 1138, 1132, 639, 533,
	1469, 66, 639, 1027, 570, 1002, 259, 873, 1396, 260,
	208, 59, 1151, 1001, 957, 1395, 959, 1346, 1093, 509,
	1040, 1043, 276, 1490, 1489, 1480, 1037, 750, 535, 1490,
	985, 833, 835, 569, 822, 1165, 822, 566, 567, 559,
	560, 561, 562, 563, 564, 565, 558, 874, 872, 875,
	876, 1406, 568, 1333, 877, 756, 187, 1223, 1224, 1176,
	1174, 189, 208, 208, 56, 1, 1204, 1186, 66, 1482,
	1271, 1341, 964, 487, 1428, 487, 1170, 868, 1373, 1242,
	1188, 1175, 915, 355, 906, 1195, 196, 1065, 456, 487,
	195, 208, 1419, 914, 913, 1381, 1187, 1331, 1189, 1207,
	1199, 996, 926, 1120, 929, 1249, 208, 1117, 208, 208,
	1424, 1214, 1217, 355, 671, 355, 355, 669, 355, 355,
	670, 355, 1241, 355, 668, 1233, 673, 638, 672, 787,
	667, 1022, 355, 1020, 1234, 233, 66, 348, 659, 873,
	1010, 954, 1236, 536, 1246, 1247, 1245, 199, 1240, 1153,
	1152, 960, 503, 66, 1253, 1254, 909, 504, 909, 208,
	235, 1209, 208, 208, 66, 542, 578, 1000, 1099, 354,
	208, 1210, 1454, 66, 1434, 1264, 762, 522, 1394, 874,
	872, 875, 876, 1024, 822, 822, 877, 1265, 1345, 1267,
	1044, 605, 849, 288, 778, 301, 298, 1276, 299, 769,
	1057, 546, 286, 998, 278, 637, 630, 871, 869, 1067,
	1281, 1263, 343, 1220, 1310, 1317, 569, 1061, 1062, 1277,
	1174, 639, 1082, 639, 639, 639, 1083, 636, 1266, 208,
	1171, 1298, 638, 1278, 1292, 881, 1401, 355, 1090, 1275,
	1311, 208, 639, 660, 1065, 1308, 1282, 1283, 773, 208,
	1316, 1137, 27, 1315, 1325, 1106, 1307, 186, 273, 19,
	18, 17, 20, 1025, 208, 16, 15, 1026, 14, 474,
	31, 208, 21, 13, 1030, 1031, 1032, 12, 11, 1164,
	10, 1038, 520, 524, 1041, 1042, 9, 8, 7, 6,
	1048, 909, 5, 4, 1050, 60, 261, 1053, 1054, 1055,
	1056, 1334, 545, 1336, 208, 208, 264, 208, 24, 2,
	487, 0, 1328, 0, 0, 208, 66, 0, 1081, 0,
	1357, 1343, 208, 208, 208, 66, 1365, 1364, 208, 0,
	0, 0, 0, 1369, 1370, 1371, 1146, 595, 487, 1207,
	0, 0, 885, 1372, 1378, 208, 606, 0, 0, 1385,
	0, 355, 0, 0, 0, 0, 1393, 0, 355, 0,
	0, 0, 0, 0, 0, 1386, 1144, 1387, 66, 0,
	0, 0, 1407, 0, 355, 0, 0, 0, 355, 355,
	355, 208, 355, 355, 1417, 1416, 0, 0, 0, 355,
	355, 1411, 208, 208, 0, 0, 0, 1412, 1207, 0,
	1431, 0, 1359, 0, 0, 280, 1437, 1432, 0, 0,
	208, 0, 0, 1208, 1442, 52, 0, 0, 1290, 0,
	770, 639, 0, 66, 0, 0, 0, 638, 0, 0,
	542, 208, 0, 355, 0, 1065, 0, 0, 0, 1145,
	1453, 0, 1343, 909, 1150, 1147, 1140, 1148, 1143, 0,
	0, 0, 1141, 1142, 0, 0, 0, 1463, 1465, 0,
	1408, 0, 0, 208, 0, 1185, 1149, 0, 570, 0,
	1474, 0, 0, 0, 1472, 0, 0, 0, 0, 0,
	828, 1289, 0, 0, 0, 1487, 0, 0, 0, 0,
	0, 0, 1498, 0, 0, 0, 853, 0, 1448, 557,
	556, 566, 567, 559, 560, 561, 562, 563, 564, 565,
	558, 0, 0, 857, 858, 0, 568, 0, 0, 0,
	1227, 0, 0, 0, 0, 0, 639, 0, 0, 0,
	0, 570, 754, 0, 0, 0, 0, 0, 0, 0,
	355, 0, 0, 0, 0, 0, 0, 0, 1291, 0,
	0, 0, 0, 355, 0, 0, 570, 0, 1339, 0,
	776, 777, 557, 556, 566, 567, 559, 560, 561, 562,
	563, 564, 565, 558, 0, 0, 0, 0, 1288, 568,
	0, 0, 0, 0, 1321, 1322, 1323, 557, 556, 566,
	567, 559, 560, 561, 562, 563, 564, 565, 558, 0,
	0, 0, 0, 570, 568, 0, 0, 0, 355, 0,
	355, 0, 1177, 1279, 976, 977, 0, 487, 0, 595,
	0, 0, 839, 840, 355, 1284, 1285, 1286, 570, 0,
	0, 0, 0, 0, 557, 556, 566, 567, 559, 560,
	561, 562, 563, 564, 565, 558, 1300, 1301, 1302, 355,
	1305, 568, 0, 1208, 0, 0, 1360, 0, 0, 557,
	556, 566, 567, 559, 560, 561, 562, 563, 564, 565,
	558, 1324, 0, 1367, 1368, 1287, 568, 0, 0, 0,
	569, 903, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 1390, 0, 584, 585, 586, 587,
	588, 589, 590, 591, 0, 0, 0, 0, 0, 0,
	0, 0, 1208, 0, 52, 0, 0, 0, 0, 0,
	0, 639, 0, 0, 0, 570, 0, 0, 0, 0,
	1352, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 569, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 853, 557, 556, 566, 567,
	559, 560, 561, 562, 563, 564, 565, 558, 569, 0,
	0, 1085, 0, 568, 0, 0, 0, 0, 0, 0,
	0, 994, 995, 0, 524, 1397, 1398, 1399, 1400, 570,
	0, 0, 1404, 1405, 0, 0, 355, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 1413, 1414, 1415,
	0, 0, 0, 0, 0, 569, 0, 0, 0, 0,
	557, 556, 566, 567, 559, 560, 561, 562, 563, 564,
	565, 558, 0, 1485, 0, 0, 0, 568, 0, 1438,
	569, 0, 0, 0, 1136, 355, 1443, 0, 0, 1445,
	1446, 0, 0, 0, 0, 0, 0, 1029, 0, 0,
	0, 25, 26, 53, 28, 29, 1450, 0, 0, 0,
	0, 0, 0, 355, 1047, 0, 0, 1016, 0, 0,
	0, 0, 0, 0, 44, 521, 0, 970, 0, 30,
	49, 50, 0, 0, 0, 0, 0, 0, 355, 0,
	0, 0, 0, 0, 0, 969, 0, 0, 0, 63,
	39, 0, 0, 0, 55, 0, 0, 0, 0, 0,
	0, 0, 221, 0, 0, 247, 0, 0, 0, 1499,
	1500, 0, 0, 0, 974, 0, 0, 569, 355, 0,
	0, 0, 0, 968, 0, 0, 0, 853, 0, 0,
	1211, 1213, 788, 0, 0, 797, 798, 799, 800, 801,
	802, 803, 804, 805, 806, 807, 808, 809, 810, 811,
	812, 813, 814, 815, 0, 819, 0, 0, 0, 1213,
	32, 33, 35, 34, 37, 570, 51, 0, 0, 0,
	0, 0, 0, 0, 355, 0, 355, 1244, 965, 962,
	963, 569, 961, 0, 0, 0, 0, 0, 38, 45,
	46, 0, 1167, 47, 48, 36, 856, 556, 566, 567,
	559, 560, 561, 562, 563, 564, 565, 558, 40, 41,
	0, 42, 43, 568, 972, 975, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 1268, 0, 0,
	1273, 1274, 0, 0, 0, 0, 0, 0, 355, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 1197,
	967, 0, 0, 0, 0, 0, 277, 0, 0, 346,
	0, 0, 0, 0, 221, 0, 221, 0, 0, 0,
	0, 0, 966, 0, 0, 0, 221, 0, 0, 221,
	0, 0, 0, 0, 853, 221, 0, 0, 221, 0,
	0, 0, 0, 0, 0, 0, 1235, 1085, 54, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 355,
	570, 23, 230, 0, 0, 0, 971, 1330, 0, 1017,
	0, 0, 0, 0, 0, 0, 0, 0, 63, 0,
	0, 973, 355, 0, 0, 0, 0, 243, 0, 355,
	0, 557, 556, 566, 567, 559, 560, 561, 562, 563,
	564, 565, 558, 0, 0, 0, 0, 0, 568, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 1361, 1362, 0, 1363, 0, 569, 0, 0,
	1012, 1013, 1014, 1330, 0, 0, 0, 0, 0, 0,
	1330, 1330, 1330, 223, 0, 0, 1244, 0, 0, 0,
	225, 1294, 0, 0, 0, 221, 221, 221, 234, 0,
	229, 595, 0, 1330, 0, 0, 0, 0, 0, 1309,
	0, 0, 0, 0, 1312, 0, 1313, 0, 0, 0,
	0, 0, 1318, 0, 0, 0, 0, 853, 0, 0,
	0, 232, 0, 0, 0, 0, 0, 242, 0, 1423,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	355, 355, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 853, 0, 0, 1444, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 1452,
	236, 226, 227, 0, 237, 238, 239, 241, 0, 240,
	246, 0, 0, 0, 228, 231, 0, 224, 245, 244,
	0, 0, 569, 221, 0, 0, 0, 0, 0, 0,
	0, 1330, 0, 221, 221, 0, 0, 0, 0, 221,
	0, 0, 221, 0, 0, 221, 0, 0, 0, 739,
	0, 0, 0, 0, 0, 0, 0, 0, 221, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 688, 1436, 595,
	0, 221, 1178, 1179, 0, 0, 0, 0, 0, 0,
	739, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 1190, 1191, 0, 1192, 1193, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 1200, 1201, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 277, 0,
	0, 1470, 0, 277, 277, 0, 0, 277, 277, 277,
	0, 0, 1476, 854, 0, 0, 0, 0, 0, 0,
	0, 676, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 277, 277, 277, 277, 0, 221, 0, 0,
	0, 0, 0, 0, 1251, 221, 0, 63, 0, 0,
	221, 221, 0, 0, 221, 893, 739, 0, 0, 689,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 702, 705, 706, 707, 708, 709, 710, 0, 711,
	712, 713, 714, 715, 690, 691, 692, 693, 674, 675,
	703, 0, 677, 1280, 678, 679, 680, 681, 682, 683,
	684, 685, 686, 687, 694, 695, 696, 697, 698, 699,
	700, 701, 0, 0, 221, 0, 0, 0, 0, 0,
	0, 0, 0, 221, 221, 0, 221, 221, 0, 0,
	221, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 221, 0, 990, 991,
	0, 221, 0, 0, 0, 0, 739, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 704, 0, 277,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 1347, 1348, 1349, 1350, 1351, 0, 0,
	0, 1354, 1355, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 277, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 277, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 854, 221, 0, 221, 221, 221, 0, 0,
	0, 0, 0, 0, 1080, 0, 0, 221, 0, 0,
	0, 0, 63, 0, 221, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 221, 0, 0, 0,
	0, 1491, 0, 0, 0, 0, 277, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 277, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 739, 0, 0, 0, 0,
	0, 0, 0, 0, 854, 0, 0, 0, 0, 0,
	0, 0, 0, 221, 0, 0, 0, 0, 129, 0,
	182, 89, 85, 67, 0, 0, 0, 0, 0, 0,
	0, 91, 0, 0, 0, 0, 0, 109, 0, 111,
	0, 0, 150, 120, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 821, 0, 0, 0, 0, 0, 0, 0,
	0, 82, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 221, 0, 0, 0, 0, 93, 128, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 221, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 221,
	0, 0, 0, 0, 0, 0, 0, 0, 221, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 98, 0, 0, 0, 0, 172, 0, 0, 0,
	0, 136, 0, 153, 100, 108, 69, 76, 0, 99,
	126, 141, 145, 0, 0, 0, 86, 0, 143, 131,
	165, 854, 132, 142, 112, 158, 137, 0, 173, 174,
	155, 171, 181, 70, 154, 164, 83, 146, 72, 162,
	152, 118, 104, 105, 71, 0, 140, 90, 96, 88,
	127, 159, 160, 87, 184, 77, 170, 74, 78, 169,
	125, 157, 163, 119, 116, 73, 161, 117, 115, 107,
	94, 101, 134, 114, 135, 102, 122, 121, 123, 0,
	0, 0, 151, 167, 185, 80, 0, 147, 156, 175,
	176, 177, 178, 179, 180, 0, 0, 81, 97, 92,
	133, 124, 79, 103, 148, 106, 113, 139, 183, 130,
	144, 84, 166, 149, 0, 0, 0, 0, 0, 0,
	0, 1366, 0, 0, 0, 0, 0, 0, 0, 0,
	63, 0, 0, 68, 75, 110, 0, 138, 95, 168,
	0, 823, 0, 824, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 221, 854, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 854, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 443, 431, 221, 402,
	446, 381, 394, 454, 395, 396, 424, 367, 410, 129,
	392, 182, 89, 85, 67, 0, 384, 362, 389, 363,
	382, 404, 91, 407, 380, 433, 413, 445, 109, 452,
	111, 418, 0, 150, 120, 0, 0, 406, 435, 0,
	408, 429, 401, 425, 372, 417, 447, 393, 422, 448,
	0, 0, 0, 207, 0, 910, 911, 0, 0, 0,
	0, 0, 82, 0, 420, 442, 391, 421, 423, 361,
	419, 0, 365, 368, 453, 437, 387, 93, 128, 1107,
	0, 0, 0, 0, 0, 0, 405, 409, 426, 399,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 385,
	0, 416, 0, 0, 0, 0, 0, 0, 369, 366,
	0, 0, 403, 0, 0, 0, 371, 0, 386, 427,
	0, 360, 98, 430, 436, 0, 400, 172, 440, 398,
	397, 444, 136, 0, 153, 100, 108, 69, 76, 0,
	99, 126, 141, 145, 434, 383, 390, 86, 388, 143,
	131, 165, 415, 132, 142, 112, 158, 137, 441, 173,
	174, 155, 171, 181, 70, 154, 164, 83, 146, 72,
	162, 152, 118, 104, 105, 71, 0, 140, 90, 96,
	88, 127, 159, 160, 87, 184, 77, 170, 74, 78,
	169, 125, 157, 163, 119, 116, 73, 161, 117, 115,
	107, 94, 101, 134, 114, 135, 102, 122, 121, 123,
	0, 364, 0, 151, 167, 185, 80, 379, 147, 156,
	175, 176, 177, 178, 179, 180, 0, 0, 81, 97,
	92, 133, 124, 79, 103, 148, 106, 113, 139, 183,
	130, 144, 84, 166, 149, 375, 378, 373, 374, 411,
	412, 449, 450, 451, 428, 370, 0, 376, 377, 0,
	432, 438, 439, 414, 68, 75, 110, 455, 138, 95,
	168, 443, 431, 0, 402, 446, 381, 394, 454, 395,
	396, 424, 367, 410, 129, 392, 182, 89, 85, 67,
	0, 384, 362, 389, 363, 382, 404, 91, 407, 380,
	433, 413, 445, 109, 452, 111, 418, 0, 150, 120,
	0, 0, 406, 435, 0, 408, 429, 401, 425, 372,
	417, 447, 393, 422, 448, 0, 0, 0, 207, 0,
	910, 911, 0, 0, 0, 0, 0, 82, 0, 420,
	442, 391, 421, 423, 361, 419, 0, 365, 368, 453,
	437, 387, 93, 128, 0, 0, 0, 0, 0, 0,
	0, 405, 409, 426, 399, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 385, 0, 416, 0, 0, 0,
	0, 0, 0, 369, 366, 0, 0, 403, 0, 0,
	0, 371, 0, 386, 427, 0, 360, 98, 430, 436,
	0, 400, 172, 440, 398, 397, 444, 136, 0, 153,
	100, 108, 69, 76, 0, 99, 126, 141, 145, 434,
	383, 390, 86, 388, 143, 131, 165, 415, 132, 142,
	112, 158, 137, 441, 173, 174, 155, 171, 181, 70,
	154, 164, 83, 146, 72, 162, 152, 118, 104, 105,
	71, 0, 140, 90, 96, 88, 127, 159, 160, 87,
	184, 77, 170, 74, 78, 169, 125, 157, 163, 119,
	116, 73, 161, 117, 115, 107, 94, 101, 134, 114,
	135, 102, 122, 121, 123, 0, 364, 0, 151, 167,
	185, 80, 379, 147, 156, 175, 176, 177, 178, 179,
	180, 0, 0, 81, 97, 92, 133, 124, 79, 103,
	148, 106, 113, 139, 183, 130, 144, 84, 166, 149,
	375, 378, 373, 374, 411, 412, 449, 450, 451, 428,
	370, 0, 376, 377, 0, 432, 438, 439, 414, 68,
	75, 110, 455, 138, 95, 168, 443, 431, 0, 402,
	446, 381, 394, 454, 395, 396, 424, 367, 410, 129,
	392, 182, 89, 85, 67, 0, 384, 362, 389, 363,
	382, 404, 91, 407, 380, 433, 413, 445, 109, 452,
	111, 418, 0, 150, 120, 0, 0, 406, 435, 0,
	408, 429, 401, 425, 372, 417, 447, 393, 422, 448,
	55, 0, 0, 207, 0, 0, 0, 0, 0, 0,
	0, 0, 82, 0, 420, 442, 391, 421, 423, 361,
	419, 0, 365, 368, 453, 437, 387, 93, 128, 0,
	0, 0, 0, 0, 0, 0, 405, 409, 426, 399,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 385,
	0, 416, 0, 0, 0, 0, 0, 0, 369, 366,
	0, 0, 403, 0, 0, 0, 371, 0, 386, 427,
	0, 360, 98, 430, 436, 0, 400, 172, 440, 398,
	397, 444, 136, 0, 153, 100, 108, 69, 76, 0,
	99, 126, 141, 145, 434, 383, 390, 86, 388, 143,
	131, 165, 415, 132, 142, 112, 158, 137, 441, 173,
	174, 155, 171, 181, 70, 154, 164, 83, 146, 72,
	162, 152, 118, 104, 105, 71, 0, 140, 90, 96,
	88, 127, 159, 160, 87, 184, 77, 170, 74, 78,
	169, 125, 157, 163, 119, 116, 73, 161, 117, 115,
	107, 94, 101, 134, 114, 135, 102, 122, 121, 123,
	0, 364, 0, 151, 167, 185, 80, 379, 147, 156,
	175, 176, 177, 178, 179, 180, 0, 0, 81, 97,
	92, 133, 124, 79, 103, 148, 106, 113, 139, 183,
	130, 144, 84, 166, 149, 375, 378, 373, 374, 411,
	412, 449, 450, 451, 428, 370, 0, 376, 377, 0,
	432, 438, 439, 414, 68, 75, 110, 455, 138, 95,
	168, 443, 431, 0, 402, 446, 381, 394, 454, 395,
	396, 424, 367, 410, 129, 392, 182, 89, 85, 67,
	0, 384, 362, 389, 363, 382, 404, 91, 407, 380,
	433, 413, 445, 109, 452, 111, 418, 0, 150, 120,
	0, 0, 406, 435, 0, 408, 429, 401, 425, 372,
	417, 447, 393, 422, 448, 0, 0, 0, 207, 0,
	0, 0, 0, 0, 0, 0, 0, 82, 0, 420,
	442, 391, 421, 423, 361, 419, 0, 365, 368, 453,
	437, 387, 93, 128, 0, 0, 0, 0, 0, 0,
	0, 405, 409, 426, 399, 0, 0, 0, 0, 0,
	0, 0, 1173, 0, 385, 0, 416, 0, 0, 0,
	0, 0, 0, 369, 366, 0, 0, 403, 0, 0,
	0, 371, 0, 386, 427, 0, 360, 98, 430, 436,
	0, 400, 172, 440, 398, 397, 444, 136, 0, 153,
	100, 108, 69, 76, 0, 99, 126, 141, 145, 434,
	383, 390, 86, 388, 143, 131, 165, 415, 132, 142,
	112, 158, 137, 441, 173, 174, 155, 171, 181, 70,
	154, 164, 83, 146, 72, 162, 152, 118, 104, 105,
	71, 0, 140, 90, 96, 88, 127, 159, 160, 87,
	184, 77, 170, 74, 78, 169, 125, 157, 163, 119,
	116, 73, 161, 117, 115, 107, 94, 101, 134, 114,
	135, 102, 122, 121, 123, 0, 364, 0, 151, 167,
	185, 80, 379, 147, 156, 175, 176, 177, 178, 179,
	180, 0, 0, 81, 97, 92, 133, 124, 79, 103,
	148, 106, 113, 139, 183, 130, 144, 84, 166, 149,
	375, 378, 373, 374, 411, 412, 449, 450, 451, 428,
	370, 0, 376, 377, 0, 432, 438, 439, 414, 68,
	75, 110, 455, 138, 95, 168, 443, 431, 0, 402,
	446, 381, 394, 454, 395, 396, 424, 367, 410, 129,
	392, 182, 89, 85, 67, 0, 384, 362, 389, 363,
	382, 404, 91, 407, 380, 433, 413, 445, 109, 452,
	111, 418, 0, 150, 120, 0, 0, 406, 435, 0,
	408, 429, 401, 425, 372, 417, 447, 393, 422, 448,
	0, 0, 0, 65, 0, 0, 0, 0, 0, 0,
	0, 0, 82, 0, 420, 442, 391, 421, 423, 361,
	419, 0, 365, 368, 453, 437, 387, 93, 128, 0,
	0, 0, 0, 0, 0, 0, 405, 409, 426, 399,
	0, 0, 0, 0, 0, 0, 0, 894, 0, 385,
	0, 416, 0, 0, 0, 0, 0, 0, 369, 366,
	0, 0, 403, 0, 0, 0, 371, 0, 386, 427,
	0, 360, 98, 430, 436, 0, 400, 172, 440, 398,
	397, 444, 136, 0, 153, 100, 108, 69, 76, 0,
	99, 126, 141, 145, 434, 383, 390, 86, 388, 143,
	131, 165, 415, 132, 142, 112, 158, 137, 441, 173,
	174, 155, 171, 181, 70, 154, 164, 83, 146, 72,
	162, 152, 118, 104, 105, 71, 0, 140, 90, 96,
	88, 127, 159, 160, 87, 184, 77, 170, 74, 78,
	169, 125, 157, 163, 119, 116, 73, 161, 117, 115,
	107, 94, 101, 134, 114, 135, 102, 122, 121, 123,
	0, 364, 0, 151, 167, 185, 80, 379, 147, 156,
	175, 176, 177, 178, 179, 180, 0, 0, 81, 97,
	92, 133, 124, 79, 103, 148, 106, 113, 139, 183,
	130, 144, 84, 166, 149, 375, 378, 373, 374, 411,
	412, 449, 450, 451, 428, 370, 0, 376, 377, 0,
	432, 438, 439, 414, 68, 75, 110, 455, 138, 95,
	168, 443, 431, 0, 402, 446, 381, 394, 454, 395,
	396, 424, 367, 410, 129, 392, 182, 89, 85, 67,
	0, 384, 362, 389, 363, 382, 404, 91, 407, 380,
	433, 413, 445, 109, 452, 111, 418, 0, 150, 120,
	0, 0, 406, 435, 0, 408, 429, 401, 425, 372,
	417, 447, 393, 422, 448, 0, 0, 0, 282, 0,
	0, 0, 0, 0, 0, 0, 0, 82, 0, 420,
	442, 391, 421, 423, 361, 419, 0, 365, 368, 453,
	437, 387, 93, 128, 0, 0, 0, 0, 0, 0,
	0, 405, 409, 426, 399, 0, 0, 0, 0, 0,
	0, 0, 784, 0, 385, 0, 416, 0, 0, 0,
	0, 0, 0, 369, 366, 0, 0, 403, 0, 0,
	0, 371, 0, 386, 427, 0, 360, 98, 430, 436,
	0, 400, 172, 440, 398, 397, 444, 136, 0, 153,
	100, 108, 69, 76, 0, 99, 126, 141, 145, 434,
	383, 390, 86, 388, 143, 131, 165, 415, 132, 142,
	112, 158, 137, 441, 173, 174, 155, 171, 181, 70,
	154, 164, 83, 146, 72, 162, 152, 118, 104, 105,
	71, 0, 140, 90, 96, 88, 127, 159, 160, 87,
	184, 77, 170, 74, 78, 169, 125, 157, 163, 119,
	116, 73, 161, 117, 115, 107, 94, 101, 134, 114,
	135, 102, 122, 121, 123, 0, 364, 0, 151, 167,
	185, 80, 379, 147, 156, 175, 176, 177, 178, 179,
	180, 0, 0, 81, 97, 92, 133, 124, 79, 103,
	148, 106, 113, 139, 183, 130, 144, 84, 166, 149,
	375, 378, 373, 374, 411, 412, 449, 450, 451, 428,
	370, 0, 376, 377, 0, 432, 438, 439, 414, 68,
	75, 110, 455, 138, 95, 168, 443, 431, 0, 402,
	446, 381, 394, 454, 395, 396, 424, 367, 410, 129,
	392, 182, 89, 85, 67, 0, 384, 362, 389, 363,
	382, 404, 91, 407, 380, 433, 413, 445, 109, 452,
	111, 418, 0, 150, 120, 0, 0, 406, 435, 0,
	408, 429, 401, 425, 372, 417, 447, 393, 422, 448,
	0, 0, 0, 207, 0, 0, 0, 0, 0, 0,
	0, 0, 82, 0, 420, 442, 391, 421, 423, 361,
	419, 0, 365, 368, 453, 437, 387, 93, 128, 0,
	0, 0, 0, 0, 0, 0, 405, 409, 426, 399,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 385,
	0, 416, 0, 0, 0, 0, 0, 0, 369, 366,
	0, 0, 403, 0, 0, 0, 371, 0, 386, 427,
	0, 360, 98, 430, 436, 0, 400, 172, 440, 398,
	397, 444, 136, 0, 153, 100, 108, 69, 76, 0,
	99, 126, 141, 145, 434, 383, 390, 86, 388, 143,
	131, 165, 415, 132, 142, 112, 158, 137, 441, 173,
	174, 155, 171, 181, 70, 154, 164, 83, 146, 72,
	162, 152, 118, 104, 105, 71, 0, 140, 90, 96,
	88, 127, 159, 160, 87, 184, 77, 170, 74, 78,
	169, 125, 157, 163, 119, 116, 73, 161, 117, 115,
	107, 94, 101, 134, 114, 135, 102, 122, 121, 123,
	0, 364, 0, 151, 167, 185, 80, 379, 147, 156,
	175, 176, 177, 178, 179, 180, 0, 0, 81, 97,
	92, 133, 124, 79, 103, 148, 106, 113, 139, 183,
	130, 144, 84, 166, 149, 375, 378, 373, 374, 411,
	412, 449, 450, 451, 428, 370, 0, 376, 377, 0,
	432, 438, 439, 414, 68, 75, 110, 455, 138, 95,
	168, 443, 431, 0, 402, 446, 381, 394, 454, 395,
	396, 424, 367, 410, 129, 392, 182, 89, 85, 67,
	0, 384, 362, 389, 363, 382, 404, 91, 407, 380,
	433, 413, 445, 109, 452, 111, 418, 0, 150, 120,
	0, 0, 406, 435, 0, 408, 429, 401, 425, 372,
	417, 447, 393, 422, 448, 0, 0, 0, 282, 0,
	0, 0, 0, 0, 0, 0, 0, 82, 0, 420,
	442, 391, 421, 423, 361, 419, 0, 365, 368, 453,
	437, 387, 93, 128, 0, 0, 0, 0, 0, 0,
	0, 405, 409, 426, 399, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 385, 0, 416, 0, 0, 0,
	0, 0, 0, 369, 366, 0, 0, 403, 0, 0,
	0, 371, 0, 386, 427, 0, 360, 98, 430, 436,
	0, 400, 172, 440, 398, 397, 444, 136, 0, 153,
	100, 108, 69, 76, 0, 99, 126, 141, 145, 434,
	383, 390, 86, 388, 143, 131, 165, 415, 132, 142,
	112, 158, 137, 441, 173, 174, 155, 171, 181, 70,
	154, 164, 83, 146, 72, 162, 152, 118, 104, 105,
	71, 0, 140, 90, 96, 88, 127, 159, 160, 87,
	184, 77, 170, 74, 78, 169, 125, 157, 163, 119,
	116, 73, 161, 117, 115, 107, 94, 101, 134, 114,
	135, 102, 122, 121, 123, 0, 364, 0, 151, 167,
	185, 80, 379, 147, 156, 175, 176, 177, 178, 179,
	180, 0, 0, 81, 97, 92, 133, 124, 79, 103,
	148, 106, 113, 139, 183, 130, 144, 84, 166, 149,
	375, 378, 373, 374, 411, 412, 449, 450, 451, 428,
	370, 0, 376, 377, 0, 432, 438, 439, 414, 68,
	75, 110, 455, 138, 95, 168, 443, 431, 0, 402,
	446, 381, 394, 454, 395, 396, 424, 367, 410, 129,
	392, 182, 89, 85, 67, 0, 384, 362, 389, 363,
	382, 404, 91, 407, 380, 433, 413, 445, 109, 452,
	111, 418, 0, 150, 120, 0, 0, 406, 435, 0,
	408, 429, 401, 425, 372, 417, 447, 393, 422, 448,
	0, 0, 0, 207, 0, 0, 0, 0, 0, 0,
	0, 0, 82, 0, 420, 442, 391, 421, 423, 361,
	419, 0, 365, 368, 453, 437, 387, 93, 128, 0,
	0, 0, 0, 0, 0, 0, 405, 409, 426, 399,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 385,
	0, 416, 0, 0, 0, 0, 0, 0, 369, 366,
	0, 0, 403, 0, 0, 0, 371, 0, 386, 427,
	0, 360, 98, 430, 436, 0, 400, 172, 440, 398,
	397, 444, 136, 0, 153, 100, 108, 69, 76, 0,
	99, 126, 141, 145, 434, 383, 390, 86, 388, 143,
	131, 165, 415, 132, 142, 112, 158, 137, 441, 173,
	174, 155, 171, 181, 70, 154, 164, 83, 146, 72,
	162, 152, 118, 104, 105, 71, 0, 140, 90, 96,
	88, 127, 159, 160, 87, 184, 77, 170, 74, 358,
	169, 125, 157, 163, 119, 116, 73, 161, 117, 115,
	107, 94, 101, 134, 114, 135, 102, 122, 121, 123,
	0, 364, 0, 151, 167, 185, 80, 379, 147, 156,
	175, 176, 177, 178, 179, 180, 0, 0, 81, 97,
	92, 133, 359, 357, 103, 148, 106, 113, 139, 183,
	130, 144, 84, 166, 149, 375, 378, 373, 374, 411,
	412, 449, 450, 451, 428, 370, 0, 376, 377, 0,
	432, 438, 439, 414, 68, 75, 110, 455, 138, 95,
	168, 443, 431, 0, 402, 446, 381, 394, 454, 395,
	396, 424, 367, 410, 129, 392, 182, 89, 85, 67,
	0, 384, 362, 389, 363, 382, 404, 91, 407, 380,
	433, 413, 445, 109, 452, 111, 418, 0, 150, 120,
	0, 0, 406, 435, 0, 408, 429, 401, 425, 372,
	417, 447, 393, 422, 448, 0, 0, 0, 65, 0,
	0, 0, 0, 0, 0, 0, 0, 82, 0, 420,
	442, 391, 421, 423, 361, 419, 0, 365, 368, 453,
	437, 387, 93, 128, 0, 0, 0, 0, 0, 0,
	0, 405, 409, 426, 399, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 385, 0, 416, 0, 0, 0,
	0, 0, 0, 369, 366, 0, 0, 403, 0, 0,
	0, 371, 0, 386, 427, 0, 360, 98, 430, 436,
	0, 400, 172, 440, 398, 397, 444, 136, 0, 153,
	100, 108, 69, 76, 0, 99, 126, 141, 145, 434,
	383, 390, 86, 388, 143, 131, 165, 415, 132, 142,
	112, 158, 137, 441, 173, 174, 155, 171, 181, 70,
	154, 164, 83, 146, 72, 162, 152, 118, 104, 105,
	71, 0, 140, 90, 96, 88, 127, 159, 160, 87,
	184, 77, 170, 74, 78, 169, 125, 157, 163, 119,
	116, 73, 161, 117, 115, 107, 94, 101, 134, 114,
	135, 102, 122, 121, 123, 0, 364, 0, 151, 167,
	185, 80, 379, 147, 156, 175, 176, 177, 178, 179,
	180, 0, 0, 81, 97, 92, 133, 124, 79, 103,
	148, 106, 113, 139, 183, 130, 144, 84, 166, 149,
	375, 378, 373, 374, 411, 412, 449, 450, 451, 428,
	370, 0, 376, 377, 0, 432, 438, 439, 414, 68,
	75, 110, 455, 138, 95, 168, 443, 431, 0, 402,
	446, 381, 394, 454, 395, 396, 424, 367, 410, 129,
	392, 182, 89, 85, 67, 0, 384, 362, 389, 363,
	382, 404, 91, 407, 380, 433, 413, 445, 109, 452,
	111, 418, 0, 150, 120, 0, 0, 406, 435, 0,
	408, 429, 401, 425, 372, 417, 447, 393, 422, 448,
	0, 0, 0, 207, 0, 0, 0, 0, 0, 0,
	0, 0, 82, 0, 420, 442, 391, 421, 423, 361,
	419, 0, 365, 368, 453, 437, 387, 93, 128, 0,
	0, 0, 0, 0, 0, 0, 405, 409, 426, 399,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 385,
	0, 416, 0, 0, 0, 0, 0, 0, 369, 366,
	0, 0, 403, 0, 0, 0, 371, 0, 386, 427,
	0, 360, 98, 430, 436, 0, 400, 172, 440, 398,
	397, 444, 136, 0, 153, 100, 108, 69, 76, 0,
	99, 126, 141, 145, 434, 383, 390, 86, 388, 143,
	131, 165, 415, 132, 142, 112, 158, 137, 441, 173,
	174, 155, 171, 181, 70, 154, 653, 83, 146, 72,
	162, 152, 118, 104, 105, 71, 0, 140, 90, 96,
	88, 127, 159, 160, 87, 184, 77, 170, 74, 358,
	169, 125, 157, 163, 119, 116, 73, 161, 117, 115,
	107, 94, 101, 134, 114, 135, 102, 122, 121, 123,
	0, 364, 0, 151, 167, 185, 80, 379, 147, 156,
	175, 176, 177, 178, 179, 180, 0, 0, 81, 97,
	92, 133, 359, 357, 103, 148, 106, 113, 139, 183,
	130, 144, 84, 166, 149, 375, 378, 373, 374, 411,
	412, 449, 450, 451, 428, 370, 0, 376, 377, 0,
	432, 438, 439, 414, 68, 75, 110, 455, 138, 95,
	168, 443, 431, 0, 402, 446, 381, 394, 454, 395,
	396, 424, 367, 410, 129, 392, 182, 89, 85, 67,
	0, 384, 362, 389, 363, 382, 404, 91, 407, 380,
	433, 413, 445, 109, 452, 111, 418, 0, 150, 120,
	0, 0, 406, 435, 0, 408, 429, 401, 425, 372,
	417, 447, 393, 422, 448, 0, 0, 0, 207, 0,
	0, 0, 0, 0, 0, 0, 0, 82, 0, 420,
	442, 391, 421, 423, 361, 419, 0, 365, 368, 453,
	437, 387, 93, 128, 0, 0, 0, 0, 0, 0,
	0, 405, 409, 426, 399, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 385, 0, 416, 0, 0, 0,
	0, 0, 0, 369, 366, 0, 0, 403, 0, 0,
	0, 371, 0, 386, 427, 0, 360, 98, 430, 436,
	0, 400, 172, 440, 398, 397, 444, 136, 0, 153,
	100, 108, 69, 76, 0, 99, 126, 141, 145, 434,
	383, 390, 86, 388, 143, 131, 165, 415, 132, 142,
	112, 158, 137, 441, 173, 174, 155, 171, 181, 70,
	154, 349, 83, 146, 72, 162, 152, 118, 104, 105,
	71, 0, 140, 90, 96, 88, 127, 159, 160, 87,
	184, 77, 170, 74, 358, 169, 125, 157, 163, 119,
	116, 73, 161, 117, 115, 107, 94, 101, 134, 114,
	135, 102, 122, 121, 123, 0, 364, 0, 151, 167,
	185, 80, 379, 147, 156, 175, 176, 177, 178, 179,
	180, 0, 0, 81, 97, 92, 133, 359, 357, 352,
	351, 106, 113, 139, 183, 130, 144, 84, 166, 149,
	375, 378, 373, 374, 411, 412, 449, 450, 451, 428,
	370, 0, 376, 377, 0, 432, 438, 439, 414, 68,
	75, 110, 455, 138, 95, 168, 129, 0, 182, 89,
	85, 67, 0, 0, 0, 284, 0, 0, 0, 91,
	0, 281, 0, 0, 0, 109, 324, 111, 0, 0,
	150, 120, 0, 0, 0, 0, 0, 315, 316, 0,
	0, 0, 0, 0, 0, 0, 0, 55, 0, 0,
	282, 303, 302, 305, 306, 307, 308, 0, 0, 82,
	304, 309, 310, 311, 0, 0, 0, 279, 296, 0,
	323, 0, 0, 0, 93, 128, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 293, 294, 0, 0, 0, 0, 337, 0,
	295, 0, 0, 0, 0, 0, 290, 291, 292, 297,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 98,
	0, 1319, 1320, 0, 172, 0, 0, 335, 0, 136,
	0, 153, 100, 108, 69, 76, 0, 99, 126, 141,
	145, 0, 0, 0, 86, 0, 143, 131, 165, 0,
	132, 142, 112, 158, 137, 0, 173, 174, 155, 171,
	181, 70, 154, 164, 83, 146, 72, 162, 152, 118,
	104, 105, 71, 0, 140, 90, 96, 88, 127, 159,
	160, 87, 184, 77, 170, 74, 78, 169, 125, 157,
	163, 119, 116, 73, 161, 117, 115, 107, 94, 101,
	134, 114, 135, 102, 122, 121, 123, 0, 0, 0,
	151, 167, 185, 80, 0, 147, 156, 175, 176, 177,
	178, 179, 180, 0, 0, 81, 97, 92, 133, 124,
	79, 103, 148, 106, 113, 139, 183, 130, 144, 84,
	166, 149, 325, 336, 331, 332, 329, 330, 328, 327,
	326, 338, 317, 318, 319, 320, 322, 0, 333, 334,
	321, 68, 75, 110, 0, 138, 95, 168, 129, 0,
	182, 89, 85, 67, 0, 0, 0, 284, 0, 0,
	0, 91, 0, 281, 0, 0, 0, 109, 324, 111,
	0, 0, 150, 120, 0, 0, 0, 0, 0, 315,
	316, 0, 0, 0, 0, 0, 0, 901, 0, 55,
	0, 0, 282, 303, 302, 305, 306, 307, 308, 0,
	0, 82, 304, 309, 310, 311, 902, 0, 0, 279,
	296, 0, 323, 0, 0, 0, 93, 128, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 293, 294, 0, 0, 0, 0,
	337, 0, 295, 0, 0, 0, 0, 0, 290, 291,
	292, 297, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 98, 0, 0, 0, 0, 172, 0, 0, 335,
	0, 136, 0, 153, 100, 108, 69, 76, 0, 99,
	126, 141, 145, 0, 0, 0, 86, 0, 143, 131,
	165, 0, 132, 142, 112, 158, 137, 0, 173, 174,
	155, 171, 181, 70, 154, 164, 83, 146, 72, 162,
	152, 118, 104, 105, 71, 0, 140, 90, 96, 88,
	127, 159, 160, 87, 184, 77, 170, 74, 78, 169,
	125, 157, 163, 119, 116, 73, 161, 117, 115, 107,
	94, 101, 134, 114, 135, 102, 122, 121, 123, 0,
	0, 0, 151, 167, 185, 80, 0, 147, 156, 175,
	176, 177, 178, 179, 180, 0, 0, 81, 97, 92,
	133, 124, 79, 103, 148, 106, 113, 139, 183, 130,
	144, 84, 166, 149, 325, 336, 331, 332, 329, 330,
	328, 327, 326, 338, 317, 318, 319, 320, 322, 25,
	333, 334, 321, 68, 75, 110, 0, 138, 95, 168,
	0, 129, 0, 182, 89, 85, 67, 0, 0, 0,
	284, 0, 0, 0, 91, 0, 281, 0, 0, 0,
	109, 324, 111, 0, 0, 150, 120, 0, 0, 0,
	0, 0, 315, 316, 0, 0, 0, 0, 0, 0,
	0, 0, 55, 0, 0, 282, 303, 302, 305, 306,
	307, 308, 0, 0, 82, 304, 309, 310, 311, 0,
	0, 0, 279, 296, 0, 323, 0, 0, 0, 93,
	128, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 293, 294, 0,
	0, 0, 0, 337, 0, 295, 0, 0, 0, 0,
	0, 290, 291, 292, 297, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 98, 0, 0, 0, 0, 172,
	0, 0, 335, 0, 136, 0, 153, 100, 108, 69,
	76, 0, 99, 126, 141, 145, 0, 0, 0, 86,
	0, 143, 131, 165, 0, 132, 142, 112, 158, 137,
	0, 173, 174, 155, 171, 181, 70, 154, 164, 83,
	146, 72, 162, 152, 118, 104, 105, 71, 0, 140,
	90, 96, 88, 127, 159, 160, 87, 184, 77, 170,
	74, 78, 169, 125, 157, 163, 119, 116, 73, 161,
	117, 115, 107, 94, 101, 134, 114, 135, 102, 122,
	121, 123, 0, 0, 0, 151, 167, 185, 80, 0,
	147, 156, 175, 176, 177, 178, 179, 180, 0, 0,
	81, 97, 92, 133, 124, 79, 103, 148, 106, 113,
	139, 183, 130, 144, 84, 166, 149, 325, 336, 331,
	332, 329, 330, 328, 327, 326, 338, 317, 318, 319,
	320, 322, 0, 333, 334, 321, 68, 75, 110, 23,
	138, 95, 168, 129, 0, 182, 89, 85, 67, 0,
	830, 0, 284, 0, 0, 0, 91, 0, 281, 0,
	0, 0, 109, 324, 111, 0, 0, 150, 120, 0,
	0, 0, 0, 0, 315, 316, 0, 0, 0, 0,
	0, 0, 0, 0, 55, 0, 0, 282, 303, 302,
	305, 306, 307, 308, 0, 0, 82, 304, 309, 310,
	311, 0, 0, 0, 279, 296, 0, 323, 0, 0,
	0, 93, 128, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 293,
	294, 275, 0, 0, 0, 337, 0, 295, 0, 0,
	0, 0, 0, 290, 291, 292, 297, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 98, 0, 0, 0,
	0, 172, 0, 0, 335, 0, 136, 0, 153, 100,
	108, 69, 76, 0, 99, 126, 141, 145, 0, 0,
	0, 86, 0, 143, 131, 165, 0, 132, 142, 112,
	158, 137, 0, 173, 174, 155, 171, 181, 70, 154,
	164, 83, 146, 72, 162, 152, 118, 104, 105, 71,
	0, 140, 90, 96, 88, 127, 159, 160, 87, 184,
	77, 170, 74, 78, 169, 125, 157, 163, 119, 116,
	73, 161, 117, 115, 107, 94, 101, 134, 114, 135,
	102, 122, 121, 123, 0, 0, 0, 151, 167, 185,
	80, 0, 147, 156, 175, 176, 177, 178, 179, 180,
	0, 0, 81, 97, 92, 133, 124, 79, 103, 148,
	106, 113, 139, 183, 130, 144, 84, 166, 149, 325,
	336, 331, 332, 329, 330, 328, 327, 326, 338, 317,
	318, 319, 320, 322, 0, 333, 334, 321, 68, 75,
	110, 0, 138, 95, 168, 129, 0, 182, 89, 85,
	67, 0, 0, 0, 284, 0, 0, 0, 91, 0,
	281, 0, 0, 0, 109, 324, 111, 0, 0, 150,
	120, 0, 0, 0, 0, 0, 315, 316, 0, 0,
	0, 0, 0, 0, 0, 0, 55, 0, 516, 282,
	303, 302, 305, 306, 307, 308, 0, 0, 82, 304,
	309, 310, 311, 0, 0, 0, 279, 296, 0, 323,
	0, 0, 0, 93, 128, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 293, 294, 0, 0, 0, 0, 337, 0, 295,
	0, 0, 0, 0, 0, 290, 291, 292, 297, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 98, 0,
	0, 0, 0, 172, 0, 0, 335, 0, 136, 0,
	153, 100, 108, 69, 76, 0, 99, 126, 141, 145,
	0, 0, 0, 86, 0, 143, 131, 165, 0, 132,
	142, 112, 158, 137, 0, 173, 174, 155, 171, 181,
	70, 154, 164, 83, 146, 72, 162, 152, 118, 104,
	105, 71, 0, 140, 90, 96, 88, 127, 159, 160,
	87, 184, 77, 170, 74, 78, 169, 125, 157, 163,
	119, 116, 73, 161, 117, 115, 107, 94, 101, 134,
	114, 135, 102, 122, 121, 123, 0, 0, 0, 151,
	167, 185, 80, 0, 147, 156, 175, 176, 177, 178,
	179, 180, 0, 0, 81, 97, 92, 133, 124, 79,
	103, 148, 106, 113, 139, 183, 130, 144, 84, 166,
	149, 325, 336, 331, 332, 329, 330, 328, 327, 326,
	338, 317, 318, 319, 320, 322, 0, 333, 334, 321,
	68, 75, 110, 0, 138, 95, 168, 129, 0, 182,
	89, 85, 67, 0, 0, 0, 284, 0, 0, 0,
	91, 0, 281, 0, 0, 0, 109, 324, 111, 0,
	0, 150, 120, 0, 0, 0, 0, 0, 315, 316,
	0, 0, 0, 0, 0, 0, 0, 0, 55, 0,
	0, 282, 303, 302, 305, 306, 307, 308, 0, 0,
	82, 304, 309, 310, 311, 0, 0, 0, 279, 296,
	0, 323, 0, 0, 0, 93, 128, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 293, 294, 275, 0, 0, 0, 337,
	0, 295, 0, 0, 0, 0, 0, 290, 291, 292,
	297, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	98, 0, 0, 0, 0, 172, 0, 0, 335, 0,
	136, 0, 153, 100, 108, 69, 76, 0, 99, 126,
	141, 145, 0, 0, 0, 86, 0, 143, 131, 165,
	0, 132, 142, 112, 158, 137, 0, 173, 174, 155,
	171, 181, 70, 154, 164, 83, 146, 72, 162, 152,
	118, 104, 105, 71, 0, 140, 90, 96, 88, 127,
	159, 160, 87, 184, 77, 170, 74, 78, 169, 125,
	157, 163, 119, 116, 73, 161, 117, 115, 107, 94,
	101, 134, 114, 135, 102, 122, 121, 123, 0, 0,
	0, 151, 167, 185, 80, 0, 147, 156, 175, 176,
	177, 178, 179, 180, 0, 0, 81, 97, 92, 133,
	124, 79, 103, 148, 106, 113, 139, 183, 130, 144,
	84, 166, 149, 325, 336, 331, 332, 329, 330, 328,
	327, 326, 338, 317, 318, 319, 320, 322, 0, 333,
	334, 321, 68, 75, 110, 0, 138, 95, 168, 129,
	0, 182, 89, 85, 67, 0, 0, 0, 284, 0,
	0, 0, 91, 0, 281, 0, 0, 0, 109, 324,
	111, 0, 0, 150, 120, 0, 0, 0, 0, 0,
	315, 316, 0, 0, 0, 0, 0, 0, 0, 0,
	55, 0, 0, 282, 303, 845, 305, 306, 307, 308,
	0, 0, 82, 304, 309, 310, 311, 0, 0, 0,
	279, 296, 0, 323, 0, 0, 0, 93, 128, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 293, 294, 275, 0, 0,
	0, 337, 0, 295, 0, 0, 0, 0, 0, 290,
	291, 292, 297, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 98, 0, 0, 0, 0, 172, 0, 0,
	335, 0, 136, 0, 153, 100, 108, 69, 76, 0,
	99, 126, 141, 145, 0, 0, 0, 86, 0, 143,
	131, 165, 0, 132, 142, 112, 158, 137, 0, 173,
	174, 155, 171, 181, 70, 154, 164, 83, 146, 72,
	162, 152, 118, 104, 105, 71, 0, 140, 90, 96,
	88, 127, 159, 160, 87, 184, 77, 170, 74, 78,
	169, 125, 157, 163, 119, 116, 73, 161, 117, 115,
	107, 94, 101, 134, 114, 135, 102, 122, 121, 123,
	0, 0, 0, 151, 167, 185, 80, 0, 147, 156,
	175, 176, 177, 178, 179, 180, 0, 0, 81, 97,
	92, 133, 124, 79, 103, 148, 106, 113, 139, 183,
	130, 144, 84, 166, 149, 325, 336, 331, 332, 329,
	330, 328, 327, 326, 338, 317, 318, 319, 320, 322,
	0, 333, 334, 321, 68, 75, 110, 0, 138, 95,
	168, 129, 0, 182, 89, 85, 67, 0, 0, 0,
	284, 0, 0, 0, 91, 0, 281, 0, 0, 0,
	109, 324, 111, 0, 0, 150, 120, 0, 0, 0,
	0, 0, 315, 316, 0, 0, 0, 0, 0, 0,
	0, 0, 55, 0, 0, 282, 303, 842, 305, 306,
	307, 308, 0, 0, 82, 304, 309, 310, 311, 0,
	0, 0, 279, 296, 0, 323, 0, 0, 0, 93,
	128, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 293, 294, 275,
	0, 0, 0, 337, 0, 295, 0, 0, 0, 0,
	0, 290, 291, 292, 297, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 98, 0, 0, 0, 0, 172,
	0, 0, 335, 0, 136, 0, 153, 100, 108, 69,
	76, 0, 99, 126, 141, 145, 0, 0, 0, 86,
	0, 143, 131, 165, 0, 132, 142, 112, 158, 137,
	0, 173, 174, 155, 171, 181, 70, 154, 164, 83,
	146, 72, 162, 152, 118, 104, 105, 71, 0, 140,
	90, 96, 88, 127, 159, 160, 87, 184, 77, 170,
	74, 78, 169, 125, 157, 163, 119, 116, 73, 161,
	117, 115, 107, 94, 101, 134, 114, 135, 102, 122,
	121, 123, 0, 0, 0, 151, 167, 185, 80, 0,
	147, 156, 175, 176, 177, 178, 179, 180, 0, 0,
	81, 97, 92, 133, 124, 79, 103, 148, 106, 113,
	139, 183, 130, 144, 84, 166, 149, 325, 336, 331,
	332, 329, 330, 328, 327, 326, 338, 317, 318, 319,
	320, 322, 0, 333, 334, 321, 68, 75, 110, 0,
	138, 95, 168, 129, 0, 182, 89, 85, 67, 0,
	0, 0, 284, 0, 0, 0, 91, 0, 281, 0,
	0, 0, 109, 324, 111, 0, 0, 150, 120, 0,
	0, 0, 0, 0, 315, 316, 0, 0, 0, 0,
	0, 0, 0, 0, 55, 0, 0, 282, 303, 302,
	305, 306, 307, 308, 0, 0, 82, 304, 309, 310,
	311, 0, 0, 0, 279, 296, 0, 323, 0, 0,
	0, 93, 128, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 293,
	294, 0, 0, 0, 0, 337, 0, 295, 0, 0,
	0, 0, 0, 290, 291, 292, 297, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 98, 0, 0, 0,
	0, 172, 0, 0, 335, 0, 136, 0, 153, 100,
	108, 69, 76, 0, 99, 126, 141, 145, 0, 0,
	0, 86, 0, 143, 131, 165, 0, 132, 142, 112,
	158, 137, 0, 173, 174, 155, 171, 181, 70, 154,
	164, 83, 146, 72, 162, 152, 118, 104, 105, 71,
	0, 140, 90, 96, 88, 127, 159, 160, 87, 184,
	77, 170, 74, 78, 169, 125, 157, 163, 119, 116,
	73, 161, 117, 115, 107, 94, 101, 134, 114, 135,
	102, 122, 121, 123, 0, 0, 0, 151, 167, 185,
	80, 0, 147, 156, 175, 176, 177, 178, 179, 180,
	0, 0, 81, 97, 92, 133, 124, 79, 103, 148,
	106, 113, 139, 183, 130, 144, 84, 166, 149, 325,
	336, 331, 332, 329, 330, 328, 327, 326, 338, 317,
	318, 319, 320, 322, 0, 333, 334, 321, 68, 75,
	110, 0, 138, 95, 168, 129, 0, 182, 89, 85,
	67, 0, 0, 0, 0, 0, 0, 0, 91, 0,
	0, 0, 0, 0, 109, 324, 111, 0, 0, 150,
	120, 0, 0, 0, 0, 0, 315, 316, 0, 0,
	0, 0, 0, 0, 0, 0, 55, 0, 0, 282,
	303, 302, 305, 306, 307, 308, 0, 0, 82, 304,
	309, 310, 311, 0, 0, 0, 0, 296, 0, 323,
	0, 0, 0, 93, 128, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 293, 294, 0, 0, 0, 0, 337, 0, 295,
	0, 0, 0, 0, 0, 290, 291, 292, 297, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 98, 0,
	0, 0, 0, 172, 0, 0, 335, 0, 136, 0,
	153, 100, 108, 69, 76, 0, 99, 126, 141, 145,
	0, 0, 0, 86, 0, 143, 131, 165, 1492, 132,
	142, 112, 158, 137, 0, 173, 174, 155, 171, 181,
	70, 154, 164, 83, 146, 72, 162, 152, 118, 104,
	105, 71, 0, 140, 90, 96, 88, 127, 159, 160,
	87, 184, 77, 170, 74, 78, 169, 125, 157, 163,
	119, 116, 73, 161, 117, 115, 107, 94, 101, 134,
	114, 135, 102, 122, 121, 123, 0, 0, 0, 151,
	167, 185, 80, 0, 147, 156, 175, 176, 177, 178,
	179, 180, 0, 0, 81, 97, 92, 133, 124, 79,
	103, 148, 106, 113, 139, 183, 130, 144, 84, 166,
	149, 325, 336, 331, 332, 329, 330, 328, 327, 326,
	338, 317, 318, 319, 320, 322, 0, 333, 334, 321,
	68, 75, 110, 0, 138, 95, 168, 129, 0, 182,
	89, 85, 67, 0, 0, 0, 0, 0, 0, 0,
	91, 0, 0, 0, 0, 0, 109, 324, 111, 0,
	0, 150, 120, 0, 0, 0, 0, 0, 315, 316,
	0, 0, 0, 0, 0, 0, 0, 0, 55, 0,
	516, 282, 303, 302, 305, 306, 307, 308, 0, 0,
	82, 304, 309, 310, 311, 0, 0, 0, 0, 296,
	0, 323, 0, 0, 0, 93, 128, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 293, 294, 0, 0, 0, 0, 337,
	0, 295, 0, 0, 0, 0, 0, 290, 291, 292,
	297, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	98, 0, 0, 0, 0, 172, 0, 0, 335, 0,
	136, 0, 153, 100, 108, 69, 76, 0, 99, 126,
	141, 145, 0, 0, 0, 86, 0, 143, 131, 165,
	0, 132, 142, 112, 158, 137, 0, 173, 174, 155,
	171, 181, 70, 154, 164, 83, 146, 72, 162, 152,
	118, 104, 105, 71, 0, 140, 90, 96, 88, 127,
	159, 160, 87, 184, 77, 170, 74, 78, 169, 125,
	157, 163, 119, 116, 73, 161, 117, 115, 107, 94,
	101, 134, 114, 135, 102, 122, 121, 123, 0, 0,
	0, 151, 167, 185, 80, 0, 147, 156, 175, 176,
	177, 178, 179, 180, 0, 0, 81, 97, 92, 133,
	124, 79, 103, 148, 106, 113, 139, 183, 130, 144,
	84, 166, 149, 325, 336, 331, 332, 329, 330, 328,
	327, 326, 338, 317, 318, 319, 320, 322, 0, 333,
	334, 321, 68, 75, 110, 0, 138, 95, 168, 129,
	0, 182, 89, 85, 67, 0, 0, 0, 0, 0,
	0, 0, 91, 0, 0, 0, 0, 0, 109, 324,
	111, 0, 0, 150, 120, 0, 0, 0, 0, 0,
	315, 316, 0, 0, 0, 0, 0, 0, 0, 0,
	55, 0, 0, 282, 303, 302, 305, 306, 307, 308,
	0, 0, 82, 304, 309, 310, 311, 0, 0, 0,
	0, 296, 0, 323, 0, 0, 0, 93, 128, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 293, 294, 0, 0, 0,
	0, 337, 0, 295, 0, 0, 0, 0, 0, 290,
	291, 292, 297, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 98, 0, 0, 0, 0, 172, 0, 0,
	335, 0, 136, 0, 153, 100, 108, 69, 76, 0,
	99, 126, 141, 145, 0, 0, 0, 86, 0, 143,
	131, 165, 0, 132, 142, 112, 158, 137, 0, 173,
	174, 155, 171, 181, 70, 154, 164, 83, 146, 72,
	162, 152, 118, 104, 105, 71, 0, 140, 90, 96,
	88, 127, 159, 160, 87, 184, 77, 170, 74, 78,
	169, 125, 157, 163, 119, 116, 73, 161, 117, 115,
	107, 94, 101, 134, 114, 135, 102, 122, 121, 123,
	0, 0, 0, 151, 167, 185, 80, 0, 147, 156,
	175, 176, 177, 178, 179, 180, 0, 0, 81, 97,
	92, 133, 124, 79, 103, 148, 106, 113, 139, 183,
	130, 144, 84, 166, 149, 325, 336, 331, 332, 329,
	330, 328, 327, 326, 338, 317, 318, 319, 320, 322,
	0, 333, 334, 321, 68, 75, 110, 0, 138, 95,
	168, 129, 0, 182, 89, 85, 67, 0, 0, 0,
	0, 0, 0, 0, 91, 0, 0, 0, 0, 0,
	109, 0, 111, 0, 0, 150, 120, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 207, 0, 0, 0, 0,
	0, 0, 570, 0, 82, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 93,
	128, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 557, 556, 566, 567, 559, 560, 561,
	562, 563, 564, 565, 558, 0, 0, 0, 0, 0,
	568, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 98, 0, 0, 0, 0, 172,
	0, 0, 0, 0, 136, 0, 153, 100, 108, 69,
	76, 0, 99, 126, 141, 145, 0, 0, 0, 86,
	0, 143, 131, 165, 0, 132, 142, 112, 158, 137,
	0, 173, 174, 155, 171, 181, 70, 154, 164, 83,
	146, 72, 162, 152, 118, 104, 105, 71, 0, 140,
	90, 96, 88, 127, 159, 160, 87, 184, 77, 170,
	74, 78, 169, 125, 157, 163, 119, 116, 73, 161,
	117, 115, 107, 94, 101, 134, 114, 135, 102, 122,
	121, 123, 0, 0, 0, 151, 167, 185, 80, 0,
	147, 156, 175, 176, 177, 178, 179, 180, 0, 0,
	81, 97, 92, 133, 124, 79, 103, 148, 106, 113,
	139, 183, 130, 144, 84, 166, 149, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 129, 0, 182, 89,
	85, 67, 0, 0, 541, 0, 68, 75, 110, 91,
	138, 95, 168, 0, 569, 109, 0, 111, 0, 0,
	150, 120, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	207, 0, 543, 0, 0, 0, 0, 0, 0, 82,
	0, 0, 0, 0, 0, 538, 537, 0, 0, 0,
	0, 0, 0, 0, 93, 128, 0, 0, 0, 0,
	0, 0, 0, 539, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 98,
	0, 0, 0, 0, 172, 0, 0, 0, 0, 136,
	0, 153, 100, 108, 69, 76, 0, 99, 126, 141,
	145, 0, 0, 0, 86, 0, 143, 131, 165, 0,
	132, 142, 112, 158, 137, 0, 173, 174, 155, 171,
	181, 70, 154, 164, 83, 146, 72, 162, 152, 118,
	104, 105, 71, 0, 140, 90, 96, 88, 127, 159,
	160, 87, 184, 77, 170, 74, 78, 169, 125, 157,
	163, 119, 116, 73, 161, 117, 115, 107, 94, 101,
	134, 114, 135, 102, 122, 121, 123, 0, 0, 0,
	151, 167, 185, 80, 0, 147, 156, 175, 176, 177,
	178, 179, 180, 0, 0, 81, 97, 92, 133, 124,
	79, 103, 148, 106, 113, 139, 183, 130, 144, 84,
	166, 149, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 129, 0, 182, 89, 85, 67, 0, 0, 0,
	0, 68, 75, 110, 91, 138, 95, 168, 0, 0,
	109, 0, 111, 0, 0, 150, 120, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 207, 0, 0, 0, 0,
	0, 0, 0, 0, 82, 0, 0, 0, 0, 0,
	201, 0, 0, 0, 0, 0, 0, 0, 0, 93,
	128, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 98, 203, 204, 0, 0, 200,
	0, 0, 0, 205, 136, 0, 153, 100, 108, 69,
	76, 0, 99, 126, 141, 145, 0, 0, 0, 86,
	0, 143, 131, 165, 0, 132, 142, 112, 158, 137,
	0, 173, 174, 155, 171, 181, 70, 154, 164, 83,
	146, 72, 162, 152, 118, 104, 105, 71, 0, 140,
	90, 96, 88, 127, 159, 160, 87, 184, 77, 170,
	74, 78, 169, 125, 157, 163, 119, 116, 73, 161,
	117, 115, 107, 94, 101, 134, 114, 135, 102, 122,
	121, 123, 0, 0, 0, 151, 167, 185, 80, 0,
	147, 156, 175, 176, 177, 178, 179, 180, 0, 0,
	81, 97, 92, 133, 124, 79, 103, 148, 106, 113,
	139, 183, 130, 144, 84, 166, 149, 0, 202, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 25, 0, 0, 0, 0, 68, 75, 110, 0,
	138, 95, 168, 129, 0, 182, 89, 85, 67, 0,
	0, 0, 0, 0, 0, 0, 91, 0, 0, 0,
	0, 0, 109, 0, 111, 0, 0, 150, 120, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 55, 0, 0, 207, 0, 0,
	0, 0, 0, 0, 0, 0, 82, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 93, 128, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 98, 0, 0, 0,
	0, 172, 0, 0, 0, 0, 136, 0, 153, 100,
	108, 69, 76, 0, 99, 126, 141, 145, 0, 0,
	0, 86, 0, 143, 131, 165, 0, 132, 142, 112,
	158, 137, 0, 173, 174, 155, 171, 181, 70, 154,
	164, 83, 146, 72, 162, 152, 118, 104, 105, 71,
	0, 140, 90, 96, 88, 127, 159, 160, 87, 184,
	77, 170, 74, 78, 169, 125, 157, 163, 119, 116,
	73, 161, 117, 115, 107, 94, 101, 134, 114, 135,
	102, 122, 121, 123, 0, 0, 0, 151, 167, 185,
	80, 0, 147, 156, 175, 176, 177, 178, 179, 180,
	0, 0, 81, 97, 92, 133, 124, 79, 103, 148,
	106, 113, 139, 183, 130, 144, 84, 166, 149, 0,
	25, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 129, 0, 182, 89, 85, 67, 68, 75,
	110, 23, 138, 95, 168, 91, 0, 0, 0, 0,
	0, 109, 0, 111, 0, 0, 150, 120, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 55, 0, 0, 640, 0, 0, 0,
	0, 0, 0, 0, 0, 82, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	93, 128, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 98, 0, 0, 0, 0,
	172, 0, 0, 0, 0, 136, 0, 153, 100, 108,
	69, 76, 0, 99, 126, 141, 145, 0, 0, 0,
	86, 0, 143, 131, 165, 0, 132, 142, 112, 158,
	137, 0, 173, 174, 155, 171, 181, 70, 154, 164,
	83, 146, 72, 162, 152, 118, 104, 105, 71, 0,
	140, 90, 96, 88, 127, 159, 160, 87, 184, 77,
	170, 74, 78, 169, 125, 157, 163, 119, 116, 73,
	161, 117, 115, 107, 94, 101, 134, 114, 135, 102,
	122, 121, 123, 0, 0, 0, 151, 167, 185, 80,
	0, 147, 156, 175, 176, 177, 178, 179, 180, 0,
	0, 81, 97, 92, 133, 124, 79, 103, 148, 106,
	113, 139, 183, 130, 144, 84, 166, 149, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 68, 75, 110,
	23, 138, 95, 168, 129, 0, 182, 89, 85, 67,
	0, 0, 886, 0, 0, 0, 0, 91, 0, 0,
	0, 0, 0, 109, 0, 111, 0, 0, 150, 120,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 65, 0,
	64, 0, 0, 0, 0, 0, 0, 82, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 93, 128, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 98, 0, 0,
	0, 0, 172, 0, 0, 0, 0, 136, 0, 153,
	100, 108, 69, 76, 0, 99, 126, 141, 145, 0,
	0, 0, 86, 0, 143, 131, 165, 0, 132, 142,
	112, 158, 137, 0, 173, 174, 155, 171, 181, 70,
	154, 164, 83, 146, 72, 162, 152, 118, 104, 105,
	71, 0, 140, 90, 96, 88, 127, 159, 160, 87,
	184, 77, 170, 74, 78, 169, 125, 157, 163, 119,
	116, 73, 161, 117, 115, 107, 94, 101, 134, 114,
	135, 102, 122, 121, 123, 0, 0, 0, 151, 167,
	185, 80, 0, 147, 156, 175, 176, 177, 178, 179,
	180, 0, 0, 81, 97, 92, 133, 124, 79, 103,
	148, 106, 113, 139, 183, 130, 144, 84, 166, 149,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 129,
	0, 182, 89, 85, 67, 0, 0, 886, 0, 68,
	75, 110, 91, 138, 95, 168, 0, 0, 109, 0,
	111, 0, 0, 150, 120, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 65, 0, 64, 0, 0, 0, 0,
	0, 0, 82, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 93, 128, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 98, 0, 0, 0, 0, 172, 0, 0,
	0, 0, 136, 0, 153, 100, 108, 69, 76, 0,
	99, 126, 141, 145, 0, 0, 0, 86, 0, 143,
	131, 165, 0, 884, 142, 112, 158, 137, 0, 173,
	174, 155, 171, 181, 70, 154, 164, 83, 146, 72,
	162, 152, 118, 104, 105, 71, 0, 140, 90, 96,
	88, 127, 159, 160, 87, 184, 77, 170, 74, 78,
	169, 125, 157, 163, 119, 116, 73, 161, 117, 115,
	107, 94, 101, 134, 114, 135, 102, 122, 121, 123,
	0, 0, 0, 151, 167, 185, 80, 0, 147, 156,
	175, 176, 177, 178, 179, 180, 0, 0, 81, 97,
	92, 133, 124, 79, 103, 148, 106, 113, 139, 183,
	130, 144, 84, 166, 149, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 129, 0, 182, 89, 85, 67,
	0, 0, 0, 0, 68, 75, 110, 91, 138, 95,
	168, 0, 0, 109, 0, 111, 0, 0, 150, 120,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 207, 0,
	0, 771, 0, 0, 772, 0, 0, 82, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 93, 128, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 98, 0, 0,
	0, 0, 172, 0, 0, 0, 0, 136, 0, 153,
	100, 108, 69, 76, 0, 99, 126, 141, 145, 0,
	0, 0, 86, 0, 143, 131, 165, 0, 132, 142,
	112, 158, 137, 0, 173, 174, 155, 171, 181, 70,
	154, 164, 83, 146, 72, 162, 152, 118, 104, 105,
	71, 0, 140, 90, 96, 88, 127, 159, 160, 87,
	184, 77, 170, 74, 78, 169, 125, 157, 163, 119,
	116, 73, 161, 117, 115, 107, 94, 101, 134, 114,
	135, 102, 122, 121, 123, 0, 0, 0, 151, 167,
	185, 80, 0, 147, 156, 175, 176, 177, 178, 179,
	180, 0, 0, 81, 97, 92, 133, 124, 79, 103,
	148, 106, 113, 139, 183, 130, 144, 84, 166, 149,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 129, 0, 182, 89, 85, 67, 68,
	75, 110, 0, 138, 95, 168, 91, 0, 662, 0,
	0, 0, 109, 0, 111, 0, 0, 150, 120, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 207, 0, 661,
	0, 0, 0, 0, 0, 0, 82, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 93, 128, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 98, 0, 0, 0,
	0, 172, 0, 0, 0, 0, 136, 0, 153, 100,
	108, 69, 76, 0, 99, 126, 141, 145, 0, 0,
	0, 86, 0, 143, 131, 165, 0, 132, 142, 112,
	158, 137, 0, 173, 174, 155, 171, 181, 70, 154,
	164, 83, 146, 72, 162, 152, 118, 104, 105, 71,
	0, 140, 90, 96, 88, 127, 159, 160, 87, 184,
	77, 170, 74, 78, 169, 125, 157, 163, 119, 116,
	73, 161, 117, 115, 107, 94, 101, 134, 114, 135,
	102, 122, 121, 123, 0, 0, 0, 151, 167, 185,
	80, 0, 147, 156, 175, 176, 177, 178, 179, 180,
	0, 0, 81, 97, 92, 133, 124, 79, 103, 148,
	106, 113, 139, 183, 130, 144, 84, 166, 149, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 129, 0,
	182, 89, 85, 67, 0, 0, 0, 0, 68, 75,
	110, 91, 138, 95, 168, 0, 0, 109, 0, 111,
	0, 0, 150, 120, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 55,
	0, 0, 640, 0, 0, 0, 0, 0, 0, 0,
	0, 82, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 93, 128, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 98, 0, 0, 0, 0, 172, 0, 0, 0,
	0, 136, 0, 153, 100, 108, 69, 76, 0, 99,
	126, 141, 145, 0, 0, 0, 86, 0, 143, 131,
	165, 0, 132, 142, 112, 158, 137, 0, 173, 174,
	155, 171, 181, 70, 154, 164, 83, 146, 72, 162,
	152, 118, 104, 105, 71, 0, 140, 90, 96, 88,
	127, 159, 160, 87, 184, 77, 170, 74, 78, 169,
	125, 157, 163, 119, 116, 73, 161, 117, 115, 107,
	94, 101, 134, 114, 135, 102, 122, 121, 123, 0,
	0, 0, 151, 167, 185, 80, 0, 147, 156, 175,
	176, 177, 178, 179, 180, 0, 0, 81, 97, 92,
	133, 124, 79, 103, 148, 106, 113, 139, 183, 130,
	144, 84, 166, 149, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 129, 0, 182, 89, 85, 67, 0,
	0, 0, 0, 68, 75, 110, 91, 138, 95, 168,
	0, 0, 109, 0, 111, 0, 0, 150, 120, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 65, 0, 64,
	0, 0, 0, 0, 0, 0, 82, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 93, 128, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 98, 0, 0, 0,
	0, 172, 0, 0, 0, 0, 136, 0, 153, 100,
	108, 69, 76, 0, 99, 126, 141, 145, 0, 0,
	0, 86, 0, 143, 131, 165, 0, 132, 142, 112,
	158, 137, 0, 173, 174, 155, 171, 181, 70, 154,
	164, 83, 146, 72, 162, 152, 118, 104, 105, 71,
	0, 140, 90, 96, 88, 127, 159, 160, 87, 184,
	77, 170, 74, 78, 169, 125, 157, 163, 119, 116,
	73, 161, 117, 115, 107, 94, 101, 134, 114, 135,
	102, 122, 121, 123, 0, 0, 0, 151, 167, 185,
	80, 0, 147, 156, 175, 176, 177, 178, 179, 180,
	0, 0, 81, 97, 92, 133, 124, 79, 103, 148,
	106, 113, 139, 183, 130, 144, 84, 166, 149, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 129, 0,
	182, 89, 85, 67, 0, 0, 0, 0, 68, 75,
	110, 91, 138, 95, 168, 0, 0, 109, 0, 111,
	0, 0, 150, 120, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 207, 0, 543, 0, 0, 0, 0, 0,
	0, 82, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 93, 128, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 98, 0, 0, 0, 0, 172, 0, 0, 0,
	0, 136, 0, 153, 100, 108, 69, 76, 0, 99,
	126, 141, 145, 0, 0, 0, 86, 0, 143, 131,
	165, 0, 132, 142, 112, 158, 137, 0, 173, 174,
	155, 171, 181, 70, 154, 164, 83, 146, 72, 162,
	152, 118, 104, 105, 71, 0, 140, 90, 96, 88,
	127, 159, 160, 87, 184, 77, 170, 74, 78, 169,
	125, 157, 163, 119, 116, 73, 161, 117, 115, 107,
	94, 101, 134, 114, 135, 102, 122, 121, 123, 0,
	0, 0, 151, 167, 185, 80, 0, 147, 156, 175,
	176, 177, 178, 179, 180, 0, 0, 81, 97, 92,
	133, 124, 79, 103, 148, 106, 113, 139, 183, 130,
	144, 84, 166, 149, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 68, 75, 110, 0, 138, 95, 168,
	129, 0, 182, 89, 85, 67, 0, 0, 0, 0,
	0, 0, 631, 91, 0, 0, 0, 0, 0, 109,
	0, 111, 0, 0, 150, 120, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 65, 0, 0, 0, 0, 0,
	0, 0, 0, 82, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 93, 128,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 98, 0, 0, 0, 0, 172, 0,
	0, 0, 0, 136, 0, 153, 100, 108, 69, 76,
	0, 99, 126, 141, 145, 0, 0, 0, 86, 0,
	143, 131, 165, 0, 132, 142, 112, 158, 137, 0,
	173, 174, 155, 171, 181, 70, 154, 164, 83, 146,
	72, 162, 152, 118, 104, 105, 71, 0, 140, 90,
	96, 88, 127, 159, 160, 87, 184, 77, 170, 74,
	78, 169, 125, 157, 163, 119, 116, 73, 161, 117,
	115, 107, 94, 101, 134, 114, 135, 102, 122, 121,
	123, 0, 0, 0, 151, 167, 185, 80, 0, 147,
	156, 175, 176, 177, 178, 179, 180, 0, 0, 81,
	97, 92, 133, 124, 79, 103, 148, 106, 113, 139,
	183, 130, 144, 84, 166, 149, 0, 0, 341, 0,
	0, 0, 0, 0, 0, 129, 0, 182, 89, 85,
	67, 0, 0, 0, 0, 68, 75, 110, 91, 138,
	95, 168, 0, 0, 109, 0, 111, 0, 0, 150,
	120, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 65,
	0, 0, 0, 0, 0, 0, 0, 0, 82, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 93, 128, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 98, 0,
	0, 0, 0, 172, 0, 0, 0, 0, 136, 0,
	153, 100, 108, 69, 76, 0, 99, 126, 141, 145,
	0, 0, 0, 86, 0, 143, 131, 165, 0, 132,
	142, 112, 158, 137, 0, 173, 174, 155, 171, 181,
	70, 154, 164, 83, 146, 72, 162, 152, 118, 104,
	105, 71, 0, 140, 90, 96, 88, 127, 159, 160,
	87, 184, 77, 170, 74, 78, 169, 125, 157, 163,
	119, 116, 73, 161, 117, 115, 107, 94, 101, 134,
	114, 135, 102, 122, 121, 123, 0, 0, 0, 151,
	167, 185, 80, 0, 147, 156, 175, 176, 177, 178,
	179, 180, 0, 0, 81, 97, 92, 133, 124, 79,
	103, 148, 106, 113, 139, 183, 130, 144, 84, 166,
	149, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	129, 0, 182, 89, 85, 67, 0, 0, 0, 0,
	68, 75, 110, 91, 138, 95, 168, 0, 0, 109,
	0, 111, 0, 0, 150, 120, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 65, 0, 0, 0, 0, 0,
	0, 0, 0, 82, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 93, 128,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 98, 0, 219, 0, 0, 172, 0,
	0, 0, 0, 136, 0, 153, 100, 108, 69, 76,
	0, 99, 126, 141, 145, 0, 0, 0, 86, 0,
	143, 131, 165, 0, 132, 142, 112, 158, 137, 0,
	173, 174, 155, 171, 181, 70, 154, 164, 83, 146,
	72, 162, 152, 118, 104, 105, 71, 0, 140, 90,
	96, 88, 127, 159, 160, 87, 184, 77, 170, 74,
	78, 169, 125, 157, 163, 119, 116, 73, 161, 117,
	115, 107, 94, 101, 134, 114, 135, 102, 122, 121,
	123, 0, 0, 0, 151, 167, 185, 80, 0, 147,
	156, 175, 176, 177, 178, 179, 180, 0, 0, 81,
	97, 92, 133, 124, 79, 103, 148, 106, 113, 139,
	183, 130, 144, 84, 166, 149, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 129, 0, 182, 89, 85,
	67, 0, 0, 0, 0, 68, 75, 110, 91, 138,
	95, 168, 0, 0, 109, 0, 111, 0, 0, 150,
	120, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 207,
	0, 0, 0, 0, 0, 0, 0, 0, 82, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 93, 128, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 98, 0,
	0, 0, 0, 172, 0, 0, 0, 0, 136, 0,
	153, 100, 108, 69, 76, 0, 99, 126, 141, 145,
	0, 0, 0, 86, 0, 143, 131, 165, 0, 132,
	142, 112, 158, 137, 0, 173, 174, 155, 171, 181,
	70, 154, 164, 83, 146, 72, 162, 152, 118, 104,
	105, 71, 0, 140, 90, 96, 88, 127, 159, 160,
	87, 184, 77, 170, 74, 78, 169, 125, 157, 163,
	119, 116, 73, 161, 117, 115, 107, 94, 101, 134,
	114, 135, 102, 122, 121, 123, 0, 0, 0, 151,
	167, 185, 80, 0, 147, 156, 175, 176, 177, 178,
	179, 180, 0, 0, 81, 97, 92, 133, 124, 79,
	103, 148, 106, 113, 139, 183, 130, 144, 84, 166,
	149, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	129, 0, 182, 89, 85, 67, 0, 0, 0, 0,
	68, 75, 110, 91, 138, 95, 168, 0, 0, 109,
	0, 111, 0, 0, 150, 120, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 65, 0, 0, 0, 0, 0,
	0, 0, 0, 82, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 93, 128,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 98, 0, 0, 0, 0, 172, 0,
	0, 0, 0, 136, 0, 153, 100, 108, 69, 76,
	0, 99, 126, 141, 145, 0, 0, 0, 86, 0,
	143, 131, 165, 0, 132, 142, 112, 158, 137, 0,
	173, 174, 155, 171, 181, 70, 154, 164, 83, 146,
	72, 162, 152, 118, 104, 105, 71, 0, 140, 90,
	96, 88, 127, 159, 160, 87, 184, 77, 170, 74,
	78, 169, 125, 157, 163, 119, 116, 73, 161, 117,
	115, 107, 94, 101, 134, 114, 135, 102, 122, 121,
	123, 0, 0, 0, 151, 167, 185, 80, 0, 147,
	156, 175, 176, 177, 178, 179, 180, 0, 0, 81,
	97, 92, 133, 124, 79, 103, 148, 106, 113, 139,
	183, 130, 144, 84, 166, 149, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 129, 0, 182, 89, 85,
	67, 0, 0, 0, 0, 68, 75, 110, 91, 138,
	95, 168, 0, 0, 109, 0, 111, 0, 0, 150,
	120, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 282,
	0, 0, 0, 0, 0, 0, 0, 0, 82, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 93, 128, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 98, 0,
	0, 0, 0, 172, 0, 0, 0, 0, 136, 0,
	153, 100, 108, 69, 76, 0, 99, 126, 141, 145,
	0, 0, 0, 86, 0, 143, 131, 165, 0, 132,
	142, 112, 158, 137, 0, 173, 174, 155, 171, 181,
	70, 154, 164, 83, 146, 72, 162, 152, 118, 104,
	105, 71, 0, 140, 90, 96, 88, 127, 159, 160,
	87, 184, 77, 170, 74, 78, 169, 125, 157, 163,
	119, 116, 73, 161, 117, 115, 107, 94, 101, 134,
	114, 135, 102, 122, 121, 123, 0, 0, 0, 151,
	167, 185, 80, 0, 147, 156, 175, 176, 177, 178,
	179, 180, 0, 0, 81, 97, 92, 133, 124, 79,
	103, 148, 106, 113, 139, 183, 130, 144, 84, 166,
	149, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	129, 0, 182, 89, 85, 67, 0, 0, 0, 0,
	68, 75, 110, 91, 138, 95, 168, 0, 0, 109,
	0, 111, 0, 0, 150, 120, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 1023, 0, 0, 0, 0, 0,
	0, 0, 0, 82, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 93, 128,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 98, 0, 0, 0, 0, 172, 0,
	0, 0, 0, 136, 0, 153, 100, 108, 69, 76,
	0, 99, 126, 141, 145, 0, 0, 0, 86, 0,
	143, 131, 165, 0, 132, 142, 112, 158, 137, 0,
	173, 174, 155, 171, 181, 70, 154, 164, 83, 146,
	72, 162, 152, 118, 104, 105, 71, 0, 140, 90,
	96, 88, 127, 159, 160, 87, 184, 77, 170, 74,
	78, 169, 125, 157, 163, 119, 116, 73, 161, 117,
	115, 107, 94, 101, 134, 114, 135, 102, 122, 121,
	123, 0, 0, 0, 151, 167, 185, 80, 0, 147,
	156, 175, 176, 177, 178, 179, 180, 0, 0, 81,
	97, 92, 133, 124, 79, 103, 148, 106, 113, 139,
	183, 130, 144, 84, 166, 149, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 68, 75, 110, 0, 138,
	95, 168,
}

var yyPact = [...]int{
	1855, -1000, -189, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, 996, 12225, 1051, -1000, -1000, -1000, -1000, -1000,
	-1000, 407, 10223, 53, 215, 83, 13222, 213, 2095, 13712,
	-1000, 38, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -26,
	-57, -1000, 88, -1000, -1000, -1000, -1000, -1000, 989, 993,
	774, -1000, 969, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, 831, 966, 888, -1000,
	7899, 154, 154, 12977, 6326, -1000, -1000, 389, 13712, 199,
	13712, -153, 145, 145, 145, -1000, -1000, -1000, -1000, 210,
	13712, 346, -1000, 13712, 140, 671, 140, 140, 140, 13712,
	-1000, 294, 13712, 644, 3851, 226, 3851, 3851, -1000, 3851,
	3851, -1000, 3851, 91, 3851, -30, 1007, -1000, -1000, -1000,
	-1000, 19, -1000, 3851, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, 553, 957, 8685,
	8685, 88, 12225, 776, 996, -1000, 88, -1000, -1000, -1000,
	939, -1000, -1000, 476, 1017, -1000, 9978, 282, -1000, 8685,
	26, 776, -1000, -1000, 776, -1000, -1000, 245, -1000, -1000,
	9471, 9471, 9471, 9471, 9471, 9471, 9471, 9471, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, 776, -1000, 7113, 776, 776, 776, 776, 776,
	776, 776, 776, 8685, 776, 776, 776, 776, 776, 776,
	776, 776, 776, 776, 776, 776, 776, 776, 776, 12732,
	11980, 13712, 755, 707, -1000, -1000, 280, 769, 6051, -97,
	-1000, -1000, -1000, 400, 11735, -1000, -1000, -1000, 918, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, 688, 13712, -1000, 2383,
	-1000, 641, 3851, 173, 635, 429, 631, 13712, 13712, 3851,
	78, 103, 203, 13712, 772, 171, 13712, 961, 852, 13712,
	605, 591, -1000, 5776, -1000, 3851, -1000, -1000, -1000, 3851,
	3851, 3851, 13712, 3851, 3851, -1000, -1000, -1000, -1000, -1000,
	3851, 3851, -1000, 1016, 437, -1000, -1000, -1000, -1000, 8685,
	-1000, 850, -1000, -1000, -1000, -1000, -1000, -1000, 1046, 347,
	487, 276, 770, -1000, 481, -1000, -1000, 88, 989, 553,
	888, 11486, 830, -1000, -1000, 13712, -1000, 8685, 8685, 444,
	-1000, 12470, -1000, -1000, 4676, 367, 9471, 457, 363, 9471,
	9471, 9471, 9471, 9471, 9471, 9471, 9471, 9471, 9471, 9471,
	9471, 9471, 9471, 9471, 9471, 9471, 9471, 9471, 505, 9471,
	2940, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, 579,
	-1000, 88, 833, 833, 29, 29, 29, 29, 29, 29,
	29, 9733, 7375, 553, 686, 372, 7113, 7899, 7899, 8685,
	8685, 8423, 8161, 7899, 974, 424, 372, 13957, -1000, -1000,
	9209, -1000, -1000, -1000, -1000, -1000, 553, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, 13467, 13467, 7899, 7899, 7899, 7899,
	106, 13712, -1000, 758, 1132, -1000, -1000, -1000, 963, 10734,
	776, 11241, 106, 723, 11980, 13712, -1000, -1000, 11980, 13712,
	4401, 5501, 769, -97, 745, -1000, -91, -52, 6850, 241,
	-1000, -1000, -1000, -1000, 3576, 450, 701, 455, -19, -1000,
	-1000, -1000, 787, -1000, 787, 787, 787, 787, 14, 14,
	14, 14, -1000, -1000, -1000, -1000, -1000, 816, 815, -1000,
	787, 787, 787, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, 814, 814, 814, 808, 808, 822, -1000, 13712, 3851,
	960, 3851, -1000, 1872, -1000, 13467, 13467, 13712, 13712, 233,
	13712, 13712, 767, -1000, 13712, 3851, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	13712, 445, 13712, 13712, 372, 13712, -1000, 896, 8685, 8685,
	5226, 8685, -1000, -1000, -1000, 553, 957, -1000, 974, 994,
	-1000, 909, 907, 7899, -1000, -1000, 367, 377, -1000, -1000,
	535, -1000, -1000, -1000, -1000, 275, 776, -1000, 1487, -1000,
	-1000, -1000, -1000, 457, 9471, 9471, 9471, 1720, 1487, 1487,
	1487, 1487, 1487, 2061, 935, 1916, 29, 325, 325, 34,
	34, 34, 34, 34, 752, 752, -1000, -1000, -1000, 75,
	-1000, -1000, -1000, 2940, 14202, 553, -1000, -1000, -1000, 553,
	7899, 762, -1000, -1000, 8685, -1000, 553, 677, 677, 479,
	524, 373, 1015, 677, 341, 1009, 677, 677, 7899, 421,
	-1000, 8685, 553, -1000, 274, -1000, 148, 759, 754, 677,
	553, 677, 677, 115, 776, -1000, 13957, 11980, 864, 11980,
	11980, 11980, -1000, -1000, -1000, 874, 866, 894, 13712, -1000,
	680, 10734, 13467, 227, 776, -1000, 12225, 1006, 11980, 738,
	-1000, 738, -1000, 273, -1000, -1000, 745, -97, -60, -1000,
	-1000, -1000, -1000, 372, -1000, 515, 740, 3301, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, 793, 577, -1000, 951, 279,
	285, 575, 950, -1000, -1000, -1000, 922, -1000, 438, -21,
	-1000, -1000, 510, 14, 14, -1000, -1000, 241, 917, 241,
	241, 241, 539, 539, -1000, -1000, -1000, -1000, 508, -1000,
	-1000, -1000, 507, -1000, 846, 13467, 3851, -1000, -1000, -1000,
	-1000, 1304, 1304, 319, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, 105, 820, -1000, -1000, -1000,
	66, 58, 159, -1000, 3851, -1000, 437, -1000, 536, 8685,
	-1000, -1000, -1000, 893, 372, 372, 263, -1000, -1000, -1000,
	13712, -1000, -1000, -1000, -1000, 757, -1000, -1000, -1000, 4126,
	7899, -1000, 1720, 1487, 1534, -1000, 9471, 9471, -1000, -192,
	-195, -1000, 737, -197, -199, -1000, -1000, 677, 7899, 372,
	-1000, -1000, -1000, 2940, 505, 2940, 9471, 9471, -1000, 9471,
	9471, -1000, -165, 748, 412, -1000, 8685, 436, -1000, 5226,
	-1000, 9471, 9471, -1000, -1000, -1000, -1000, 836, 13957, 776,
	-1000, 10485, 13467, 749, -1000, 399, 1132, 11980, -1000, 878,
	877, 835, 1000, -1000, -1000, 867, -1000, 865, -1000, -1000,
	-1000, -1000, 553, 733, -1000, 344, -1000, 198, 181, 177,
	13467, -1000, 996, 8685, 738, -1000, -1000, 315, -1000, -1000,
	-134, -82, -1000, -1000, -1000, 3576, -1000, 3576, 13467, 124,
	-1000, 575, 575, -1000, -1000, -1000, 791, 828, 9471, -1000,
	-1000, -1000, 603, 241, 241, -1000, 361, -1000, -1000, -1000,
	653, -1000, 650, 731, 640, 13712, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, 13712, -1000, -1000, -1000, -1000, -1000, 13467, -172,
	556, 13467, 13467, 13712, -1000, 445, -1000, 372, -1000, 4951,
	-1000, 1006, 11980, -1000, -1000, 553, -1000, 9471, 1487, 1487,
	-1000, -1000, 14202, 2940, 2940, -1000, -1000, 553, 553, 553,
	1656, 1559, 1462, 1399, 776, -160, -1000, 372, 8685, -1000,
	270, 218, -1000, 953, 695, 722, -1000, -1000, 7637, 553,
	602, 260, 600, -1000, 996, 13957, 8685, 807, -1000, -1000,
	-1000, 8685, -1000, 8685, 790, -1000, -1000, 963, 13467, 6588,
	776, 776, 776, 600, 989, 372, -1000, -1000, -1000, -1000,
	3301, -1000, 596, -1000, 787, -1000, -1000, -1000, 13467, -15,
	1044, 1487, -1000, -1000, -1000, -1000, -1000, 14, 530, 14,
	496, -1000, 495, 3851, -1000, -1000, -1000, -1000, 956, -1000,
	4951, -1000, -1000, 779, -1000, -1000, -1000, 1004, 730, -1000,
	1487, -1000, -1000, -1000, -1000, -1000, -1000, 9471, 9471, 9471,
	9471, 9471, 553, 525, 372, 9471, 9471, 948, -1000, 776,
	-1000, -1000, 162, 13467, 13467, -1000, 13467, 989, -1000, 372,
	-1000, -1000, 372, 372, 13467, 13712, -1000, -1000, 372, 776,
	776, 13467, 13467, 13467, 10996, -1000, 222, 13467, -1000, 587,
	-1000, 249, -1000, 43, 241, -1000, 241, 597, 562, -1000,
	776, 727, -1000, 395, 13467, 1001, 992, 148, 148, 148,
	148, 56, -1000, -1000, 148, 148, 1042, -1000, 776, -1000,
	88, 228, -1000, -1000, -1000, 583, -1000, 11980, 13957, 573,
	573, 573, 227, 222, -1000, 543, 387, 498, -1000, 121,
	13467, 474, 937, -1000, 933, -1000, -1000, -1000, -1000, -1000,
	104, 4951, 3576, 568, 76, 8685, 8685, -1000, -1000, -1000,
	-1000, 553, 57, -176, -1000, -1000, 13957, 722, 553, 13467,
	-1000, 912, 553, -1000, -1000, -1000, -1000, -1000, -1000, 489,
	-1000, -1000, 13712, -1000, -1000, 451, -1000, -1000, 561, -1000,
	13467, -1000, -1000, 820, -1000, 819, 372, 713, -1000, 885,
	-169, -185, 712, -1000, -1000, -1000, -1000, -1000, 777, -1000,
	-1000, 104, 904, -172, 709, -1000, 480, 979, 8685, -1000,
	882, -1000, 13467, -1000, 100, -1000, 819, -1000, 402, 8685,
	372, -174, 552, 59, -1000, 1018, 372, -181, 827, 776,
	-1000, -186, 809, -1000, 1014, 8947, -1000, -1000, 1020, 236,
	236, 148, 553, -1000, -1000, -1000, 129, 497, -1000, -1000,
	-1000, -1000, -1000, -1000,
}

var yyPgo = [...]int{
	0, 1309, 99, 232, 1308, 1306, 1296, 142, 1295, 1293,
	1292, 1289, 1288, 1287, 1286, 1280, 1278, 1277, 1273, 1272,
	1270, 1269, 1268, 1266, 1265, 1262, 1261, 1260, 1259, 210,
	1258, 1257, 1252, 72, 1248, 73, 1236, 1234, 46, 172,
	70, 38, 1022, 1230, 60, 23, 44, 1227, 1226, 1222,
	21, 1215, 22, 1214, 1213, 76, 1212, 1209, 56, 1208,
	1207, 75, 1206, 66, 1205, 12, 47, 1204, 1202, 1201,
	1200, 71, 1405, 1199, 1198, 15, 1196, 1195, 97, 1194,
	57, 9, 13, 39, 20, 1193, 59, 28, 1192, 52,
	1191, 1190, 1188, 1178, 41, 1177, 58, 1176, 19, 61,
	1174, 1172, 3, 1171, 11, 69, 34, 26, 7, 77,
	85, 1169, 29, 65, 55, 1168, 1167, 260, 1166, 1160,
	48, 1157, 1152, 31, 222, 242, 1151, 1150, 1149, 1147,
	79, 0, 888, 50, 74, 1143, 1141, 1138, 1885, 51,
	17, 18, 25, 35, 294, 45, 1137, 1135, 62, 27,
	1133, 1131, 1130, 1128, 1126, 1124, 1120, 1117, 1114, 67,
	1110, 1107, 1105, 43, 30, 1104, 1103, 64, 63, 1102,
	1097, 1095, 53, 68, 1094, 1093, 54, 32, 1092, 1090,
	1088, 1086, 1084, 42, 14, 1082, 16, 1079, 10, 1078,
	1077, 36, 1074, 5, 1072, 8, 1071, 4, 1070, 6,
	49, 1, 1069, 2, 1065, 1064, 353, 437, 78, 1061,
	80,
}

var yyR1 = [...]int{
	0, 204, 205, 205, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 2, 2, 2, 2, 6, 6,
	8, 8, 7, 9, 3, 4, 5, 5, 10, 10,
	32, 32, 11, 12, 12, 12, 12, 208, 208, 55,
	55, 56, 56, 105, 105, 13, 13, 13, 13, 110,
	110, 114, 114, 114, 115, 115, 115, 115, 146, 146,
	14, 14, 14, 14, 14, 14, 14, 199, 199, 198,
	197, 197, 196, 196, 195, 20, 179, 181, 181, 180,
	180, 180, 180, 173, 152, 152, 152, 152, 155, 155,
	153, 153, 153, 153, 153, 153, 153, 153, 153, 154,
	154, 154, 154, 154, 156, 156, 156, 156, 156, 157,
	157, 157, 157, 157, 157, 157, 157, 157, 157, 157,
	157, 157, 157, 157, 158, 158, 158, 158, 158, 158,
	158, 158, 172, 172, 159, 159, 167, 167, 168, 168,
	168, 165, 165, 166, 166, 169, 169, 169, 161, 161,
	162, 162, 170, 170, 163, 163, 163, 164, 164, 164,
	171, 171, 171, 171, 171, 160, 160, 174, 174, 189,
	189, 188, 188, 188, 178, 178, 185, 185, 185, 185,
	185, 176, 176, 177, 177, 187, 187, 186, 175, 175,
	191, 191, 191, 191, 202, 203, 201, 201, 201, 201,
	201, 182, 182, 182, 183, 183, 183, 184, 184, 184,
	15, 15, 15, 15, 15, 15, 15, 15, 15, 15,
	15, 15, 15, 200, 200, 200, 200, 200, 200, 200,
	200, 200, 200, 200, 194, 192, 192, 193, 193, 16,
	21, 21, 17, 17, 17, 17, 17, 18, 18, 22,
	23, 23, 23, 23, 23, 23, 23, 23, 23, 23,
	23, 23, 23, 23, 23, 23, 23, 23, 23, 23,
	23, 23, 23, 23, 23, 23, 23, 23, 23, 23,
	23, 121, 121, 119, 119, 122, 122, 120, 120, 120,
	123, 123, 123, 147, 147, 147, 24, 24, 26, 26,
	27, 28, 25, 25, 25, 25, 25, 25, 25, 19,
	209, 29, 30, 30, 31, 31, 31, 35, 35, 35,
	33, 33, 34, 34, 40, 40, 39, 39, 41, 41,
	41, 41, 135, 135, 135, 134, 134, 43, 43, 44,
	44, 45, 45, 46, 46, 46, 46, 46, 64, 64,
	49, 49, 48, 48, 50, 51, 51, 51, 104, 104,
	106, 106, 47, 47, 47, 47, 52, 52, 53, 53,
	54, 54, 142, 142, 141, 141, 141, 190, 190, 190,
	140, 140, 57, 57, 57, 59, 58, 58, 58, 58,
	60, 60, 62, 62, 61, 61, 63, 65, 65, 65,
	65, 66, 66, 42, 42, 42, 42, 42, 42, 42,
	118, 118, 68, 68, 67, 67, 67, 67, 67, 67,
	67, 67, 67, 67, 67, 67, 67, 67, 79, 79,
	79, 79, 79, 79, 69, 69, 69, 69, 69, 69,
	69, 38, 38, 80, 80, 80, 86, 81, 81, 72,
	72, 72, 72, 72, 72, 72, 72, 72, 72, 72,
	72, 72, 72, 72, 72, 72, 72, 72, 72, 72,
	72, 72, 72, 72, 72, 72, 72, 72, 72, 72,
	72, 72, 72, 76, 76, 76, 74, 74, 74, 74,
	74, 74, 74, 74, 74, 74, 74, 74, 74, 75,
	75, 75, 75, 75, 75, 75, 75, 75, 75, 75,
	75, 75, 75, 75, 75, 210, 210, 78, 77, 77,
	77, 77, 77, 77, 36, 36, 36, 36, 36, 145,
	145, 148, 148, 148, 148, 150, 150, 149, 149, 151,
	151, 90, 90, 37, 37, 88, 88, 89, 91, 91,
	87, 87, 87, 71, 71, 71, 71, 71, 71, 71,
	71, 73, 73, 73, 92, 92, 93, 93, 94, 94,
	95, 95, 96, 97, 97, 97, 98, 98, 98, 98,
	99, 99, 99, 100, 100, 101, 101, 102, 102, 102,
	102, 70, 70, 70, 70, 70, 70, 103, 103, 103,
	103, 107, 107, 82, 82, 84, 84, 83, 85, 108,
	108, 112, 109, 109, 113, 113, 113, 113, 111, 111,
	111, 137, 137, 137, 116, 116, 124, 124, 125, 125,
	117, 117, 126, 126, 126, 126, 126, 126, 126, 126,
	126, 126, 127, 127, 127, 128, 128, 129, 129, 129,
	136, 136, 132, 132, 133, 133, 138, 138, 139, 139,
	130, 130, 130, 130, 130, 130, 130, 130, 130, 130,
	130, 130, 130, 130, 130, 130, 130, 130, 130, 130,
	130, 130, 130, 130, 130, 130, 130, 130, 130, 130,
	130, 130, 130, 130, 130, 130, 130, 130, 130, 130,
	130, 130, 130, 130, 130, 130, 130, 130, 130, 130,
	130, 130, 130, 130, 130, 130, 130, 130, 130, 130,
	130, 130, 130, 130, 130, 130, 130, 130, 130, 130,
	130, 130, 130, 130, 130, 130, 130, 130, 130, 130,
	130, 130, 130, 130, 130, 130, 130, 130, 130, 130,
	130, 130, 130, 130, 130, 130, 131, 131, 131, 131,
	131, 131, 131, 131, 131, 131, 131, 131, 131, 131,
	131, 131, 131, 131, 131, 131, 131, 131, 131, 131,
	131, 131, 131, 131, 131, 131, 131, 131, 131, 131,
	131, 131, 131, 131, 131, 131, 131, 131, 131, 131,
	131, 131, 131, 131, 131, 131, 131, 131, 131, 131,
	131, 131, 131, 131, 131, 131, 131, 131, 131, 131,
	131, 131, 131, 131, 131, 131, 131, 131, 131, 131,
	131, 131, 131, 131, 131, 131, 131, 131, 131, 131,
	131, 131, 131, 131, 131, 131, 131, 131, 131, 131,
	131, 131, 131, 131, 131, 131, 131, 131, 131, 131,
	131, 131, 131, 131, 131, 131, 131, 131, 131, 131,
	131, 131, 131, 131, 131, 206, 207, 143, 144, 144,
	144,
}

var yyR2 = [...]int{
	0, 2, 0, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 0, 4, 4, 6, 7, 0, 1,
	1, 3, 5, 5, 11, 3, 1, 3, 7, 8,
	1, 1, 9, 8, 7, 6, 6, 1, 1, 1,
	3, 1, 3, 0, 4, 3, 4, 5, 4, 1,
	3, 3, 2, 2, 2, 2, 2, 1, 1, 1,
	2, 2, 8, 4, 6, 5, 5, 0, 2, 1,
	0, 2, 1, 3, 3, 4, 4, 2, 4, 1,
	3, 3, 3, 8, 3, 1, 1, 1, 2, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 2,
	2, 2, 2, 2, 1, 2, 2, 2, 1, 4,
	4, 2, 2, 3, 3, 3, 3, 1, 1, 1,
	1, 1, 6, 6, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 3, 0, 3, 0, 5, 0, 3,
	5, 0, 1, 0, 1, 0, 1, 2, 0, 2,
	0, 3, 0, 1, 0, 3, 3, 0, 2, 2,
	0, 2, 1, 2, 1, 0, 2, 5, 4, 1,
	2, 2, 3, 2, 0, 1, 2, 3, 3, 2,
	2, 1, 1, 0, 1, 1, 3, 2, 3, 1,
	10, 11, 11, 12, 3, 3, 1, 1, 2, 2,
	2, 0, 1, 3, 1, 2, 3, 1, 1, 1,
	6, 7, 7, 7, 7, 4, 5, 7, 5, 5,
	5, 12, 7, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 7, 1, 3, 8, 8, 3,
	3, 5, 4, 6, 5, 4, 4, 3, 2, 3,
	4, 3, 4, 4, 4, 4, 4, 4, 3, 3,
	2, 3, 3, 2, 3, 4, 3, 7, 5, 4,
	2, 4, 2, 2, 2, 2, 3, 3, 5, 2,
	3, 1, 1, 0, 1, 1, 1, 0, 2, 2,
	0, 2, 2, 0, 1, 1, 2, 1, 1, 2,
	1, 1, 2, 2, 2, 2, 2, 3, 3, 2,
	0, 2, 0, 2, 1, 2, 2, 0, 1, 1,
	0, 1, 0, 1, 0, 1, 1, 3, 1, 2,
	3, 5, 0, 1, 2, 1, 1, 0, 2, 1,
	3, 1, 1, 1, 3, 1, 3, 6, 3, 7,
	0, 1, 1, 3, 3, 1, 4, 4, 1, 3,
	1, 3, 5, 4, 4, 3, 2, 4, 0, 1,
	0, 2, 0, 1, 0, 1, 2, 0, 1, 1,
	1, 1, 1, 2, 2, 1, 2, 3, 2, 3,
	2, 2, 2, 1, 1, 3, 3, 0, 5, 5,
	5, 0, 2, 1, 3, 3, 2, 3, 1, 2,
	0, 3, 1, 1, 3, 3, 4, 4, 5, 3,
	3, 3, 3, 3, 4, 5, 6, 2, 1, 2,
	1, 2, 1, 2, 1, 1, 1, 1, 1, 1,
	1, 0, 2, 1, 1, 1, 3, 1, 3, 1,
	1, 1, 1, 1, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 2,
	2, 2, 2, 2, 2, 2, 3, 1, 1, 1,
	1, 4, 3, 4, 5, 6, 4, 4, 6, 6,
	6, 8, 8, 8, 8, 9, 7, 5, 4, 2,
	2, 2, 2, 2, 2, 2, 2, 2, 2, 2,
	2, 2, 2, 8, 8, 0, 2, 3, 4, 4,
	4, 4, 4, 4, 0, 3, 4, 7, 3, 1,
	1, 1, 1, 3, 3, 0, 1, 1, 3, 3,
	3, 0, 1, 0, 2, 1, 2, 4, 0, 2,
	1, 3, 5, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 2, 2, 0, 3, 0, 2, 0, 3,
	1, 3, 2, 0, 1, 1, 0, 2, 4, 4,
	0, 2, 4, 0, 2, 1, 3, 2, 4, 3,
	2, 2, 1, 3, 5, 4, 6, 1, 3, 3,
	5, 0, 5, 1, 3, 1, 2, 3, 1, 1,
	3, 3, 1, 3, 3, 3, 3, 3, 1, 2,
	1, 1, 1, 1, 1, 1, 0, 2, 0, 3,
	0, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 0, 1, 1, 1, 1, 0, 1, 1,
	0, 2, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 0, 0, 1,
	1,
}

var yyChk = [...]int{
	-1000, -204, -1, -2, -9, -10, -11, -12, -13, -14,
	-15, -16, -17, -18, -22, -23, -24, -26, -27, -28,
	-25, -19, -3, 276, -4, 6, 7, -32, 9, 10,
	34, -20, 125, 126, 128, 127, 160, 129, 153, 55,
	173, 174, 176, 177, 29, 154, 155, 158, 159, 35,
	36, 131, -206, 8, 263, 59, -205, 280, -94, 15,
	-8, -7, -140, -138, 64, 62, -131, 23, 273, 146,
	173, 184, 178, 205, 197, 274, 147, 195, 198, 242,
	225, 237, 71, 176, 251, 22, 156, 193, 189, 21,
	187, 31, 239, 86, 210, 278, 188, 238, 131, 149,
	144, 211, 215, 243, 182, 183, 245, 209, 145, 37,
	275, 39, 164, 246, 213, 208, 204, 207, 181, 203,
	43, 217, 216, 218, 241, 200, 150, 190, 87, 18,
	249, 159, 162, 240, 212, 214, 141, 166, 277, 247,
	186, 151, 163, 158, 250, 152, 177, 227, 244, 253,
	42, 222, 180, 143, 174, 170, 228, 201, 165, 191,
	192, 206, 179, 202, 175, 160, 252, 223, 279, 199,
	196, 171, 136, 168, 169, 229, 230, 231, 232, 233,
	234, 172, 20, 248, 194, 224, -31, 5, -29, -209,
	-29, -29, -29, -29, -29, -179, -181, 59, 96, -129,
	136, 77, 255, 132, 133, 140, -132, 62, -131, -117,
	136, 232, 138, 133, 133, 135, 136, 255, 132, 133,
	-61, -138, 133, 118, 242, 125, 226, 227, 239, 135,
	37, 240, 166, -147, 133, -119, 225, 229, 230, 231,
	234, 232, 172, 62, 244, 243, 235, -138, 175, -143,
	-143, -143, -143, -143, 228, 228, -143, -2, -98, 17,
	16, -6, 60, 26, -5, -3, -206, 6, 24, 25,
	-35, 44, 45, -30, -41, 106, -42, -138, -67, 79,
	-72, 33, 62, -131, 27, -71, -68, -87, -85, -86,
	118, 119, 120, 104, 105, 112, 80, 121, -76, -74,
	-75, -77, 64, 63, 72, 65, 66, 67, 68, 73,
	74, 75, -132, -83, -206, 49, 50, 264, 265, 266,
	267, 272, 268, 82, 38, 254, 262, 261, 260, 258,
	259, 256, 257, 270, 271, 139, 255, 110, 263, -117,
	-117, 11, -55, -56, -61, -63, -138, -109, -146, 175,
	-113, 244, 243, -133, -111, -132, -130, 242, 198, 241,
	130, 78, 26, 28, 220, 81, 118, 16, 82, 117,
	264, 125, 53, 256, 257, 254, 266, 267, 255, 226,
	33, 10, 29, 154, 25, 108, 127, 85, 157, 27,
	155, 75, 19, 56, 11, 13, 14, 139, 138, 98,
	135, 51, 8, 121, 30, 95, 46, 32, 49, 96,
	17, 258, 259, 35, 272, 161, 110, 54, 40, 79,
	73, 76, 57, 77, 15, 52, 97, 128, 263, 50,
	132, 6, 269, 34, 153, 47, 133, 84, 270, 271,
	137, 167, 74, 5, 140, 36, 9, 55, 58, 260,
	261, 262, 38, 83, 12, 276, -180, 96, -173, 62,
	-61, 135, -61, 263, -125, 139, -125, -125, 133, -61,
	125, 127, 130, 57, -21, -61, -124, 139, 62, -124,
	-124, -124, -61, 122, -61, 62, -144, -206, -133, 255,
	62, 166, 133, 167, 136, -144, -144, -144, -144, -144,
	170, 171, -144, -122, -121, 237, 238, 228, 236, 12,
	228, 169, -144, -143, -143, -207, 61, -99, 19, 35,
	-42, -138, -95, -96, -42, -2, -7, -206, -94, -2,
	-29, 40, -33, 25, 70, 11, -135, 78, 77, 95,
	-134, 26, -132, 64, 122, -42, -69, 98, 79, 96,
	112, 114, 113, 115, 97, 81, 101, 100, 111, 104,
	105, 106, 107, 108, 109, 110, 102, 103, 117, 281,
	69, 88, 89, 90, 91, 92, 93, 94, -118, -206,
	-86, -206, 123, 124, -72, -72, -72, -72, -72, -72,
	-72, -72, -206, -2, -81, -42, -206, -206, -206, -206,
	-206, -206, -206, -206, -206, -90, -42, -206, -210, -78,
	-206, -210, -78, -210, -78, -210, -206, -210, -78, -210,
	-78, -210, -210, -78, -206, -206, -206, -206, -206, -206,
	-62, 30, -61, -44, -45, -46, -47, -64, -86, -206,
	62, -61, -61, -55, -208, 60, 11, 58, -208, 60,
	122, 60, -109, 175, -110, -114, 245, 247, 88, -137,
	-132, 64, 33, 34, 61, 60, -61, -152, -155, -157,
	-156, -158, -153, -154, 195, 196, 118, 199, 201, 202,
	203, 204, 205, 206, 207, 208, 209, 210, 34, 156,
	191, 192, 193, 194, 211, 212, 213, 214, 215, 216,
	217, 218, 178, 197, 274, 179, 180, 181, 182, 183,
	184, 186, 187, 188, 189, 190, 62, -144, 136, 62,
	79, 62, -61, -61, -144, 168, 168, 133, 133, -61,
	60, 137, -55, 27, 57, -61, 62, 62, -139, -138,
	-130, -144, -144, -144, -144, -61, -144, -144, -144, -144,
	11, -120, 11, 98, -42, 57, 9, 98, 60, 18,
	122, 60, -97, 28, 29, -2, -98, -207, -35, -73,
	-132, 65, 68, -34, 47, -61, -42, -42, -79, 73,
	79, 74, 75, -134, 106, -139, -133, -130, -72, -80,
	-83, -86, 69, 98, 96, 97, 81, -72, -72, -72,
	-72, -72, -72, -72, -72, -72, -72, -72, -72, -72,
	-72, -72, -72, -72, -72, -72, -145, 62, 64, -72,
	-148, 62, -131, 281, 283, 62, -71, -71, -132, -40,
	25, -39, -41, -207, 60, -207, -2, -39, -39, -42,
	-42, -87, 64, -39, -87, 64, -39, -39, -33, -88,
	-89, 83, -87, -132, -138, -207, -72, -132, -132, -39,
	-40, -39, -39, -105, 162, -61, 34, 60, -190, -59,
	-58, -60, 48, 7, 47, 49, 50, 54, -142, 26,
	-44, -206, -206, -141, 162, -140, 26, -105, 58, -44,
	-61, -44, -63, -138, 106, -113, -110, 60, 246, 248,
	249, 57, 76, -42, -164, 117, -182, -183, -184, -133,
	64, 65, -173, -174, -175, -185, 148, -191, 141, 143,
	140, -176, 149, 135, 32, 61, -169, 73, 79, -165,
	223, -159, 59, -159, -159, -159, -159, -163, 198, -163,
	-163, -163, 59, 59, -159, -159, -159, -167, 59, -167,
	-167, -168, 59, -168, -136, 58, -61, -144, 27, -144,
	-126, 130, 127, 128, -194, 126, 220, 198, 71, 33,
	15, 264, 162, 279, 62, 163, -132, -132, -61, -61,
	130, 127, -61, -61, -61, -144, -61, -123, 96, 12,
	-138, -138, -61, 42, -42, -42, -139, -96, -207, -99,
	-116, 19, 11, 38, 38, -39, 73, 74, 75, 122,
	-206, -80, -72, -72, -72, -38, 157, 78, 282, -148,
	-150, -149, -151, 62, -131, -207, -207, -39, 60, -42,
	-207, -207, -207, 60, 58, 26, 11, 11, -207, 11,
	11, -207, -207, -39, -91, -89, 85, -42, -207, 122,
	-207, 60, 60, -207, -207, -207, -207, -70, 34, 38,
	-2, -206, -206, -108, -112, -87, -45, -57, 46, 51,
	53, -46, -45, -46, 46, 52, 46, 52, 46, -58,
	-138, -207, -49, -48, -50, -132, -65, 55, 138, 56,
	-206, -140, -66, 12, -44, -66, -66, 122, -114, -115,
	250, 247, 253, 62, 64, 60, -184, 88, 59, 62,
	32, -176, -176, -177, 62, -177, 32, -161, 33, 73,
	-166, 224, 65, -163, -163, -164, 34, -164, -164, -164,
	-172, 64, -172, 65, 65, 57, -132, -144, -143, -200,
	142, 148, 149, 144, 62, 135, 32, 141, 143, 162,
	140, -200, -127, -128, 137, 26, 135, 32, 162, -199,
	58, 168, 168, 137, -144, -120, 64, -42, 43, 122,
	-61, -43, 11, 106, -133, -40, -38, 78, -72, -72,
	282, 284, 60, 285, 285, -207, -41, -148, -145, -148,
	-72, -72, -72, -72, 273, -94, 86, -42, 84, -133,
	-72, -72, -107, 57, -108, -82, -84, -83, -206, -2,
	-103, -132, -106, -132, -66, 60, 88, -46, 46, 46,
	-54, 57, -52, 57, 58, 46, 46, -207, 60, 99,
	135, 135, 135, -106, -94, -42, -66, 247, 251, 252,
	-183, -184, -187, -186, -132, -191, -177, -177, 59, -162,
	57, -72, 61, -164, -164, 62, 118, 61, 60, 61,
	60, 61, 60, -61, -143, -143, -61, -143, -132, -197,
	276, -198, 62, -132, -132, -61, -123, -66, -44, -207,
	-72, -149, -148, -148, -207, -207, -207, 19, 19, 19,
	19, -206, -37, 269, -42, 60, 60, 31, -107, 60,
	-207, -207, -207, 60, 122, -207, 60, -94, -112, -42,
	-53, -52, -42, -42, 59, -142, -50, -51, -42, 133,
	134, -206, -206, -206, -207, -98, 61, 60, -159, -104,
	-132, -170, 220, 9, -163, 64, -163, 65, 65, -144,
	30, -196, -195, -133, 59, -92, 13, -72, -72, -72,
	-72, -72, -207, 64, -72, -72, 32, -84, 38, -2,
	-206, -132, -132, -132, -98, -104, -138, -206, -206, -104,
	-104, -104, -141, -189, -188, 58, 145, 71, -186, 61,
	60, -171, 141, 32, 140, -75, -164, -164, 61, 61,
	-206, 60, 88, -104, -93, 14, 16, -207, -207, -207,
	-207, -36, 98, 276, -207, -207, 9, -82, -2, 122,
	61, -45, -87, -207, -207, -207, -65, -188, 62, -178,
	88, 64, 151, -132, -160, 71, 32, 32, -192, -193,
	162, -195, -184, 61, -100, 167, -42, -81, -207, 274,
	54, 277, -108, -207, -132, -207, -207, 65, -61, 64,
	-207, 60, -132, -199, -101, -102, 57, 23, 22, 43,
	275, 278, 59, -193, 38, -197, 60, 20, 86, 21,
	-42, 43, -104, 164, -102, 87, -42, 276, 61, 165,
	7, 277, -202, -203, 57, -206, 278, -203, 57, 10,
	9, -72, 161, -201, 152, 147, 150, 34, -201, -207,
	-207, 146, 33, 73,
}

var yyDef = [...]int{
	23, -2, 2, 4, 5, 6, 7, 8, 9, 10,
	11, 12, 13, 14, 15, 16, 17, 18, 19, 20,
	21, 22, 578, 0, 0, 320, 320, 320, 320, 320,
	320, 0, 657, 640, 0, 0, 0, 0, -2, 307,
	308, 0, 310, 311, 887, 887, 887, 887, 887, 0,
	0, 887, 0, 40, 41, 885, 1, 3, 586, 0,
	28, 30, 0, 390, 391, 666, 667, 766, 767, 768,
	769, 770, 771, 772, 773, 774, 775, 776, 777, 778,
	779, 780, 781, 782, 783, 784, 785, 786, 787, 788,
	789, 790, 791, 792, 793, 794, 795, 796, 797, 798,
	799, 800, 801, 802, 803, 804, 805, 806, 807, 808,
	809, 810, 811, 812, 813, 814, 815, 816, 817, 818,
	819, 820, 821, 822, 823, 824, 825, 826, 827, 828,
	829, 830, 831, 832, 833, 834, 835, 836, 837, 838,
	839, 840, 841, 842, 843, 844, 845, 846, 847, 848,
	849, 850, 851, 852, 853, 854, 855, 856, 857, 858,
	859, 860, 861, 862, 863, 864, 865, 866, 867, 868,
	869, 870, 871, 872, 873, 874, 875, 876, 877, 878,
	879, 880, 881, 882, 883, 884, 0, 324, 327, 322,
	0, 640, 640, 0, 0, 70, 71, 0, 0, 0,
	871, 0, 638, 638, 638, 658, 659, 662, 663, 0,
	0, 0, 641, 0, 636, 0, 636, 636, 636, 0,
	258, 404, 0, 0, 888, 0, 888, 888, 270, 888,
	888, 273, 888, 0, 888, 0, 280, 282, 283, 284,
	285, 0, 289, 888, 304, 305, 294, 306, 309, 312,
	313, 314, 315, 316, 887, 887, 319, 0, 590, 0,
	0, 0, 29, 0, 578, 36, 0, 320, 325, 326,
	330, 328, 329, 321, 0, 338, 342, 0, 413, 0,
	418, 420, -2, -2, 0, 459, 460, 461, 462, 463,
	0, 0, 0, 0, 0, 0, 0, 0, 487, 488,
	489, 490, 563, 564, 565, 566, 567, 568, 569, 570,
	422, 423, 560, 618, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 551, 0, 525, 525, 525, 525, 525,
	525, 525, 525, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 49, 51, 404, 55, 0, 863,
	622, -2, -2, 0, 0, 664, 665, -2, 777, -2,
	670, 671, 672, 673, 674, 675, 676, 677, 678, 679,
	680, 681, 682, 683, 684, 685, 686, 687, 688, 689,
	690, 691, 692, 693, 694, 695, 696, 697, 698, 699,
	700, 701, 702, 703, 704, 705, 706, 707, 708, 709,
	710, 711, 712, 713, 714, 715, 716, 717, 718, 719,
	720, 721, 722, 723, 724, 725, 726, 727, 728, 729,
	730, 731, 732, 733, 734, 735, 736, 737, 738, 739,
	740, 741, 742, 743, 744, 745, 746, 747, 748, 749,
	750, 751, 752, 753, 754, 755, 756, 757, 758, 759,
	760, 761, 762, 763, 764, 765, 0, 0, 89, 0,
	87, 0, 888, 0, 0, 0, 0, 0, 0, 888,
	0, 0, 0, 0, 249, 0, 0, 0, 0, 0,
	0, 0, 257, 0, 259, 888, 261, 889, 890, 888,
	888, 888, 0, 888, 888, 268, 269, 271, 272, 274,
	888, 888, 276, 0, 297, 295, 296, 291, 292, 0,
	286, 287, 290, 317, 318, 35, 886, 24, 0, 0,
	587, 0, 579, 580, 583, 25, 31, 0, 586, 0,
	327, 0, 332, 331, 323, 0, 339, 0, 0, 0,
	343, 0, 345, 346, 0, 416, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 444, 445, 446, 447, 448, 449, 450, 419, 0,
	437, 0, 0, 0, 479, 480, 481, 482, 483, 484,
	485, 0, 334, 0, 0, 457, 0, 0, 0, 0,
	0, 0, 0, 0, 330, 0, 552, 0, 509, 517,
	0, 510, 518, 511, 519, 512, 0, 513, 520, 514,
	521, 515, 516, 522, 0, 0, 0, 334, 0, 0,
	53, 0, 403, 0, -2, 351, 352, 353, -2, 0,
	666, 384, -2, 0, 0, 0, 47, 48, 0, 0,
	0, 0, 56, 863, 58, 59, 0, 0, 0, 167,
	631, 632, 633, 629, 211, 0, 0, 155, 151, 95,
	96, 97, 144, 99, 144, 144, 144, 144, 164, 164,
	164, 164, 127, 128, 129, 130, 131, 0, 0, 114,
	144, 144, 144, 118, 134, 135, 136, 137, 138, 139,
	140, 141, 100, 101, 102, 103, 104, 105, 106, 107,
	108, 146, 146, 146, 148, 148, 660, 73, 0, 888,
	0, 888, 85, 0, 225, 0, 0, 0, 0, 0,
	0, 0, 252, 637, 0, 888, 255, 256, 405, 668,
	669, 260, 262, 263, 264, 265, 266, 267, 275, 279,
	0, 300, 0, 0, 281, 0, 591, 0, 0, 0,
	0, 0, 582, 584, 585, 0, 590, 37, 330, 0,
	571, 0, 0, 0, 333, 33, 414, 415, 417, 438,
	0, 440, 442, 344, 340, 0, 561, -2, 424, 425,
	453, 454, 455, 0, 0, 0, 0, 451, 429, 430,
	431, 432, 433, 0, 464, 465, 466, 467, 468, 469,
	470, 471, 472, 473, 474, 475, 478, 539, 540, 0,
	492, 541, 542, 0, 545, 0, 476, 477, 486, 0,
	0, 335, 336, 456, 0, 617, 0, 0, 0, 0,
	0, 461, 563, 0, 461, 563, 0, 0, 0, 558,
	555, 0, 0, 560, 0, 526, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 402, 0, 0, 0, 0,
	0, 0, 388, 389, 395, 0, 0, 0, 0, 383,
	0, 0, 360, 407, 831, 385, 0, 411, 0, 411,
	50, 411, 52, 0, 406, 623, 57, 0, 0, 62,
	63, 624, 625, 626, 627, 0, 86, 212, 214, 217,
	218, 219, 90, 91, 92, 0, 0, 199, 0, 0,
	193, 193, 0, 191, 192, 88, 158, 156, 0, 153,
	152, 98, 0, 164, 164, 121, 122, 167, 0, 167,
	167, 167, 0, 0, 115, 116, 117, 109, 0, 110,
	111, 112, 0, 113, 0, 0, 888, 75, 639, 76,
	887, 0, 0, 652, 226, 642, 643, 644, 645, 646,
	647, 648, 649, 650, 651, 0, 77, 228, 230, 229,
	0, 0, 0, 250, 888, 254, 297, 278, 0, 0,
	298, 299, 288, 0, 588, 589, 0, 581, 32, 26,
	0, 634, 635, 572, 573, 347, 439, 441, 443, 0,
	334, 426, 451, 434, 0, 427, 0, 0, 491, 0,
	0, 546, 547, 0, 0, 421, 493, 0, 0, 458,
	-2, 496, 497, 0, 0, 0, 0, 0, 532, 0,
	0, 533, 0, 578, 0, 556, 0, 0, 508, 0,
	527, 0, 0, 528, 529, 530, 531, 611, 0, 0,
	602, 0, 0, 411, 619, 0, -2, 0, 392, 0,
	0, 380, 387, 375, 396, 0, 398, 0, 400, 401,
	354, 356, 0, 361, 362, 0, 358, 0, 0, 0,
	0, 386, 578, 0, 411, 45, 46, 0, 60, 61,
	0, 0, 67, 168, 169, 0, 215, 0, 0, 0,
	186, 193, 193, 189, 194, 190, 0, 160, 0, 157,
	94, 154, 0, 167, 167, 123, 0, 124, 125, 126,
	0, 142, 0, 0, 0, 0, 661, 74, 220, 887,
	233, 234, 235, 236, 237, 238, 239, 240, 241, 242,
	243, 887, 0, 887, 653, 654, 655, 656, 0, 80,
	0, 0, 0, 0, 253, 300, 301, 302, 592, 0,
	27, 411, 0, 341, 562, 0, 428, 0, 452, 435,
	543, 544, 0, 0, 0, 494, 337, 0, 0, 0,
	0, 0, 0, 0, 0, 553, 507, 559, 0, 561,
	0, 0, 38, 0, 611, 601, 613, 615, 0, 0,
	0, 607, 0, 370, 578, 0, 0, 378, 393, 394,
	373, 0, 374, 0, 0, 397, 399, 382, 0, 0,
	0, 0, 0, 0, 586, 412, 44, 64, 65, 66,
	213, 216, 0, 195, 144, 198, 187, 188, 0, 162,
	0, 159, 145, 119, 120, 165, 166, 164, 0, 164,
	0, 149, 0, 888, 221, 222, 223, 224, 0, 227,
	0, 78, 79, 0, 232, 251, 277, 574, 348, 495,
	436, 548, 549, 550, 498, 500, 499, 0, 0, 0,
	0, 0, 0, 0, 557, 0, 0, 0, 39, 0,
	616, -2, 0, 0, 0, 54, 0, 586, 620, 621,
	372, 379, 381, 376, 0, 0, 363, 364, 365, 0,
	0, 0, 0, 0, 384, 43, 178, 0, 197, 0,
	368, 170, 163, 0, 167, 143, 167, 0, 0, 72,
	0, 81, 82, 0, 0, 576, 0, 0, 0, 0,
	0, 534, 506, 554, 0, 0, 0, 614, 0, 605,
	0, 609, 608, 371, 42, 0, 357, 0, 0, 0,
	0, 0, 407, 177, 179, 0, 184, 0, 196, 0,
	0, 175, 0, 172, 174, 161, 132, 133, 147, 150,
	0, 0, 0, 0, 593, 0, 0, 501, 503, 502,
	504, 0, 0, 0, 523, 524, 0, 604, 0, 0,
	377, 387, 0, 408, 409, 410, 359, 180, 181, 0,
	185, 183, 0, 369, 93, 0, 171, 173, 0, 245,
	0, 83, 84, 77, 34, 0, 577, 575, 505, 0,
	0, 0, 612, -2, 610, 366, 367, 182, 0, 176,
	244, 0, 0, 80, 594, 595, 0, 0, 0, 535,
	0, 538, 0, 246, 0, 231, 0, 597, 0, 0,
	600, 536, 0, 0, 596, 0, 599, 0, 200, 0,
	598, 0, 201, 202, 0, 0, 537, 203, 0, 0,
	0, 0, 0, 204, 206, 207, 0, 0, 205, 247,
	248, 208, 209, 210,
}

var yyTok1 = [...]int{
	1, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 80, 3, 3, 3, 109, 101, 3,
	59, 61, 106, 104, 60, 105, 122, 107, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 285, 280,
	89, 88, 90, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 281, 3, 282, 111, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 283, 100, 284, 112,
}

var yyTok2 = [...]int{
	2, 3, 4, 5, 6, 7, 8, 9, 10, 11,
	12, 13, 14, 15, 16, 17, 18, 19, 20, 21,
	22, 23, 24, 25, 26, 27, 28, 29, 30, 31,
	32, 33, 34, 35, 36, 37, 38, 39, 40, 41,
	42, 43, 44, 45, 46, 47, 48, 49, 50, 51,
	52, 53, 54, 55, 56, 57, 58, 62, 63, 64,
	65, 66, 67, 68, 69, 70, 71, 72, 73, 74,
	75, 76, 77, 78, 79, 81, 82, 83, 84, 85,
	86, 87, 91, 92, 93, 94, 95, 96, 97, 98,
	99, 102, 103, 108, 110, 113, 114, 115, 116, 117,
	118, 119, 120, 121, 123, 124, 125, 126, 127, 128,
	129, 130, 131, 132, 133, 134, 135, 136, 137, 138,
	139, 140, 141, 142, 143, 144, 145, 146, 147, 148,
	149, 150, 151, 152, 153, 154, 155, 156, 157, 158,
	159, 160, 161, 162, 163, 164, 165, 166, 167, 168,
	169, 170, 171, 172, 173, 174, 175, 176, 177, 178,
	179, 180, 181, 182, 183, 184, 185, 186, 187, 188,
	189, 190, 191, 192, 193, 194, 195, 196, 197, 198,
	199, 200, 201, 202, 203, 204, 205, 206, 207, 208,
	209, 210, 211, 212, 213, 214, 215, 216, 217, 218,
	219, 220, 221, 222, 223, 224, 225, 226, 227, 228,
	229, 230, 231, 232, 233, 234, 235, 236, 237, 238,
	239, 240, 241, 242, 243, 244, 245, 246, 247, 248,
	249, 250, 251, 252, 253, 254, 255, 256, 257, 258,
	259, 260, 261, 262, 263, 264, 265, 266, 267, 268,
	269, 270, 271, 272, 273, 274,
}

var yyTok3 = [...]int{
	57600, 275, 57601, 276, 57602, 277, 57603, 278, 57604, 279,
	0,
}

var yyErrorMessages = [...]struct {
	state int
	token int
	msg   string
}{}

//line yaccpar:1

/*	parser for yacc output	*/

var (
	yyDebug        = 0
	yyErrorVerbose = false
)

type yyLexer interface {
	Lex(lval *yySymType) int
	Error(s string)
}

type yyParser interface {
	Parse(yyLexer) int
	Lookahead() int
}

type yyParserImpl struct {
	lval  yySymType
	stack [yyInitialStackSize]yySymType
	char  int
}

func (p *yyParserImpl) Lookahead() int {
	return p.char
}

func yyNewParser() yyParser {
	return &yyParserImpl{}
}

const yyFlag = -1000

func yyTokname(c int) string {
	if c >= 1 && c-1 < len(yyToknames) {
		if yyToknames[c-1] != "" {
			return yyToknames[c-1]
		}
	}
	return __yyfmt__.Sprintf("tok-%v", c)
}

func yyStatname(s int) string {
	if s >= 0 && s < len(yyStatenames) {
		if yyStatenames[s] != "" {
			return yyStatenames[s]
		}
	}
	return __yyfmt__.Sprintf("state-%v", s)
}

func yyErrorMessage(state, lookAhead int) string {
	const TOKSTART = 4

	if !yyErrorVerbose {
		return "syntax error"
	}

	for _, e := range yyErrorMessages {
		if e.state == state && e.token == lookAhead {
			return "syntax error: " + e.msg
		}
	}

	res := "syntax error: unexpected " + yyTokname(lookAhead)

	// To match Bison, suggest at most four expected tokens.
	expected := make([]int, 0, 4)

	// Look for shiftable tokens.
	base := yyPact[state]
	for tok := TOKSTART; tok-1 < len(yyToknames); tok++ {
		if n := base + tok; n >= 0 && n < yyLast && yyChk[yyAct[n]] == tok {
			if len(expected) == cap(expected) {
				return res
			}
			expected = append(expected, tok)
		}
	}

	if yyDef[state] == -2 {
		i := 0
		for yyExca[i] != -1 || yyExca[i+1] != state {
			i += 2
		}

		// Look for tokens that we accept or reduce.
		for i += 2; yyExca[i] >= 0; i += 2 {
			tok := yyExca[i]
			if tok < TOKSTART || yyExca[i+1] == 0 {
				continue
			}
			if len(expected) == cap(expected) {
				return res
			}
			expected = append(expected, tok)
		}

		// If the default action is to accept or reduce, give up.
		if yyExca[i+1] != 0 {
			return res
		}
	}

	for i, tok := range expected {
		if i == 0 {
			res += ", expecting "
		} else {
			res += " or "
		}
		res += yyTokname(tok)
	}
	return res
}

func yylex1(lex yyLexer, lval *yySymType) (char, token int) {
	token = 0
	char = lex.Lex(lval)
	if char <= 0 {
		token = yyTok1[0]
		goto out
	}
	if char < len(yyTok1) {
		token = yyTok1[char]
		goto out
	}
	if char >= yyPrivate {
		if char < yyPrivate+len(yyTok2) {
			token = yyTok2[char-yyPrivate]
			goto out
		}
	}
	for i := 0; i < len(yyTok3); i += 2 {
		token = yyTok3[i+0]
		if token == char {
			token = yyTok3[i+1]
			goto out
		}
	}

out:
	if token == 0 {
		token = yyTok2[1] /* unknown char */
	}
	if yyDebug >= 3 {
		__yyfmt__.Printf("lex %s(%d)\n", yyTokname(token), uint(char))
	}
	return char, token
}

func yyParse(yylex yyLexer) int {
	return yyNewParser().Parse(yylex)
}

func (yyrcvr *yyParserImpl) Parse(yylex yyLexer) int {
	var yyn int
	var yyVAL yySymType
	var yyDollar []yySymType
	_ = yyDollar // silence set and not used
	yyS := yyrcvr.stack[:]

	Nerrs := 0   /* number of errors */
	Errflag := 0 /* error recovery flag */
	yystate := 0
	yyrcvr.char = -1
	yytoken := -1 // yyrcvr.char translated into internal numbering
	defer func() {
		// Make sure we report no lookahead when not parsing.
		yystate = -1
		yyrcvr.char = -1
		yytoken = -1
	}()
	yyp := -1
	goto yystack

ret0:
	return 0

ret1:
	return 1

yystack:
	/* put a state and value onto the stack */
	if yyDebug >= 4 {
		__yyfmt__.Printf("char %v in %v\n", yyTokname(yytoken), yyStatname(yystate))
	}

	yyp++
	if yyp >= len(yyS) {
		nyys := make([]yySymType, len(yyS)*2)
		copy(nyys, yyS)
		yyS = nyys
	}
	yyS[yyp] = yyVAL
	yyS[yyp].yys = yystate

yynewstate:
	yyn = yyPact[yystate]
	if yyn <= yyFlag {
		goto yydefault /* simple state */
	}
	if yyrcvr.char < 0 {
		yyrcvr.char, yytoken = yylex1(yylex, &yyrcvr.lval)
	}
	yyn += yytoken
	if yyn < 0 || yyn >= yyLast {
		goto yydefault
	}
	yyn = yyAct[yyn]
	if yyChk[yyn] == yytoken { /* valid shift */
		yyrcvr.char = -1
		yytoken = -1
		yyVAL = yyrcvr.lval
		yystate = yyn
		if Errflag > 0 {
			Errflag--
		}
		goto yystack
	}

yydefault:
	/* default state action */
	yyn = yyDef[yystate]
	if yyn == -2 {
		if yyrcvr.char < 0 {
			yyrcvr.char, yytoken = yylex1(yylex, &yyrcvr.lval)
		}

		/* look through exception table */
		xi := 0
		for {
			if yyExca[xi+0] == -1 && yyExca[xi+1] == yystate {
				break
			}
			xi += 2
		}
		for xi += 2; ; xi += 2 {
			yyn = yyExca[xi+0]
			if yyn < 0 || yyn == yytoken {
				break
			}
		}
		yyn = yyExca[xi+1]
		if yyn < 0 {
			goto ret0
		}
	}
	if yyn == 0 {
		/* error ... attempt to resume parsing */
		switch Errflag {
		case 0: /* brand new error */
			yylex.Error(yyErrorMessage(yystate, yytoken))
			Nerrs++
			if yyDebug >= 1 {
				__yyfmt__.Printf("%s", yyStatname(yystate))
				__yyfmt__.Printf(" saw %s\n", yyTokname(yytoken))
			}
			fallthrough

		case 1, 2: /* incompletely recovered error ... try again */
			Errflag = 3

			/* find a state where "error" is a legal shift action */
			for yyp >= 0 {
				yyn = yyPact[yyS[yyp].yys] + yyErrCode
				if yyn >= 0 && yyn < yyLast {
					yystate = yyAct[yyn] /* simulate a shift of "error" */
					if yyChk[yystate] == yyErrCode {
						goto yystack
					}
				}

				/* the current p has no shift on "error", pop stack */
				if yyDebug >= 2 {
					__yyfmt__.Printf("error recovery pops state %d\n", yyS[yyp].yys)
				}
				yyp--
			}
			/* there is no state on the stack with an error shift ... abort */
			goto ret1

		case 3: /* no shift yet; clobber input char */
			if yyDebug >= 2 {
				__yyfmt__.Printf("error recovery discards %s\n", yyTokname(yytoken))
			}
			if yytoken == yyEofCode {
				goto ret1
			}
			yyrcvr.char = -1
			yytoken = -1
			goto yynewstate /* try again in the same state */
		}
	}

	/* reduction by production yyn */
	if yyDebug >= 2 {
		__yyfmt__.Printf("reduce %v in:\n\t%v\n", yyn, yyStatname(yystate))
	}

	yynt := yyn
	yypt := yyp
	_ = yypt // guard against "declared and not used"

	yyp -= yyR2[yyn]
	// yyp is now the index of $0. Perform the default action. Iff the
	// reduced production is ε, $1 is possibly out of range.
	if yyp+1 >= len(yyS) {
		nyys := make([]yySymType, len(yyS)*2)
		copy(nyys, yyS)
		yyS = nyys
	}
	yyVAL = yyS[yyp+1]

	/* consult goto table to find next state */
	yyn = yyR1[yyn]
	yyg := yyPgo[yyn]
	yyj := yyg + yyS[yyp].yys + 1

	if yyj >= yyLast {
		yystate = yyAct[yyg]
	} else {
		yystate = yyAct[yyj]
		if yyChk[yystate] != -yyn {
			yystate = yyAct[yyg]
		}
	}
	// dummy call; replaced with literal code
	switch yynt {

	case 1:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:344
		{
			setParseTree(yylex, yyDollar[1].statement)
		}
	case 2:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:349
		{
		}
	case 3:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:350
		{
		}
	case 4:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:354
		{
			yyVAL.statement = yyDollar[1].selStmt
		}
	case 23:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:376
		{
			setParseTree(yylex, nil)
		}
	case 24:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:382
		{
			sel := yyDollar[1].selStmt.(*Select)
			sel.OrderBy = yyDollar[2].orderBy
			sel.Limit = yyDollar[3].limit
			sel.Lock = yyDollar[4].str
			yyVAL.selStmt = sel
		}
	case 25:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:390
		{
			yyVAL.selStmt = &With{CommonTableExpressions: yyDollar[2].commonTableExpressions, Select: yyDollar[4].selStmt}
		}
	case 26:
		yyDollar = yyS[yypt-6 : yypt+1]
//line sql.y:394
		{
			yyVAL.selStmt = &Union{Type: yyDollar[2].str, Left: yyDollar[1].selStmt, Right: yyDollar[3].selStmt, OrderBy: yyDollar[4].orderBy, Limit: yyDollar[5].limit, Lock: yyDollar[6].str}
		}
	case 27:
		yyDollar = yyS[yypt-7 : yypt+1]
//line sql.y:398
		{
			yyVAL.selStmt = &Select{Comments: Comments(yyDollar[2].bytes2), Cache: yyDollar[3].str, SelectExprs: SelectExprs{Nextval{Expr: yyDollar[5].expr}}, From: TableExprs{&AliasedTableExpr{Expr: yyDollar[7].tableName}}}
		}
	case 28:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:403
		{
			yyVAL.bytes = nil
		}
	case 29:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:407
		{
			yyVAL.bytes = []byte(",")
		}
	case 30:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:414
		{
			yyVAL.commonTableExpressions = []*CommonTableExpression{yyDollar[1].commonTableExpression}
		}
	case 31:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:418
		{
			yyVAL.commonTableExpressions = append(yyDollar[1].commonTableExpressions, yyDollar[3].commonTableExpression)
		}
	case 32:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sql.y:424
		{
			yyVAL.commonTableExpression = &CommonTableExpression{Name: yyDollar[1].tableIdent, Select: yyDollar[4].selStmt}
		}
	case 33:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sql.y:431
		{
			yyVAL.statement = &Stream{Comments: Comments(yyDollar[2].bytes2), SelectExpr: yyDollar[3].selectExpr, Table: yyDollar[5].tableName}
		}
	case 34:
		yyDollar = yyS[yypt-11 : yypt+1]
//line sql.y:438
		{
			yyVAL.selStmt = &Select{Comments: Comments(yyDollar[2].bytes2), Cache: yyDollar[3].str, Distinct: yyDollar[4].str, Hints: yyDollar[5].str, SelectExprs: yyDollar[6].selectExprs, From: yyDollar[7].tableExprs, Where: NewWhere(WhereStr, yyDollar[8].expr), GroupBy: GroupBy(yyDollar[9].exprs), Having: NewWhere(HavingStr, yyDollar[10].expr), Trigger: yyDollar[11].triggers}
		}
	case 35:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:444
		{
			yyVAL.selStmt = &ParenSelect{Select: yyDollar[2].selStmt}
		}
	case 36:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:450
		{
			yyVAL.selStmt = yyDollar[1].selStmt
		}
	case 37:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:454
		{
			yyVAL.selStmt = &ParenSelect{Select: yyDollar[2].selStmt}
		}
	case 38:
		yyDollar = yyS[yypt-7 : yypt+1]
//line sql.y:461
		{
			// insert_data returns a *Insert pre-filled with Columns & Values
			ins := yyDollar[6].ins
			ins.Action = yyDollar[1].str
			ins.Comments = yyDollar[2].bytes2
			ins.Ignore = yyDollar[3].str
			ins.Table = yyDollar[4].tableName
			ins.Partitions = yyDollar[5].partitions
			ins.OnDup = OnDup(yyDollar[7].updateExprs)
			yyVAL.statement = ins
		}
	case 39:
		yyDollar = yyS[yypt-8 : yypt+1]
//line sql.y:473
		{
			cols := make(Columns, 0, len(yyDollar[7].updateExprs))
			vals := make(ValTuple, 0, len(yyDollar[8].updateExprs))
			for _, updateList := range yyDollar[7].updateExprs {
				cols = append(cols, updateList.Name.Name)
				vals = append(vals, updateList.Expr)
			}
			yyVAL.statement = &Insert{Action: yyDollar[1].str, Comments: Comments(yyDollar[2].bytes2), Ignore: yyDollar[3].str, Table: yyDollar[4].tableName, Partitions: yyDollar[5].partitions, Columns: cols, Rows: Values{vals}, OnDup: OnDup(yyDollar[8].updateExprs)}
		}
	case 40:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:485
		{
			yyVAL.str = InsertStr
		}
	case 41:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:489
		{
			yyVAL.str = ReplaceStr
		}
	case 42:
		yyDollar = yyS[yypt-9 : yypt+1]
//line sql.y:495
		{
			yyVAL.statement = &Update{Comments: Comments(yyDollar[2].bytes2), Ignore: yyDollar[3].str, TableExprs: yyDollar[4].tableExprs, Exprs: yyDollar[6].updateExprs, Where: NewWhere(WhereStr, yyDollar[7].expr), OrderBy: yyDollar[8].orderBy, Limit: yyDollar[9].limit}
		}
	case 43:
		yyDollar = yyS[yypt-8 : yypt+1]
//line sql.y:501
		{
			yyVAL.statement = &Delete{Comments: Comments(yyDollar[2].bytes2), TableExprs: TableExprs{&AliasedTableExpr{Expr: yyDollar[4].tableName}}, Partitions: yyDollar[5].partitions, Where: NewWhere(WhereStr, yyDollar[6].expr), OrderBy: yyDollar[7].orderBy, Limit: yyDollar[8].limit}
		}
	case 44:
		yyDollar = yyS[yypt-7 : yypt+1]
//line sql.y:505
		{
			yyVAL.statement = &Delete{Comments: Comments(yyDollar[2].bytes2), Targets: yyDollar[4].tableNames, TableExprs: yyDollar[6].tableExprs, Where: NewWhere(WhereStr, yyDollar[7].expr)}
		}
	case 45:
		yyDollar = yyS[yypt-6 : yypt+1]
//line sql.y:509
		{
			yyVAL.statement = &Delete{Comments: Comments(yyDollar[2].bytes2), Targets: yyDollar[3].tableNames, TableExprs: yyDollar[5].tableExprs, Where: NewWhere(WhereStr, yyDollar[6].expr)}
		}
	case 46:
		yyDollar = yyS[yypt-6 : yypt+1]
//line sql.y:513
		{
			yyVAL.statement = &Delete{Comments: Comments(yyDollar[2].bytes2), Targets: yyDollar[3].tableNames, TableExprs: yyDollar[5].tableExprs, Where: NewWhere(WhereStr, yyDollar[6].expr)}
		}
	case 47:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:518
		{
		}
	case 48:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:519
		{
		}
	case 49:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:523
		{
			yyVAL.tableNames = TableNames{yyDollar[1].tableName}
		}
	case 50:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:527
		{
			yyVAL.tableNames = append(yyVAL.tableNames, yyDollar[3].tableName)
		}
	case 51:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:533
		{
			yyVAL.tableNames = TableNames{yyDollar[1].tableName}
		}
	case 52:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:537
		{
			yyVAL.tableNames = append(yyVAL.tableNames, yyDollar[3].tableName)
		}
	case 53:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:542
		{
			yyVAL.partitions = nil
		}
	case 54:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:546
		{
			yyVAL.partitions = yyDollar[3].partitions
		}
	case 55:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:552
		{
			yyVAL.statement = &Set{Comments: Comments(yyDollar[2].bytes2), Exprs: yyDollar[3].setExprs}
		}
	case 56:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:556
		{
			yyVAL.statement = &Set{Comments: Comments(yyDollar[2].bytes2), Scope: yyDollar[3].str, Exprs: yyDollar[4].setExprs}
		}
	case 57:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sql.y:560
		{
			yyVAL.statement = &Set{Comments: Comments(yyDollar[2].bytes2), Scope: yyDollar[3].str, Exprs: yyDollar[5].setExprs}
		}
	case 58:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:564
		{
			yyVAL.statement = &Set{Comments: Comments(yyDollar[2].bytes2), Exprs: yyDollar[4].setExprs}
		}
	case 59:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:570
		{
			yyVAL.setExprs = SetExprs{yyDollar[1].setExpr}
		}
	case 60:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:574
		{
			yyVAL.setExprs = append(yyVAL.setExprs, yyDollar[3].setExpr)
		}
	case 61:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:580
		{
			yyVAL.setExpr = &SetExpr{Name: NewColIdent(TransactionStr), Expr: NewStrVal([]byte(yyDollar[3].str))}
		}
	case 62:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:584
		{
			yyVAL.setExpr = &SetExpr{Name: NewColIdent(TransactionStr), Expr: NewStrVal([]byte(TxReadWrite))}
		}
	case 63:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:588
		{
			yyVAL.setExpr = &SetExpr{Name: NewColIdent(TransactionStr), Expr: NewStrVal([]byte(TxReadOnly))}
		}
	case 64:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:594
		{
			yyVAL.str = IsolationLevelRepeatableRead
		}
	case 65:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:598
		{
			yyVAL.str = IsolationLevelReadCommitted
		}
	case 66:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:602
		{
			yyVAL.str = IsolationLevelReadUncommitted
		}
	case 67:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:606
		{
			yyVAL.str = IsolationLevelSerializable
		}
	case 68:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:612
		{
			yyVAL.str = SessionStr
		}
	case 69:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:616
		{
			yyVAL.str = GlobalStr
		}
	case 70:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:622
		{
			yyDollar[1].ddl.TableSpec = yyDollar[2].TableSpec
			yyVAL.statement = yyDollar[1].ddl
		}
	case 71:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:627
		{
			// Create table [name] like [name]
			yyDollar[1].ddl.OptLike = yyDollar[2].optLike
			yyVAL.statement = yyDollar[1].ddl
		}
	case 72:
		yyDollar = yyS[yypt-8 : yypt+1]
//line sql.y:633
		{
			// Change this to an alter statement
			yyVAL.statement = &DDL{Action: AlterStr, Table: yyDollar[7].tableName}
		}
	case 73:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:638
		{
			yyVAL.statement = &DDL{Action: CreateStr, Table: yyDollar[3].tableName.ToViewName()}
		}
	case 74:
		yyDollar = yyS[yypt-6 : yypt+1]
//line sql.y:642
		{
			yyVAL.statement = &DDL{Action: CreateStr, Table: yyDollar[5].tableName.ToViewName()}
		}
	case 75:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sql.y:646
		{
			yyVAL.statement = &DBDDL{Action: CreateStr, DBName: string(yyDollar[4].bytes)}
		}
	case 76:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sql.y:650
		{
			yyVAL.statement = &DBDDL{Action: CreateStr, DBName: string(yyDollar[4].bytes)}
		}
	case 77:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:655
		{
			yyVAL.colIdent = NewColIdent("")
		}
	case 78:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:659
		{
			yyVAL.colIdent = yyDollar[2].colIdent
		}
	case 79:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:665
		{
			yyVAL.colIdent = NewColIdent(string(yyDollar[1].bytes))
		}
	case 80:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:670
		{
			var v []VindexParam
			yyVAL.vindexParams = v
		}
	case 81:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:675
		{
			yyVAL.vindexParams = yyDollar[2].vindexParams
		}
	case 82:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:681
		{
			yyVAL.vindexParams = make([]VindexParam, 0, 4)
			yyVAL.vindexParams = append(yyVAL.vindexParams, yyDollar[1].vindexParam)
		}
	case 83:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:686
		{
			yyVAL.vindexParams = append(yyVAL.vindexParams, yyDollar[3].vindexParam)
		}
	case 84:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:692
		{
			yyVAL.vindexParam = VindexParam{Key: yyDollar[1].colIdent, Val: yyDollar[3].str}
		}
	case 85:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:698
		{
			yyVAL.ddl = &DDL{Action: CreateStr, Table: yyDollar[4].tableName}
			setDDL(yylex, yyVAL.ddl)
		}
	case 86:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:705
		{
			yyVAL.TableSpec = yyDollar[2].TableSpec
			yyVAL.TableSpec.Options = yyDollar[4].str
		}
	case 87:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:712
		{
			yyVAL.optLike = &OptLike{LikeTable: yyDollar[2].tableName}
		}
	case 88:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:716
		{
			yyVAL.optLike = &OptLike{LikeTable: yyDollar[3].tableName}
		}
	case 89:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:722
		{
			yyVAL.TableSpec = &TableSpec{}
			yyVAL.TableSpec.AddColumn(yyDollar[1].columnDefinition)
		}
	case 90:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:727
		{
			yyVAL.TableSpec.AddColumn(yyDollar[3].columnDefinition)
		}
	case 91:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:731
		{
			yyVAL.TableSpec.AddIndex(yyDollar[3].indexDefinition)
		}
	case 92:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:735
		{
			yyVAL.TableSpec.AddConstraint(yyDollar[3].constraintDefinition)
		}
	case 93:
		yyDollar = yyS[yypt-8 : yypt+1]
//line sql.y:741
		{
			yyDollar[2].columnType.NotNull = yyDollar[3].boolVal
			yyDollar[2].columnType.Default = yyDollar[4].optVal
			yyDollar[2].columnType.OnUpdate = yyDollar[5].optVal
			yyDollar[2].columnType.Autoincrement = yyDollar[6].boolVal
			yyDollar[2].columnType.KeyOpt = yyDollar[7].colKeyOpt
			yyDollar[2].columnType.Comment = yyDollar[8].sqlVal
			yyVAL.columnDefinition = &ColumnDefinition{Name: NewColIdent(string(yyDollar[1].bytes)), Type: yyDollar[2].columnType}
		}
	case 94:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:752
		{
			yyVAL.columnType = yyDollar[1].columnType
			yyVAL.columnType.Unsigned = yyDollar[2].boolVal
			yyVAL.columnType.Zerofill = yyDollar[3].boolVal
		}
	case 98:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:763
		{
			yyVAL.columnType = yyDollar[1].columnType
			yyVAL.columnType.Length = yyDollar[2].sqlVal
		}
	case 99:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:768
		{
			yyVAL.columnType = yyDollar[1].columnType
		}
	case 100:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:774
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 101:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:778
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 102:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:782
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 103:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:786
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 104:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:790
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 105:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:794
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 106:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:798
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 107:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:802
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 108:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:806
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 109:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:812
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
			yyVAL.columnType.Length = yyDollar[2].LengthScaleOption.Length
			yyVAL.columnType.Scale = yyDollar[2].LengthScaleOption.Scale
		}
	case 110:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:818
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
			yyVAL.columnType.Length = yyDollar[2].LengthScaleOption.Length
			yyVAL.columnType.Scale = yyDollar[2].LengthScaleOption.Scale
		}
	case 111:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:824
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
			yyVAL.columnType.Length = yyDollar[2].LengthScaleOption.Length
			yyVAL.columnType.Scale = yyDollar[2].LengthScaleOption.Scale
		}
	case 112:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:830
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
			yyVAL.columnType.Length = yyDollar[2].LengthScaleOption.Length
			yyVAL.columnType.Scale = yyDollar[2].LengthScaleOption.Scale
		}
	case 113:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:836
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
			yyVAL.columnType.Length = yyDollar[2].LengthScaleOption.Length
			yyVAL.columnType.Scale = yyDollar[2].LengthScaleOption.Scale
		}
	case 114:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:844
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 115:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:848
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].sqlVal}
		}
	case 116:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:852
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].sqlVal}
		}
	case 117:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:856
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].sqlVal}
		}
	case 118:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:860
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 119:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:866
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].sqlVal, Charset: yyDollar[3].str, Collate: yyDollar[4].str}
		}
	case 120:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:870
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].sqlVal, Charset: yyDollar[3].str, Collate: yyDollar[4].str}
		}
	case 121:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:874
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].sqlVal}
		}
	case 122:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:878
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].sqlVal}
		}
	case 123:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:882
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), Charset: yyDollar[2].str, Collate: yyDollar[3].str}
		}
	case 124:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:886
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), Charset: yyDollar[2].str, Collate: yyDollar[3].str}
		}
	case 125:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:890
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), Charset: yyDollar[2].str, Collate: yyDollar[3].str}
		}
	case 126:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:894
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), Charset: yyDollar[2].str, Collate: yyDollar[3].str}
		}
	case 127:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:898
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 128:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:902
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 129:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:906
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 130:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:910
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 131:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:914
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 132:
		yyDollar = yyS[yypt-6 : yypt+1]
//line sql.y:918
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), EnumValues: yyDollar[3].strs, Charset: yyDollar[5].str, Collate: yyDollar[6].str}
		}
	case 133:
		yyDollar = yyS[yypt-6 : yypt+1]
//line sql.y:923
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), EnumValues: yyDollar[3].strs, Charset: yyDollar[5].str, Collate: yyDollar[6].str}
		}
	case 134:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:929
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 135:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:933
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 136:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:937
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 137:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:941
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 138:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:945
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 139:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:949
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 140:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:953
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 141:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:957
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 142:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:963
		{
			yyVAL.strs = make([]string, 0, 4)
			yyVAL.strs = append(yyVAL.strs, "'"+string(yyDollar[1].bytes)+"'")
		}
	case 143:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:968
		{
			yyVAL.strs = append(yyDollar[1].strs, "'"+string(yyDollar[3].bytes)+"'")
		}
	case 144:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:973
		{
			yyVAL.sqlVal = nil
		}
	case 145:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:977
		{
			yyVAL.sqlVal = NewIntVal(yyDollar[2].bytes)
		}
	case 146:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:982
		{
			yyVAL.LengthScaleOption = LengthScaleOption{}
		}
	case 147:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sql.y:986
		{
			yyVAL.LengthScaleOption = LengthScaleOption{
				Length: NewIntVal(yyDollar[2].bytes),
				Scale:  NewIntVal(yyDollar[4].bytes),
			}
		}
	case 148:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:994
		{
			yyVAL.LengthScaleOption = LengthScaleOption{}
		}
	case 149:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:998
		{
			yyVAL.LengthScaleOption = LengthScaleOption{
				Length: NewIntVal(yyDollar[2].bytes),
			}
		}
	case 150:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sql.y:1004
		{
			yyVAL.LengthScaleOption = LengthScaleOption{
				Length: NewIntVal(yyDollar[2].bytes),
				Scale:  NewIntVal(yyDollar[4].bytes),
			}
		}
	case 151:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:1012
		{
			yyVAL.boolVal = BoolVal(false)
		}
	case 152:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1016
		{
			yyVAL.boolVal = BoolVal(true)
		}
	case 153:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:1021
		{
			yyVAL.boolVal = BoolVal(false)
		}
	case 154:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1025
		{
			yyVAL.boolVal = BoolVal(true)
		}
	case 155:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:1031
		{
			yyVAL.boolVal = BoolVal(false)
		}
	case 156:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1035
		{
			yyVAL.boolVal = BoolVal(false)
		}
	case 157:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1039
		{
			yyVAL.boolVal = BoolVal(true)
		}
	case 158:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:1044
		{
			yyVAL.optVal = nil
		}
	case 159:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1048
		{
			yyVAL.optVal = yyDollar[2].expr
		}
	case 160:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:1053
		{
			yyVAL.optVal = nil
		}
	case 161:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1057
		{
			yyVAL.optVal = yyDollar[3].expr
		}
	case 162:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:1062
		{
			yyVAL.boolVal = BoolVal(false)
		}
	case 163:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1066
		{
			yyVAL.boolVal = BoolVal(true)
		}
	case 164:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:1071
		{
			yyVAL.str = ""
		}
	case 165:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1075
		{
			yyVAL.str = string(yyDollar[3].bytes)
		}
	case 166:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1079
		{
			yyVAL.str = string(yyDollar[3].bytes)
		}
	case 167:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:1084
		{
			yyVAL.str = ""
		}
	case 168:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1088
		{
			yyVAL.str = string(yyDollar[2].bytes)
		}
	case 169:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1092
		{
			yyVAL.str = string(yyDollar[2].bytes)
		}
	case 170:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:1097
		{
			yyVAL.colKeyOpt = colKeyNone
		}
	case 171:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1101
		{
			yyVAL.colKeyOpt = colKeyPrimary
		}
	case 172:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1105
		{
			yyVAL.colKeyOpt = colKey
		}
	case 173:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1109
		{
			yyVAL.colKeyOpt = colKeyUniqueKey
		}
	case 174:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1113
		{
			yyVAL.colKeyOpt = colKeyUnique
		}
	case 175:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:1118
		{
			yyVAL.sqlVal = nil
		}
	case 176:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1122
		{
			yyVAL.sqlVal = NewStrVal(yyDollar[2].bytes)
		}
	case 177:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sql.y:1128
		{
			yyVAL.indexDefinition = &IndexDefinition{Info: yyDollar[1].indexInfo, Columns: yyDollar[3].indexColumns, Options: yyDollar[5].indexOptions}
		}
	case 178:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:1132
		{
			yyVAL.indexDefinition = &IndexDefinition{Info: yyDollar[1].indexInfo, Columns: yyDollar[3].indexColumns}
		}
	case 179:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1138
		{
			yyVAL.indexOptions = []*IndexOption{yyDollar[1].indexOption}
		}
	case 180:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1142
		{
			yyVAL.indexOptions = append(yyVAL.indexOptions, yyDollar[2].indexOption)
		}
	case 181:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1148
		{
			yyVAL.indexOption = &IndexOption{Name: string(yyDollar[1].bytes), Using: string(yyDollar[2].bytes)}
		}
	case 182:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1152
		{
			// should not be string
			yyVAL.indexOption = &IndexOption{Name: string(yyDollar[1].bytes), Value: NewIntVal(yyDollar[3].bytes)}
		}
	case 183:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1157
		{
			yyVAL.indexOption = &IndexOption{Name: string(yyDollar[1].bytes), Value: NewStrVal(yyDollar[2].bytes)}
		}
	case 184:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:1163
		{
			yyVAL.str = ""
		}
	case 185:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1167
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 186:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1173
		{
			yyVAL.indexInfo = &IndexInfo{Type: string(yyDollar[1].bytes) + " " + string(yyDollar[2].bytes), Name: NewColIdent("PRIMARY"), Primary: true, Unique: true}
		}
	case 187:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1177
		{
			yyVAL.indexInfo = &IndexInfo{Type: string(yyDollar[1].bytes) + " " + string(yyDollar[2].str), Name: NewColIdent(yyDollar[3].str), Spatial: true, Unique: false}
		}
	case 188:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1181
		{
			yyVAL.indexInfo = &IndexInfo{Type: string(yyDollar[1].bytes) + " " + string(yyDollar[2].str), Name: NewColIdent(yyDollar[3].str), Unique: true}
		}
	case 189:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1185
		{
			yyVAL.indexInfo = &IndexInfo{Type: string(yyDollar[1].bytes), Name: NewColIdent(yyDollar[2].str), Unique: true}
		}
	case 190:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1189
		{
			yyVAL.indexInfo = &IndexInfo{Type: string(yyDollar[1].str), Name: NewColIdent(yyDollar[2].str), Unique: false}
		}
	case 191:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1195
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 192:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1199
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 193:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:1204
		{
			yyVAL.str = ""
		}
	case 194:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1208
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 195:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1214
		{
			yyVAL.indexColumns = []*IndexColumn{yyDollar[1].indexColumn}
		}
	case 196:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1218
		{
			yyVAL.indexColumns = append(yyVAL.indexColumns, yyDollar[3].indexColumn)
		}
	case 197:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1224
		{
			yyVAL.indexColumn = &IndexColumn{Column: yyDollar[1].colIdent, Length: yyDollar[2].sqlVal}
		}
	case 198:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1230
		{
			yyVAL.constraintDefinition = &ConstraintDefinition{Name: string(yyDollar[2].bytes), Details: yyDollar[3].constraintInfo}
		}
	case 199:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1234
		{
			yyVAL.constraintDefinition = &ConstraintDefinition{Details: yyDollar[1].constraintInfo}
		}
	case 200:
		yyDollar = yyS[yypt-10 : yypt+1]
//line sql.y:1241
		{
			yyVAL.constraintInfo = &ForeignKeyDefinition{Source: yyDollar[4].columns, ReferencedTable: yyDollar[7].tableName, ReferencedColumns: yyDollar[9].columns}
		}
	case 201:
		yyDollar = yyS[yypt-11 : yypt+1]
//line sql.y:1245
		{
			yyVAL.constraintInfo = &ForeignKeyDefinition{Source: yyDollar[4].columns, ReferencedTable: yyDollar[7].tableName, ReferencedColumns: yyDollar[9].columns, OnDelete: yyDollar[11].ReferenceAction}
		}
	case 202:
		yyDollar = yyS[yypt-11 : yypt+1]
//line sql.y:1249
		{
			yyVAL.constraintInfo = &ForeignKeyDefinition{Source: yyDollar[4].columns, ReferencedTable: yyDollar[7].tableName, ReferencedColumns: yyDollar[9].columns, OnUpdate: yyDollar[11].ReferenceAction}
		}
	case 203:
		yyDollar = yyS[yypt-12 : yypt+1]
//line sql.y:1253
		{
			yyVAL.constraintInfo = &ForeignKeyDefinition{Source: yyDollar[4].columns, ReferencedTable: yyDollar[7].tableName, ReferencedColumns: yyDollar[9].columns, OnDelete: yyDollar[11].ReferenceAction, OnUpdate: yyDollar[12].ReferenceAction}
		}
	case 204:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1259
		{
			yyVAL.ReferenceAction = yyDollar[3].ReferenceAction
		}
	case 205:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1265
		{
			yyVAL.ReferenceAction = yyDollar[3].ReferenceAction
		}
	case 206:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1271
		{
			yyVAL.ReferenceAction = Restrict
		}
	case 207:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1275
		{
			yyVAL.ReferenceAction = Cascade
		}
	case 208:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1279
		{
			yyVAL.ReferenceAction = NoAction
		}
	case 209:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1283
		{
			yyVAL.ReferenceAction = SetDefault
		}
	case 210:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1287
		{
			yyVAL.ReferenceAction = SetNull
		}
	case 211:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:1292
		{
			yyVAL.str = ""
		}
	case 212:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1296
		{
			yyVAL.str = " " + string(yyDollar[1].str)
		}
	case 213:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1300
		{
			yyVAL.str = string(yyDollar[1].str) + ", " + string(yyDollar[3].str)
		}
	case 214:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1308
		{
			yyVAL.str = yyDollar[1].str
		}
	case 215:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1312
		{
			yyVAL.str = yyDollar[1].str + " " + yyDollar[2].str
		}
	case 216:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1316
		{
			yyVAL.str = yyDollar[1].str + "=" + yyDollar[3].str
		}
	case 217:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1322
		{
			yyVAL.str = yyDollar[1].colIdent.String()
		}
	case 218:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1326
		{
			yyVAL.str = "'" + string(yyDollar[1].bytes) + "'"
		}
	case 219:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1330
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 220:
		yyDollar = yyS[yypt-6 : yypt+1]
//line sql.y:1336
		{
			yyVAL.statement = &DDL{Action: AlterStr, Table: yyDollar[4].tableName}
		}
	case 221:
		yyDollar = yyS[yypt-7 : yypt+1]
//line sql.y:1340
		{
			yyVAL.statement = &DDL{Action: AlterStr, Table: yyDollar[4].tableName}
		}
	case 222:
		yyDollar = yyS[yypt-7 : yypt+1]
//line sql.y:1344
		{
			yyVAL.statement = &DDL{Action: AlterStr, Table: yyDollar[4].tableName}
		}
	case 223:
		yyDollar = yyS[yypt-7 : yypt+1]
//line sql.y:1348
		{
			// Change this to a rename statement
			yyVAL.statement = &DDL{Action: RenameStr, FromTables: TableNames{yyDollar[4].tableName}, ToTables: TableNames{yyDollar[7].tableName}}
		}
	case 224:
		yyDollar = yyS[yypt-7 : yypt+1]
//line sql.y:1353
		{
			// Rename an index can just be an alter
			yyVAL.statement = &DDL{Action: AlterStr, Table: yyDollar[4].tableName}
		}
	case 225:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:1358
		{
			yyVAL.statement = &DDL{Action: AlterStr, Table: yyDollar[3].tableName.ToViewName()}
		}
	case 226:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sql.y:1362
		{
			yyVAL.statement = &DDL{Action: AlterStr, Table: yyDollar[4].tableName, PartitionSpec: yyDollar[5].partSpec}
		}
	case 227:
		yyDollar = yyS[yypt-7 : yypt+1]
//line sql.y:1366
		{
			yyVAL.statement = &DDL{Action: CreateVindexStr, VindexSpec: &VindexSpec{
				Name:   yyDollar[5].colIdent,
				Type:   yyDollar[6].colIdent,
				Params: yyDollar[7].vindexParams,
			}}
		}
	case 228:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sql.y:1374
		{
			yyVAL.statement = &DDL{Action: DropVindexStr, VindexSpec: &VindexSpec{
				Name: yyDollar[5].colIdent,
			}}
		}
	case 229:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sql.y:1380
		{
			yyVAL.statement = &DDL{Action: AddVschemaTableStr, Table: yyDollar[5].tableName}
		}
	case 230:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sql.y:1384
		{
			yyVAL.statement = &DDL{Action: DropVschemaTableStr, Table: yyDollar[5].tableName}
		}
	case 231:
		yyDollar = yyS[yypt-12 : yypt+1]
//line sql.y:1388
		{
			yyVAL.statement = &DDL{
				Action: AddColVindexStr,
				Table:  yyDollar[4].tableName,
				VindexSpec: &VindexSpec{
					Name:   yyDollar[7].colIdent,
					Type:   yyDollar[11].colIdent,
					Params: yyDollar[12].vindexParams,
				},
				VindexCols: yyDollar[9].columns,
			}
		}
	case 232:
		yyDollar = yyS[yypt-7 : yypt+1]
//line sql.y:1401
		{
			yyVAL.statement = &DDL{
				Action: DropColVindexStr,
				Table:  yyDollar[4].tableName,
				VindexSpec: &VindexSpec{
					Name: yyDollar[7].colIdent,
				},
			}
		}
	case 244:
		yyDollar = yyS[yypt-7 : yypt+1]
//line sql.y:1426
		{
			yyVAL.partSpec = &PartitionSpec{Action: ReorganizeStr, Name: yyDollar[3].colIdent, Definitions: yyDollar[6].partDefs}
		}
	case 245:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1432
		{
			yyVAL.partDefs = []*PartitionDefinition{yyDollar[1].partDef}
		}
	case 246:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1436
		{
			yyVAL.partDefs = append(yyDollar[1].partDefs, yyDollar[3].partDef)
		}
	case 247:
		yyDollar = yyS[yypt-8 : yypt+1]
//line sql.y:1442
		{
			yyVAL.partDef = &PartitionDefinition{Name: yyDollar[2].colIdent, Limit: yyDollar[7].expr}
		}
	case 248:
		yyDollar = yyS[yypt-8 : yypt+1]
//line sql.y:1446
		{
			yyVAL.partDef = &PartitionDefinition{Name: yyDollar[2].colIdent, Maxvalue: true}
		}
	case 249:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1452
		{
			yyVAL.statement = yyDollar[3].ddl
		}
	case 250:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1458
		{
			yyVAL.ddl = &DDL{Action: RenameStr, FromTables: TableNames{yyDollar[1].tableName}, ToTables: TableNames{yyDollar[3].tableName}}
		}
	case 251:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sql.y:1462
		{
			yyVAL.ddl = yyDollar[1].ddl
			yyVAL.ddl.FromTables = append(yyVAL.ddl.FromTables, yyDollar[3].tableName)
			yyVAL.ddl.ToTables = append(yyVAL.ddl.ToTables, yyDollar[5].tableName)
		}
	case 252:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:1470
		{
			var exists bool
			if yyDollar[3].byt != 0 {
				exists = true
			}
			yyVAL.statement = &DDL{Action: DropStr, FromTables: yyDollar[4].tableNames, IfExists: exists}
		}
	case 253:
		yyDollar = yyS[yypt-6 : yypt+1]
//line sql.y:1478
		{
			// Change this to an alter statement
			yyVAL.statement = &DDL{Action: AlterStr, Table: yyDollar[5].tableName}
		}
	case 254:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sql.y:1483
		{
			var exists bool
			if yyDollar[3].byt != 0 {
				exists = true
			}
			yyVAL.statement = &DDL{Action: DropStr, FromTables: TableNames{yyDollar[4].tableName.ToViewName()}, IfExists: exists}
		}
	case 255:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:1491
		{
			yyVAL.statement = &DBDDL{Action: DropStr, DBName: string(yyDollar[4].bytes)}
		}
	case 256:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:1495
		{
			yyVAL.statement = &DBDDL{Action: DropStr, DBName: string(yyDollar[4].bytes)}
		}
	case 257:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1501
		{
			yyVAL.statement = &DDL{Action: TruncateStr, Table: yyDollar[3].tableName}
		}
	case 258:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1505
		{
			yyVAL.statement = &DDL{Action: TruncateStr, Table: yyDollar[2].tableName}
		}
	case 259:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1510
		{
			yyVAL.statement = &DDL{Action: AlterStr, Table: yyDollar[3].tableName}
		}
	case 260:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:1516
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes) + " " + string(yyDollar[3].bytes)}
		}
	case 261:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1521
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes)}
		}
	case 262:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:1525
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes) + " " + string(yyDollar[3].bytes)}
		}
	case 263:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:1530
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes) + " " + string(yyDollar[3].bytes)}
		}
	case 264:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:1534
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes) + " " + string(yyDollar[3].bytes)}
		}
	case 265:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:1538
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes) + " " + string(yyDollar[3].bytes), Table: yyDollar[4].tableName}
		}
	case 266:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:1542
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes) + " " + string(yyDollar[3].bytes)}
		}
	case 267:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:1546
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes) + " " + string(yyDollar[3].bytes)}
		}
	case 268:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1550
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes)}
		}
	case 269:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1554
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes)}
		}
	case 270:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1558
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes)}
		}
	case 271:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1562
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes)}
		}
	case 272:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1566
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes)}
		}
	case 273:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1570
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes)}
		}
	case 274:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1574
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes)}
		}
	case 275:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:1578
		{
			yyVAL.statement = &Show{Scope: yyDollar[2].str, Type: string(yyDollar[3].bytes)}
		}
	case 276:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1582
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes)}
		}
	case 277:
		yyDollar = yyS[yypt-7 : yypt+1]
//line sql.y:1586
		{
			showTablesOpt := &ShowTablesOpt{Full: yyDollar[2].str, DbName: yyDollar[6].str, Filter: yyDollar[7].showFilter}
			yyVAL.statement = &Show{Type: string(yyDollar[3].str), ShowTablesOpt: showTablesOpt, OnTable: yyDollar[5].tableName}
		}
	case 278:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sql.y:1591
		{
			// this is ugly, but I couldn't find a better way for now
			if yyDollar[3].str == "processlist" {
				yyVAL.statement = &Show{Type: yyDollar[3].str}
			} else {
				showTablesOpt := &ShowTablesOpt{Full: yyDollar[2].str, DbName: yyDollar[4].str, Filter: yyDollar[5].showFilter}
				yyVAL.statement = &Show{Type: yyDollar[3].str, ShowTablesOpt: showTablesOpt}
			}
		}
	case 279:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:1601
		{
			yyVAL.statement = &Show{Scope: yyDollar[2].str, Type: string(yyDollar[3].bytes)}
		}
	case 280:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1605
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes)}
		}
	case 281:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:1609
		{
			// Cannot dereference $4 directly, or else the parser stackcannot be pooled. See yyParsePooled
			showCollationFilterOpt := yyDollar[4].expr
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes), ShowCollationFilterOpt: &showCollationFilterOpt}
		}
	case 282:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1615
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes)}
		}
	case 283:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1619
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes)}
		}
	case 284:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1623
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes)}
		}
	case 285:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1627
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes)}
		}
	case 286:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1631
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes) + " " + string(yyDollar[3].bytes)}
		}
	case 287:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1635
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes) + " " + string(yyDollar[3].bytes)}
		}
	case 288:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sql.y:1639
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes) + " " + string(yyDollar[3].bytes), OnTable: yyDollar[5].tableName}
		}
	case 289:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1643
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes)}
		}
	case 290:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1653
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes)}
		}
	case 291:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1659
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 292:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1663
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 293:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:1669
		{
			yyVAL.str = ""
		}
	case 294:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1673
		{
			yyVAL.str = "full "
		}
	case 295:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1679
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 296:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1683
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 297:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:1689
		{
			yyVAL.str = ""
		}
	case 298:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1693
		{
			yyVAL.str = yyDollar[2].tableIdent.v
		}
	case 299:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1697
		{
			yyVAL.str = yyDollar[2].tableIdent.v
		}
	case 300:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:1703
		{
			yyVAL.showFilter = nil
		}
	case 301:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1707
		{
			yyVAL.showFilter = &ShowFilter{Like: string(yyDollar[2].bytes)}
		}
	case 302:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1711
		{
			yyVAL.showFilter = &ShowFilter{Filter: yyDollar[2].expr}
		}
	case 303:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:1717
		{
			yyVAL.str = ""
		}
	case 304:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1721
		{
			yyVAL.str = SessionStr
		}
	case 305:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1725
		{
			yyVAL.str = GlobalStr
		}
	case 306:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1731
		{
			yyVAL.statement = &Use{DBName: yyDollar[2].tableIdent}
		}
	case 307:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1735
		{
			yyVAL.statement = &Use{DBName: TableIdent{v: ""}}
		}
	case 308:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1741
		{
			yyVAL.statement = &Begin{}
		}
	case 309:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1745
		{
			yyVAL.statement = &Begin{}
		}
	case 310:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1751
		{
			yyVAL.statement = &Commit{}
		}
	case 311:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1757
		{
			yyVAL.statement = &Rollback{}
		}
	case 312:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1763
		{
			yyVAL.statement = &OtherRead{}
		}
	case 313:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1767
		{
			yyVAL.statement = &OtherRead{}
		}
	case 314:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1771
		{
			yyVAL.statement = &OtherRead{}
		}
	case 315:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1775
		{
			yyVAL.statement = &OtherAdmin{}
		}
	case 316:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1779
		{
			yyVAL.statement = &OtherAdmin{}
		}
	case 317:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1783
		{
			yyVAL.statement = &OtherAdmin{}
		}
	case 318:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1787
		{
			yyVAL.statement = &OtherAdmin{}
		}
	case 319:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1793
		{
			yyVAL.statement = &DDL{Action: FlushStr}
		}
	case 320:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:1797
		{
			setAllowComments(yylex, true)
		}
	case 321:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1801
		{
			yyVAL.bytes2 = yyDollar[2].bytes2
			setAllowComments(yylex, false)
		}
	case 322:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:1807
		{
			yyVAL.bytes2 = nil
		}
	case 323:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1811
		{
			yyVAL.bytes2 = append(yyDollar[1].bytes2, yyDollar[2].bytes)
		}
	case 324:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1817
		{
			yyVAL.str = UnionStr
		}
	case 325:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1821
		{
			yyVAL.str = UnionAllStr
		}
	case 326:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1825
		{
			yyVAL.str = UnionDistinctStr
		}
	case 327:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:1830
		{
			yyVAL.str = ""
		}
	case 328:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1834
		{
			yyVAL.str = SQLNoCacheStr
		}
	case 329:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1838
		{
			yyVAL.str = SQLCacheStr
		}
	case 330:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:1843
		{
			yyVAL.str = ""
		}
	case 331:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1847
		{
			yyVAL.str = DistinctStr
		}
	case 332:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:1852
		{
			yyVAL.str = ""
		}
	case 333:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1856
		{
			yyVAL.str = StraightJoinHint
		}
	case 334:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:1861
		{
			yyVAL.selectExprs = nil
		}
	case 335:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1865
		{
			yyVAL.selectExprs = yyDollar[1].selectExprs
		}
	case 336:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1871
		{
			yyVAL.selectExprs = SelectExprs{yyDollar[1].selectExpr}
		}
	case 337:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1875
		{
			yyVAL.selectExprs = append(yyVAL.selectExprs, yyDollar[3].selectExpr)
		}
	case 338:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1881
		{
			yyVAL.selectExpr = &StarExpr{}
		}
	case 339:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1885
		{
			yyVAL.selectExpr = &AliasedExpr{Expr: yyDollar[1].expr, As: yyDollar[2].colIdent}
		}
	case 340:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1889
		{
			yyVAL.selectExpr = &StarExpr{TableName: TableName{Name: yyDollar[1].tableIdent}}
		}
	case 341:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sql.y:1893
		{
			yyVAL.selectExpr = &StarExpr{TableName: TableName{Qualifier: yyDollar[1].tableIdent, Name: yyDollar[3].tableIdent}}
		}
	case 342:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:1898
		{
			yyVAL.colIdent = ColIdent{}
		}
	case 343:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1902
		{
			yyVAL.colIdent = yyDollar[1].colIdent
		}
	case 344:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1906
		{
			yyVAL.colIdent = yyDollar[2].colIdent
		}
	case 346:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1913
		{
			yyVAL.colIdent = NewColIdent(string(yyDollar[1].bytes))
		}
	case 347:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:1918
		{
			yyVAL.tableExprs = TableExprs{&AliasedTableExpr{Expr: TableName{Name: NewTableIdent("dual")}}}
		}
	case 348:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1922
		{
			yyVAL.tableExprs = yyDollar[2].tableExprs
		}
	case 349:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1928
		{
			yyVAL.tableExprs = TableExprs{yyDollar[1].tableExpr}
		}
	case 350:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1932
		{
			yyVAL.tableExprs = append(yyVAL.tableExprs, yyDollar[3].tableExpr)
		}
	case 353:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1942
		{
			yyVAL.tableExpr = yyDollar[1].aliasedTableName
		}
	case 354:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1946
		{
			yyVAL.tableExpr = &AliasedTableExpr{Expr: yyDollar[1].subquery, As: yyDollar[3].tableIdent}
		}
	case 355:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1950
		{
			// missed alias for subquery
			yylex.Error("Every derived table must have its own alias")
			return 1
		}
	case 356:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1956
		{
			yyVAL.tableExpr = &ParenTableExpr{Exprs: yyDollar[2].tableExprs}
		}
	case 357:
		yyDollar = yyS[yypt-6 : yypt+1]
//line sql.y:1960
		{
			yyVAL.tableExpr = &TableValuedFunction{Name: NewColIdent(string(yyDollar[1].bytes)), Args: yyDollar[3].tableValuedFunctionArguments, As: yyDollar[6].tableIdent}
		}
	case 358:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1966
		{
			yyVAL.aliasedTableName = &AliasedTableExpr{Expr: yyDollar[1].tableName, As: yyDollar[2].tableIdent, Hints: yyDollar[3].indexHints}
		}
	case 359:
		yyDollar = yyS[yypt-7 : yypt+1]
//line sql.y:1970
		{
			yyVAL.aliasedTableName = &AliasedTableExpr{Expr: yyDollar[1].tableName, Partitions: yyDollar[4].partitions, As: yyDollar[6].tableIdent, Hints: yyDollar[7].indexHints}
		}
	case 360:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:1975
		{
			yyVAL.tableValuedFunctionArguments = nil
		}
	case 361:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1979
		{
			yyVAL.tableValuedFunctionArguments = yyDollar[1].tableValuedFunctionArguments
		}
	case 362:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1985
		{
			yyVAL.tableValuedFunctionArguments = TableValuedFunctionArguments{yyDollar[1].tableValuedFunctionArgument}
		}
	case 363:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1989
		{
			yyVAL.tableValuedFunctionArguments = append(yyVAL.tableValuedFunctionArguments, yyDollar[3].tableValuedFunctionArgument)
		}
	case 364:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1995
		{
			yyVAL.tableValuedFunctionArgument = &TableValuedFunctionArgument{Name: yyDollar[1].colIdent, Value: yyDollar[3].tableValuedFunctionArgumentValue}
		}
	case 365:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2001
		{
			yyVAL.tableValuedFunctionArgumentValue = &ExprTableValuedFunctionArgumentValue{Expr: yyDollar[1].expr}
		}
	case 366:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:2005
		{
			yyVAL.tableValuedFunctionArgumentValue = &TableDescriptorTableValuedFunctionArgumentValue{Table: yyDollar[3].tableExpr}
		}
	case 367:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:2009
		{
			yyVAL.tableValuedFunctionArgumentValue = &FieldDescriptorTableValuedFunctionArgumentValue{Field: yyDollar[3].colName}
		}
	case 368:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2015
		{
			yyVAL.columns = Columns{yyDollar[1].colIdent}
		}
	case 369:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2019
		{
			yyVAL.columns = append(yyVAL.columns, yyDollar[3].colIdent)
		}
	case 370:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2025
		{
			yyVAL.partitions = Partitions{yyDollar[1].colIdent}
		}
	case 371:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2029
		{
			yyVAL.partitions = append(yyVAL.partitions, yyDollar[3].colIdent)
		}
	case 372:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sql.y:2042
		{
			yyVAL.tableExpr = &JoinTableExpr{LeftExpr: yyDollar[1].tableExpr, Strategy: yyDollar[2].str, Join: yyDollar[3].str, RightExpr: yyDollar[4].tableExpr, Condition: yyDollar[5].joinCondition}
		}
	case 373:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:2046
		{
			yyVAL.tableExpr = &JoinTableExpr{LeftExpr: yyDollar[1].tableExpr, Join: yyDollar[2].str, RightExpr: yyDollar[3].tableExpr, Condition: yyDollar[4].joinCondition}
		}
	case 374:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:2050
		{
			yyVAL.tableExpr = &JoinTableExpr{LeftExpr: yyDollar[1].tableExpr, Join: yyDollar[2].str, RightExpr: yyDollar[3].tableExpr, Condition: yyDollar[4].joinCondition}
		}
	case 375:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2054
		{
			yyVAL.tableExpr = &JoinTableExpr{LeftExpr: yyDollar[1].tableExpr, Join: yyDollar[2].str, RightExpr: yyDollar[3].tableExpr}
		}
	case 376:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2060
		{
			yyVAL.joinCondition = JoinCondition{On: yyDollar[2].expr}
		}
	case 377:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:2062
		{
			yyVAL.joinCondition = JoinCondition{Using: yyDollar[3].columns}
		}
	case 378:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:2066
		{
			yyVAL.joinCondition = JoinCondition{}
		}
	case 379:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2068
		{
			yyVAL.joinCondition = yyDollar[1].joinCondition
		}
	case 380:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:2072
		{
			yyVAL.joinCondition = JoinCondition{}
		}
	case 381:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2074
		{
			yyVAL.joinCondition = JoinCondition{On: yyDollar[2].expr}
		}
	case 382:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:2077
		{
			yyVAL.empty = struct{}{}
		}
	case 383:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2079
		{
			yyVAL.empty = struct{}{}
		}
	case 384:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:2082
		{
			yyVAL.tableIdent = NewTableIdent("")
		}
	case 385:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2086
		{
			yyVAL.tableIdent = yyDollar[1].tableIdent
		}
	case 386:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2090
		{
			yyVAL.tableIdent = yyDollar[2].tableIdent
		}
	case 387:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:2095
		{
			yyVAL.str = UndefinedJoinStrategy
		}
	case 388:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2097
		{
			yyVAL.str = LookupJoinStrategy
		}
	case 389:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2099
		{
			yyVAL.str = StreamJoinStrategy
		}
	case 391:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2104
		{
			yyVAL.tableIdent = NewTableIdent(string(yyDollar[1].bytes))
		}
	case 392:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2110
		{
			yyVAL.str = JoinStr
		}
	case 393:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2114
		{
			yyVAL.str = JoinStr
		}
	case 394:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2118
		{
			yyVAL.str = JoinStr
		}
	case 395:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2124
		{
			yyVAL.str = StraightJoinStr
		}
	case 396:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2130
		{
			yyVAL.str = LeftJoinStr
		}
	case 397:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2134
		{
			yyVAL.str = LeftJoinStr
		}
	case 398:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2138
		{
			yyVAL.str = RightJoinStr
		}
	case 399:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2142
		{
			yyVAL.str = RightJoinStr
		}
	case 400:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2148
		{
			yyVAL.str = NaturalJoinStr
		}
	case 401:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2152
		{
			if yyDollar[2].str == LeftJoinStr {
				yyVAL.str = NaturalLeftJoinStr
			} else {
				yyVAL.str = NaturalRightJoinStr
			}
		}
	case 402:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2162
		{
			yyVAL.tableName = yyDollar[2].tableName
		}
	case 403:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2166
		{
			yyVAL.tableName = yyDollar[1].tableName
		}
	case 404:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2172
		{
			yyVAL.tableName = TableName{Name: yyDollar[1].tableIdent}
		}
	case 405:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2176
		{
			yyVAL.tableName = TableName{Qualifier: yyDollar[1].tableIdent, Name: yyDollar[3].tableIdent}
		}
	case 406:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2182
		{
			yyVAL.tableName = TableName{Name: yyDollar[1].tableIdent}
		}
	case 407:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:2187
		{
			yyVAL.indexHints = nil
		}
	case 408:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sql.y:2191
		{
			yyVAL.indexHints = &IndexHints{Type: UseStr, Indexes: yyDollar[4].columns}
		}
	case 409:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sql.y:2195
		{
			yyVAL.indexHints = &IndexHints{Type: IgnoreStr, Indexes: yyDollar[4].columns}
		}
	case 410:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sql.y:2199
		{
			yyVAL.indexHints = &IndexHints{Type: ForceStr, Indexes: yyDollar[4].columns}
		}
	case 411:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:2204
		{
			yyVAL.expr = nil
		}
	case 412:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2208
		{
			yyVAL.expr = yyDollar[2].expr
		}
	case 413:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2214
		{
			yyVAL.expr = yyDollar[1].expr
		}
	case 414:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2218
		{
			yyVAL.expr = &AndExpr{Left: yyDollar[1].expr, Right: yyDollar[3].expr}
		}
	case 415:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2222
		{
			yyVAL.expr = &OrExpr{Left: yyDollar[1].expr, Right: yyDollar[3].expr}
		}
	case 416:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2226
		{
			yyVAL.expr = &NotExpr{Expr: yyDollar[2].expr}
		}
	case 417:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2230
		{
			yyVAL.expr = &IsExpr{Operator: yyDollar[3].str, Expr: yyDollar[1].expr}
		}
	case 418:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2234
		{
			yyVAL.expr = yyDollar[1].expr
		}
	case 419:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2238
		{
			yyVAL.expr = &Default{ColName: yyDollar[2].str}
		}
	case 420:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:2244
		{
			yyVAL.str = ""
		}
	case 421:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2248
		{
			yyVAL.str = string(yyDollar[2].bytes)
		}
	case 422:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2254
		{
			yyVAL.boolVal = BoolVal(true)
		}
	case 423:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2258
		{
			yyVAL.boolVal = BoolVal(false)
		}
	case 424:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2264
		{
			yyVAL.expr = &ComparisonExpr{Left: yyDollar[1].expr, Operator: yyDollar[2].str, Right: yyDollar[3].expr}
		}
	case 425:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2268
		{
			yyVAL.expr = &ComparisonExpr{Left: yyDollar[1].expr, Operator: InStr, Right: yyDollar[3].colTuple}
		}
	case 426:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:2272
		{
			yyVAL.expr = &ComparisonExpr{Left: yyDollar[1].expr, Operator: NotInStr, Right: yyDollar[4].colTuple}
		}
	case 427:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:2276
		{
			yyVAL.expr = &ComparisonExpr{Left: yyDollar[1].expr, Operator: LikeStr, Right: yyDollar[3].expr, Escape: yyDollar[4].expr}
		}
	case 428:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sql.y:2280
		{
			yyVAL.expr = &ComparisonExpr{Left: yyDollar[1].expr, Operator: NotLikeStr, Right: yyDollar[4].expr, Escape: yyDollar[5].expr}
		}
	case 429:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2284
		{
			yyVAL.expr = &ComparisonExpr{Left: yyDollar[1].expr, Operator: LikeRegexpStr, Right: yyDollar[3].expr}
		}
	case 430:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2288
		{
			yyVAL.expr = &ComparisonExpr{Left: yyDollar[1].expr, Operator: LikeRegexpCaseInsensitiveStr, Right: yyDollar[3].expr}
		}
	case 431:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2292
		{
			yyVAL.expr = &ComparisonExpr{Left: yyDollar[1].expr, Operator: NotLikeRegexpStr, Right: yyDollar[3].expr}
		}
	case 432:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2296
		{
			yyVAL.expr = &ComparisonExpr{Left: yyDollar[1].expr, Operator: NotLikeRegexpCaseInsensitiveStr, Right: yyDollar[3].expr}
		}
	case 433:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2300
		{
			yyVAL.expr = &ComparisonExpr{Left: yyDollar[1].expr, Operator: RegexpStr, Right: yyDollar[3].expr}
		}
	case 434:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:2304
		{
			yyVAL.expr = &ComparisonExpr{Left: yyDollar[1].expr, Operator: NotRegexpStr, Right: yyDollar[4].expr}
		}
	case 435:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sql.y:2308
		{
			yyVAL.expr = &RangeCond{Left: yyDollar[1].expr, Operator: BetweenStr, From: yyDollar[3].expr, To: yyDollar[5].expr}
		}
	case 436:
		yyDollar = yyS[yypt-6 : yypt+1]
//line sql.y:2312
		{
			yyVAL.expr = &RangeCond{Left: yyDollar[1].expr, Operator: NotBetweenStr, From: yyDollar[4].expr, To: yyDollar[6].expr}
		}
	case 437:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2316
		{
			yyVAL.expr = &ExistsExpr{Subquery: yyDollar[2].subquery}
		}
	case 438:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2322
		{
			yyVAL.str = IsNullStr
		}
	case 439:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2326
		{
			yyVAL.str = IsNotNullStr
		}
	case 440:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2330
		{
			yyVAL.str = IsTrueStr
		}
	case 441:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2334
		{
			yyVAL.str = IsNotTrueStr
		}
	case 442:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2338
		{
			yyVAL.str = IsFalseStr
		}
	case 443:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2342
		{
			yyVAL.str = IsNotFalseStr
		}
	case 444:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2348
		{
			yyVAL.str = EqualStr
		}
	case 445:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2352
		{
			yyVAL.str = LessThanStr
		}
	case 446:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2356
		{
			yyVAL.str = GreaterThanStr
		}
	case 447:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2360
		{
			yyVAL.str = LessEqualStr
		}
	case 448:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2364
		{
			yyVAL.str = GreaterEqualStr
		}
	case 449:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2368
		{
			yyVAL.str = NotEqualStr
		}
	case 450:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2372
		{
			yyVAL.str = NullSafeEqualStr
		}
	case 451:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:2377
		{
			yyVAL.expr = nil
		}
	case 452:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2381
		{
			yyVAL.expr = yyDollar[2].expr
		}
	case 453:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2387
		{
			yyVAL.colTuple = yyDollar[1].valTuple
		}
	case 454:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2391
		{
			yyVAL.colTuple = yyDollar[1].subquery
		}
	case 455:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2395
		{
			yyVAL.colTuple = ListArg(yyDollar[1].bytes)
		}
	case 456:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2401
		{
			yyVAL.subquery = &Subquery{yyDollar[2].selStmt}
		}
	case 457:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2407
		{
			yyVAL.exprs = Exprs{yyDollar[1].expr}
		}
	case 458:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2411
		{
			yyVAL.exprs = append(yyDollar[1].exprs, yyDollar[3].expr)
		}
	case 459:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2417
		{
			yyVAL.expr = yyDollar[1].expr
		}
	case 460:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2421
		{
			yyVAL.expr = yyDollar[1].boolVal
		}
	case 461:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2425
		{
			yyVAL.expr = yyDollar[1].colName
		}
	case 462:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2429
		{
			yyVAL.expr = yyDollar[1].expr
		}
	case 463:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2433
		{
			yyVAL.expr = yyDollar[1].subquery
		}
	case 464:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2437
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].expr, Operator: BitAndStr, Right: yyDollar[3].expr}
		}
	case 465:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2441
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].expr, Operator: BitOrStr, Right: yyDollar[3].expr}
		}
	case 466:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2445
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].expr, Operator: BitXorStr, Right: yyDollar[3].expr}
		}
	case 467:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2449
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].expr, Operator: PlusStr, Right: yyDollar[3].expr}
		}
	case 468:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2453
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].expr, Operator: MinusStr, Right: yyDollar[3].expr}
		}
	case 469:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2457
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].expr, Operator: MultStr, Right: yyDollar[3].expr}
		}
	case 470:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2461
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].expr, Operator: DivStr, Right: yyDollar[3].expr}
		}
	case 471:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2465
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].expr, Operator: IntDivStr, Right: yyDollar[3].expr}
		}
	case 472:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2469
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].expr, Operator: ModStr, Right: yyDollar[3].expr}
		}
	case 473:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2473
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].expr, Operator: ModStr, Right: yyDollar[3].expr}
		}
	case 474:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2477
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].expr, Operator: ShiftLeftStr, Right: yyDollar[3].expr}
		}
	case 475:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2481
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].expr, Operator: ShiftRightStr, Right: yyDollar[3].expr}
		}
	case 476:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2485
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].colName, Operator: JSONExtractOp, Right: yyDollar[3].expr}
		}
	case 477:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2489
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].colName, Operator: JSONUnquoteExtractOp, Right: yyDollar[3].expr}
		}
	case 478:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2493
		{
			yyVAL.expr = &CollateExpr{Expr: yyDollar[1].expr, Charset: yyDollar[3].str}
		}
	case 479:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2497
		{
			yyVAL.expr = &UnaryExpr{Operator: BinaryStr, Expr: yyDollar[2].expr}
		}
	case 480:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2501
		{
			yyVAL.expr = &UnaryExpr{Operator: UBinaryStr, Expr: yyDollar[2].expr}
		}
	case 481:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2505
		{
			yyVAL.expr = &UnaryExpr{Operator: Utf8mb4Str, Expr: yyDollar[2].expr}
		}
	case 482:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2509
		{
			if num, ok := yyDollar[2].expr.(*SQLVal); ok && num.Type == IntVal {
				yyVAL.expr = num
			} else {
				yyVAL.expr = &UnaryExpr{Operator: UPlusStr, Expr: yyDollar[2].expr}
			}
		}
	case 483:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2517
		{
			if num, ok := yyDollar[2].expr.(*SQLVal); ok && num.Type == IntVal {
				// Handle double negative
				if num.Val[0] == '-' {
					num.Val = num.Val[1:]
					yyVAL.expr = num
				} else {
					yyVAL.expr = NewIntVal(append([]byte("-"), num.Val...))
				}
			} else {
				yyVAL.expr = &UnaryExpr{Operator: UMinusStr, Expr: yyDollar[2].expr}
			}
		}
	case 484:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2531
		{
			yyVAL.expr = &UnaryExpr{Operator: TildaStr, Expr: yyDollar[2].expr}
		}
	case 485:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2535
		{
			yyVAL.expr = &UnaryExpr{Operator: BangStr, Expr: yyDollar[2].expr}
		}
	case 486:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2539
		{
			// This rule prevents the usage of INTERVAL
			// as a function. If support is needed for that,
			// we'll need to revisit this. The solution
			// will be non-trivial because of grammar conflicts.
			yyVAL.expr = &IntervalExpr{Expr: yyDollar[2].expr, Unit: yyDollar[3].colIdent.String()}
		}
	case 491:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:2551
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].expr, Operator: ArrayElement, Right: yyDollar[3].expr}
		}
	case 492:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2555
		{
			yyVAL.expr = &ConvertExpr{Expr: yyDollar[1].expr, Type: yyDollar[3].convertType}
		}
	case 493:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:2565
		{
			yyVAL.expr = &FuncExpr{Name: yyDollar[1].colIdent, Exprs: yyDollar[3].selectExprs}
		}
	case 494:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sql.y:2569
		{
			yyVAL.expr = &FuncExpr{Name: yyDollar[1].colIdent, Distinct: true, Exprs: yyDollar[4].selectExprs}
		}
	case 495:
		yyDollar = yyS[yypt-6 : yypt+1]
//line sql.y:2573
		{
			yyVAL.expr = &FuncExpr{Qualifier: yyDollar[1].tableIdent, Name: yyDollar[3].colIdent, Exprs: yyDollar[5].selectExprs}
		}
	case 496:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:2583
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("left"), Exprs: yyDollar[3].selectExprs}
		}
	case 497:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:2587
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("right"), Exprs: yyDollar[3].selectExprs}
		}
	case 498:
		yyDollar = yyS[yypt-6 : yypt+1]
//line sql.y:2591
		{
			yyVAL.expr = &ConvertExpr{Expr: yyDollar[3].expr, Type: yyDollar[5].convertType}
		}
	case 499:
		yyDollar = yyS[yypt-6 : yypt+1]
//line sql.y:2595
		{
			yyVAL.expr = &ConvertExpr{Expr: yyDollar[3].expr, Type: yyDollar[5].convertType}
		}
	case 500:
		yyDollar = yyS[yypt-6 : yypt+1]
//line sql.y:2599
		{
			yyVAL.expr = &ConvertUsingExpr{Expr: yyDollar[3].expr, Type: yyDollar[5].str}
		}
	case 501:
		yyDollar = yyS[yypt-8 : yypt+1]
//line sql.y:2603
		{
			yyVAL.expr = &SubstrExpr{Name: yyDollar[3].colName, From: yyDollar[5].expr, To: yyDollar[7].expr}
		}
	case 502:
		yyDollar = yyS[yypt-8 : yypt+1]
//line sql.y:2607
		{
			yyVAL.expr = &SubstrExpr{Name: yyDollar[3].colName, From: yyDollar[5].expr, To: yyDollar[7].expr}
		}
	case 503:
		yyDollar = yyS[yypt-8 : yypt+1]
//line sql.y:2611
		{
			yyVAL.expr = &SubstrExpr{StrVal: NewStrVal(yyDollar[3].bytes), From: yyDollar[5].expr, To: yyDollar[7].expr}
		}
	case 504:
		yyDollar = yyS[yypt-8 : yypt+1]
//line sql.y:2615
		{
			yyVAL.expr = &SubstrExpr{StrVal: NewStrVal(yyDollar[3].bytes), From: yyDollar[5].expr, To: yyDollar[7].expr}
		}
	case 505:
		yyDollar = yyS[yypt-9 : yypt+1]
//line sql.y:2619
		{
			yyVAL.expr = &MatchExpr{Columns: yyDollar[3].selectExprs, Expr: yyDollar[7].expr, Option: yyDollar[8].str}
		}
	case 506:
		yyDollar = yyS[yypt-7 : yypt+1]
//line sql.y:2623
		{
			yyVAL.expr = &GroupConcatExpr{Distinct: yyDollar[3].str, Exprs: yyDollar[4].selectExprs, OrderBy: yyDollar[5].orderBy, Separator: yyDollar[6].str}
		}
	case 507:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sql.y:2627
		{
			yyVAL.expr = &CaseExpr{Expr: yyDollar[2].expr, Whens: yyDollar[3].whens, Else: yyDollar[4].expr}
		}
	case 508:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:2631
		{
			yyVAL.expr = &ValuesFuncExpr{Name: yyDollar[3].colName}
		}
	case 509:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2641
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("current_timestamp")}
		}
	case 510:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2645
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("utc_timestamp")}
		}
	case 511:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2649
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("utc_time")}
		}
	case 512:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2654
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("utc_date")}
		}
	case 513:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2659
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("localtime")}
		}
	case 514:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2664
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("localtimestamp")}
		}
	case 515:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2670
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("current_date")}
		}
	case 516:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2675
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("current_time")}
		}
	case 517:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2680
		{
			yyVAL.expr = &CurTimeFuncExpr{Name: NewColIdent("current_timestamp"), Fsp: yyDollar[2].expr}
		}
	case 518:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2684
		{
			yyVAL.expr = &CurTimeFuncExpr{Name: NewColIdent("utc_timestamp"), Fsp: yyDollar[2].expr}
		}
	case 519:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2688
		{
			yyVAL.expr = &CurTimeFuncExpr{Name: NewColIdent("utc_time"), Fsp: yyDollar[2].expr}
		}
	case 520:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2693
		{
			yyVAL.expr = &CurTimeFuncExpr{Name: NewColIdent("localtime"), Fsp: yyDollar[2].expr}
		}
	case 521:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2698
		{
			yyVAL.expr = &CurTimeFuncExpr{Name: NewColIdent("localtimestamp"), Fsp: yyDollar[2].expr}
		}
	case 522:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2703
		{
			yyVAL.expr = &CurTimeFuncExpr{Name: NewColIdent("current_time"), Fsp: yyDollar[2].expr}
		}
	case 523:
		yyDollar = yyS[yypt-8 : yypt+1]
//line sql.y:2707
		{
			yyVAL.expr = &TimestampFuncExpr{Name: string("timestampadd"), Unit: yyDollar[3].colIdent.String(), Expr1: yyDollar[5].expr, Expr2: yyDollar[7].expr}
		}
	case 524:
		yyDollar = yyS[yypt-8 : yypt+1]
//line sql.y:2711
		{
			yyVAL.expr = &TimestampFuncExpr{Name: string("timestampdiff"), Unit: yyDollar[3].colIdent.String(), Expr1: yyDollar[5].expr, Expr2: yyDollar[7].expr}
		}
	case 527:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2721
		{
			yyVAL.expr = yyDollar[2].expr
		}
	case 528:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:2731
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("if"), Exprs: yyDollar[3].selectExprs}
		}
	case 529:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:2735
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("database"), Exprs: yyDollar[3].selectExprs}
		}
	case 530:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:2739
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("mod"), Exprs: yyDollar[3].selectExprs}
		}
	case 531:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:2743
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("replace"), Exprs: yyDollar[3].selectExprs}
		}
	case 532:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:2747
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("substr"), Exprs: yyDollar[3].selectExprs}
		}
	case 533:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:2751
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("substr"), Exprs: yyDollar[3].selectExprs}
		}
	case 534:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:2757
		{
			yyVAL.str = ""
		}
	case 535:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2761
		{
			yyVAL.str = BooleanModeStr
		}
	case 536:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:2765
		{
			yyVAL.str = NaturalLanguageModeStr
		}
	case 537:
		yyDollar = yyS[yypt-7 : yypt+1]
//line sql.y:2769
		{
			yyVAL.str = NaturalLanguageModeWithQueryExpansionStr
		}
	case 538:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2773
		{
			yyVAL.str = QueryExpansionStr
		}
	case 539:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2779
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 540:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2783
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 541:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2789
		{
			yyVAL.convertType = &ConvertTypeSimple{Name: string(yyDollar[1].bytes)}
		}
	case 542:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2793
		{
			yyVAL.convertType = &ConvertTypeSimple{Name: string(yyDollar[1].bytes)}
		}
	case 543:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2797
		{
			yyVAL.convertType = &ConvertTypeList{Element: yyDollar[2].convertType}
		}
	case 544:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2801
		{
			yyVAL.convertType = &ConvertTypeObject{Fields: yyDollar[2].convertTypeObjectFields}
		}
	case 545:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:2806
		{
			yyVAL.convertTypeObjectFields = nil
		}
	case 546:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2810
		{
			yyVAL.convertTypeObjectFields = yyDollar[1].convertTypeObjectFields
		}
	case 547:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2816
		{
			yyVAL.convertTypeObjectFields = []*ConvertTypeObjectField{yyDollar[1].convertTypeObjectField}
		}
	case 548:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2820
		{
			yyVAL.convertTypeObjectFields = append([]*ConvertTypeObjectField{yyDollar[1].convertTypeObjectField}, yyDollar[3].convertTypeObjectFields...)
		}
	case 549:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2826
		{
			yyVAL.convertTypeObjectField = &ConvertTypeObjectField{Name: string(yyDollar[1].bytes), Type: yyDollar[3].convertType}
		}
	case 550:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2830
		{
			yyVAL.convertTypeObjectField = &ConvertTypeObjectField{Name: string(yyDollar[1].bytes), Type: yyDollar[3].convertType}
		}
	case 551:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:2835
		{
			yyVAL.expr = nil
		}
	case 552:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2839
		{
			yyVAL.expr = yyDollar[1].expr
		}
	case 553:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:2844
		{
			yyVAL.str = string("")
		}
	case 554:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2848
		{
			yyVAL.str = " separator '" + string(yyDollar[2].bytes) + "'"
		}
	case 555:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2854
		{
			yyVAL.whens = []*When{yyDollar[1].when}
		}
	case 556:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2858
		{
			yyVAL.whens = append(yyDollar[1].whens, yyDollar[2].when)
		}
	case 557:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:2864
		{
			yyVAL.when = &When{Cond: yyDollar[2].expr, Val: yyDollar[4].expr}
		}
	case 558:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:2869
		{
			yyVAL.expr = nil
		}
	case 559:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2873
		{
			yyVAL.expr = yyDollar[2].expr
		}
	case 560:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2879
		{
			yyVAL.colName = &ColName{Name: yyDollar[1].colIdent}
		}
	case 561:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2883
		{
			yyVAL.colName = &ColName{Qualifier: TableName{Name: yyDollar[1].tableIdent}, Name: yyDollar[3].colIdent}
		}
	case 562:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sql.y:2887
		{
			yyVAL.colName = &ColName{Qualifier: TableName{Qualifier: yyDollar[1].tableIdent, Name: yyDollar[3].tableIdent}, Name: yyDollar[5].colIdent}
		}
	case 563:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2893
		{
			yyVAL.expr = NewStrVal(yyDollar[1].bytes)
		}
	case 564:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2897
		{
			yyVAL.expr = NewHexVal(yyDollar[1].bytes)
		}
	case 565:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2901
		{
			yyVAL.expr = NewBitVal(yyDollar[1].bytes)
		}
	case 566:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2905
		{
			yyVAL.expr = NewIntVal(yyDollar[1].bytes)
		}
	case 567:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2909
		{
			yyVAL.expr = NewFloatVal(yyDollar[1].bytes)
		}
	case 568:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2913
		{
			yyVAL.expr = NewHexNum(yyDollar[1].bytes)
		}
	case 569:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2917
		{
			yyVAL.expr = NewValArg(yyDollar[1].bytes)
		}
	case 570:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2921
		{
			yyVAL.expr = &NullVal{}
		}
	case 571:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2927
		{
			// TODO(sougou): Deprecate this construct.
			if yyDollar[1].colIdent.Lowered() != "value" {
				yylex.Error("expecting value after next")
				return 1
			}
			yyVAL.expr = NewIntVal([]byte("1"))
		}
	case 572:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2936
		{
			yyVAL.expr = NewIntVal(yyDollar[1].bytes)
		}
	case 573:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2940
		{
			yyVAL.expr = NewValArg(yyDollar[1].bytes)
		}
	case 574:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:2945
		{
			yyVAL.exprs = nil
		}
	case 575:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2949
		{
			yyVAL.exprs = yyDollar[3].exprs
		}
	case 576:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:2954
		{
			yyVAL.expr = nil
		}
	case 577:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2958
		{
			yyVAL.expr = yyDollar[2].expr
		}
	case 578:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:2963
		{
			yyVAL.orderBy = nil
		}
	case 579:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2967
		{
			yyVAL.orderBy = yyDollar[3].orderBy
		}
	case 580:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2973
		{
			yyVAL.orderBy = OrderBy{yyDollar[1].order}
		}
	case 581:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2977
		{
			yyVAL.orderBy = append(yyDollar[1].orderBy, yyDollar[3].order)
		}
	case 582:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2983
		{
			yyVAL.order = &Order{Expr: yyDollar[1].expr, Direction: yyDollar[2].str}
		}
	case 583:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:2988
		{
			yyVAL.str = AscScr
		}
	case 584:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2992
		{
			yyVAL.str = AscScr
		}
	case 585:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2996
		{
			yyVAL.str = DescScr
		}
	case 586:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:3001
		{
			yyVAL.limit = nil
		}
	case 587:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:3005
		{
			yyVAL.limit = &Limit{Rowcount: yyDollar[2].expr}
		}
	case 588:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:3009
		{
			yyVAL.limit = &Limit{Offset: yyDollar[2].expr, Rowcount: yyDollar[4].expr}
		}
	case 589:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:3013
		{
			yyVAL.limit = &Limit{Offset: yyDollar[4].expr, Rowcount: yyDollar[2].expr}
		}
	case 590:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:3018
		{
			yyVAL.str = ""
		}
	case 591:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:3022
		{
			yyVAL.str = ForUpdateStr
		}
	case 592:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:3026
		{
			yyVAL.str = ShareModeStr
		}
	case 593:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:3031
		{
			yyVAL.triggers = nil
		}
	case 594:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:3035
		{
			yyVAL.triggers = yyDollar[2].triggers
		}
	case 595:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3041
		{
			yyVAL.triggers = []Trigger{yyDollar[1].trigger}
		}
	case 596:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:3045
		{
			yyVAL.triggers = append(yyDollar[1].triggers, yyDollar[3].trigger)
		}
	case 597:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:3051
		{
			yyVAL.trigger = &WatermarkTrigger{}
		}
	case 598:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:3055
		{
			yyVAL.trigger = &EndOfStreamTrigger{}
		}
	case 599:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:3059
		{
			yyVAL.trigger = &DelayTrigger{Delay: yyDollar[3].expr}
		}
	case 600:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:3063
		{
			yyVAL.trigger = &CountingTrigger{Count: yyDollar[2].expr}
		}
	case 601:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:3076
		{
			yyVAL.ins = &Insert{Rows: yyDollar[2].values}
		}
	case 602:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3080
		{
			yyVAL.ins = &Insert{Rows: yyDollar[1].selStmt}
		}
	case 603:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:3084
		{
			// Drop the redundant parenthesis.
			yyVAL.ins = &Insert{Rows: yyDollar[2].selStmt}
		}
	case 604:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sql.y:3089
		{
			yyVAL.ins = &Insert{Columns: yyDollar[2].columns, Rows: yyDollar[5].values}
		}
	case 605:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:3093
		{
			yyVAL.ins = &Insert{Columns: yyDollar[2].columns, Rows: yyDollar[4].selStmt}
		}
	case 606:
		yyDollar = yyS[yypt-6 : yypt+1]
//line sql.y:3097
		{
			// Drop the redundant parenthesis.
			yyVAL.ins = &Insert{Columns: yyDollar[2].columns, Rows: yyDollar[5].selStmt}
		}
	case 607:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3104
		{
			yyVAL.columns = Columns{yyDollar[1].colIdent}
		}
	case 608:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:3108
		{
			yyVAL.columns = Columns{yyDollar[3].colIdent}
		}
	case 609:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:3112
		{
			yyVAL.columns = append(yyVAL.columns, yyDollar[3].colIdent)
		}
	case 610:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sql.y:3116
		{
			yyVAL.columns = append(yyVAL.columns, yyDollar[5].colIdent)
		}
	case 611:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:3121
		{
			yyVAL.updateExprs = nil
		}
	case 612:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sql.y:3125
		{
			yyVAL.updateExprs = yyDollar[5].updateExprs
		}
	case 613:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3131
		{
			yyVAL.values = Values{yyDollar[1].valTuple}
		}
	case 614:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:3135
		{
			yyVAL.values = append(yyDollar[1].values, yyDollar[3].valTuple)
		}
	case 615:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3141
		{
			yyVAL.valTuple = yyDollar[1].valTuple
		}
	case 616:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:3145
		{
			yyVAL.valTuple = ValTuple{}
		}
	case 617:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:3151
		{
			yyVAL.valTuple = ValTuple(yyDollar[2].exprs)
		}
	case 618:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3157
		{
			if len(yyDollar[1].valTuple) == 1 {
				yyVAL.expr = &ParenExpr{yyDollar[1].valTuple[0]}
			} else {
				yyVAL.expr = yyDollar[1].valTuple
			}
		}
	case 619:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3167
		{
			yyVAL.updateExprs = UpdateExprs{yyDollar[1].updateExpr}
		}
	case 620:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:3171
		{
			yyVAL.updateExprs = append(yyDollar[1].updateExprs, yyDollar[3].updateExpr)
		}
	case 621:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:3177
		{
			yyVAL.updateExpr = &UpdateExpr{Name: yyDollar[1].colName, Expr: yyDollar[3].expr}
		}
	case 622:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3183
		{
			yyVAL.setExprs = SetExprs{yyDollar[1].setExpr}
		}
	case 623:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:3187
		{
			yyVAL.setExprs = append(yyDollar[1].setExprs, yyDollar[3].setExpr)
		}
	case 624:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:3193
		{
			yyVAL.setExpr = &SetExpr{Name: yyDollar[1].colIdent, Expr: NewStrVal([]byte("on"))}
		}
	case 625:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:3197
		{
			yyVAL.setExpr = &SetExpr{Name: yyDollar[1].colIdent, Expr: NewStrVal([]byte("off"))}
		}
	case 626:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:3201
		{
			yyVAL.setExpr = &SetExpr{Name: yyDollar[1].colIdent, Expr: yyDollar[3].expr}
		}
	case 627:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:3205
		{
			yyVAL.setExpr = &SetExpr{Name: NewColIdent(string(yyDollar[1].bytes)), Expr: yyDollar[2].expr}
		}
	case 629:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:3212
		{
			yyVAL.bytes = []byte("charset")
		}
	case 631:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3219
		{
			yyVAL.expr = NewStrVal([]byte(yyDollar[1].colIdent.String()))
		}
	case 632:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3223
		{
			yyVAL.expr = NewStrVal(yyDollar[1].bytes)
		}
	case 633:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3227
		{
			yyVAL.expr = &Default{}
		}
	case 636:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:3236
		{
			yyVAL.byt = 0
		}
	case 637:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:3238
		{
			yyVAL.byt = 1
		}
	case 638:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:3241
		{
			yyVAL.empty = struct{}{}
		}
	case 639:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:3243
		{
			yyVAL.empty = struct{}{}
		}
	case 640:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:3246
		{
			yyVAL.str = ""
		}
	case 641:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3248
		{
			yyVAL.str = IgnoreStr
		}
	case 642:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3252
		{
			yyVAL.empty = struct{}{}
		}
	case 643:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3254
		{
			yyVAL.empty = struct{}{}
		}
	case 644:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3256
		{
			yyVAL.empty = struct{}{}
		}
	case 645:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3258
		{
			yyVAL.empty = struct{}{}
		}
	case 646:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3260
		{
			yyVAL.empty = struct{}{}
		}
	case 647:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3262
		{
			yyVAL.empty = struct{}{}
		}
	case 648:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3264
		{
			yyVAL.empty = struct{}{}
		}
	case 649:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3266
		{
			yyVAL.empty = struct{}{}
		}
	case 650:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3268
		{
			yyVAL.empty = struct{}{}
		}
	case 651:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3270
		{
			yyVAL.empty = struct{}{}
		}
	case 652:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:3273
		{
			yyVAL.empty = struct{}{}
		}
	case 653:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3275
		{
			yyVAL.empty = struct{}{}
		}
	case 654:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3277
		{
			yyVAL.empty = struct{}{}
		}
	case 655:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3281
		{
			yyVAL.empty = struct{}{}
		}
	case 656:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3283
		{
			yyVAL.empty = struct{}{}
		}
	case 657:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:3286
		{
			yyVAL.empty = struct{}{}
		}
	case 658:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3288
		{
			yyVAL.empty = struct{}{}
		}
	case 659:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3290
		{
			yyVAL.empty = struct{}{}
		}
	case 660:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:3293
		{
			yyVAL.colIdent = ColIdent{}
		}
	case 661:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:3295
		{
			yyVAL.colIdent = yyDollar[2].colIdent
		}
	case 662:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3299
		{
			yyVAL.colIdent = NewColIdent(string(yyDollar[1].bytes))
		}
	case 663:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3303
		{
			yyVAL.colIdent = NewColIdent(string(yyDollar[1].bytes))
		}
	case 665:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3310
		{
			yyVAL.colIdent = NewColIdent(string(yyDollar[1].bytes))
		}
	case 666:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3316
		{
			yyVAL.tableIdent = NewTableIdent(string(yyDollar[1].bytes))
		}
	case 667:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3320
		{
			yyVAL.tableIdent = NewTableIdent(string(yyDollar[1].bytes))
		}
	case 669:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3327
		{
			yyVAL.tableIdent = NewTableIdent(string(yyDollar[1].bytes))
		}
	case 885:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3568
		{
			if incNesting(yylex) {
				yylex.Error("max nesting level reached")
				return 1
			}
		}
	case 886:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3577
		{
			decNesting(yylex)
		}
	case 887:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:3582
		{
			skipToEnd(yylex)
		}
	case 888:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:3587
		{
			skipToEnd(yylex)
		}
	case 889:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3591
		{
			skipToEnd(yylex)
		}
	case 890:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3595
		{
			skipToEnd(yylex)
		}
	}
	goto yystack /* stack new state and value */
}
